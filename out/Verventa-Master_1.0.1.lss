
out/Verventa-Master_1.0.1.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <memcpy>:
 8000188:	4684      	mov	ip, r0
 800018a:	ea41 0300 	orr.w	r3, r1, r0
 800018e:	f013 0303 	ands.w	r3, r3, #3
 8000192:	d16d      	bne.n	8000270 <memcpy+0xe8>
 8000194:	3a40      	subs	r2, #64	; 0x40
 8000196:	d341      	bcc.n	800021c <memcpy+0x94>
 8000198:	f851 3b04 	ldr.w	r3, [r1], #4
 800019c:	f840 3b04 	str.w	r3, [r0], #4
 80001a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001a4:	f840 3b04 	str.w	r3, [r0], #4
 80001a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ac:	f840 3b04 	str.w	r3, [r0], #4
 80001b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001b4:	f840 3b04 	str.w	r3, [r0], #4
 80001b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001bc:	f840 3b04 	str.w	r3, [r0], #4
 80001c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001c4:	f840 3b04 	str.w	r3, [r0], #4
 80001c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001cc:	f840 3b04 	str.w	r3, [r0], #4
 80001d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001d4:	f840 3b04 	str.w	r3, [r0], #4
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	3a40      	subs	r2, #64	; 0x40
 800021a:	d2bd      	bcs.n	8000198 <memcpy+0x10>
 800021c:	3230      	adds	r2, #48	; 0x30
 800021e:	d311      	bcc.n	8000244 <memcpy+0xbc>
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	3a10      	subs	r2, #16
 8000242:	d2ed      	bcs.n	8000220 <memcpy+0x98>
 8000244:	320c      	adds	r2, #12
 8000246:	d305      	bcc.n	8000254 <memcpy+0xcc>
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	3a04      	subs	r2, #4
 8000252:	d2f9      	bcs.n	8000248 <memcpy+0xc0>
 8000254:	3204      	adds	r2, #4
 8000256:	d008      	beq.n	800026a <memcpy+0xe2>
 8000258:	07d2      	lsls	r2, r2, #31
 800025a:	bf1c      	itt	ne
 800025c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000260:	f800 3b01 	strbne.w	r3, [r0], #1
 8000264:	d301      	bcc.n	800026a <memcpy+0xe2>
 8000266:	880b      	ldrh	r3, [r1, #0]
 8000268:	8003      	strh	r3, [r0, #0]
 800026a:	4660      	mov	r0, ip
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2a08      	cmp	r2, #8
 8000272:	d313      	bcc.n	800029c <memcpy+0x114>
 8000274:	078b      	lsls	r3, r1, #30
 8000276:	d08d      	beq.n	8000194 <memcpy+0xc>
 8000278:	f010 0303 	ands.w	r3, r0, #3
 800027c:	d08a      	beq.n	8000194 <memcpy+0xc>
 800027e:	f1c3 0304 	rsb	r3, r3, #4
 8000282:	1ad2      	subs	r2, r2, r3
 8000284:	07db      	lsls	r3, r3, #31
 8000286:	bf1c      	itt	ne
 8000288:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800028c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000290:	d380      	bcc.n	8000194 <memcpy+0xc>
 8000292:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000296:	f820 3b02 	strh.w	r3, [r0], #2
 800029a:	e77b      	b.n	8000194 <memcpy+0xc>
 800029c:	3a04      	subs	r2, #4
 800029e:	d3d9      	bcc.n	8000254 <memcpy+0xcc>
 80002a0:	3a01      	subs	r2, #1
 80002a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a6:	f800 3b01 	strb.w	r3, [r0], #1
 80002aa:	d2f9      	bcs.n	80002a0 <memcpy+0x118>
 80002ac:	780b      	ldrb	r3, [r1, #0]
 80002ae:	7003      	strb	r3, [r0, #0]
 80002b0:	784b      	ldrb	r3, [r1, #1]
 80002b2:	7043      	strb	r3, [r0, #1]
 80002b4:	788b      	ldrb	r3, [r1, #2]
 80002b6:	7083      	strb	r3, [r0, #2]
 80002b8:	4660      	mov	r0, ip
 80002ba:	4770      	bx	lr

080002bc <__aeabi_drsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	e002      	b.n	80002c8 <__adddf3>
 80002c2:	bf00      	nop

080002c4 <__aeabi_dsub>:
 80002c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c8 <__adddf3>:
 80002c8:	b530      	push	{r4, r5, lr}
 80002ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d2:	ea94 0f05 	teq	r4, r5
 80002d6:	bf08      	it	eq
 80002d8:	ea90 0f02 	teqeq	r0, r2
 80002dc:	bf1f      	itttt	ne
 80002de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ee:	f000 80e2 	beq.w	80004b6 <__adddf3+0x1ee>
 80002f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fa:	bfb8      	it	lt
 80002fc:	426d      	neglt	r5, r5
 80002fe:	dd0c      	ble.n	800031a <__adddf3+0x52>
 8000300:	442c      	add	r4, r5
 8000302:	ea80 0202 	eor.w	r2, r0, r2
 8000306:	ea81 0303 	eor.w	r3, r1, r3
 800030a:	ea82 0000 	eor.w	r0, r2, r0
 800030e:	ea83 0101 	eor.w	r1, r3, r1
 8000312:	ea80 0202 	eor.w	r2, r0, r2
 8000316:	ea81 0303 	eor.w	r3, r1, r3
 800031a:	2d36      	cmp	r5, #54	; 0x36
 800031c:	bf88      	it	hi
 800031e:	bd30      	pophi	{r4, r5, pc}
 8000320:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000324:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000328:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800032c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x70>
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800033c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000340:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x84>
 8000346:	4252      	negs	r2, r2
 8000348:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034c:	ea94 0f05 	teq	r4, r5
 8000350:	f000 80a7 	beq.w	80004a2 <__adddf3+0x1da>
 8000354:	f1a4 0401 	sub.w	r4, r4, #1
 8000358:	f1d5 0e20 	rsbs	lr, r5, #32
 800035c:	db0d      	blt.n	800037a <__adddf3+0xb2>
 800035e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000362:	fa22 f205 	lsr.w	r2, r2, r5
 8000366:	1880      	adds	r0, r0, r2
 8000368:	f141 0100 	adc.w	r1, r1, #0
 800036c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000370:	1880      	adds	r0, r0, r2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	4159      	adcs	r1, r3
 8000378:	e00e      	b.n	8000398 <__adddf3+0xd0>
 800037a:	f1a5 0520 	sub.w	r5, r5, #32
 800037e:	f10e 0e20 	add.w	lr, lr, #32
 8000382:	2a01      	cmp	r2, #1
 8000384:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000388:	bf28      	it	cs
 800038a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	18c0      	adds	r0, r0, r3
 8000394:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	d507      	bpl.n	80003ae <__adddf3+0xe6>
 800039e:	f04f 0e00 	mov.w	lr, #0
 80003a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b2:	d31b      	bcc.n	80003ec <__adddf3+0x124>
 80003b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b8:	d30c      	bcc.n	80003d4 <__adddf3+0x10c>
 80003ba:	0849      	lsrs	r1, r1, #1
 80003bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c4:	f104 0401 	add.w	r4, r4, #1
 80003c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d0:	f080 809a 	bcs.w	8000508 <__adddf3+0x240>
 80003d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d8:	bf08      	it	eq
 80003da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003de:	f150 0000 	adcs.w	r0, r0, #0
 80003e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e6:	ea41 0105 	orr.w	r1, r1, r5
 80003ea:	bd30      	pop	{r4, r5, pc}
 80003ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f0:	4140      	adcs	r0, r0
 80003f2:	eb41 0101 	adc.w	r1, r1, r1
 80003f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fa:	f1a4 0401 	sub.w	r4, r4, #1
 80003fe:	d1e9      	bne.n	80003d4 <__adddf3+0x10c>
 8000400:	f091 0f00 	teq	r1, #0
 8000404:	bf04      	itt	eq
 8000406:	4601      	moveq	r1, r0
 8000408:	2000      	moveq	r0, #0
 800040a:	fab1 f381 	clz	r3, r1
 800040e:	bf08      	it	eq
 8000410:	3320      	addeq	r3, #32
 8000412:	f1a3 030b 	sub.w	r3, r3, #11
 8000416:	f1b3 0220 	subs.w	r2, r3, #32
 800041a:	da0c      	bge.n	8000436 <__adddf3+0x16e>
 800041c:	320c      	adds	r2, #12
 800041e:	dd08      	ble.n	8000432 <__adddf3+0x16a>
 8000420:	f102 0c14 	add.w	ip, r2, #20
 8000424:	f1c2 020c 	rsb	r2, r2, #12
 8000428:	fa01 f00c 	lsl.w	r0, r1, ip
 800042c:	fa21 f102 	lsr.w	r1, r1, r2
 8000430:	e00c      	b.n	800044c <__adddf3+0x184>
 8000432:	f102 0214 	add.w	r2, r2, #20
 8000436:	bfd8      	it	le
 8000438:	f1c2 0c20 	rsble	ip, r2, #32
 800043c:	fa01 f102 	lsl.w	r1, r1, r2
 8000440:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000444:	bfdc      	itt	le
 8000446:	ea41 010c 	orrle.w	r1, r1, ip
 800044a:	4090      	lslle	r0, r2
 800044c:	1ae4      	subs	r4, r4, r3
 800044e:	bfa2      	ittt	ge
 8000450:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000454:	4329      	orrge	r1, r5
 8000456:	bd30      	popge	{r4, r5, pc}
 8000458:	ea6f 0404 	mvn.w	r4, r4
 800045c:	3c1f      	subs	r4, #31
 800045e:	da1c      	bge.n	800049a <__adddf3+0x1d2>
 8000460:	340c      	adds	r4, #12
 8000462:	dc0e      	bgt.n	8000482 <__adddf3+0x1ba>
 8000464:	f104 0414 	add.w	r4, r4, #20
 8000468:	f1c4 0220 	rsb	r2, r4, #32
 800046c:	fa20 f004 	lsr.w	r0, r0, r4
 8000470:	fa01 f302 	lsl.w	r3, r1, r2
 8000474:	ea40 0003 	orr.w	r0, r0, r3
 8000478:	fa21 f304 	lsr.w	r3, r1, r4
 800047c:	ea45 0103 	orr.w	r1, r5, r3
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f1c4 040c 	rsb	r4, r4, #12
 8000486:	f1c4 0220 	rsb	r2, r4, #32
 800048a:	fa20 f002 	lsr.w	r0, r0, r2
 800048e:	fa01 f304 	lsl.w	r3, r1, r4
 8000492:	ea40 0003 	orr.w	r0, r0, r3
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	fa21 f004 	lsr.w	r0, r1, r4
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f094 0f00 	teq	r4, #0
 80004a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004aa:	bf06      	itte	eq
 80004ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b0:	3401      	addeq	r4, #1
 80004b2:	3d01      	subne	r5, #1
 80004b4:	e74e      	b.n	8000354 <__adddf3+0x8c>
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf18      	it	ne
 80004bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c0:	d029      	beq.n	8000516 <__adddf3+0x24e>
 80004c2:	ea94 0f05 	teq	r4, r5
 80004c6:	bf08      	it	eq
 80004c8:	ea90 0f02 	teqeq	r0, r2
 80004cc:	d005      	beq.n	80004da <__adddf3+0x212>
 80004ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d2:	bf04      	itt	eq
 80004d4:	4619      	moveq	r1, r3
 80004d6:	4610      	moveq	r0, r2
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea91 0f03 	teq	r1, r3
 80004de:	bf1e      	ittt	ne
 80004e0:	2100      	movne	r1, #0
 80004e2:	2000      	movne	r0, #0
 80004e4:	bd30      	popne	{r4, r5, pc}
 80004e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ea:	d105      	bne.n	80004f8 <__adddf3+0x230>
 80004ec:	0040      	lsls	r0, r0, #1
 80004ee:	4149      	adcs	r1, r1
 80004f0:	bf28      	it	cs
 80004f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004fc:	bf3c      	itt	cc
 80004fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000502:	bd30      	popcc	{r4, r5, pc}
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800050c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051a:	bf1a      	itte	ne
 800051c:	4619      	movne	r1, r3
 800051e:	4610      	movne	r0, r2
 8000520:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000524:	bf1c      	itt	ne
 8000526:	460b      	movne	r3, r1
 8000528:	4602      	movne	r2, r0
 800052a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052e:	bf06      	itte	eq
 8000530:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000534:	ea91 0f03 	teqeq	r1, r3
 8000538:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	bf00      	nop

08000540 <__aeabi_ui2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000554:	f04f 0500 	mov.w	r5, #0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e750      	b.n	8000400 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_i2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000574:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000578:	bf48      	it	mi
 800057a:	4240      	negmi	r0, r0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e73e      	b.n	8000400 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_f2d>:
 8000584:	0042      	lsls	r2, r0, #1
 8000586:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058a:	ea4f 0131 	mov.w	r1, r1, rrx
 800058e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000592:	bf1f      	itttt	ne
 8000594:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000598:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800059c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a0:	4770      	bxne	lr
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	bf14      	ite	ne
 80005a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e720      	b.n	8000400 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aedc 	beq.w	80003ae <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6c1      	b.n	80003ae <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b94b      	cbnz	r3, 8000bc6 <__aeabi_uldivmod+0x16>
 8000bb2:	b942      	cbnz	r2, 8000bc6 <__aeabi_uldivmod+0x16>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	d002      	beq.n	8000bc2 <__aeabi_uldivmod+0x12>
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	f000 b83b 	b.w	8000c3c <__aeabi_idiv0>
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	46ec      	mov	ip, sp
 8000bca:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000bce:	f000 f81d 	bl	8000c0c <__gnu_uldivmod_helper>
 8000bd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bc0c      	pop	{r2, r3}
 8000bda:	4770      	bx	lr

08000bdc <__gnu_ldivmod_helper>:
 8000bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be0:	9c06      	ldr	r4, [sp, #24]
 8000be2:	4615      	mov	r5, r2
 8000be4:	4606      	mov	r6, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	4698      	mov	r8, r3
 8000bea:	f000 f829 	bl	8000c40 <__divdi3>
 8000bee:	fb05 f301 	mul.w	r3, r5, r1
 8000bf2:	fb00 3808 	mla	r8, r0, r8, r3
 8000bf6:	fba5 2300 	umull	r2, r3, r5, r0
 8000bfa:	1ab2      	subs	r2, r6, r2
 8000bfc:	4443      	add	r3, r8
 8000bfe:	eb67 0303 	sbc.w	r3, r7, r3
 8000c02:	e9c4 2300 	strd	r2, r3, [r4]
 8000c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c0a:	bf00      	nop

08000c0c <__gnu_uldivmod_helper>:
 8000c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c10:	9c06      	ldr	r4, [sp, #24]
 8000c12:	4690      	mov	r8, r2
 8000c14:	4606      	mov	r6, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	461d      	mov	r5, r3
 8000c1a:	f000 f95f 	bl	8000edc <__udivdi3>
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	fba0 2308 	umull	r2, r3, r0, r8
 8000c26:	fb08 5501 	mla	r5, r8, r1, r5
 8000c2a:	1ab2      	subs	r2, r6, r2
 8000c2c:	442b      	add	r3, r5
 8000c2e:	eb67 0303 	sbc.w	r3, r7, r3
 8000c32:	e9c4 2300 	strd	r2, r3, [r4]
 8000c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_idiv0>:
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__divdi3>:
 8000c40:	2900      	cmp	r1, #0
 8000c42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c46:	f2c0 80a6 	blt.w	8000d96 <__divdi3+0x156>
 8000c4a:	2600      	movs	r6, #0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f2c0 809c 	blt.w	8000d8a <__divdi3+0x14a>
 8000c52:	4688      	mov	r8, r1
 8000c54:	4694      	mov	ip, r2
 8000c56:	469e      	mov	lr, r3
 8000c58:	4615      	mov	r5, r2
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460f      	mov	r7, r1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d13d      	bne.n	8000cde <__divdi3+0x9e>
 8000c62:	428a      	cmp	r2, r1
 8000c64:	d959      	bls.n	8000d1a <__divdi3+0xda>
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	b13b      	cbz	r3, 8000c7c <__divdi3+0x3c>
 8000c6c:	f1c3 0220 	rsb	r2, r3, #32
 8000c70:	409f      	lsls	r7, r3
 8000c72:	fa20 f202 	lsr.w	r2, r0, r2
 8000c76:	409d      	lsls	r5, r3
 8000c78:	4317      	orrs	r7, r2
 8000c7a:	409c      	lsls	r4, r3
 8000c7c:	0c29      	lsrs	r1, r5, #16
 8000c7e:	0c22      	lsrs	r2, r4, #16
 8000c80:	fbb7 fef1 	udiv	lr, r7, r1
 8000c84:	b2a8      	uxth	r0, r5
 8000c86:	fb01 771e 	mls	r7, r1, lr, r7
 8000c8a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000c8e:	fb00 f30e 	mul.w	r3, r0, lr
 8000c92:	42bb      	cmp	r3, r7
 8000c94:	d90a      	bls.n	8000cac <__divdi3+0x6c>
 8000c96:	197f      	adds	r7, r7, r5
 8000c98:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000c9c:	f080 8105 	bcs.w	8000eaa <__divdi3+0x26a>
 8000ca0:	42bb      	cmp	r3, r7
 8000ca2:	f240 8102 	bls.w	8000eaa <__divdi3+0x26a>
 8000ca6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000caa:	442f      	add	r7, r5
 8000cac:	1aff      	subs	r7, r7, r3
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb7 f3f1 	udiv	r3, r7, r1
 8000cb4:	fb01 7713 	mls	r7, r1, r3, r7
 8000cb8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000cbc:	fb00 f003 	mul.w	r0, r0, r3
 8000cc0:	42b8      	cmp	r0, r7
 8000cc2:	d908      	bls.n	8000cd6 <__divdi3+0x96>
 8000cc4:	197f      	adds	r7, r7, r5
 8000cc6:	f103 32ff 	add.w	r2, r3, #4294967295
 8000cca:	f080 80f0 	bcs.w	8000eae <__divdi3+0x26e>
 8000cce:	42b8      	cmp	r0, r7
 8000cd0:	f240 80ed 	bls.w	8000eae <__divdi3+0x26e>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000cda:	2200      	movs	r2, #0
 8000cdc:	e003      	b.n	8000ce6 <__divdi3+0xa6>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d90f      	bls.n	8000d02 <__divdi3+0xc2>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	1c34      	adds	r4, r6, #0
 8000ce8:	bf18      	it	ne
 8000cea:	2401      	movne	r4, #1
 8000cec:	4260      	negs	r0, r4
 8000cee:	f04f 0500 	mov.w	r5, #0
 8000cf2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000cf6:	4058      	eors	r0, r3
 8000cf8:	4051      	eors	r1, r2
 8000cfa:	1900      	adds	r0, r0, r4
 8000cfc:	4169      	adcs	r1, r5
 8000cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d02:	fab3 f283 	clz	r2, r3
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8086 	bne.w	8000e18 <__divdi3+0x1d8>
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d302      	bcc.n	8000d16 <__divdi3+0xd6>
 8000d10:	4584      	cmp	ip, r0
 8000d12:	f200 80db 	bhi.w	8000ecc <__divdi3+0x28c>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e7e5      	b.n	8000ce6 <__divdi3+0xa6>
 8000d1a:	b912      	cbnz	r2, 8000d22 <__divdi3+0xe2>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	fbb3 f5f2 	udiv	r5, r3, r2
 8000d22:	fab5 f085 	clz	r0, r5
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d13b      	bne.n	8000da2 <__divdi3+0x162>
 8000d2a:	1b78      	subs	r0, r7, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	2201      	movs	r2, #1
 8000d36:	fbb0 f8fe 	udiv	r8, r0, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 0718 	mls	r7, lr, r8, r0
 8000d40:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000d44:	fb0c f308 	mul.w	r3, ip, r8
 8000d48:	42bb      	cmp	r3, r7
 8000d4a:	d907      	bls.n	8000d5c <__divdi3+0x11c>
 8000d4c:	197f      	adds	r7, r7, r5
 8000d4e:	f108 31ff 	add.w	r1, r8, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__divdi3+0x11a>
 8000d54:	42bb      	cmp	r3, r7
 8000d56:	f200 80bd 	bhi.w	8000ed4 <__divdi3+0x294>
 8000d5a:	4688      	mov	r8, r1
 8000d5c:	1aff      	subs	r7, r7, r3
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb7 f3fe 	udiv	r3, r7, lr
 8000d64:	fb0e 7713 	mls	r7, lr, r3, r7
 8000d68:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000d6c:	fb0c fc03 	mul.w	ip, ip, r3
 8000d70:	45bc      	cmp	ip, r7
 8000d72:	d907      	bls.n	8000d84 <__divdi3+0x144>
 8000d74:	197f      	adds	r7, r7, r5
 8000d76:	f103 31ff 	add.w	r1, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__divdi3+0x142>
 8000d7c:	45bc      	cmp	ip, r7
 8000d7e:	f200 80a7 	bhi.w	8000ed0 <__divdi3+0x290>
 8000d82:	460b      	mov	r3, r1
 8000d84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d88:	e7ad      	b.n	8000ce6 <__divdi3+0xa6>
 8000d8a:	4252      	negs	r2, r2
 8000d8c:	ea6f 0606 	mvn.w	r6, r6
 8000d90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d94:	e75d      	b.n	8000c52 <__divdi3+0x12>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	f04f 36ff 	mov.w	r6, #4294967295
 8000da0:	e754      	b.n	8000c4c <__divdi3+0xc>
 8000da2:	f1c0 0220 	rsb	r2, r0, #32
 8000da6:	fa24 f102 	lsr.w	r1, r4, r2
 8000daa:	fa07 f300 	lsl.w	r3, r7, r0
 8000dae:	4085      	lsls	r5, r0
 8000db0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db4:	40d7      	lsrs	r7, r2
 8000db6:	4319      	orrs	r1, r3
 8000db8:	fbb7 f2fe 	udiv	r2, r7, lr
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	fb0e 7712 	mls	r7, lr, r2, r7
 8000dc2:	fa1f fc85 	uxth.w	ip, r5
 8000dc6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000dca:	fb0c f702 	mul.w	r7, ip, r2
 8000dce:	429f      	cmp	r7, r3
 8000dd0:	fa04 f400 	lsl.w	r4, r4, r0
 8000dd4:	d907      	bls.n	8000de6 <__divdi3+0x1a6>
 8000dd6:	195b      	adds	r3, r3, r5
 8000dd8:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ddc:	d274      	bcs.n	8000ec8 <__divdi3+0x288>
 8000dde:	429f      	cmp	r7, r3
 8000de0:	d972      	bls.n	8000ec8 <__divdi3+0x288>
 8000de2:	3a02      	subs	r2, #2
 8000de4:	442b      	add	r3, r5
 8000de6:	1bdf      	subs	r7, r3, r7
 8000de8:	b289      	uxth	r1, r1
 8000dea:	fbb7 f8fe 	udiv	r8, r7, lr
 8000dee:	fb0e 7318 	mls	r3, lr, r8, r7
 8000df2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000df6:	fb0c f708 	mul.w	r7, ip, r8
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__divdi3+0x1d0>
 8000dfe:	195b      	adds	r3, r3, r5
 8000e00:	f108 31ff 	add.w	r1, r8, #4294967295
 8000e04:	d25c      	bcs.n	8000ec0 <__divdi3+0x280>
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d95a      	bls.n	8000ec0 <__divdi3+0x280>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	442b      	add	r3, r5
 8000e10:	1bd8      	subs	r0, r3, r7
 8000e12:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000e16:	e78e      	b.n	8000d36 <__divdi3+0xf6>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa2c f103 	lsr.w	r1, ip, r3
 8000e20:	fa0e fe02 	lsl.w	lr, lr, r2
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e2c:	fa08 f002 	lsl.w	r0, r8, r2
 8000e30:	fa28 f103 	lsr.w	r1, r8, r3
 8000e34:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000e38:	4338      	orrs	r0, r7
 8000e3a:	fbb1 f8f5 	udiv	r8, r1, r5
 8000e3e:	0c03      	lsrs	r3, r0, #16
 8000e40:	fb05 1118 	mls	r1, r5, r8, r1
 8000e44:	fa1f f78e 	uxth.w	r7, lr
 8000e48:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4c:	fb07 f308 	mul.w	r3, r7, r8
 8000e50:	428b      	cmp	r3, r1
 8000e52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e56:	d909      	bls.n	8000e6c <__divdi3+0x22c>
 8000e58:	eb11 010e 	adds.w	r1, r1, lr
 8000e5c:	f108 39ff 	add.w	r9, r8, #4294967295
 8000e60:	d230      	bcs.n	8000ec4 <__divdi3+0x284>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d92e      	bls.n	8000ec4 <__divdi3+0x284>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4471      	add	r1, lr
 8000e6c:	1ac9      	subs	r1, r1, r3
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	fbb1 f3f5 	udiv	r3, r1, r5
 8000e74:	fb05 1113 	mls	r1, r5, r3, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb07 f703 	mul.w	r7, r7, r3
 8000e80:	428f      	cmp	r7, r1
 8000e82:	d908      	bls.n	8000e96 <__divdi3+0x256>
 8000e84:	eb11 010e 	adds.w	r1, r1, lr
 8000e88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__divdi3+0x27c>
 8000e8e:	428f      	cmp	r7, r1
 8000e90:	d914      	bls.n	8000ebc <__divdi3+0x27c>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	4471      	add	r1, lr
 8000e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e9a:	1bc9      	subs	r1, r1, r7
 8000e9c:	fba3 890c 	umull	r8, r9, r3, ip
 8000ea0:	4549      	cmp	r1, r9
 8000ea2:	d309      	bcc.n	8000eb8 <__divdi3+0x278>
 8000ea4:	d005      	beq.n	8000eb2 <__divdi3+0x272>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	e71d      	b.n	8000ce6 <__divdi3+0xa6>
 8000eaa:	4696      	mov	lr, r2
 8000eac:	e6fe      	b.n	8000cac <__divdi3+0x6c>
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e711      	b.n	8000cd6 <__divdi3+0x96>
 8000eb2:	4094      	lsls	r4, r2
 8000eb4:	4544      	cmp	r4, r8
 8000eb6:	d2f6      	bcs.n	8000ea6 <__divdi3+0x266>
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7f4      	b.n	8000ea6 <__divdi3+0x266>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	e7ea      	b.n	8000e96 <__divdi3+0x256>
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	e7a5      	b.n	8000e10 <__divdi3+0x1d0>
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	e7d1      	b.n	8000e6c <__divdi3+0x22c>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	e78c      	b.n	8000de6 <__divdi3+0x1a6>
 8000ecc:	4613      	mov	r3, r2
 8000ece:	e70a      	b.n	8000ce6 <__divdi3+0xa6>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	e757      	b.n	8000d84 <__divdi3+0x144>
 8000ed4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed8:	442f      	add	r7, r5
 8000eda:	e73f      	b.n	8000d5c <__divdi3+0x11c>

08000edc <__udivdi3>:
 8000edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d144      	bne.n	8000f6e <__udivdi3+0x92>
 8000ee4:	428a      	cmp	r2, r1
 8000ee6:	4615      	mov	r5, r2
 8000ee8:	4604      	mov	r4, r0
 8000eea:	d94f      	bls.n	8000f8c <__udivdi3+0xb0>
 8000eec:	fab2 f782 	clz	r7, r2
 8000ef0:	460e      	mov	r6, r1
 8000ef2:	b14f      	cbz	r7, 8000f08 <__udivdi3+0x2c>
 8000ef4:	f1c7 0320 	rsb	r3, r7, #32
 8000ef8:	40b9      	lsls	r1, r7
 8000efa:	fa20 f603 	lsr.w	r6, r0, r3
 8000efe:	fa02 f507 	lsl.w	r5, r2, r7
 8000f02:	430e      	orrs	r6, r1
 8000f04:	fa00 f407 	lsl.w	r4, r0, r7
 8000f08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0c:	0c23      	lsrs	r3, r4, #16
 8000f0e:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f12:	b2af      	uxth	r7, r5
 8000f14:	fb0e 6110 	mls	r1, lr, r0, r6
 8000f18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1c:	fb07 f100 	mul.w	r1, r7, r0
 8000f20:	4299      	cmp	r1, r3
 8000f22:	d909      	bls.n	8000f38 <__udivdi3+0x5c>
 8000f24:	195b      	adds	r3, r3, r5
 8000f26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f2a:	f080 80ec 	bcs.w	8001106 <__udivdi3+0x22a>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 80e9 	bls.w	8001106 <__udivdi3+0x22a>
 8000f34:	3802      	subs	r0, #2
 8000f36:	442b      	add	r3, r5
 8000f38:	1a5a      	subs	r2, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f3fe 	udiv	r3, r2, lr
 8000f40:	fb0e 2213 	mls	r2, lr, r3, r2
 8000f44:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8000f48:	fb07 f703 	mul.w	r7, r7, r3
 8000f4c:	4297      	cmp	r7, r2
 8000f4e:	d908      	bls.n	8000f62 <__udivdi3+0x86>
 8000f50:	1952      	adds	r2, r2, r5
 8000f52:	f103 31ff 	add.w	r1, r3, #4294967295
 8000f56:	f080 80d8 	bcs.w	800110a <__udivdi3+0x22e>
 8000f5a:	4297      	cmp	r7, r2
 8000f5c:	f240 80d5 	bls.w	800110a <__udivdi3+0x22e>
 8000f60:	3b02      	subs	r3, #2
 8000f62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d847      	bhi.n	8001002 <__udivdi3+0x126>
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d148      	bne.n	800100c <__udivdi3+0x130>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivdi3+0xa8>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80cd 	bhi.w	800111e <__udivdi3+0x242>
 8000f84:	2001      	movs	r0, #1
 8000f86:	4631      	mov	r1, r6
 8000f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f8c:	b912      	cbnz	r2, 8000f94 <__udivdi3+0xb8>
 8000f8e:	2501      	movs	r5, #1
 8000f90:	fbb5 f5f2 	udiv	r5, r5, r2
 8000f94:	fab5 f885 	clz	r8, r5
 8000f98:	f1b8 0f00 	cmp.w	r8, #0
 8000f9c:	d177      	bne.n	800108e <__udivdi3+0x1b2>
 8000f9e:	1b4a      	subs	r2, r1, r5
 8000fa0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa4:	b2af      	uxth	r7, r5
 8000fa6:	2601      	movs	r6, #1
 8000fa8:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fac:	0c23      	lsrs	r3, r4, #16
 8000fae:	fb0e 2110 	mls	r1, lr, r0, r2
 8000fb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fb6:	fb07 f300 	mul.w	r3, r7, r0
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d907      	bls.n	8000fce <__udivdi3+0xf2>
 8000fbe:	1949      	adds	r1, r1, r5
 8000fc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fc4:	d202      	bcs.n	8000fcc <__udivdi3+0xf0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	f200 80ba 	bhi.w	8001140 <__udivdi3+0x264>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	b2a4      	uxth	r4, r4
 8000fd2:	fbb1 f3fe 	udiv	r3, r1, lr
 8000fd6:	fb0e 1113 	mls	r1, lr, r3, r1
 8000fda:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fde:	fb07 f703 	mul.w	r7, r7, r3
 8000fe2:	42a7      	cmp	r7, r4
 8000fe4:	d908      	bls.n	8000ff8 <__udivdi3+0x11c>
 8000fe6:	1964      	adds	r4, r4, r5
 8000fe8:	f103 32ff 	add.w	r2, r3, #4294967295
 8000fec:	f080 808f 	bcs.w	800110e <__udivdi3+0x232>
 8000ff0:	42a7      	cmp	r7, r4
 8000ff2:	f240 808c 	bls.w	800110e <__udivdi3+0x232>
 8000ff6:	3b02      	subs	r3, #2
 8000ff8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001002:	2600      	movs	r6, #0
 8001004:	4630      	mov	r0, r6
 8001006:	4631      	mov	r1, r6
 8001008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800100c:	f1c6 0420 	rsb	r4, r6, #32
 8001010:	fa22 f504 	lsr.w	r5, r2, r4
 8001014:	40b3      	lsls	r3, r6
 8001016:	432b      	orrs	r3, r5
 8001018:	fa20 fc04 	lsr.w	ip, r0, r4
 800101c:	fa01 f706 	lsl.w	r7, r1, r6
 8001020:	fa21 f504 	lsr.w	r5, r1, r4
 8001024:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001028:	ea4c 0707 	orr.w	r7, ip, r7
 800102c:	fbb5 f8fe 	udiv	r8, r5, lr
 8001030:	0c39      	lsrs	r1, r7, #16
 8001032:	fb0e 5518 	mls	r5, lr, r8, r5
 8001036:	fa1f fc83 	uxth.w	ip, r3
 800103a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800103e:	fb0c f108 	mul.w	r1, ip, r8
 8001042:	42a9      	cmp	r1, r5
 8001044:	fa02 f206 	lsl.w	r2, r2, r6
 8001048:	d904      	bls.n	8001054 <__udivdi3+0x178>
 800104a:	18ed      	adds	r5, r5, r3
 800104c:	f108 34ff 	add.w	r4, r8, #4294967295
 8001050:	d367      	bcc.n	8001122 <__udivdi3+0x246>
 8001052:	46a0      	mov	r8, r4
 8001054:	1a6d      	subs	r5, r5, r1
 8001056:	b2bf      	uxth	r7, r7
 8001058:	fbb5 f4fe 	udiv	r4, r5, lr
 800105c:	fb0e 5514 	mls	r5, lr, r4, r5
 8001060:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001064:	fb0c fc04 	mul.w	ip, ip, r4
 8001068:	458c      	cmp	ip, r1
 800106a:	d904      	bls.n	8001076 <__udivdi3+0x19a>
 800106c:	18c9      	adds	r1, r1, r3
 800106e:	f104 35ff 	add.w	r5, r4, #4294967295
 8001072:	d35c      	bcc.n	800112e <__udivdi3+0x252>
 8001074:	462c      	mov	r4, r5
 8001076:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800107a:	ebcc 0101 	rsb	r1, ip, r1
 800107e:	fba4 2302 	umull	r2, r3, r4, r2
 8001082:	4299      	cmp	r1, r3
 8001084:	d348      	bcc.n	8001118 <__udivdi3+0x23c>
 8001086:	d044      	beq.n	8001112 <__udivdi3+0x236>
 8001088:	4620      	mov	r0, r4
 800108a:	2600      	movs	r6, #0
 800108c:	e76c      	b.n	8000f68 <__udivdi3+0x8c>
 800108e:	f1c8 0420 	rsb	r4, r8, #32
 8001092:	fa01 f308 	lsl.w	r3, r1, r8
 8001096:	fa05 f508 	lsl.w	r5, r5, r8
 800109a:	fa20 f704 	lsr.w	r7, r0, r4
 800109e:	40e1      	lsrs	r1, r4
 80010a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010a4:	431f      	orrs	r7, r3
 80010a6:	fbb1 f6fe 	udiv	r6, r1, lr
 80010aa:	0c3a      	lsrs	r2, r7, #16
 80010ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80010b0:	fa1f fc85 	uxth.w	ip, r5
 80010b4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80010b8:	fb0c f206 	mul.w	r2, ip, r6
 80010bc:	429a      	cmp	r2, r3
 80010be:	fa00 f408 	lsl.w	r4, r0, r8
 80010c2:	d907      	bls.n	80010d4 <__udivdi3+0x1f8>
 80010c4:	195b      	adds	r3, r3, r5
 80010c6:	f106 31ff 	add.w	r1, r6, #4294967295
 80010ca:	d237      	bcs.n	800113c <__udivdi3+0x260>
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d935      	bls.n	800113c <__udivdi3+0x260>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	442b      	add	r3, r5
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	b2bf      	uxth	r7, r7
 80010d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80010dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80010e0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80010e4:	fb0c f100 	mul.w	r1, ip, r0
 80010e8:	4299      	cmp	r1, r3
 80010ea:	d907      	bls.n	80010fc <__udivdi3+0x220>
 80010ec:	195b      	adds	r3, r3, r5
 80010ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80010f2:	d221      	bcs.n	8001138 <__udivdi3+0x25c>
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d91f      	bls.n	8001138 <__udivdi3+0x25c>
 80010f8:	3802      	subs	r0, #2
 80010fa:	442b      	add	r3, r5
 80010fc:	1a5a      	subs	r2, r3, r1
 80010fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001102:	4667      	mov	r7, ip
 8001104:	e750      	b.n	8000fa8 <__udivdi3+0xcc>
 8001106:	4610      	mov	r0, r2
 8001108:	e716      	b.n	8000f38 <__udivdi3+0x5c>
 800110a:	460b      	mov	r3, r1
 800110c:	e729      	b.n	8000f62 <__udivdi3+0x86>
 800110e:	4613      	mov	r3, r2
 8001110:	e772      	b.n	8000ff8 <__udivdi3+0x11c>
 8001112:	40b0      	lsls	r0, r6
 8001114:	4290      	cmp	r0, r2
 8001116:	d2b7      	bcs.n	8001088 <__udivdi3+0x1ac>
 8001118:	1e60      	subs	r0, r4, #1
 800111a:	2600      	movs	r6, #0
 800111c:	e724      	b.n	8000f68 <__udivdi3+0x8c>
 800111e:	4630      	mov	r0, r6
 8001120:	e722      	b.n	8000f68 <__udivdi3+0x8c>
 8001122:	42a9      	cmp	r1, r5
 8001124:	d995      	bls.n	8001052 <__udivdi3+0x176>
 8001126:	f1a8 0802 	sub.w	r8, r8, #2
 800112a:	441d      	add	r5, r3
 800112c:	e792      	b.n	8001054 <__udivdi3+0x178>
 800112e:	458c      	cmp	ip, r1
 8001130:	d9a0      	bls.n	8001074 <__udivdi3+0x198>
 8001132:	3c02      	subs	r4, #2
 8001134:	4419      	add	r1, r3
 8001136:	e79e      	b.n	8001076 <__udivdi3+0x19a>
 8001138:	4610      	mov	r0, r2
 800113a:	e7df      	b.n	80010fc <__udivdi3+0x220>
 800113c:	460e      	mov	r6, r1
 800113e:	e7c9      	b.n	80010d4 <__udivdi3+0x1f8>
 8001140:	3802      	subs	r0, #2
 8001142:	4429      	add	r1, r5
 8001144:	e743      	b.n	8000fce <__udivdi3+0xf2>
 8001146:	bf00      	nop

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	f8df d030 	ldr.w	sp, [pc, #48]	; 800117c <LoopFillZerobss+0x10>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800114c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800114e:	e003      	b.n	8001158 <LoopCopyDataInit>

08001150 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001152:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001154:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001156:	3104      	adds	r1, #4

08001158 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800115c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001160:	d3f6      	bcc.n	8001150 <CopyDataInit>
  ldr  r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001164:	e002      	b.n	800116c <LoopFillZerobss>

08001166 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001166:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001168:	f842 3b04 	str.w	r3, [r2], #4

0800116c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001170:	d3f9      	bcc.n	8001166 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001172:	f000 f811 	bl	8001198 <SystemInit>
/* Call static constructors */
   /* bl __libc_init_array */
/* Call the application's entry point.*/
  bl  main
 8001176:	f000 f8bd 	bl	80012f4 <main>
  bx  lr    
 800117a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800117c:	2001ffff 	.word	0x2001ffff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001180:	08030c3c 	.word	0x08030c3c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001188:	20000b7c 	.word	0x20000b7c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800118c:	2000d380 	.word	0x2000d380
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001190:	20017b08 	.word	0x20017b08

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <SystemInit+0x34>)
 800119a:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800119c:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a4:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <SystemInit+0x38>)
 80011b4:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011bc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011be:	60d9      	str	r1, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SystemInit+0x3c>)
 80011c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	24003010 	.word	0x24003010
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <delay_msec>:
  * @retval	None
  */
void delay_msec(uint32_t msec){
  uint32_t target;
  
  target = msec_counter + msec;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <delay_msec+0x10>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4410      	add	r0, r2
  while(msec_counter < target){
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4282      	cmp	r2, r0
 80011e2:	d3fc      	bcc.n	80011de <delay_msec+0x6>
  	;
  }
}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000d388 	.word	0x2000d388

080011ec <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80011ec:	4770      	bx	lr

080011ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80011ee:	e7fe      	b.n	80011ee <HardFault_Handler>

080011f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler>

080011f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler>

080011f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler>

080011f6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011fc:	b508      	push	{r3, lr}
	HAL_IncTick();
 80011fe:	f006 f9eb 	bl	80075d8 <HAL_IncTick>
	
	Timeout_Timer_0++;
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <SysTick_Handler+0x50>)
 8001204:	6813      	ldr	r3, [r2, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	6013      	str	r3, [r2, #0]
  
	//---------------------------
	// msec counter
	//---------------------------
	msec_counter++;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <SysTick_Handler+0x54>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	3201      	adds	r2, #1
 8001210:	601a      	str	r2, [r3, #0]
	switch(msec_counter % 25){
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	2219      	movs	r2, #25
 8001216:	fbb0 f1f2 	udiv	r1, r0, r2
 800121a:	fb02 0211 	mls	r2, r2, r1, r0
 800121e:	b912      	cbnz	r2, 8001226 <SysTick_Handler+0x2a>
		case 0:
			gui_Exec = true;
 8001220:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <SysTick_Handler+0x58>)
 8001222:	2101      	movs	r1, #1
 8001224:	7011      	strb	r1, [r2, #0]
			break;
			
		default:
			break;
	}
	switch(msec_counter % 50){
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	2332      	movs	r3, #50	; 0x32
 800122a:	fbb1 f2f3 	udiv	r2, r1, r3
 800122e:	fb03 1312 	mls	r3, r3, r2, r1
 8001232:	b913      	cbnz	r3, 800123a <SysTick_Handler+0x3e>
		case 0:
			modbus_Exec = true;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <SysTick_Handler+0x5c>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
	}

	//---------------------------
	// Touch-Timer
	//---------------------------
	touch_timer++;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <SysTick_Handler+0x60>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	3201      	adds	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
	switch(touch_timer % 1){
 8001242:	681b      	ldr	r3, [r3, #0]
		case 0:
			Touch_Flagged = true;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <SysTick_Handler+0x64>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	bd08      	pop	{r3, pc}
 800124c:	2000d380 	.word	0x2000d380
 8001250:	2000d388 	.word	0x2000d388
 8001254:	2000d38d 	.word	0x2000d38d
 8001258:	2000d38c 	.word	0x2000d38c
 800125c:	2000d384 	.word	0x2000d384
 8001260:	2000d38e 	.word	0x2000d38e

08001264 <Error_Handler>:
/**
	* @brief	Handles general errors.
	* @param	None
	* @retval	None
*/
static void Error_Handler(void){
 8001264:	b508      	push	{r3, lr}
	
	while(1){
		/* Put error on LED3 */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <Error_Handler+0x14>)
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	f006 f97c 	bl	8007568 <HAL_GPIO_TogglePin>
		printf("Peripheral config error\n");
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <Error_Handler+0x18>)
 8001272:	f014 feb3 	bl	8015fdc <puts>
	}
 8001276:	e7f6      	b.n	8001266 <Error_Handler+0x2>
 8001278:	40020c00 	.word	0x40020c00
 800127c:	0801b160 	.word	0x0801b160

08001280 <Debug_ITMDebugEnable>:
void Debug_ITMDebugEnable(void){
	volatile unsigned int *ITM_TER      = (volatile unsigned int *)0xE0000E00;
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;
	
	*DBGMCU_CR |= 0x27; // DBGMCU_CR
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <Debug_ITMDebugEnable+0x24>)
 8001282:	6813      	ldr	r3, [r2, #0]
 8001284:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001288:	6013      	str	r3, [r2, #0]
	
	if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <Debug_ITMDebugEnable+0x28>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	07da      	lsls	r2, r3, #31
 8001290:	d506      	bpl.n	80012a0 <Debug_ITMDebugEnable+0x20>
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <Debug_ITMDebugEnable+0x2c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	07db      	lsls	r3, r3, #31
    Debug_ITMDebug = 1;
 8001298:	bf42      	ittt	mi
 800129a:	4b05      	ldrmi	r3, [pc, #20]	; (80012b0 <Debug_ITMDebugEnable+0x30>)
 800129c:	2201      	movmi	r2, #1
 800129e:	601a      	strmi	r2, [r3, #0]
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e0042004 	.word	0xe0042004
 80012a8:	e000edf0 	.word	0xe000edf0
 80012ac:	e0000e00 	.word	0xe0000e00
 80012b0:	2000d394 	.word	0x2000d394

080012b4 <Debug_ITMDebugOutputChar>:

void Debug_ITMDebugOutputChar(char ch){
	static volatile unsigned int *ITM_STIM0 = (volatile unsigned int *)0xE0000000; // ITM Port 0
	static volatile unsigned int *SCB_DEMCR = (volatile unsigned int *)0xE000EDFC;
	
	if (Debug_ITMDebug && (*SCB_DEMCR & 0x01000000))
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <Debug_ITMDebugOutputChar+0x1c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b14b      	cbz	r3, 80012ce <Debug_ITMDebugOutputChar+0x1a>
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <Debug_ITMDebugOutputChar+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	01db      	lsls	r3, r3, #7
 80012c0:	d505      	bpl.n	80012ce <Debug_ITMDebugOutputChar+0x1a>
	{
		while(*ITM_STIM0 == 0);
 80012c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d0fa      	beq.n	80012c2 <Debug_ITMDebugOutputChar+0xe>
		*((volatile char *)ITM_STIM0) = ch;
 80012cc:	7018      	strb	r0, [r3, #0]
 80012ce:	4770      	bx	lr
 80012d0:	2000d394 	.word	0x2000d394
 80012d4:	e000edfc 	.word	0xe000edfc

080012d8 <Debug_ITMDebugOutputString>:
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
	if (Debug_ITMDebug)
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <Debug_ITMDebugOutputString+0x18>)
 80012da:	681b      	ldr	r3, [r3, #0]
	}
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
 80012dc:	b510      	push	{r4, lr}
	if (Debug_ITMDebug)
 80012de:	b133      	cbz	r3, 80012ee <Debug_ITMDebugOutputString+0x16>
 80012e0:	1e44      	subs	r4, r0, #1
	while(*Buffer)
 80012e2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80012e6:	b110      	cbz	r0, 80012ee <Debug_ITMDebugOutputString+0x16>
	Debug_ITMDebugOutputChar(*Buffer++);
 80012e8:	f7ff ffe4 	bl	80012b4 <Debug_ITMDebugOutputChar>
 80012ec:	e7f9      	b.n	80012e2 <Debug_ITMDebugOutputString+0xa>
 80012ee:	bd10      	pop	{r4, pc}
 80012f0:	2000d394 	.word	0x2000d394

080012f4 <main>:
	* 		Update GUI every 10ms.
	* 		Update Touch every 1ms.
	* 		return here after a call.
	*	@retval	None
*/
int main(void){
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b0a9      	sub	sp, #164	; 0xa4
	/* STM32f4xx HAL library initialization:
		- Cofigure Flash prefetch, flash preread and Buffer caches
		- Systick timer config
		- Low level init
	*/
	HAL_Init();
 80012f8:	f006 f958 	bl	80075ac <HAL_Init>
static void SystemClock_Config(void){
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	
	/* Enable Power control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	4a90      	ldr	r2, [pc, #576]	; (8001540 <main+0x24c>)
 80012fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
	
	/* The voltage scaling allows optimizing the power consumption when the
		device is clocked below the maximum system frequency, to update the
		voltage scaling value regarding system frequency refer to product
	datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001306:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
	
	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2402      	movs	r4, #2
	
	/* The voltage scaling allows optimizing the power consumption when the
		device is clocked below the maximum system frequency, to update the
		voltage scaling value regarding system frequency refer to product
	datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130c:	6813      	ldr	r3, [r2, #0]
 800130e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001312:	6013      	str	r3, [r2, #0]
	
	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001314:	2301      	movs	r3, #1
 8001316:	931c      	str	r3, [sp, #112]	; 0x70
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001318:	931d      	str	r3, [sp, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131e:	9323      	str	r3, [sp, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001320:	2319      	movs	r3, #25
 8001322:	9324      	str	r3, [sp, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001324:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001328:	9325      	str	r3, [sp, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800132a:	a81c      	add	r0, sp, #112	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800132c:	2307      	movs	r3, #7
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	
	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	9422      	str	r4, [sp, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001330:	9426      	str	r4, [sp, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001332:	9327      	str	r3, [sp, #156]	; 0x9c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001334:	f002 fcbc 	bl	8003cb0 <HAL_RCC_OscConfig>
 8001338:	2800      	cmp	r0, #0
 800133a:	f040 80f9 	bne.w	8001530 <main+0x23c>
		/* Initialization Error */
		Error_Handler();
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800133e:	230f      	movs	r3, #15
 8001340:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001342:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	9008      	str	r0, [sp, #32]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001348:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 800134a:	a806      	add	r0, sp, #24
	and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8001350:	2105      	movs	r1, #5
		Error_Handler();
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	9407      	str	r4, [sp, #28]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001354:	930a      	str	r3, [sp, #40]	; 0x28
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8001356:	f002 fead 	bl	80040b4 <HAL_RCC_ClockConfig>
 800135a:	2800      	cmp	r0, #0
 800135c:	f040 80e8 	bne.w	8001530 <main+0x23c>
		/* Initialization Error */
		Error_Handler();
	}
	
	/* STM32F407x Revision Z devices: prefetch is supported */
	if(HAL_GetREVID() == 0x1001){
 8001360:	f006 f956 	bl	8007610 <HAL_GetREVID>
 8001364:	f241 0301 	movw	r3, #4097	; 0x1001
 8001368:	4298      	cmp	r0, r3
		/* Enable the Flash prefetch */
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136a:	bf01      	itttt	eq
 800136c:	4a75      	ldreq	r2, [pc, #468]	; (8001544 <main+0x250>)
 800136e:	6813      	ldreq	r3, [r2, #0]
 8001370:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8001374:	6013      	streq	r3, [r2, #0]
	
	/* configure the system clock to 168 MHz */
	SystemClock_Config();
	
	/* Enable TRACE debug -----------------------------------------------*/
	Debug_ITMDebugEnable();
 8001376:	f7ff ff83 	bl	8001280 <Debug_ITMDebugEnable>
 	Debug_ITMDebugOutputString("SWV Enabled\n");
 800137a:	4873      	ldr	r0, [pc, #460]	; (8001548 <main+0x254>)
 800137c:	f7ff ffac 	bl	80012d8 <Debug_ITMDebugOutputString>
	* @param None
	* @retval None
*/
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
 8001380:	4872      	ldr	r0, [pc, #456]	; (800154c <main+0x258>)
	
	SRAM_Timing.AddressSetupTime       = 2;
 8001382:	4973      	ldr	r1, [pc, #460]	; (8001550 <main+0x25c>)
	SRAM_Timing.AddressHoldTime        = 1;
 8001384:	2201      	movs	r2, #1
	* @param None
	* @retval None
*/
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
 8001386:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800138a:	6003      	str	r3, [r0, #0]
	
	SRAM_Timing.AddressSetupTime       = 2;
	SRAM_Timing.AddressHoldTime        = 1;
 800138c:	604a      	str	r2, [r1, #4]
*/
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
	
	SRAM_Timing.AddressSetupTime       = 2;
 800138e:	2302      	movs	r3, #2
	SRAM_Timing.AddressHoldTime        = 1;
	SRAM_Timing.DataSetupTime          = 2;
	SRAM_Timing.BusTurnAroundDuration  = 1;
 8001390:	60ca      	str	r2, [r1, #12]
	SRAM_Timing.AccessMode             = FMC_ACCESS_MODE_A;
	
	hsram.Init.NSBank				= FMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux		= FMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType			= FMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth		= FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001392:	2210      	movs	r2, #16
*/
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
	
	SRAM_Timing.AddressSetupTime       = 2;
 8001394:	600b      	str	r3, [r1, #0]
	SRAM_Timing.AddressHoldTime        = 1;
	SRAM_Timing.DataSetupTime          = 2;
 8001396:	608b      	str	r3, [r1, #8]
	SRAM_Timing.BusTurnAroundDuration  = 1;
	SRAM_Timing.CLKDivision            = 2;
 8001398:	610b      	str	r3, [r1, #16]
	SRAM_Timing.DataLatency            = 2;
 800139a:	614b      	str	r3, [r1, #20]
	SRAM_Timing.AccessMode             = FMC_ACCESS_MODE_A;
	
	hsram.Init.NSBank				= FMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux		= FMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType			= FMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth		= FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800139c:	6142      	str	r2, [r0, #20]
	SRAM_Timing.AddressHoldTime        = 1;
	SRAM_Timing.DataSetupTime          = 2;
	SRAM_Timing.BusTurnAroundDuration  = 1;
	SRAM_Timing.CLKDivision            = 2;
	SRAM_Timing.DataLatency            = 2;
	SRAM_Timing.AccessMode             = FMC_ACCESS_MODE_A;
 800139e:	2300      	movs	r3, #0
	hsram.Init.MemoryDataWidth		= FMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode		= FMC_BURST_ACCESS_MODE_DISABLE;
	hsram.Init.WaitSignalPolarity	= FMC_WAIT_SIGNAL_POLARITY_LOW;
	hsram.Init.WrapMode				= FMC_WRAP_MODE_DISABLE;
	hsram.Init.WaitSignalActive		= FMC_WAIT_TIMING_BEFORE_WS;
	hsram.Init.WriteOperation		= FMC_WRITE_OPERATION_ENABLE;
 80013a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	SRAM_Timing.AddressHoldTime        = 1;
	SRAM_Timing.DataSetupTime          = 2;
	SRAM_Timing.BusTurnAroundDuration  = 1;
	SRAM_Timing.CLKDivision            = 2;
	SRAM_Timing.DataLatency            = 2;
	SRAM_Timing.AccessMode             = FMC_ACCESS_MODE_A;
 80013a4:	618b      	str	r3, [r1, #24]
	
	hsram.Init.NSBank				= FMC_NORSRAM_BANK1;
 80013a6:	6083      	str	r3, [r0, #8]
	hsram.Init.DataAddressMux		= FMC_DATA_ADDRESS_MUX_DISABLE;
 80013a8:	60c3      	str	r3, [r0, #12]
	hsram.Init.MemoryType			= FMC_MEMORY_TYPE_SRAM;
 80013aa:	6103      	str	r3, [r0, #16]
	hsram.Init.MemoryDataWidth		= FMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode		= FMC_BURST_ACCESS_MODE_DISABLE;
 80013ac:	6183      	str	r3, [r0, #24]
	hsram.Init.WaitSignalPolarity	= FMC_WAIT_SIGNAL_POLARITY_LOW;
 80013ae:	61c3      	str	r3, [r0, #28]
	hsram.Init.WrapMode				= FMC_WRAP_MODE_DISABLE;
 80013b0:	6203      	str	r3, [r0, #32]
	hsram.Init.WaitSignalActive		= FMC_WAIT_TIMING_BEFORE_WS;
 80013b2:	6243      	str	r3, [r0, #36]	; 0x24
	hsram.Init.WriteOperation		= FMC_WRITE_OPERATION_ENABLE;
 80013b4:	6282      	str	r2, [r0, #40]	; 0x28
	hsram.Init.WaitSignal			= FMC_WAIT_SIGNAL_DISABLE;
 80013b6:	62c3      	str	r3, [r0, #44]	; 0x2c
	hsram.Init.ExtendedMode			= FMC_EXTENDED_MODE_DISABLE;
 80013b8:	6303      	str	r3, [r0, #48]	; 0x30
	hsram.Init.AsynchronousWait		= FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013ba:	6343      	str	r3, [r0, #52]	; 0x34
	hsram.Init.WriteBurst			= FMC_WRITE_BURST_DISABLE;
 80013bc:	6383      	str	r3, [r0, #56]	; 0x38
	hsram.Init.ContinuousClock    	= FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
	
	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 80013be:	460a      	mov	r2, r1
	hsram.Init.WriteOperation		= FMC_WRITE_OPERATION_ENABLE;
	hsram.Init.WaitSignal			= FMC_WAIT_SIGNAL_DISABLE;
	hsram.Init.ExtendedMode			= FMC_EXTENDED_MODE_DISABLE;
	hsram.Init.AsynchronousWait		= FMC_ASYNCHRONOUS_WAIT_DISABLE;
	hsram.Init.WriteBurst			= FMC_WRITE_BURST_DISABLE;
	hsram.Init.ContinuousClock    	= FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 80013c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013c4:	63c3      	str	r3, [r0, #60]	; 0x3c
	
	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 80013c6:	f004 fe9d 	bl	8006104 <HAL_SRAM_Init>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	f040 80b0 	bne.w	8001530 <main+0x23c>
	* @param None
	* @retval None
*/
static void I2C_init(void){
	/*	Configure the I2C peripheral ---------------------------*/
	I2cHandle.Instance             = I2Cx;
 80013d0:	4b60      	ldr	r3, [pc, #384]	; (8001554 <main+0x260>)
 80013d2:	4a61      	ldr	r2, [pc, #388]	; (8001558 <main+0x264>)
 80013d4:	601a      	str	r2, [r3, #0]
	
	I2cHandle.Init.AddressingMode	= I2C_ADDRESSINGMODE_7BIT;
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013da:	611a      	str	r2, [r3, #16]
	I2cHandle.Init.ClockSpeed		= 400000;
 80013dc:	4a5f      	ldr	r2, [pc, #380]	; (800155c <main+0x268>)
 80013de:	605a      	str	r2, [r3, #4]
	I2cHandle.Init.DualAddressMode	= I2C_DUALADDRESS_DISABLE;
	I2cHandle.Init.DutyCycle		= I2C_DUTYCYCLE_2;
	I2cHandle.Init.GeneralCallMode	= I2C_GENERALCALL_ENABLE;
 80013e0:	2240      	movs	r2, #64	; 0x40
	/*	Configure the I2C peripheral ---------------------------*/
	I2cHandle.Instance             = I2Cx;
	
	I2cHandle.Init.AddressingMode	= I2C_ADDRESSINGMODE_7BIT;
	I2cHandle.Init.ClockSpeed		= 400000;
	I2cHandle.Init.DualAddressMode	= I2C_DUALADDRESS_DISABLE;
 80013e2:	6158      	str	r0, [r3, #20]
	I2cHandle.Init.DutyCycle		= I2C_DUTYCYCLE_2;
 80013e4:	6098      	str	r0, [r3, #8]
	I2cHandle.Init.GeneralCallMode	= I2C_GENERALCALL_ENABLE;
 80013e6:	61da      	str	r2, [r3, #28]
	I2cHandle.Init.NoStretchMode	= I2C_NOSTRETCH_DISABLE;
 80013e8:	6218      	str	r0, [r3, #32]
	I2cHandle.Init.OwnAddress1		= I2C_ADDRESS;
 80013ea:	22fe      	movs	r2, #254	; 0xfe
	I2cHandle.Init.OwnAddress2		= I2C_ADDRESS;
	
	if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80013ec:	4618      	mov	r0, r3
	I2cHandle.Init.ClockSpeed		= 400000;
	I2cHandle.Init.DualAddressMode	= I2C_DUALADDRESS_DISABLE;
	I2cHandle.Init.DutyCycle		= I2C_DUTYCYCLE_2;
	I2cHandle.Init.GeneralCallMode	= I2C_GENERALCALL_ENABLE;
	I2cHandle.Init.NoStretchMode	= I2C_NOSTRETCH_DISABLE;
	I2cHandle.Init.OwnAddress1		= I2C_ADDRESS;
 80013ee:	60da      	str	r2, [r3, #12]
	I2cHandle.Init.OwnAddress2		= I2C_ADDRESS;
 80013f0:	619a      	str	r2, [r3, #24]
	
	if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80013f2:	f004 f8e9 	bl	80055c8 <HAL_I2C_Init>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	f040 809a 	bne.w	8001530 <main+0x23c>
		- Word Length	= 8 Bits
		- Stop Bit		= One Stop bit
		- Parity		= None
		- BaudRate		= 115200 baud
		- Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <main+0x26c>)
	
	UartHandle.Init.BaudRate     = baudrate;
 80013fe:	4959      	ldr	r1, [pc, #356]	; (8001564 <main+0x270>)
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8001400:	6098      	str	r0, [r3, #8]
		- Parity		= None
		- BaudRate		= 115200 baud
		- Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
	
	UartHandle.Init.BaudRate     = baudrate;
 8001402:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001406:	e883 0006 	stmia.w	r3, {r1, r2}
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 800140a:	60d8      	str	r0, [r3, #12]
	UartHandle.Init.Parity       = UART_PARITY_NONE;
 800140c:	6118      	str	r0, [r3, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800140e:	6198      	str	r0, [r3, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001410:	220c      	movs	r2, #12
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001412:	61d8      	str	r0, [r3, #28]
    
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8001414:	4618      	mov	r0, r3
	UartHandle.Init.BaudRate     = baudrate;
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001416:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
    
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8001418:	f004 fdf2 	bl	8006000 <HAL_UART_Init>
 800141c:	2800      	cmp	r0, #0
 800141e:	f040 8087 	bne.w	8001530 <main+0x23c>
*/
static void Timer9_Init(void){
	TIM_OC_InitTypeDef sConfig;
	uint32_t uwPrescalerValue = 0;
	
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <main+0x274>)
	
	TimHandle_9.Instance = TIMx;
 8001424:	4c51      	ldr	r4, [pc, #324]	; (800156c <main+0x278>)
*/
static void Timer9_Init(void){
	TIM_OC_InitTypeDef sConfig;
	uint32_t uwPrescalerValue = 0;
	
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a51      	ldr	r2, [pc, #324]	; (8001570 <main+0x27c>)
 800142a:	fbb3 f3f2 	udiv	r3, r3, r2
	
	TimHandle_9.Instance = TIMx;
 800142e:	4a51      	ldr	r2, [pc, #324]	; (8001574 <main+0x280>)
	
	TimHandle_9.Init.Prescaler     = uwPrescalerValue;
	TimHandle_9.Init.Period        = PERIOD_VALUE;
	TimHandle_9.Init.ClockDivision = 0;
 8001430:	6120      	str	r0, [r4, #16]
*/
static void Timer9_Init(void){
	TIM_OC_InitTypeDef sConfig;
	uint32_t uwPrescalerValue = 0;
	
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
 8001432:	3b01      	subs	r3, #1
	
	TimHandle_9.Instance = TIMx;
	
	TimHandle_9.Init.Prescaler     = uwPrescalerValue;
 8001434:	e884 000c 	stmia.w	r4, {r2, r3}
	TimHandle_9.Init.Period        = PERIOD_VALUE;
	TimHandle_9.Init.ClockDivision = 0;
	TimHandle_9.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8001438:	60a0      	str	r0, [r4, #8]
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
	
	TimHandle_9.Instance = TIMx;
	
	TimHandle_9.Init.Prescaler     = uwPrescalerValue;
	TimHandle_9.Init.Period        = PERIOD_VALUE;
 800143a:	f240 7307 	movw	r3, #1799	; 0x707
	TimHandle_9.Init.ClockDivision = 0;
	TimHandle_9.Init.CounterMode   = TIM_COUNTERMODE_UP;
	if(HAL_TIM_PWM_Init(&TimHandle_9) != HAL_OK)
 800143e:	4620      	mov	r0, r4
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
	
	TimHandle_9.Instance = TIMx;
	
	TimHandle_9.Init.Prescaler     = uwPrescalerValue;
	TimHandle_9.Init.Period        = PERIOD_VALUE;
 8001440:	60e3      	str	r3, [r4, #12]
	TimHandle_9.Init.ClockDivision = 0;
	TimHandle_9.Init.CounterMode   = TIM_COUNTERMODE_UP;
	if(HAL_TIM_PWM_Init(&TimHandle_9) != HAL_OK)
 8001442:	f005 fc01 	bl	8006c48 <HAL_TIM_PWM_Init>
 8001446:	4602      	mov	r2, r0
 8001448:	2800      	cmp	r0, #0
 800144a:	d171      	bne.n	8001530 <main+0x23c>
	{
		/* Initialization Error */
		Error_Handler();
	}
	
	sConfig.OCMode			= TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	9315      	str	r3, [sp, #84]	; 0x54
	sConfig.OCPolarity		= TIM_OCPOLARITY_HIGH;
 8001450:	9017      	str	r0, [sp, #92]	; 0x5c
	sConfig.OCNPolarity		= TIM_OCNPOLARITY_HIGH;
 8001452:	9018      	str	r0, [sp, #96]	; 0x60
	sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
 8001454:	901b      	str	r0, [sp, #108]	; 0x6c
	sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
 8001456:	901a      	str	r0, [sp, #104]	; 0x68
	sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
 8001458:	9019      	str	r0, [sp, #100]	; 0x64
	
	sConfig.Pulse = PULSE1_VALUE;  
 800145a:	f240 5346 	movw	r3, #1350	; 0x546
	if(HAL_TIM_PWM_ConfigChannel(&TimHandle_9, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 800145e:	a915      	add	r1, sp, #84	; 0x54
 8001460:	4620      	mov	r0, r4
	sConfig.OCNPolarity		= TIM_OCNPOLARITY_HIGH;
	sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
	sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
	sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
	
	sConfig.Pulse = PULSE1_VALUE;  
 8001462:	9316      	str	r3, [sp, #88]	; 0x58
	if(HAL_TIM_PWM_ConfigChannel(&TimHandle_9, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8001464:	f005 fcbc 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4601      	mov	r1, r0
 800146a:	2800      	cmp	r0, #0
 800146c:	d160      	bne.n	8001530 <main+0x23c>
	{
		/* Configuration Error */
		Error_Handler();
	}
	
	if(HAL_TIM_PWM_Start(&TimHandle_9, TIM_CHANNEL_1) != HAL_OK)
 800146e:	4620      	mov	r0, r4
 8001470:	f005 fe4e 	bl	8007110 <HAL_TIM_PWM_Start>
 8001474:	2800      	cmp	r0, #0
 8001476:	d15b      	bne.n	8001530 <main+0x23c>
	RCC_ClkInitTypeDef sClokConfig;
	uint32_t uwTimclock, uwAPB1Prescaler = 0;
	uint32_t uwPrescalerValue = 0;
	uint32_t pFLatency;
	
	HAL_RCC_GetClockConfig(&sClokConfig, &pFLatency);
 8001478:	a80b      	add	r0, sp, #44	; 0x2c
 800147a:	a901      	add	r1, sp, #4
 800147c:	f003 f800 	bl	8004480 <HAL_RCC_GetClockConfig>
	
	uwAPB1Prescaler = sClokConfig.APB1CLKDivider;
	if (uwAPB1Prescaler == 0) 
 8001480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001482:	b913      	cbnz	r3, 800148a <main+0x196>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001484:	f002 ffcc 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8001488:	e002      	b.n	8001490 <main+0x19c>
	}
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 800148a:	f002 ffc9 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 800148e:	0040      	lsls	r0, r0, #1
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_4.Instance = TIMx_4;
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <main+0x284>)
 8001492:	4a3a      	ldr	r2, [pc, #232]	; (800157c <main+0x288>)
 8001494:	601a      	str	r2, [r3, #0]
	
	TimHandle_4.Init.Period = 20000 - 1;
 8001496:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800149a:	60da      	str	r2, [r3, #12]
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
 800149c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80014a4:	3801      	subs	r0, #1
	
	TimHandle_4.Instance = TIMx_4;
	
	TimHandle_4.Init.Period = 20000 - 1;
	TimHandle_4.Init.Prescaler = uwPrescalerValue;
	TimHandle_4.Init.ClockDivision = 0;
 80014a6:	2200      	movs	r2, #0
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_4.Instance = TIMx_4;
	
	TimHandle_4.Init.Period = 20000 - 1;
	TimHandle_4.Init.Prescaler = uwPrescalerValue;
 80014a8:	6058      	str	r0, [r3, #4]
	TimHandle_4.Init.ClockDivision = 0;
	TimHandle_4.Init.CounterMode = TIM_COUNTERMODE_UP;
	if(HAL_TIM_Base_Init(&TimHandle_4) != HAL_OK)
 80014aa:	4618      	mov	r0, r3
	
	TimHandle_4.Instance = TIMx_4;
	
	TimHandle_4.Init.Period = 20000 - 1;
	TimHandle_4.Init.Prescaler = uwPrescalerValue;
	TimHandle_4.Init.ClockDivision = 0;
 80014ac:	611a      	str	r2, [r3, #16]
	TimHandle_4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_Base_Init(&TimHandle_4) != HAL_OK)
 80014b0:	f005 fb5a 	bl	8006b68 <HAL_TIM_Base_Init>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d13b      	bne.n	8001530 <main+0x23c>
	RCC_ClkInitTypeDef sClokConfig;
	uint32_t uwTimclock, uwAPB1Prescaler = 0;
	uint32_t uwPrescalerValue = 0;
	uint32_t pFLatency;
	
	HAL_RCC_GetClockConfig(&sClokConfig, &pFLatency);
 80014b8:	a810      	add	r0, sp, #64	; 0x40
 80014ba:	a902      	add	r1, sp, #8
 80014bc:	f002 ffe0 	bl	8004480 <HAL_RCC_GetClockConfig>
	
	uwAPB1Prescaler = sClokConfig.APB1CLKDivider;
	if (uwAPB1Prescaler == 0) 
 80014c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80014c2:	b913      	cbnz	r3, 80014ca <main+0x1d6>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014c4:	f002 ffac 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 80014c8:	e002      	b.n	80014d0 <main+0x1dc>
	}
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 80014ca:	f002 ffa9 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 80014ce:	0040      	lsls	r0, r0, #1
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_5.Instance = TIMx_5;
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <main+0x28c>)
 80014d2:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <main+0x290>)
 80014d4:	601a      	str	r2, [r3, #0]
	
	TimHandle_5.Init.Period = 70 - 1;
 80014d6:	2245      	movs	r2, #69	; 0x45
 80014d8:	60da      	str	r2, [r3, #12]
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
 80014da:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014de:	fbb0 f0f2 	udiv	r0, r0, r2
 80014e2:	3801      	subs	r0, #1
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period = 70 - 1;
	TimHandle_5.Init.Prescaler = uwPrescalerValue;
	TimHandle_5.Init.ClockDivision = 0;
 80014e4:	2200      	movs	r2, #0
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period = 70 - 1;
	TimHandle_5.Init.Prescaler = uwPrescalerValue;
 80014e6:	6058      	str	r0, [r3, #4]
	TimHandle_5.Init.ClockDivision = 0;
	TimHandle_5.Init.CounterMode = TIM_COUNTERMODE_UP;
	if(HAL_TIM_Base_Init(&TimHandle_5) != HAL_OK)
 80014e8:	4618      	mov	r0, r3
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period = 70 - 1;
	TimHandle_5.Init.Prescaler = uwPrescalerValue;
	TimHandle_5.Init.ClockDivision = 0;
 80014ea:	611a      	str	r2, [r3, #16]
	TimHandle_5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_Base_Init(&TimHandle_5) != HAL_OK)
 80014ee:	f005 fb3b 	bl	8006b68 <HAL_TIM_Base_Init>
 80014f2:	4604      	mov	r4, r0
 80014f4:	b9e0      	cbnz	r0, 8001530 <main+0x23c>
*/
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <main+0x24c>)
	//Config pins
	GPIO_InitStructure.Pin		= GPIO_PIN_13;
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80014f8:	4823      	ldr	r0, [pc, #140]	; (8001588 <main+0x294>)
*/
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
 80014fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
	
	//Config pins
	GPIO_InitStructure.Pin		= GPIO_PIN_13;
 8001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_HIGH;
 8001506:	2203      	movs	r2, #3
	
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
	
	//Config pins
	GPIO_InitStructure.Pin		= GPIO_PIN_13;
 8001508:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800150a:	a91c      	add	r1, sp, #112	; 0x70
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
	
	//Config pins
	GPIO_InitStructure.Pin		= GPIO_PIN_13;
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	931d      	str	r3, [sp, #116]	; 0x74
	GPIO_InitStructure.Speed	= GPIO_SPEED_HIGH;
 8001510:	921f      	str	r2, [sp, #124]	; 0x7c
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
 8001512:	931e      	str	r3, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001514:	f005 fed0 	bl	80072b8 <HAL_GPIO_Init>
	/* Show us some status leds ----------------------------------------*/
	init_leds();
	
	/*********************************************************************/
	/*	Init modbus	Master ----------------------------------------------*/
	if((eMBMasterInit(MB_RTU, 0, 115200, MB_PAR_NONE)) != MB_ENOERR){
 8001518:	4620      	mov	r0, r4
 800151a:	4621      	mov	r1, r4
 800151c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001520:	4623      	mov	r3, r4
 8001522:	f001 fcdb 	bl	8002edc <eMBMasterInit>
 8001526:	b128      	cbz	r0, 8001534 <main+0x240>
		printf("eStatus Master Init: %s\n", eStatus ? "error": "no'error");
 8001528:	4818      	ldr	r0, [pc, #96]	; (800158c <main+0x298>)
 800152a:	4919      	ldr	r1, [pc, #100]	; (8001590 <main+0x29c>)
 800152c:	f014 fd14 	bl	8015f58 <printf>
		Error_Handler();
 8001530:	f7ff fe98 	bl	8001264 <Error_Handler>
	}
	
	/*	Enable the Modbus Protocol Stack --------------------------------*/
	if((eMBMasterEnable()) != MB_ENOERR){
 8001534:	f001 fd1e 	bl	8002f74 <eMBMasterEnable>
 8001538:	b370      	cbz	r0, 8001598 <main+0x2a4>
		printf("eStatus Master Enable: %s\n", eStatus ? "error": "no'error");
 800153a:	4816      	ldr	r0, [pc, #88]	; (8001594 <main+0x2a0>)
 800153c:	e7f5      	b.n	800152a <main+0x236>
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40023c00 	.word	0x40023c00
 8001548:	0801b181 	.word	0x0801b181
 800154c:	20017838 	.word	0x20017838
 8001550:	2001781c 	.word	0x2001781c
 8001554:	200178bc 	.word	0x200178bc
 8001558:	40005400 	.word	0x40005400
 800155c:	00061a80 	.word	0x00061a80
 8001560:	20016fc8 	.word	0x20016fc8
 8001564:	40011000 	.word	0x40011000
 8001568:	20000000 	.word	0x20000000
 800156c:	20017550 	.word	0x20017550
 8001570:	02255100 	.word	0x02255100
 8001574:	40014000 	.word	0x40014000
 8001578:	20017880 	.word	0x20017880
 800157c:	40000800 	.word	0x40000800
 8001580:	20017510 	.word	0x20017510
 8001584:	40000c00 	.word	0x40000c00
 8001588:	40020c00 	.word	0x40020c00
 800158c:	0801b18e 	.word	0x0801b18e
 8001590:	0801b178 	.word	0x0801b178
 8001594:	0801b1a7 	.word	0x0801b1a7
		Error_Handler();
	}
	
	/*	Init STemWin V5.2.6 and GUI -------------------------------------*/
	if((UB_STemWIN_init()) != SUCCESS){
 8001598:	f001 fa46 	bl	8002a28 <UB_STemWIN_init>
 800159c:	2801      	cmp	r0, #1
 800159e:	d002      	beq.n	80015a6 <main+0x2b2>
		printf("emWin INIT error...");
 80015a0:	484c      	ldr	r0, [pc, #304]	; (80016d4 <main+0x3e0>)
 80015a2:	f014 fcd9 	bl	8015f58 <printf>
	}
	
	/*	Init Verventa GUI -----------------------------------------------*/
	if(( Init_GUI_verventa()) != SUCCESS){
 80015a6:	f000 ff79 	bl	800249c <Init_GUI_verventa>
 80015aa:	2801      	cmp	r0, #1
 80015ac:	d002      	beq.n	80015b4 <main+0x2c0>
		printf("can't INIT verventa GUI...");
 80015ae:	484a      	ldr	r0, [pc, #296]	; (80016d8 <main+0x3e4>)
 80015b0:	f014 fcd2 	bl	8015f58 <printf>
	}
	
	/*	Link disk drive to filesystem */
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0){
 80015b4:	4849      	ldr	r0, [pc, #292]	; (80016dc <main+0x3e8>)
 80015b6:	494a      	ldr	r1, [pc, #296]	; (80016e0 <main+0x3ec>)
 80015b8:	f006 f872 	bl	80076a0 <FATFS_LinkDriver>
 80015bc:	bb08      	cbnz	r0, 8001602 <main+0x30e>
		printf("SD driver linked...\n");
 80015be:	4849      	ldr	r0, [pc, #292]	; (80016e4 <main+0x3f0>)
 80015c0:	f014 fd0c 	bl	8015fdc <puts>
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)
 80015c4:	4848      	ldr	r0, [pc, #288]	; (80016e8 <main+0x3f4>)
 80015c6:	4946      	ldr	r1, [pc, #280]	; (80016e0 <main+0x3ec>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	f006 fda5 	bl	8008118 <f_mount>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d1ae      	bne.n	8001530 <main+0x23c>
			/*if(f_mkfs((TCHAR const*)SDPath, 0, 0) != FR_OK)
			{
				/* FatFs Format Error /
				Error_Handler();
			}*/
			if(f_setlabel("LOG DISK") != FR_OK)
 80015d2:	4846      	ldr	r0, [pc, #280]	; (80016ec <main+0x3f8>)
 80015d4:	f006 fe2c 	bl	8008230 <f_setlabel>
 80015d8:	4602      	mov	r2, r0
 80015da:	2800      	cmp	r0, #0
 80015dc:	d1a8      	bne.n	8001530 <main+0x23c>
			{
				Error_Handler();
			}
			else{
				if(f_getlabel((TCHAR const*)SDPath, Disk_label, 0) != FR_OK)
 80015de:	4840      	ldr	r0, [pc, #256]	; (80016e0 <main+0x3ec>)
 80015e0:	a903      	add	r1, sp, #12
 80015e2:	f006 fdd3 	bl	800818c <f_getlabel>
 80015e6:	4604      	mov	r4, r0
 80015e8:	2800      	cmp	r0, #0
 80015ea:	d1a1      	bne.n	8001530 <main+0x23c>
				{
					Error_Handler();
				}
				else{
					printf("Disk Label: %s\n", Disk_label);
 80015ec:	a903      	add	r1, sp, #12
 80015ee:	4840      	ldr	r0, [pc, #256]	; (80016f0 <main+0x3fc>)
 80015f0:	f014 fcb2 	bl	8015f58 <printf>
				}
			}
		}
		Disk_State = disk_status(0);
 80015f4:	4620      	mov	r0, r4
 80015f6:	f006 f81f 	bl	8007638 <disk_status>
 80015fa:	4601      	mov	r1, r0
		printf("Disk_State: %d\n", Disk_State);
 80015fc:	483d      	ldr	r0, [pc, #244]	; (80016f4 <main+0x400>)
 80015fe:	f014 fcab 	bl	8015f58 <printf>
		Error_Handler();
	}
	
	/*	Enable the Modbus Protocol Stack --------------------------------*/
	if((eMBMasterEnable()) != MB_ENOERR){
		printf("eStatus Master Enable: %s\n", eStatus ? "error": "no'error");
 8001602:	2501      	movs	r5, #1
		
		//	printf("Compiled HAL\n");
		
		//	test_Cplusplus();
		
		if(xtNeedPoll == true){
 8001604:	4e3c      	ldr	r6, [pc, #240]	; (80016f8 <main+0x404>)
 8001606:	7833      	ldrb	r3, [r6, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d04a      	beq.n	80016a2 <main+0x3ae>
			printf("xtNeedPoll: %s\n", xtNeedPoll ? "true" : "false");
 800160c:	493b      	ldr	r1, [pc, #236]	; (80016fc <main+0x408>)
 800160e:	483c      	ldr	r0, [pc, #240]	; (8001700 <main+0x40c>)
			counter++;
 8001610:	3501      	adds	r5, #1
		//	printf("Compiled HAL\n");
		
		//	test_Cplusplus();
		
		if(xtNeedPoll == true){
			printf("xtNeedPoll: %s\n", xtNeedPoll ? "true" : "false");
 8001612:	f014 fca1 	bl	8015f58 <printf>
			counter++;
 8001616:	b2ad      	uxth	r5, r5
			
			for(i = 0; i <= xtholdingNRegs; i++){
 8001618:	2100      	movs	r1, #0
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <main+0x410>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b28c      	uxth	r4, r1
 8001620:	42a3      	cmp	r3, r4
 8001622:	f101 0701 	add.w	r7, r1, #1
 8001626:	d311      	bcc.n	800164c <main+0x358>
					printf("usMRegHoldBuf[%d]: %d\n", xtholdingRegIndex + i, usMRegHoldBuf[ucMBMasterGetDestAddress() - 1][xtholdingRegIndex + i]);
 8001628:	f001 fdb2 	bl	8003190 <ucMBMasterGetDestAddress>
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <main+0x414>)
 800162e:	4a37      	ldr	r2, [pc, #220]	; (800170c <main+0x418>)
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	3801      	subs	r0, #1
 8001634:	4421      	add	r1, r4
 8001636:	f44f 7316 	mov.w	r3, #600	; 0x258
 800163a:	fb03 1300 	mla	r3, r3, r0, r1
 800163e:	4834      	ldr	r0, [pc, #208]	; (8001710 <main+0x41c>)
 8001640:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001644:	f014 fc88 	bl	8015f58 <printf>
 8001648:	4639      	mov	r1, r7
 800164a:	e7e6      	b.n	800161a <main+0x326>
 800164c:	2100      	movs	r1, #0
			}
			/*for(i = 0; i <= xtinputNRegs; i++){
					printf("usMRegInBuf[%d]: %d\n", xtinputRegIndex + i, usMRegInBuf[ucMBMasterGetDestAddress() - 1][xtinputRegIndex + i]);
			}*/
			for(i = 0; i <= xtCoilNRegs; i++){
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <main+0x420>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	b28c      	uxth	r4, r1
 8001654:	42a3      	cmp	r3, r4
 8001656:	f101 0701 	add.w	r7, r1, #1
 800165a:	d30f      	bcc.n	800167c <main+0x388>
					printf("ucMCoilBuf[%d]: %d\n", xtCoilRegIndex + i, ucMCoilBuf[ucMBMasterGetDestAddress() - 1][xtCoilRegIndex + i]);
 800165c:	f001 fd98 	bl	8003190 <ucMBMasterGetDestAddress>
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <main+0x424>)
 8001662:	4a2e      	ldr	r2, [pc, #184]	; (800171c <main+0x428>)
 8001664:	8819      	ldrh	r1, [r3, #0]
 8001666:	3801      	subs	r0, #1
 8001668:	4421      	add	r1, r4
 800166a:	234b      	movs	r3, #75	; 0x4b
 800166c:	fb03 1300 	mla	r3, r3, r0, r1
 8001670:	482b      	ldr	r0, [pc, #172]	; (8001720 <main+0x42c>)
 8001672:	5cd2      	ldrb	r2, [r2, r3]
 8001674:	f014 fc70 	bl	8015f58 <printf>
 8001678:	4639      	mov	r1, r7
 800167a:	e7e8      	b.n	800164e <main+0x35a>
			}

			switch(counter % 2){
 800167c:	07eb      	lsls	r3, r5, #31
				
				break;
			case 1:
				//errorCode = eMBMasterReqReadHoldingRegister(10, 147, 6, -1);
				//errorCode = eMBMasterReqReadInputRegister(10, 497, 15, -1);
				errorCode = eMBMasterReqReadCoils(10,79,25,-1);
 800167e:	f04f 000a 	mov.w	r0, #10
			}*/
			for(i = 0; i <= xtCoilNRegs; i++){
					printf("ucMCoilBuf[%d]: %d\n", xtCoilRegIndex + i, ucMCoilBuf[ucMBMasterGetDestAddress() - 1][xtCoilRegIndex + i]);
			}

			switch(counter % 2){
 8001682:	d406      	bmi.n	8001692 <main+0x39e>
			case 0:
				//errorCode = eMBMasterReqReadInputRegister(10, 497, 6, -1);
				errorCode = eMBMasterReqReadHoldingRegister(10, 147, 20, -1);
 8001684:	2193      	movs	r1, #147	; 0x93
 8001686:	2214      	movs	r2, #20
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	f002 f96a 	bl	8003964 <eMBMasterReqReadHoldingRegister>
				
				break;
 8001690:	e005      	b.n	800169e <main+0x3aa>
			case 1:
				//errorCode = eMBMasterReqReadHoldingRegister(10, 147, 6, -1);
				//errorCode = eMBMasterReqReadInputRegister(10, 497, 15, -1);
				errorCode = eMBMasterReqReadCoils(10,79,25,-1);
 8001692:	214f      	movs	r1, #79	; 0x4f
 8001694:	2219      	movs	r2, #25
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	f001 ffeb 	bl	8003674 <eMBMasterReqReadCoils>
				break;
			default:
				break;
			}
			
			xtNeedPoll = false;
 800169e:	2300      	movs	r3, #0
 80016a0:	7033      	strb	r3, [r6, #0]
		}
		
		if(modbus_Exec == true){
 80016a2:	4c20      	ldr	r4, [pc, #128]	; (8001724 <main+0x430>)
 80016a4:	7823      	ldrb	r3, [r4, #0]
 80016a6:	b11b      	cbz	r3, 80016b0 <main+0x3bc>
			eStatus = eMBMasterPoll();
 80016a8:	f001 fc76 	bl	8002f98 <eMBMasterPoll>
			
			/*	Clear Flag */
			modbus_Exec = false;
 80016ac:	2300      	movs	r3, #0
 80016ae:	7023      	strb	r3, [r4, #0]
		}
		
		if(gui_Exec == true){
 80016b0:	4c1d      	ldr	r4, [pc, #116]	; (8001728 <main+0x434>)
 80016b2:	7823      	ldrb	r3, [r4, #0]
 80016b4:	b13b      	cbz	r3, 80016c6 <main+0x3d2>
			WM_InvalidateWindow(hWinFanImg);
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <main+0x438>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f00a fe53 	bl	800c364 <WM_InvalidateWindow>
			GUI_Exec();
 80016be:	f00e ff45 	bl	801054c <GUI_Exec>
			//eStatus = eMBMasterPoll();
			//printf("SystemCoreClock: %d\n", SystemCoreClock);
			
			/*	Clear Flag */
			gui_Exec = false;
 80016c2:	2300      	movs	r3, #0
 80016c4:	7023      	strb	r3, [r4, #0]
		}
		
		if(Touch_Flagged == true){
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <main+0x43c>)
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d09a      	beq.n	8001604 <main+0x310>
			//UB_STemWIN_updateTouch();
			
			/*	Clear Flag */
			Touch_Flagged = false;
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e797      	b.n	8001604 <main+0x310>
 80016d4:	0801b1c2 	.word	0x0801b1c2
 80016d8:	0801b1d6 	.word	0x0801b1d6
 80016dc:	20000008 	.word	0x20000008
 80016e0:	2001754c 	.word	0x2001754c
 80016e4:	0801b1f1 	.word	0x0801b1f1
 80016e8:	2001758c 	.word	0x2001758c
 80016ec:	0801b205 	.word	0x0801b205
 80016f0:	0801b20e 	.word	0x0801b20e
 80016f4:	0801b21e 	.word	0x0801b21e
 80016f8:	20000004 	.word	0x20000004
 80016fc:	0801b23e 	.word	0x0801b23e
 8001700:	0801b22e 	.word	0x0801b22e
 8001704:	2000d392 	.word	0x2000d392
 8001708:	2000d39e 	.word	0x2000d39e
 800170c:	2000d3a0 	.word	0x2000d3a0
 8001710:	0801b243 	.word	0x0801b243
 8001714:	2000d398 	.word	0x2000d398
 8001718:	2000d39c 	.word	0x2000d39c
 800171c:	20017008 	.word	0x20017008
 8001720:	0801b25a 	.word	0x0801b25a
 8001724:	2000d38c 	.word	0x2000d38c
 8001728:	2000d38d 	.word	0x2000d38d
 800172c:	20017910 	.word	0x20017910
 8001730:	2000d38e 	.word	0x2000d38e

08001734 <eMBMasterRegInputCB>:
  * @param	usNRegs
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	4615      	mov	r5, r2
 8001738:	460c      	mov	r4, r1
 800173a:	4606      	mov	r6, r0
    uint16_t          REG_INPUT_START;
    uint16_t          REG_INPUT_NREGS;
    uint16_t          usRegInStart;
	uint8_t			MasterDestAddress;
	
	MasterDestAddress = ucMBMasterGetDestAddress();
 800173c:	f001 fd28 	bl	8003190 <ucMBMasterGetDestAddress>
 8001740:	4601      	mov	r1, r0
	printf("MasterDestAddress: %d\n", MasterDestAddress);
 8001742:	4816      	ldr	r0, [pc, #88]	; (800179c <eMBMasterRegInputCB+0x68>)
 8001744:	f014 fc08 	bl	8015f58 <printf>
	
	xtinputNRegs = usNRegs;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <eMBMasterRegInputCB+0x6c>)
 800174a:	801d      	strh	r5, [r3, #0]

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 800174c:	f001 fd20 	bl	8003190 <ucMBMasterGetDestAddress>
    REG_INPUT_START = M_REG_INPUT_START;
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
    usRegInStart = usMRegInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 8001750:	1e63      	subs	r3, r4, #1
 8001752:	b29b      	uxth	r3, r3

    if ((usAddress >= REG_INPUT_START)
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8001754:	195a      	adds	r2, r3, r5
 8001756:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 800175a:	dc1d      	bgt.n	8001798 <eMBMasterRegInputCB+0x64>
    {
        iRegIndex = usAddress - usRegInStart;
		xtinputRegIndex = iRegIndex;
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <eMBMasterRegInputCB+0x70>)
 800175e:	8013      	strh	r3, [r2, #0]
 8001760:	192a      	adds	r2, r5, r4
 8001762:	b292      	uxth	r2, r2
 8001764:	1c5d      	adds	r5, r3, #1
 8001766:	b2ad      	uxth	r5, r5
        while (usNRegs > 0)
 8001768:	4295      	cmp	r5, r2
 800176a:	f106 0602 	add.w	r6, r6, #2
 800176e:	d011      	beq.n	8001794 <eMBMasterRegInputCB+0x60>
	MasterDestAddress = ucMBMasterGetDestAddress();
	printf("MasterDestAddress: %d\n", MasterDestAddress);
	
	xtinputNRegs = usNRegs;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8001770:	4f0d      	ldr	r7, [pc, #52]	; (80017a8 <eMBMasterRegInputCB+0x74>)
    {
        iRegIndex = usAddress - usRegInStart;
		xtinputRegIndex = iRegIndex;
        while (usNRegs > 0)
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8001772:	f816 4c02 	ldrb.w	r4, [r6, #-2]
	MasterDestAddress = ucMBMasterGetDestAddress();
	printf("MasterDestAddress: %d\n", MasterDestAddress);
	
	xtinputNRegs = usNRegs;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8001776:	1e41      	subs	r1, r0, #1
 8001778:	f44f 6e96 	mov.w	lr, #1200	; 0x4b0
 800177c:	fb0e 7101 	mla	r1, lr, r1, r7
    {
        iRegIndex = usAddress - usRegInStart;
		xtinputRegIndex = iRegIndex;
        while (usNRegs > 0)
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8001780:	0224      	lsls	r4, r4, #8
 8001782:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8001786:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 800178a:	433c      	orrs	r4, r7
 800178c:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
 8001790:	462b      	mov	r3, r5
 8001792:	e7e7      	b.n	8001764 <eMBMasterRegInputCB+0x30>
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
	eMBErrorCode    eStatus = MB_ENOERR;
 8001794:	2000      	movs	r0, #0
 8001796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            usNRegs--;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8001798:	2001      	movs	r0, #1
    }

    return eStatus;
}
 800179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800179c:	0801b26e 	.word	0x0801b26e
 80017a0:	2000d39a 	.word	0x2000d39a
 80017a4:	2000d390 	.word	0x2000d390
 80017a8:	20011ea0 	.word	0x20011ea0

080017ac <eMBMasterRegHoldingCB>:
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t *        pusRegHoldingBuf;
    uint16_t          REG_HOLDING_START;
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <eMBMasterRegHoldingCB+0x5c>)
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 80017b0:	460c      	mov	r4, r1
    uint16_t *        pusRegHoldingBuf;
    uint16_t          REG_HOLDING_START;
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;
 80017b2:	801a      	strh	r2, [r3, #0]
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 80017b4:	4615      	mov	r5, r2
 80017b6:	4607      	mov	r7, r0
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80017b8:	f001 fcea 	bl	8003190 <ucMBMasterGetDestAddress>
    usRegHoldStart = usMRegHoldStart;
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 80017bc:	1e63      	subs	r3, r4, #1
 80017be:	b29b      	uxth	r3, r3

    if ((usAddress >= REG_HOLDING_START)
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80017c0:	195a      	adds	r2, r3, r5
 80017c2:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 80017c6:	dc1d      	bgt.n	8001804 <eMBMasterRegHoldingCB+0x58>
    {
        iRegIndex = usAddress - usRegHoldStart;
		xtholdingRegIndex = iRegIndex;
 80017c8:	4a10      	ldr	r2, [pc, #64]	; (800180c <eMBMasterRegHoldingCB+0x60>)
 80017ca:	8013      	strh	r3, [r2, #0]
 80017cc:	192a      	adds	r2, r5, r4
 80017ce:	b292      	uxth	r2, r2
 80017d0:	1c5e      	adds	r6, r3, #1
 80017d2:	b2b6      	uxth	r6, r6
                usNRegs--;
            }
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 80017d4:	4296      	cmp	r6, r2
 80017d6:	f107 0702 	add.w	r7, r7, #2
 80017da:	d011      	beq.n	8001800 <eMBMasterRegHoldingCB+0x54>
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <eMBMasterRegHoldingCB+0x64>)
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80017de:	f817 5c02 	ldrb.w	r5, [r7, #-2]
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80017e2:	1e44      	subs	r4, r0, #1
 80017e4:	f44f 6e96 	mov.w	lr, #1200	; 0x4b0
 80017e8:	fb0e 1404 	mla	r4, lr, r4, r1
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80017ec:	022d      	lsls	r5, r5, #8
 80017ee:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 80017f2:	f817 1c01 	ldrb.w	r1, [r7, #-1]
 80017f6:	430d      	orrs	r5, r1
 80017f8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80017fc:	4633      	mov	r3, r6
 80017fe:	e7e7      	b.n	80017d0 <eMBMasterRegHoldingCB+0x24>
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8001800:	2000      	movs	r0, #0
 8001802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8001804:	2001      	movs	r0, #1
    }
    return eStatus;
}
 8001806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001808:	2000d392 	.word	0x2000d392
 800180c:	2000d39e 	.word	0x2000d39e
 8001810:	2000d3a0 	.word	0x2000d3a0

08001814 <eMBMasterRegCoilsCB>:
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 8001814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
	xtCoilNRegs = iNReg;
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <eMBMasterRegCoilsCB+0x78>)
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
 800181a:	08d7      	lsrs	r7, r2, #3
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 800181c:	460d      	mov	r5, r1
 800181e:	4614      	mov	r4, r2
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
 8001820:	1c7a      	adds	r2, r7, #1
	xtCoilNRegs = iNReg;
 8001822:	801a      	strh	r2, [r3, #0]
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 8001824:	4606      	mov	r6, r0
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
	xtCoilNRegs = iNReg;

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8001826:	f001 fcb3 	bl	8003190 <ucMBMasterGetDestAddress>

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 800182a:	1e69      	subs	r1, r5, #1
 800182c:	b289      	uxth	r1, r1

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 800182e:	190b      	adds	r3, r1, r4
 8001830:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001834:	dc27      	bgt.n	8001886 <eMBMasterRegCoilsCB+0x72>
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
	xtCoilNRegs = iNReg;

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <eMBMasterRegCoilsCB+0x7c>)
 8001838:	3801      	subs	r0, #1
 800183a:	f04f 084b 	mov.w	r8, #75	; 0x4b
 800183e:	fb08 3800 	mla	r8, r8, r0, r3

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (uint16_t) (usAddress - usCoilStart) / 8;
		xtCoilRegIndex = iRegIndex;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <eMBMasterRegCoilsCB+0x80>)
    usAddress--;

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (uint16_t) (usAddress - usCoilStart) / 8;
 8001844:	08c8      	lsrs	r0, r1, #3
		xtCoilRegIndex = iRegIndex;
 8001846:	8018      	strh	r0, [r3, #0]
        iRegBitIndex = (uint16_t) (usAddress - usCoilStart) % 8;
 8001848:	f001 0507 	and.w	r5, r1, #7
 800184c:	eb07 0b00 	add.w	fp, r7, r0
 8001850:	46b2      	mov	sl, r6
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 8001852:	4558      	cmp	r0, fp
 8001854:	d00c      	beq.n	8001870 <eMBMasterRegCoilsCB+0x5c>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8001856:	f100 0901 	add.w	r9, r0, #1
 800185a:	fa1f f989 	uxth.w	r9, r9
 800185e:	4440      	add	r0, r8
 8001860:	4629      	mov	r1, r5
 8001862:	2208      	movs	r2, #8
 8001864:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8001868:	f001 fed4 	bl	8003614 <xMBUtilSetBits>
 800186c:	4648      	mov	r0, r9
 800186e:	e7f0      	b.n	8001852 <eMBMasterRegCoilsCB+0x3e>
                iNReg--;
            }
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8001870:	f014 0207 	ands.w	r2, r4, #7
 8001874:	d004      	beq.n	8001880 <eMBMasterRegCoilsCB+0x6c>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8001876:	4440      	add	r0, r8
 8001878:	4629      	mov	r1, r5
 800187a:	5df3      	ldrb	r3, [r6, r7]
 800187c:	f001 feca 	bl	8003614 <xMBUtilSetBits>
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8001880:	2000      	movs	r0, #0
 8001882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8001886:	2001      	movs	r0, #1
 8001888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800188c:	2000d398 	.word	0x2000d398
 8001890:	20017008 	.word	0x20017008
 8001894:	2000d39c 	.word	0x2000d39c

08001898 <eMBMasterRegDiscreteCB>:
{
    ( void )pucRegBuffer;
    ( void )usAddress;
    ( void )usNDiscrete;
    return MB_ENOREG;
}
 8001898:	2001      	movs	r0, #1
 800189a:	4770      	bx	lr

0800189c <__io_putchar>:
/**
	* @brief  Retargets the C library printf function to the USART (GNU)
	* @param  None
	* @retval None
*/
int __io_putchar(int ch){
 800189c:	b510      	push	{r4, lr}
 800189e:	4604      	mov	r4, r0
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART */
	
	Debug_ITMDebugOutputChar(ch); // SWV
 80018a0:	b2c0      	uxtb	r0, r0
 80018a2:	f7ff fd07 	bl	80012b4 <Debug_ITMDebugOutputChar>
	
	return(ch);
}
 80018a6:	4620      	mov	r0, r4
 80018a8:	bd10      	pop	{r4, pc}

080018aa <__io_getchar>:
int __io_getchar(void){
	/* Place your implementation of fgetc here */
	/* e.g. read a character from the USART */
	
	return((int)-1);
}
 80018aa:	f04f 30ff 	mov.w	r0, #4294967295
 80018ae:	4770      	bx	lr

080018b0 <assert_failed>:
		*         where the assert_param error has occurred.
		* @param  file: pointer to the source file name
		* @param  line: assert_param error line source number
		* @retval None
	*/
	void assert_failed(uint8_t* file, uint32_t line){
 80018b0:	b508      	push	{r3, lr}
 80018b2:	4603      	mov	r3, r0
 80018b4:	460a      	mov	r2, r1
		printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 80018b6:	4802      	ldr	r0, [pc, #8]	; (80018c0 <assert_failed+0x10>)
 80018b8:	4619      	mov	r1, r3
 80018ba:	f014 fb4d 	bl	8015f58 <printf>
		
		while(1); /* Infinite loop */
 80018be:	e7fe      	b.n	80018be <assert_failed+0xe>
 80018c0:	0801b285 	.word	0x0801b285

080018c4 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 80018c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t SD_state = MSD_OK;
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80018c8:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <BSP_SD_Init+0x180>)
uint8_t BSP_SD_Init(void)
{ 
  uint8_t SD_state = MSD_OK;
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;
 80018ca:	4d5f      	ldr	r5, [pc, #380]	; (8001a48 <BSP_SD_Init+0x184>)

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80018cc:	2600      	movs	r6, #0
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 80018ce:	b08b      	sub	sp, #44	; 0x2c
  uint8_t SD_state = MSD_OK;
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80018d0:	e885 0048 	stmia.w	r5, {r3, r6}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f88d 3013 	strb.w	r3, [sp, #19]
  /*if(BSP_IO_ReadPin(SD_DETECT_PIN))
  {
    status = SD_NOT_PRESENT;
  }*/
  
  return status;
 80018da:	f89d 2013 	ldrb.w	r2, [sp, #19]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80018de:	60ae      	str	r6, [r5, #8]
  /*if(BSP_IO_ReadPin(SD_DETECT_PIN))
  {
    status = SD_NOT_PRESENT;
  }*/
  
  return status;
 80018e0:	b2d2      	uxtb	r2, r2
  
  /* Configure IO functionalities for SD detect pin */
  //BSP_IO_Init(); 
  
  /* Check if the SD card is plugged in the slot */
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80018e2:	429a      	cmp	r2, r3
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
  uSdHandle.Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80018e4:	60ee      	str	r6, [r5, #12]
  uSdHandle.Init.BusWide             = SDIO_BUS_WIDE_1B;
 80018e6:	612e      	str	r6, [r5, #16]
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018e8:	616e      	str	r6, [r5, #20]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 80018ea:	61ae      	str	r6, [r5, #24]
  
  /* Configure IO functionalities for SD detect pin */
  //BSP_IO_Init(); 
  
  /* Check if the SD card is plugged in the slot */
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80018ec:	d001      	beq.n	80018f2 <BSP_SD_Init+0x2e>
  {
    return MSD_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	e0a4      	b.n	8001a3c <BSP_SD_Init+0x178>
  static DMA_HandleTypeDef dmaTxHandle;
  GPIO_InitTypeDef GPIO_Init_Structure;
  SD_HandleTypeDef *hsd = &uSdHandle;
  
  /* Enable SDIO clock */
  __SDIO_CLK_ENABLE();
 80018f2:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <BSP_SD_Init+0x188>)
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 80018f4:	4856      	ldr	r0, [pc, #344]	; (8001a50 <BSP_SD_Init+0x18c>)
  static DMA_HandleTypeDef dmaTxHandle;
  GPIO_InitTypeDef GPIO_Init_Structure;
  SD_HandleTypeDef *hsd = &uSdHandle;
  
  /* Enable SDIO clock */
  __SDIO_CLK_ENABLE();
 80018f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80018f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80018fc:	6459      	str	r1, [r3, #68]	; 0x44
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 80018fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001900:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001904:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable GPIOs clock */
  __GPIOC_CLK_ENABLE();
 8001906:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001908:	f041 0104 	orr.w	r1, r1, #4
 800190c:	6319      	str	r1, [r3, #48]	; 0x30
  __GPIOD_CLK_ENABLE();
 800190e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001910:	f041 0108 	orr.w	r1, r1, #8
 8001914:	6319      	str	r1, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001918:	ac0a      	add	r4, sp, #40	; 0x28
  /* Enable GPIOs clock */
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800191a:	9306      	str	r3, [sp, #24]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
 800191c:	230c      	movs	r3, #12
 800191e:	9309      	str	r3, [sp, #36]	; 0x24
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001920:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001924:	f844 3d14 	str.w	r3, [r4, #-20]!
  __GPIOD_CLK_ENABLE();
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 8001928:	2703      	movs	r7, #3
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 800192a:	4621      	mov	r1, r4
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800192c:	9207      	str	r2, [sp, #28]
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
 800192e:	f04f 0804 	mov.w	r8, #4
  __GPIOD_CLK_ENABLE();
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 8001932:	9708      	str	r7, [sp, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8001934:	f005 fcc0 	bl	80072b8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8001938:	4621      	mov	r1, r4
 800193a:	4846      	ldr	r0, [pc, #280]	; (8001a54 <BSP_SD_Init+0x190>)
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
 800193c:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8001940:	f005 fcba 	bl	80072b8 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001944:	2105      	movs	r1, #5
 8001946:	4632      	mov	r2, r6
 8001948:	2031      	movs	r0, #49	; 0x31
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800194a:	4c43      	ldr	r4, [pc, #268]	; (8001a58 <BSP_SD_Init+0x194>)
  /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800194c:	f004 f86c 	bl	8005a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001950:	2031      	movs	r0, #49	; 0x31
 8001952:	f004 f8ab 	bl	8005aac <HAL_NVIC_EnableIRQ>
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaRxHandle.Instance = SD_DMAx_Rx_STREAM;
 800195a:	4840      	ldr	r0, [pc, #256]	; (8001a5c <BSP_SD_Init+0x198>)
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800195c:	61a3      	str	r3, [r4, #24]
  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800195e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001962:	f44f 6180 	mov.w	r1, #1024	; 0x400
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaRxHandle.Instance = SD_DMAx_Rx_STREAM;
 800196a:	6020      	str	r0, [r4, #0]
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800196c:	9300      	str	r3, [sp, #0]
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
 800196e:	f04f 0b20 	mov.w	fp, #32
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001976:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
 800197a:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dmaRxHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaRxHandle);
 800197e:	4620      	mov	r0, r4
  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8001980:	f8c4 c004 	str.w	ip, [r4, #4]
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001984:	6121      	str	r1, [r4, #16]
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001986:	6162      	str	r2, [r4, #20]
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001988:	6323      	str	r3, [r4, #48]	; 0x30
  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800198a:	f8cd c00c 	str.w	ip, [sp, #12]
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800198e:	9102      	str	r1, [sp, #8]
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001990:	9201      	str	r2, [sp, #4]
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001992:	60a6      	str	r6, [r4, #8]
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001994:	60e6      	str	r6, [r4, #12]
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
 8001996:	f8c4 b01c 	str.w	fp, [r4, #28]
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800199a:	f8c4 a020 	str.w	sl, [r4, #32]
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800199e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80019a2:	62a7      	str	r7, [r4, #40]	; 0x28
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
 80019a4:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaRxHandle.Instance = SD_DMAx_Rx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dmaRxHandle);
 80019a8:	65ac      	str	r4, [r5, #88]	; 0x58
 80019aa:	63a5      	str	r5, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaRxHandle);
 80019ac:	f004 fcb2 	bl	8006314 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
 80019b0:	4620      	mov	r0, r4
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80019b2:	4c2b      	ldr	r4, [pc, #172]	; (8001a60 <BSP_SD_Init+0x19c>)
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaRxHandle);
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
 80019b4:	f004 fbcc 	bl	8006150 <HAL_DMA_Init>
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaTxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80019b8:	9b00      	ldr	r3, [sp, #0]
 80019ba:	61a3      	str	r3, [r4, #24]
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80019bc:	2040      	movs	r0, #64	; 0x40
  dmaTxHandle.Init.Mode                = DMA_PFCTRL;
  dmaTxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80019be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80019c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80019c6:	9902      	ldr	r1, [sp, #8]
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c8:	9a01      	ldr	r2, [sp, #4]
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80019ca:	60a0      	str	r0, [r4, #8]
  dmaTxHandle.Init.Mode                = DMA_PFCTRL;
  dmaTxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80019cc:	6323      	str	r3, [r4, #48]	; 0x30
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dmaTxHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaTxHandle);
 80019ce:	4620      	mov	r0, r4
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaTxHandle.Instance = SD_DMAx_Tx_STREAM;
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <BSP_SD_Init+0x1a0>)
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80019d2:	f8c4 c004 	str.w	ip, [r4, #4]
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaTxHandle.Instance = SD_DMAx_Tx_STREAM;
 80019d6:	6023      	str	r3, [r4, #0]
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80019d8:	6121      	str	r1, [r4, #16]
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019da:	6162      	str	r2, [r4, #20]
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80019dc:	60e6      	str	r6, [r4, #12]
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaTxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dmaTxHandle.Init.Mode                = DMA_PFCTRL;
 80019de:	f8c4 b01c 	str.w	fp, [r4, #28]
  dmaTxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80019e2:	f8c4 a020 	str.w	sl, [r4, #32]
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80019e6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80019ea:	62a7      	str	r7, [r4, #40]	; 0x28
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
 80019ec:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaTxHandle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dmaTxHandle);
 80019f0:	65ec      	str	r4, [r5, #92]	; 0x5c
 80019f2:	63a5      	str	r5, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaTxHandle);
 80019f4:	f004 fc8e 	bl	8006314 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaTxHandle); 
 80019f8:	4620      	mov	r0, r4
 80019fa:	f004 fba9 	bl	8006150 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 6, 0);
 80019fe:	2106      	movs	r1, #6
 8001a00:	4632      	mov	r2, r6
 8001a02:	203b      	movs	r0, #59	; 0x3b
 8001a04:	f004 f810 	bl	8005a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8001a08:	203b      	movs	r0, #59	; 0x3b
 8001a0a:	f004 f84f 	bl	8005aac <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 6, 0);
 8001a0e:	2106      	movs	r1, #6
 8001a10:	2045      	movs	r0, #69	; 0x45
 8001a12:	4632      	mov	r2, r6
 8001a14:	f004 f808 	bl	8005a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8001a18:	2045      	movs	r0, #69	; 0x45
 8001a1a:	f004 f847 	bl	8005aac <HAL_NVIC_EnableIRQ>
    return MSD_ERROR;
  }
  
  /* HAL SD initialization */
  SD_MspInit();
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 8001a1e:	4628      	mov	r0, r5
 8001a20:	4911      	ldr	r1, [pc, #68]	; (8001a68 <BSP_SD_Init+0x1a4>)
 8001a22:	f003 f841 	bl	8004aa8 <HAL_SD_Init>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	f47f af61 	bne.w	80018ee <BSP_SD_Init+0x2a>
  
  /* Configure SD Bus width */
  if(SD_state == MSD_OK)
  {
    /* Enable wide operation */
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDIO_BUS_WIDE_4B) != SD_OK)
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a32:	f003 fa1b 	bl	8004e6c <HAL_SD_WideBusOperation_Config>
  //BSP_IO_Init(); 
  
  /* Check if the SD card is plugged in the slot */
  if(BSP_SD_IsDetected() != SD_PRESENT)
  {
    return MSD_ERROR;
 8001a36:	3000      	adds	r0, #0
 8001a38:	bf18      	it	ne
 8001a3a:	2001      	movne	r0, #1
      SD_state = MSD_OK;
    }
  }
  
  return  SD_state;
}
 8001a3c:	b00b      	add	sp, #44	; 0x2c
 8001a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a42:	bf00      	nop
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	20016a48 	.word	0x20016a48
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	20016aa8 	.word	0x20016aa8
 8001a5c:	40026458 	.word	0x40026458
 8001a60:	200169a0 	.word	0x200169a0
 8001a64:	400264a0 	.word	0x400264a0
 8001a68:	200169f0 	.word	0x200169f0

08001a6c <BSP_SD_ReadBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8001a6c:	b507      	push	{r0, r1, r2, lr}
 8001a6e:	4601      	mov	r1, r0
  if(HAL_SD_ReadBlocks(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)
 8001a70:	9804      	ldr	r0, [sp, #16]
 8001a72:	9000      	str	r0, [sp, #0]
 8001a74:	9805      	ldr	r0, [sp, #20]
 8001a76:	9001      	str	r0, [sp, #4]
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <BSP_SD_ReadBlocks+0x20>)
 8001a7a:	f003 faa4 	bl	8004fc6 <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8001a7e:	3000      	adds	r0, #0
 8001a80:	bf18      	it	ne
 8001a82:	2001      	movne	r0, #1
 8001a84:	b003      	add	sp, #12
 8001a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a8a:	bf00      	nop
 8001a8c:	20016a48 	.word	0x20016a48

08001a90 <BSP_SD_WriteBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8001a90:	b507      	push	{r0, r1, r2, lr}
 8001a92:	4601      	mov	r1, r0
  if(HAL_SD_WriteBlocks(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)
 8001a94:	9804      	ldr	r0, [sp, #16]
 8001a96:	9000      	str	r0, [sp, #0]
 8001a98:	9805      	ldr	r0, [sp, #20]
 8001a9a:	9001      	str	r0, [sp, #4]
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <BSP_SD_WriteBlocks+0x20>)
 8001a9e:	f003 fb53 	bl	8005148 <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8001aa2:	3000      	adds	r0, #0
 8001aa4:	bf18      	it	ne
 8001aa6:	2001      	movne	r0, #1
 8001aa8:	b003      	add	sp, #12
 8001aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aae:	bf00      	nop
 8001ab0:	20016a48 	.word	0x20016a48

08001ab4 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 8001ab4:	4801      	ldr	r0, [pc, #4]	; (8001abc <BSP_SD_GetStatus+0x8>)
 8001ab6:	f003 bc3d 	b.w	8005334 <HAL_SD_GetStatus>
 8001aba:	bf00      	nop
 8001abc:	20016a48 	.word	0x20016a48

08001ac0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
 8001ac0:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 8001ac2:	4801      	ldr	r0, [pc, #4]	; (8001ac8 <BSP_SD_GetCardInfo+0x8>)
 8001ac4:	f002 bea8 	b.w	8004818 <HAL_SD_Get_CardInfo>
 8001ac8:	20016a48 	.word	0x20016a48

08001acc <HAL_TIM_Base_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001acc:	b508      	push	{r3, lr}
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_4_CLK_ENABLE();
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_TIM_Base_MspInit+0x38>)
 8001ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad2:	f042 0204 	orr.w	r2, r2, #4
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
  TIMx_5_CLK_ENABLE();
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ada:	f042 0208 	orr.w	r2, r2, #8
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
  
  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_4_IRQn, 4, 0);
 8001ae0:	201e      	movs	r0, #30
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f003 ff9f 	bl	8005a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIMx_5_IRQn, 4, 1);
 8001aea:	2032      	movs	r0, #50	; 0x32
 8001aec:	2104      	movs	r1, #4
 8001aee:	2201      	movs	r2, #1
 8001af0:	f003 ff9a 	bl	8005a28 <HAL_NVIC_SetPriority>
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_4_IRQn);
 8001af4:	201e      	movs	r0, #30
 8001af6:	f003 ffd9 	bl	8005aac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIMx_5_IRQn);
 8001afa:	2032      	movs	r0, #50	; 0x32
}
 8001afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(TIMx_4_IRQn, 4, 0);
  HAL_NVIC_SetPriority(TIMx_5_IRQn, 4, 1);
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_4_IRQn);
  HAL_NVIC_EnableIRQ(TIMx_5_IRQn);
 8001b00:	f003 bfd4 	b.w	8005aac <HAL_NVIC_EnableIRQ>
 8001b04:	40023800 	.word	0x40023800

08001b08 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param htim: TIM handle pointer
  * @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef   GPIO_InitStruct;
	
	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* TIMx Peripheral clock enable */
	TIMx_CLK_ENABLE();
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_TIM_PWM_MspInit+0x38>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
	
	GPIO_InitStruct.Pin = GPIO_PIN_CHANNEL1;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c>)
{
	GPIO_InitTypeDef   GPIO_InitStruct;
	
	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* TIMx Peripheral clock enable */
	TIMx_CLK_ENABLE();
 8001b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
    
	/* Enable GPIO Channels Clock */
	TIMx_CHANNEL_GPIO_PORT();
 8001b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b18:	f042 0210 	orr.w	r2, r2, #16
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
	
	/*##-2- Configure I/Os #####################################################*/
	/* Configure PE.9 (TIM1_Channel1) in output, push-pull, alternate function mode
	*/
	/* Common configuration for all channels */
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
	
	GPIO_InitStruct.Pin = GPIO_PIN_CHANNEL1;
 8001b26:	a906      	add	r1, sp, #24
	/* Configure PE.9 (TIM1_Channel1) in output, push-pull, alternate function mode
	*/
	/* Common configuration for all channels */
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b2c:	9305      	str	r3, [sp, #20]
	
	GPIO_InitStruct.Pin = GPIO_PIN_CHANNEL1;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	f841 3d14 	str.w	r3, [r1, #-20]!
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b34:	f005 fbc0 	bl	80072b8 <HAL_GPIO_Init>
}
 8001b38:	b007      	add	sp, #28
 8001b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_UART_MspInit>:
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 8001b48:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
	*           - NVIC configuration for DMA interrupt request enable
	* @param huart: UART handle pointer
	* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
	USARTx_RX_GPIO_CLK_ENABLE();
 8001b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001b56:	4c24      	ldr	r4, [pc, #144]	; (8001be8 <HAL_UART_MspInit+0xa0>)
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
	USARTx_RX_GPIO_CLK_ENABLE();
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Enable USART2 clock */
	USARTx_CLK_ENABLE();
 8001b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b60:	f042 0210 	orr.w	r2, r2, #16
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
	/*	Enable RS485 dir clock */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	*           - NVIC configuration for DMA interrupt request enable
	* @param huart: UART handle pointer
	* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001b68:	b087      	sub	sp, #28
	USARTx_TX_GPIO_CLK_ENABLE();
	USARTx_RX_GPIO_CLK_ENABLE();
	/* Enable USART2 clock */
	USARTx_CLK_ENABLE();
	/*	Enable RS485 dir clock */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	f042 0204 	orr.w	r2, r2, #4
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
	//DMAx_CLK_ENABLE();   
	
	/*##-2- Configure peripheral GPIO ##########################################*/  
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = USARTx_TX_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001b70:	2602      	movs	r6, #2
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001b72:	2500      	movs	r5, #0
	/* Enable DMA1 clock */
	//DMAx_CLK_ENABLE();   
	
	/*##-2- Configure peripheral GPIO ##########################################*/  
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001b74:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001b78:	2707      	movs	r7, #7
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	a901      	add	r1, sp, #4
	/* Enable DMA1 clock */
	//DMAx_CLK_ENABLE();   
	
	/*##-2- Configure peripheral GPIO ##########################################*/  
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001b7e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001b80:	9705      	str	r7, [sp, #20]
	//DMAx_CLK_ENABLE();   
	
	/*##-2- Configure peripheral GPIO ##########################################*/  
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = USARTx_TX_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001b82:	9602      	str	r6, [sp, #8]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001b84:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001b86:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001b88:	f005 fb96 	bl	80072b8 <HAL_GPIO_Init>
    
	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001b8c:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_HIGH;
	GPIO_InitStruct.Pull	= GPIO_NOPULL;
	
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	4f17      	ldr	r7, [pc, #92]	; (8001bec <HAL_UART_MspInit+0xa4>)
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
    
	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001b94:	4620      	mov	r0, r4
 8001b96:	a901      	add	r1, sp, #4
	
	/* RS485 dir pin */
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
 8001b98:	2401      	movs	r4, #1
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
    
	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001b9a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001b9c:	f005 fb8c 	bl	80072b8 <HAL_GPIO_Init>
	
	/* RS485 dir pin */
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_HIGH;
 8001ba0:	2303      	movs	r3, #3
	GPIO_InitStruct.Pull	= GPIO_NOPULL;
	
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	4638      	mov	r0, r7
 8001ba4:	a901      	add	r1, sp, #4
    
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
	
	/* RS485 dir pin */
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_HIGH;
 8001ba6:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
	
	/* RS485 dir pin */
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
 8001ba8:	9402      	str	r4, [sp, #8]
	GPIO_InitStruct.Speed	= GPIO_SPEED_HIGH;
	GPIO_InitStruct.Pull	= GPIO_NOPULL;
 8001baa:	9503      	str	r5, [sp, #12]
	
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
 8001bac:	9401      	str	r4, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f005 fb83 	bl	80072b8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin		= GPIO_PIN_1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	4638      	mov	r0, r7
 8001bb4:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull	= GPIO_NOPULL;
	
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	
	GPIO_InitStruct.Pin		= GPIO_PIN_1;
 8001bb6:	9601      	str	r6, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f005 fb7e 	bl	80072b8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	462a      	mov	r2, r5
 8001bc2:	f005 fcb9 	bl	8007538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001bc6:	4638      	mov	r0, r7
 8001bc8:	4631      	mov	r1, r6
 8001bca:	4622      	mov	r2, r4
 8001bcc:	f005 fcb4 	bl	8007538 <HAL_GPIO_WritePin>
	/* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
	//HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 2, 0);   
	//HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
	
	/* NVIC configuration for USART TC interrupt */
	HAL_NVIC_SetPriority(USARTx_IRQn, 1, 0);
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	462a      	mov	r2, r5
 8001bd4:	2025      	movs	r0, #37	; 0x25
 8001bd6:	f003 ff27 	bl	8005a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8001bda:	2025      	movs	r0, #37	; 0x25
 8001bdc:	f003 ff66 	bl	8005aac <HAL_NVIC_EnableIRQ>
}
 8001be0:	b007      	add	sp, #28
 8001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020800 	.word	0x40020800

08001bf0 <HAL_I2C_MspInit>:
	*           - DMA configuration for transmission request by peripheral 
	*           - NVIC configuration for DMA interrupt request enable
	* @param hi2c: I2C handle pointer
	* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8001bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/*##-1- Enable GPIO Clocks #################################################*/
	/* Enable GPIO TX/RX clock */
	I2Cx_SCL_GPIO_CLK_ENABLE();
 8001bf4:	4c26      	ldr	r4, [pc, #152]	; (8001c90 <HAL_I2C_MspInit+0xa0>)
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001bf6:	4e27      	ldr	r6, [pc, #156]	; (8001c94 <HAL_I2C_MspInit+0xa4>)
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/*##-1- Enable GPIO Clocks #################################################*/
	/* Enable GPIO TX/RX clock */
	I2Cx_SCL_GPIO_CLK_ENABLE();
 8001bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	6323      	str	r3, [r4, #48]	; 0x30
	I2Cx_SDA_GPIO_CLK_ENABLE();
 8001c00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	6323      	str	r3, [r4, #48]	; 0x30
	/* PORTC-Reset pin bus enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	6b23      	ldr	r3, [r4, #48]	; 0x30
	*           - DMA configuration for transmission request by peripheral 
	*           - NVIC configuration for DMA interrupt request enable
	* @param hi2c: I2C handle pointer
	* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8001c0a:	b087      	sub	sp, #28
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8001c0c:	f04f 0904 	mov.w	r9, #4
	/*##-1- Enable GPIO Clocks #################################################*/
	/* Enable GPIO TX/RX clock */
	I2Cx_SCL_GPIO_CLK_ENABLE();
	I2Cx_SDA_GPIO_CLK_ENABLE();
	/* PORTC-Reset pin bus enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6323      	str	r3, [r4, #48]	; 0x30
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001c16:	2501      	movs	r5, #1
	
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001c18:	2312      	movs	r3, #18
	__HAL_RCC_GPIOC_CLK_ENABLE();
	
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8001c1a:	f04f 0840 	mov.w	r8, #64	; 0x40
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001c1e:	2702      	movs	r7, #2
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001c20:	4630      	mov	r0, r6
 8001c22:	eb0d 0109 	add.w	r1, sp, r9
	
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001c26:	9302      	str	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
	
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8001c28:	f8cd 8004 	str.w	r8, [sp, #4]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001c2c:	9704      	str	r7, [sp, #16]
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001c2e:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8001c30:	f8cd 9014 	str.w	r9, [sp, #20]
	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001c34:	f005 fb40 	bl	80072b8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001c38:	462a      	mov	r2, r5
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	f005 fc7b 	bl	8007538 <HAL_GPIO_WritePin>
	
	/* I2C RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8001c42:	f44f 7800 	mov.w	r8, #512	; 0x200
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001c46:	4630      	mov	r0, r6
 8001c48:	eb0d 0109 	add.w	r1, sp, r9
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	
	/* I2C RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8001c4c:	f8cd 8004 	str.w	r8, [sp, #4]
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8001c50:	f8cd 9014 	str.w	r9, [sp, #20]
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001c54:	f005 fb30 	bl	80072b8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001c58:	462a      	mov	r2, r5
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	4641      	mov	r1, r8
 8001c5e:	f005 fc6b 	bl	8007538 <HAL_GPIO_WritePin>
	
	/* Init Reset Pin Touch */
	GPIO_InitStruct.Pin		= GPIO_PIN_3;
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_FAST;
 8001c62:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	4f0c      	ldr	r7, [pc, #48]	; (8001c98 <HAL_I2C_MspInit+0xa8>)
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	
	/* Init Reset Pin Touch */
	GPIO_InitStruct.Pin		= GPIO_PIN_3;
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
 8001c66:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	
	/* Init Reset Pin Touch */
	GPIO_InitStruct.Pin		= GPIO_PIN_3;
 8001c68:	2608      	movs	r6, #8
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_FAST;
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	eb0d 0109 	add.w	r1, sp, r9
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	
	/* Init Reset Pin Touch */
	GPIO_InitStruct.Pin		= GPIO_PIN_3;
 8001c70:	9601      	str	r6, [sp, #4]
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_FAST;
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
 8001c72:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f005 fb20 	bl	80072b8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001c78:	4638      	mov	r0, r7
 8001c7a:	4631      	mov	r1, r6
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	f005 fc5b 	bl	8007538 <HAL_GPIO_WritePin>
	
	/*##-3- Enable peripheral Clock ############################################*/
	/* Enable I2C1 clock */
	I2Cx_CLK_ENABLE();
 8001c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c88:	6423      	str	r3, [r4, #64]	; 0x40
	
}
 8001c8a:	b007      	add	sp, #28
 8001c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800

08001c9c <HAL_SRAM_MspInit>:
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Clock Enable FSMC
	__HAL_RCC_FMC_CLK_ENABLE();
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_SRAM_MspInit+0x78>)
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001c9e:	481e      	ldr	r0, [pc, #120]	; (8001d18 <HAL_SRAM_MspInit+0x7c>)
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Clock Enable FSMC
	__HAL_RCC_FMC_CLK_ENABLE();
 8001ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
/**
	* @brief SRAM MSP Initialization
	* @param  handle to sram
	* @retval None
*/
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 8001ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Clock Enable FSMC
	__HAL_RCC_FMC_CLK_ENABLE();
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
	
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin		= GPIO_PIN_1;
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001cac:	4f1b      	ldr	r7, [pc, #108]	; (8001d1c <HAL_SRAM_MspInit+0x80>)
	
	// Clock Enable FSMC
	__HAL_RCC_FMC_CLK_ENABLE();
	
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	f042 0208 	orr.w	r2, r2, #8
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb6:	f042 0210 	orr.w	r2, r2, #16
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
/**
	* @brief SRAM MSP Initialization
	* @param  handle to sram
	* @retval None
*/
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 8001cbe:	b087      	sub	sp, #28
	__HAL_RCC_FMC_CLK_ENABLE();
	
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	f042 0202 	orr.w	r2, r2, #2
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
	
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
	GPIO_InitStructure.Speed     = GPIO_SPEED_HIGH;
 8001cc6:	2303      	movs	r3, #3
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
 8001cc8:	ac06      	add	r4, sp, #24
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
	GPIO_InitStructure.Speed     = GPIO_SPEED_HIGH;
 8001cca:	9304      	str	r3, [sp, #16]
	GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001ccc:	230c      	movs	r3, #12
 8001cce:	9305      	str	r3, [sp, #20]
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
 8001cd0:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001cd4:	f844 3d14 	str.w	r3, [r4, #-20]!
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 8001cd8:	2602      	movs	r6, #2
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8001cda:	2501      	movs	r5, #1
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001cdc:	4621      	mov	r1, r4
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 8001cde:	9602      	str	r6, [sp, #8]
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8001ce0:	9503      	str	r5, [sp, #12]
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001ce2:	f005 fae9 	bl	80072b8 <HAL_GPIO_Init>
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001ce6:	f64f 7388 	movw	r3, #65416	; 0xff88
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001cea:	4621      	mov	r1, r4
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <HAL_SRAM_MspInit+0x84>)
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001cee:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001cf0:	f005 fae2 	bl	80072b8 <HAL_GPIO_Init>
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin		= GPIO_PIN_1;
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	4621      	mov	r1, r4
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin		= GPIO_PIN_1;
 8001cf8:	9601      	str	r6, [sp, #4]
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
 8001cfa:	9502      	str	r5, [sp, #8]
	GPIO_InitStructure.Speed	= GPIO_SPEED_FAST;
 8001cfc:	9604      	str	r6, [sp, #16]
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
 8001cfe:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d00:	f005 fada 	bl	80072b8 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001d04:	4638      	mov	r0, r7
 8001d06:	4631      	mov	r1, r6
 8001d08:	462a      	mov	r2, r5
 8001d0a:	f005 fc15 	bl	8007538 <HAL_GPIO_WritePin>
	
}
 8001d0e:	b007      	add	sp, #28
 8001d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
*/
void HAL_MspInit(void)
{
 8001d24:	4770      	bx	lr

08001d26 <_close>:
    }
}

int _close(int file) {
    return -1;
}
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2a:	4770      	bx	lr

08001d2c <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 8001d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d30:	604b      	str	r3, [r1, #4]
    return 0;
}
 8001d32:	2000      	movs	r0, #0
 8001d34:	4770      	bx	lr

08001d36 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
    return 1;
}
 8001d36:	2001      	movs	r0, #1
 8001d38:	4770      	bx	lr
	...

08001d3c <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
    switch (file){
 8001d3c:	2802      	cmp	r0, #2
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 8001d3e:	bf81      	itttt	hi
 8001d40:	4b03      	ldrhi	r3, [pc, #12]	; (8001d50 <_isatty+0x14>)
 8001d42:	2209      	movhi	r2, #9
        return 0;
 8001d44:	2000      	movhi	r0, #0
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 8001d46:	601a      	strhi	r2, [r3, #0]
int _isatty(int file) {
    switch (file){
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 8001d48:	bf98      	it	ls
 8001d4a:	2001      	movls	r0, #1
    default:
        //errno = ENOTTY;
        errno = EBADF;
        return 0;
    }
}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20017b04 	.word	0x20017b04

08001d54 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
    errno = EINVAL;
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <_kill+0xc>)
 8001d56:	2216      	movs	r2, #22
 8001d58:	601a      	str	r2, [r3, #0]
    return (-1);
}
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5e:	4770      	bx	lr
 8001d60:	20017b04 	.word	0x20017b04

08001d64 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
    return 0;
}
 8001d64:	2000      	movs	r0, #0
 8001d66:	4770      	bx	lr

08001d68 <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	460e      	mov	r6, r1
 8001d6c:	4614      	mov	r4, r2
    int n;
    int num = 0;
    switch (file) {
 8001d6e:	b940      	cbnz	r0, 8001d82 <_read+0x1a>
 8001d70:	460d      	mov	r5, r1
 8001d72:	1bab      	subs	r3, r5, r6
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8001d74:	42a3      	cmp	r3, r4
 8001d76:	da0a      	bge.n	8001d8e <_read+0x26>
            *ptr++ = __io_getchar();
 8001d78:	f7ff fd97 	bl	80018aa <__io_getchar>
 8001d7c:	f805 0b01 	strb.w	r0, [r5], #1
 8001d80:	e7f7      	b.n	8001d72 <_read+0xa>
            num++;
        }
        break;
    default:
        errno = EBADF;
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <_read+0x2c>)
 8001d84:	2209      	movs	r2, #9
 8001d86:	601a      	str	r2, [r3, #0]
        return -1;
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
 8001d8e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    }
    return num;
}
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	20017b04 	.word	0x20017b04

08001d98 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
 8001d98:	3801      	subs	r0, #1
 8001d9a:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	460e      	mov	r6, r1
 8001da0:	4614      	mov	r4, r2
    int n;
    switch (file) {
 8001da2:	d80a      	bhi.n	8001dba <_write+0x22>
 8001da4:	460d      	mov	r5, r1
 8001da6:	1bab      	subs	r3, r5, r6
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8001da8:	42a3      	cmp	r3, r4
 8001daa:	da04      	bge.n	8001db6 <_write+0x1e>
					__io_putchar(*ptr++);
 8001dac:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001db0:	f7ff fd74 	bl	800189c <__io_putchar>
 8001db4:	e7f7      	b.n	8001da6 <_write+0xe>
 8001db6:	4620      	mov	r0, r4
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
        }
        break;
    default:
        errno = EBADF;
 8001dba:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <_write+0x30>)
 8001dbc:	2209      	movs	r2, #9
 8001dbe:	601a      	str	r2, [r3, #0]
        return -1;
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return len;
}
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20017b04 	.word	0x20017b04

08001dcc <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8001dcc:	b508      	push	{r3, lr}
    _write(1, "exit", 4);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	4902      	ldr	r1, [pc, #8]	; (8001ddc <_exit+0x10>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	f7ff ffe0 	bl	8001d98 <_write>
    while (1) {
        ;
    }
 8001dd8:	e7fe      	b.n	8001dd8 <_exit+0xc>
 8001dda:	bf00      	nop
 8001ddc:	0801b2b2 	.word	0x0801b2b2

08001de0 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8001de0:	b508      	push	{r3, lr}

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <_sbrk+0x38>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	b90a      	cbnz	r2, 8001dec <_sbrk+0xc>
        heap_end = &_ebss;
 8001de8:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <_sbrk+0x3c>)
 8001dea:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8001dec:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8001dee:	f3ef 8208 	mrs	r2, MSP

char * stack = (char*) __get_MSP();

     if (heap_end + incr >  stack)
 8001df2:	4418      	add	r0, r3
 8001df4:	4290      	cmp	r0, r2
 8001df6:	d90a      	bls.n	8001e0e <_sbrk+0x2e>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 8001df8:	4909      	ldr	r1, [pc, #36]	; (8001e20 <_sbrk+0x40>)
 8001dfa:	2219      	movs	r2, #25
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f7ff ffcb 	bl	8001d98 <_write>
         errno = ENOMEM;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x44>)
 8001e04:	220c      	movs	r2, #12
 8001e06:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	bd08      	pop	{r3, pc}
         //abort ();
     }

    heap_end += incr;
 8001e0e:	4a02      	ldr	r2, [pc, #8]	; (8001e18 <_sbrk+0x38>)
 8001e10:	6010      	str	r0, [r2, #0]
    return (caddr_t) prev_heap_end;
 8001e12:	4618      	mov	r0, r3

}
 8001e14:	bd08      	pop	{r3, pc}
 8001e16:	bf00      	nop
 8001e18:	20016af8 	.word	0x20016af8
 8001e1c:	20017b08 	.word	0x20017b08
 8001e20:	0801b2b7 	.word	0x0801b2b7
 8001e24:	20017b04 	.word	0x20017b04

08001e28 <UpdateSetToTemperature>:
*       Static code
*
**********************************************************************
*/

static void UpdateSetToTemperature(void){
 8001e28:	b507      	push	{r0, r1, r2, lr}
	char buf[8];
	WM_HWIN h;
	h = WM_GetDialogItem(hWinThermostat, ID_TEXT_1);	
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <UpdateSetToTemperature+0x1c>)
 8001e2c:	f640 0109 	movw	r1, #2057	; 0x809
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f009 fd77 	bl	800b924 <WM_GetDialogItem>
	//sprintf(buf,"%2d",g_manSetTmp);
	TEXT_SetText(h, buf);
 8001e36:	4669      	mov	r1, sp
 8001e38:	f006 fc9a 	bl	8008770 <TEXT_SetText>
}
 8001e3c:	b003      	add	sp, #12
 8001e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e42:	bf00      	nop
 8001e44:	20017924 	.word	0x20017924

08001e48 <_cbFanImg>:
	GUI_DrawRect(0, 0, 62, 62);
	GUI_DrawRect(1, 1, 61, 61);
}

void _cbFanImg(WM_MESSAGE *pMsg){
	switch (pMsg->MsgId){
 8001e48:	6803      	ldr	r3, [r0, #0]
 8001e4a:	2b0f      	cmp	r3, #15
	}	
	GUI_DrawRect(0, 0, 62, 62);
	GUI_DrawRect(1, 1, 61, 61);
}

void _cbFanImg(WM_MESSAGE *pMsg){
 8001e4c:	b510      	push	{r4, lr}
	switch (pMsg->MsgId){
 8001e4e:	d139      	bne.n	8001ec4 <_cbFanImg+0x7c>
*/
#ifdef SHOW_FAN
static void _prv_AppDrawFun(void){
	static int idx;
	
	if (g_fanCtlVal == fanctl_off)
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <_cbFanImg+0x84>)
 8001e52:	4c1f      	ldr	r4, [pc, #124]	; (8001ed0 <_cbFanImg+0x88>)
 8001e54:	7819      	ldrb	r1, [r3, #0]
 8001e56:	2902      	cmp	r1, #2
 8001e58:	d101      	bne.n	8001e5e <_cbFanImg+0x16>
	{
		GUI_DrawBitmap(&bmfan_Stop0, 2, 2);
 8001e5a:	481e      	ldr	r0, [pc, #120]	; (8001ed4 <_cbFanImg+0x8c>)
 8001e5c:	e014      	b.n	8001e88 <_cbFanImg+0x40>
		idx = 0;
	}
	else
	{	
		switch(idx++)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	6022      	str	r2, [r4, #0]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d812      	bhi.n	8001e8e <_cbFanImg+0x46>
 8001e68:	e8df f003 	tbb	[pc, r3]
 8001e6c:	0c060402 	.word	0x0c060402
		{
		case 0:
			GUI_DrawBitmap(&bmfan_Rot0, 2, 2);
 8001e70:	4819      	ldr	r0, [pc, #100]	; (8001ed8 <_cbFanImg+0x90>)
 8001e72:	e002      	b.n	8001e7a <_cbFanImg+0x32>
			break;
		case 1:
			GUI_DrawBitmap(&bmfan_Rot1, 2, 2);
 8001e74:	4819      	ldr	r0, [pc, #100]	; (8001edc <_cbFanImg+0x94>)
 8001e76:	e000      	b.n	8001e7a <_cbFanImg+0x32>
			break;
		case 2:
			GUI_DrawBitmap(&bmfan_Rot2, 2, 2);
 8001e78:	4819      	ldr	r0, [pc, #100]	; (8001ee0 <_cbFanImg+0x98>)
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	f00e fd8b 	bl	8010998 <GUI_DrawBitmap>
 8001e82:	e006      	b.n	8001e92 <_cbFanImg+0x4a>
			break;		
		case 3:
			GUI_DrawBitmap(&bmfan_Rot3, 2, 2);
 8001e84:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <_cbFanImg+0x9c>)
 8001e86:	2102      	movs	r1, #2
 8001e88:	460a      	mov	r2, r1
 8001e8a:	f00e fd85 	bl	8010998 <GUI_DrawBitmap>
			idx = 0;
			break;		
		default:
			idx = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6023      	str	r3, [r4, #0]
		}
	}
	switch (g_airCtlVal)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_cbFanImg+0xa0>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d003      	beq.n	8001ea2 <_cbFanImg+0x5a>
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d101      	bne.n	8001ea2 <_cbFanImg+0x5a>
	{
	case airctl_cooler:
		GUI_SetColor(0x00DFA000);
		break;
	case airctl_heater:
		GUI_SetColor(GUI_LIGHTRED);
 8001e9e:	4813      	ldr	r0, [pc, #76]	; (8001eec <_cbFanImg+0xa4>)
 8001ea0:	e000      	b.n	8001ea4 <_cbFanImg+0x5c>
		break;
	default:
		GUI_SetColor(0x00DFA000);
 8001ea2:	4813      	ldr	r0, [pc, #76]	; (8001ef0 <_cbFanImg+0xa8>)
 8001ea4:	f00e f9f0 	bl	8010288 <GUI_SetColor>
		break;
	}	
	GUI_DrawRect(0, 0, 62, 62);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	223e      	movs	r2, #62	; 0x3e
 8001eac:	4601      	mov	r1, r0
 8001eae:	4613      	mov	r3, r2
 8001eb0:	f00f ffb8 	bl	8011e24 <GUI_DrawRect>
	GUI_DrawRect(1, 1, 61, 61);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	223d      	movs	r2, #61	; 0x3d
 8001eb8:	4601      	mov	r1, r0
 8001eba:	4613      	mov	r3, r2
			_prv_AppDrawFun();
			break;
		default:
			WM_DefaultProc(pMsg);
	}
}
 8001ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	default:
		GUI_SetColor(0x00DFA000);
		break;
	}	
	GUI_DrawRect(0, 0, 62, 62);
	GUI_DrawRect(1, 1, 61, 61);
 8001ec0:	f00f bfb0 	b.w	8011e24 <GUI_DrawRect>
			_prv_AppDrawFun();
			break;
		default:
			WM_DefaultProc(pMsg);
	}
}
 8001ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	switch (pMsg->MsgId){
		case WM_PAINT:
			_prv_AppDrawFun();
			break;
		default:
			WM_DefaultProc(pMsg);
 8001ec8:	f00a be76 	b.w	800cbb8 <WM_DefaultProc>
 8001ecc:	20017900 	.word	0x20017900
 8001ed0:	20016b00 	.word	0x20016b00
 8001ed4:	0801d2ec 	.word	0x0801d2ec
 8001ed8:	0801d29c 	.word	0x0801d29c
 8001edc:	0801d2b0 	.word	0x0801d2b0
 8001ee0:	0801d2c4 	.word	0x0801d2c4
 8001ee4:	0801d2d8 	.word	0x0801d2d8
 8001ee8:	20017928 	.word	0x20017928
 8001eec:	008080ff 	.word	0x008080ff
 8001ef0:	00dfa000 	.word	0x00dfa000

08001ef4 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg){
 8001ef4:	b538      	push	{r3, r4, r5, lr}
  WM_HWIN hItem;
  int Id, NCode, t1;

  switch (pMsg->MsgId) {
 8001ef6:	6803      	ldr	r3, [r0, #0]
 8001ef8:	2b26      	cmp	r3, #38	; 0x26

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg){
 8001efa:	4604      	mov	r4, r0
  WM_HWIN hItem;
  int Id, NCode, t1;

  switch (pMsg->MsgId) {
 8001efc:	f000 812a 	beq.w	8002154 <_cbDialog+0x260>
 8001f00:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8001f04:	f000 816f 	beq.w	80021e6 <_cbDialog+0x2f2>
 8001f08:	2b1d      	cmp	r3, #29
 8001f0a:	f040 8168 	bne.w	80021de <_cbDialog+0x2ea>
	  case WM_INIT_DIALOG:
		// Initialization of 'Thermostat'
		hItem = pMsg->hWin;
 8001f0e:	6845      	ldr	r5, [r0, #4]
		FRAMEWIN_SetFont(hItem, &GUI_Font8x16);
 8001f10:	49b5      	ldr	r1, [pc, #724]	; (80021e8 <_cbDialog+0x2f4>)
 8001f12:	4628      	mov	r0, r5
 8001f14:	f007 ffa8 	bl	8009e68 <FRAMEWIN_SetFont>
		FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8001f18:	4628      	mov	r0, r5
 8001f1a:	210e      	movs	r1, #14
 8001f1c:	f008 fa64 	bl	800a3e8 <FRAMEWIN_SetTextAlign>
		FRAMEWIN_SetTextColor(hItem, 0x00000000);
 8001f20:	4628      	mov	r0, r5
 8001f22:	2100      	movs	r1, #0
 8001f24:	f007 ffd2 	bl	8009ecc <FRAMEWIN_SetTextColor>
		// Initialization of 'txtCurRTC'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 8001f28:	f640 0108 	movw	r1, #2056	; 0x808
 8001f2c:	6860      	ldr	r0, [r4, #4]
 8001f2e:	f009 fcf9 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, "72");
 8001f32:	49ae      	ldr	r1, [pc, #696]	; (80021ec <_cbDialog+0x2f8>)
		hItem = pMsg->hWin;
		FRAMEWIN_SetFont(hItem, &GUI_Font8x16);
		FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		FRAMEWIN_SetTextColor(hItem, 0x00000000);
		// Initialization of 'txtCurRTC'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 8001f34:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "72");
 8001f36:	f006 fc1b 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D64);
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	49ac      	ldr	r1, [pc, #688]	; (80021f0 <_cbDialog+0x2fc>)
 8001f3e:	f006 fc3f 	bl	80087c0 <TEXT_SetFont>
		TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8001f42:	4628      	mov	r0, r5
 8001f44:	210c      	movs	r1, #12
 8001f46:	f006 fc01 	bl	800874c <TEXT_SetTextAlign>
		TEXT_SetTextColor(hItem, 0x00258D52);
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	49a9      	ldr	r1, [pc, #676]	; (80021f4 <_cbDialog+0x300>)
 8001f4e:	f006 fbeb 	bl	8008728 <TEXT_SetTextColor>
		// Initialization of 'SetToTmprt'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 8001f52:	f640 0109 	movw	r1, #2057	; 0x809
 8001f56:	6860      	ldr	r0, [r4, #4]
 8001f58:	f009 fce4 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
 8001f5c:	49a6      	ldr	r1, [pc, #664]	; (80021f8 <_cbDialog+0x304>)
		TEXT_SetText(hItem, "72");
		TEXT_SetFont(hItem, GUI_FONT_D64);
		TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetTextColor(hItem, 0x00258D52);
		// Initialization of 'SetToTmprt'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 8001f5e:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
 8001f60:	f006 fc2e 	bl	80087c0 <TEXT_SetFont>
		TEXT_SetText(hItem, "75");
 8001f64:	4628      	mov	r0, r5
 8001f66:	49a5      	ldr	r1, [pc, #660]	; (80021fc <_cbDialog+0x308>)
 8001f68:	f006 fc02 	bl	8008770 <TEXT_SetText>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	210e      	movs	r1, #14
 8001f70:	f006 fbec 	bl	800874c <TEXT_SetTextAlign>
		// Initialization of 'txtEffSetToTmprt'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1B);
 8001f74:	f641 0109 	movw	r1, #6153	; 0x1809
 8001f78:	6860      	ldr	r0, [r4, #4]
 8001f7a:	f009 fcd3 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, "81");
 8001f7e:	49a0      	ldr	r1, [pc, #640]	; (8002200 <_cbDialog+0x30c>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
		TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
		TEXT_SetText(hItem, "75");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'txtEffSetToTmprt'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1B);
 8001f80:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "81");
 8001f82:	f006 fbf5 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D48);
 8001f86:	4628      	mov	r0, r5
 8001f88:	499e      	ldr	r1, [pc, #632]	; (8002204 <_cbDialog+0x310>)
 8001f8a:	f006 fc19 	bl	80087c0 <TEXT_SetFont>
		TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8001f8e:	4628      	mov	r0, r5
 8001f90:	210c      	movs	r1, #12
 8001f92:	f006 fbdb 	bl	800874c <TEXT_SetTextAlign>
		TEXT_SetTextColor(hItem, 0x008D2552);
 8001f96:	4628      	mov	r0, r5
 8001f98:	499b      	ldr	r1, [pc, #620]	; (8002208 <_cbDialog+0x314>)
 8001f9a:	f006 fbc5 	bl	8008728 <TEXT_SetTextColor>
		// Initialization of 'txtFanCtl'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 8001f9e:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8001fa2:	6860      	ldr	r0, [r4, #4]
 8001fa4:	f009 fcbe 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_TOP);
 8001fa8:	2102      	movs	r1, #2
		TEXT_SetText(hItem, "81");
		TEXT_SetFont(hItem, GUI_FONT_D48);
		TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetTextColor(hItem, 0x008D2552);
		// Initialization of 'txtFanCtl'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 8001faa:	4605      	mov	r5, r0
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_TOP);
 8001fac:	f006 fbce 	bl	800874c <TEXT_SetTextAlign>
		TEXT_SetText(hItem, "Fan");
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	4996      	ldr	r1, [pc, #600]	; (800220c <_cbDialog+0x318>)
 8001fb4:	f006 fbdc 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
 8001fb8:	4628      	mov	r0, r5
 8001fba:	4995      	ldr	r1, [pc, #596]	; (8002210 <_cbDialog+0x31c>)
 8001fbc:	f006 fc00 	bl	80087c0 <TEXT_SetFont>
		// Initialization of 'FanControl'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_0);
 8001fc0:	f640 0131 	movw	r1, #2097	; 0x831
 8001fc4:	6860      	ldr	r0, [r4, #4]
 8001fc6:	f009 fcad 	bl	800b924 <WM_GetDialogItem>
		RADIO_SetText(hItem, "Auto", 0);
 8001fca:	4992      	ldr	r1, [pc, #584]	; (8002214 <_cbDialog+0x320>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_TOP);
		TEXT_SetText(hItem, "Fan");
		TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		// Initialization of 'FanControl'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_0);
 8001fcc:	4605      	mov	r5, r0
		RADIO_SetText(hItem, "Auto", 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f006 fe83 	bl	8008cda <RADIO_SetText>
		RADIO_SetText(hItem, "On", 1);
 8001fd4:	4628      	mov	r0, r5
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	498f      	ldr	r1, [pc, #572]	; (8002218 <_cbDialog+0x324>)
 8001fda:	f006 fe7e 	bl	8008cda <RADIO_SetText>
		RADIO_SetFont(hItem, GUI_FONT_16B_ASCII);
 8001fde:	4628      	mov	r0, r5
 8001fe0:	498e      	ldr	r1, [pc, #568]	; (800221c <_cbDialog+0x328>)
 8001fe2:	f006 fe9f 	bl	8008d24 <RADIO_SetFont>
		RADIO_SetText(hItem, "Off", 2);
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	2202      	movs	r2, #2
 8001fea:	498d      	ldr	r1, [pc, #564]	; (8002220 <_cbDialog+0x32c>)
 8001fec:	f006 fe75 	bl	8008cda <RADIO_SetText>
		// Initialization of 'rdo_Cndtnr'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_1);
 8001ff0:	f640 0133 	movw	r1, #2099	; 0x833
 8001ff4:	6860      	ldr	r0, [r4, #4]
 8001ff6:	f009 fc95 	bl	800b924 <WM_GetDialogItem>
		RADIO_SetText(hItem, "Auto", 0);
 8001ffa:	4986      	ldr	r1, [pc, #536]	; (8002214 <_cbDialog+0x320>)
		RADIO_SetText(hItem, "Auto", 0);
		RADIO_SetText(hItem, "On", 1);
		RADIO_SetFont(hItem, GUI_FONT_16B_ASCII);
		RADIO_SetText(hItem, "Off", 2);
		// Initialization of 'rdo_Cndtnr'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_1);
 8001ffc:	4605      	mov	r5, r0
		RADIO_SetText(hItem, "Auto", 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f006 fe6b 	bl	8008cda <RADIO_SetText>
		RADIO_SetText(hItem, "Cooler", 1);
 8002004:	4628      	mov	r0, r5
 8002006:	2201      	movs	r2, #1
 8002008:	4986      	ldr	r1, [pc, #536]	; (8002224 <_cbDialog+0x330>)
 800200a:	f006 fe66 	bl	8008cda <RADIO_SetText>
		RADIO_SetFont(hItem, GUI_FONT_16B_ASCII);
 800200e:	4628      	mov	r0, r5
 8002010:	4982      	ldr	r1, [pc, #520]	; (800221c <_cbDialog+0x328>)
 8002012:	f006 fe87 	bl	8008d24 <RADIO_SetFont>
		RADIO_SetText(hItem, "Heater", 2);
 8002016:	4628      	mov	r0, r5
 8002018:	4983      	ldr	r1, [pc, #524]	; (8002228 <_cbDialog+0x334>)
 800201a:	2202      	movs	r2, #2
 800201c:	f006 fe5d 	bl	8008cda <RADIO_SetText>
		RADIO_SetText(hItem, "Off", 3);
 8002020:	2203      	movs	r2, #3
 8002022:	4628      	mov	r0, r5
 8002024:	497e      	ldr	r1, [pc, #504]	; (8002220 <_cbDialog+0x32c>)
 8002026:	f006 fe58 	bl	8008cda <RADIO_SetText>
		// Initialization of 'txtRTCH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 800202a:	f640 0134 	movw	r1, #2100	; 0x834
 800202e:	6860      	ldr	r0, [r4, #4]
 8002030:	f009 fc78 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, "12");
 8002034:	497d      	ldr	r1, [pc, #500]	; (800222c <_cbDialog+0x338>)
		RADIO_SetText(hItem, "Cooler", 1);
		RADIO_SetFont(hItem, GUI_FONT_16B_ASCII);
		RADIO_SetText(hItem, "Heater", 2);
		RADIO_SetText(hItem, "Off", 3);
		// Initialization of 'txtRTCH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 8002036:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "12");
 8002038:	f006 fb9a 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
 800203c:	4628      	mov	r0, r5
 800203e:	497c      	ldr	r1, [pc, #496]	; (8002230 <_cbDialog+0x33c>)
 8002040:	f006 fbbe 	bl	80087c0 <TEXT_SetFont>
		// Initialization of 'txtRTCMH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4MH);
 8002044:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8002048:	6860      	ldr	r0, [r4, #4]
 800204a:	f009 fc6b 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, ":");
 800204e:	4979      	ldr	r1, [pc, #484]	; (8002234 <_cbDialog+0x340>)
		// Initialization of 'txtRTCH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
		TEXT_SetText(hItem, "12");
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
		// Initialization of 'txtRTCMH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4MH);
 8002050:	4605      	mov	r5, r0
		TEXT_SetText(hItem, ":");
 8002052:	f006 fb8d 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
 8002056:	4628      	mov	r0, r5
 8002058:	4975      	ldr	r1, [pc, #468]	; (8002230 <_cbDialog+0x33c>)
 800205a:	f006 fbb1 	bl	80087c0 <TEXT_SetFont>
		// Initialization of 'txtRTCM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4M);
 800205e:	f640 21a1 	movw	r1, #2721	; 0xaa1
 8002062:	6860      	ldr	r0, [r4, #4]
 8002064:	f009 fc5e 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, "00");
 8002068:	4973      	ldr	r1, [pc, #460]	; (8002238 <_cbDialog+0x344>)
		// Initialization of 'txtRTCMH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4MH);
		TEXT_SetText(hItem, ":");
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
		// Initialization of 'txtRTCM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4M);
 800206a:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "00");
 800206c:	f006 fb80 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
 8002070:	4628      	mov	r0, r5
 8002072:	496f      	ldr	r1, [pc, #444]	; (8002230 <_cbDialog+0x33c>)
 8002074:	f006 fba4 	bl	80087c0 <TEXT_SetFont>
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
 8002078:	f640 011e 	movw	r1, #2078	; 0x81e
 800207c:	6860      	ldr	r0, [r4, #4]
 800207e:	f009 fc51 	bl	800b924 <WM_GetDialogItem>
		BUTTON_SetText(hItem, "main");
 8002082:	496e      	ldr	r1, [pc, #440]	; (800223c <_cbDialog+0x348>)
		// Initialization of 'txtRTCM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4M);
		TEXT_SetText(hItem, "00");
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
 8002084:	4605      	mov	r5, r0
		BUTTON_SetText(hItem, "main");
 8002086:	f008 ffa5 	bl	800afd4 <BUTTON_SetText>
		BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 800208a:	4628      	mov	r0, r5
 800208c:	4963      	ldr	r1, [pc, #396]	; (800221c <_cbDialog+0x328>)
 800208e:	f008 ffc9 	bl	800b024 <BUTTON_SetFont>
		// Initialization of 'txtPM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
 8002092:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8002096:	6860      	ldr	r0, [r4, #4]
 8002098:	f009 fc44 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, "PM");
 800209c:	4968      	ldr	r1, [pc, #416]	; (8002240 <_cbDialog+0x34c>)
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
		BUTTON_SetText(hItem, "main");
		BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
		// Initialization of 'txtPM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
 800209e:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "PM");
 80020a0:	f006 fb66 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
 80020a4:	4628      	mov	r0, r5
 80020a6:	4967      	ldr	r1, [pc, #412]	; (8002244 <_cbDialog+0x350>)
 80020a8:	f006 fb8a 	bl	80087c0 <TEXT_SetFont>
		// Initialization of 'chkManual'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
 80020ac:	f640 0121 	movw	r1, #2081	; 0x821
 80020b0:	6860      	ldr	r0, [r4, #4]
 80020b2:	f009 fc37 	bl	800b924 <WM_GetDialogItem>
		CHECKBOX_SetText(hItem, "Manual control");
 80020b6:	4964      	ldr	r1, [pc, #400]	; (8002248 <_cbDialog+0x354>)
		// Initialization of 'txtPM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
		TEXT_SetText(hItem, "PM");
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
		// Initialization of 'chkManual'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
 80020b8:	4605      	mov	r5, r0
		CHECKBOX_SetText(hItem, "Manual control");
 80020ba:	f008 fb3e 	bl	800a73a <CHECKBOX_SetText>
		CHECKBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 80020be:	4628      	mov	r0, r5
 80020c0:	4956      	ldr	r1, [pc, #344]	; (800221c <_cbDialog+0x328>)
 80020c2:	f008 fb79 	bl	800a7b8 <CHECKBOX_SetFont>
		CHECKBOX_SetState(hItem, 1);
 80020c6:	4628      	mov	r0, r5
 80020c8:	2101      	movs	r1, #1
 80020ca:	f008 fb58 	bl	800a77e <CHECKBOX_SetState>
		g_manCtl.isEn = true;
 80020ce:	4b5f      	ldr	r3, [pc, #380]	; (800224c <_cbDialog+0x358>)
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
 80020d0:	6860      	ldr	r0, [r4, #4]
		// Initialization of 'chkManual'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
		CHECKBOX_SetText(hItem, "Manual control");
		CHECKBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
		CHECKBOX_SetState(hItem, 1);
		g_manCtl.isEn = true;
 80020d2:	2201      	movs	r2, #1
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
 80020d4:	f640 0124 	movw	r1, #2084	; 0x824
		// Initialization of 'chkManual'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
		CHECKBOX_SetText(hItem, "Manual control");
		CHECKBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
		CHECKBOX_SetState(hItem, 1);
		g_manCtl.isEn = true;
 80020d8:	701a      	strb	r2, [r3, #0]
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
 80020da:	f009 fc23 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
 80020de:	4959      	ldr	r1, [pc, #356]	; (8002244 <_cbDialog+0x350>)
		CHECKBOX_SetText(hItem, "Manual control");
		CHECKBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
		CHECKBOX_SetState(hItem, 1);
		g_manCtl.isEn = true;
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
 80020e0:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
 80020e2:	f006 fb6d 	bl	80087c0 <TEXT_SetFont>
		TEXT_SetText(hItem, "Wed");
 80020e6:	4628      	mov	r0, r5
 80020e8:	4959      	ldr	r1, [pc, #356]	; (8002250 <_cbDialog+0x35c>)
 80020ea:	f006 fb41 	bl	8008770 <TEXT_SetText>
		// Initialization of 'Text'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
 80020ee:	f640 0126 	movw	r1, #2086	; 0x826
 80020f2:	6860      	ldr	r0, [r4, #4]
 80020f4:	f009 fc16 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, "Adjust");
 80020f8:	4956      	ldr	r1, [pc, #344]	; (8002254 <_cbDialog+0x360>)
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
		TEXT_SetText(hItem, "Wed");
		// Initialization of 'Text'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
 80020fa:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "Adjust");
 80020fc:	f006 fb38 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
 8002100:	4628      	mov	r0, r5
 8002102:	4943      	ldr	r1, [pc, #268]	; (8002210 <_cbDialog+0x31c>)
 8002104:	f006 fb5c 	bl	80087c0 <TEXT_SetFont>
		// Initialization of 'txtAM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
 8002108:	f640 0128 	movw	r1, #2088	; 0x828
 800210c:	6860      	ldr	r0, [r4, #4]
 800210e:	f009 fc09 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, "AM");
 8002112:	4951      	ldr	r1, [pc, #324]	; (8002258 <_cbDialog+0x364>)
		// Initialization of 'Text'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
		TEXT_SetText(hItem, "Adjust");
		TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		// Initialization of 'txtAM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
 8002114:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "AM");
 8002116:	f006 fb2b 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
 800211a:	4628      	mov	r0, r5
 800211c:	4949      	ldr	r1, [pc, #292]	; (8002244 <_cbDialog+0x350>)
 800211e:	f006 fb4f 	bl	80087c0 <TEXT_SetFont>
		// Slider Init
		hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
 8002122:	f640 0132 	movw	r1, #2098	; 0x832
 8002126:	6860      	ldr	r0, [r4, #4]
 8002128:	f009 fbfc 	bl	800b924 <WM_GetDialogItem>
		SLIDER_SetRange(hItem, 0, TEMP_MAX - TEMP_MIN);
 800212c:	221e      	movs	r2, #30
 800212e:	2100      	movs	r1, #0
		// Initialization of 'txtAM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
		TEXT_SetText(hItem, "AM");
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
		// Slider Init
		hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
 8002130:	4605      	mov	r5, r0
		SLIDER_SetRange(hItem, 0, TEMP_MAX - TEMP_MIN);
 8002132:	f006 fda7 	bl	8008c84 <SLIDER_SetRange>
		SLIDER_SetValue(hItem, TEMP_MAX - g_manSetTmp);
 8002136:	4b49      	ldr	r3, [pc, #292]	; (800225c <_cbDialog+0x368>)
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	4628      	mov	r0, r5
 800213c:	f1c1 015f 	rsb	r1, r1, #95	; 0x5f
 8002140:	f006 fcca 	bl	8008ad8 <SLIDER_SetValue>
		
		s_hCurTemp = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 8002144:	6860      	ldr	r0, [r4, #4]
 8002146:	f640 0108 	movw	r1, #2056	; 0x808
 800214a:	f009 fbeb 	bl	800b924 <WM_GetDialogItem>
 800214e:	4b44      	ldr	r3, [pc, #272]	; (8002260 <_cbDialog+0x36c>)
 8002150:	6018      	str	r0, [r3, #0]
 8002152:	e02e      	b.n	80021b2 <_cbDialog+0x2be>
	  
	  case WM_TOUCH:
		break;
		
	  case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 8002154:	6880      	ldr	r0, [r0, #8]
 8002156:	f009 fba4 	bl	800b8a2 <WM_GetId>
		NCode = pMsg->Data.v;
		switch(Id) {
 800215a:	f640 0231 	movw	r2, #2097	; 0x831
 800215e:	4290      	cmp	r0, r2
	  
	  case WM_TOUCH:
		break;
		
	  case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 8002160:	4601      	mov	r1, r0
		NCode = pMsg->Data.v;
 8002162:	68e3      	ldr	r3, [r4, #12]
		switch(Id) {
 8002164:	d00e      	beq.n	8002184 <_cbDialog+0x290>
 8002166:	dc04      	bgt.n	8002172 <_cbDialog+0x27e>
 8002168:	f640 021e 	movw	r2, #2078	; 0x81e
 800216c:	4290      	cmp	r0, r2
 800216e:	d02e      	beq.n	80021ce <_cbDialog+0x2da>
 8002170:	bd38      	pop	{r3, r4, r5, pc}
 8002172:	f640 0232 	movw	r2, #2098	; 0x832
 8002176:	4290      	cmp	r0, r2
 8002178:	d00e      	beq.n	8002198 <_cbDialog+0x2a4>
 800217a:	f640 0233 	movw	r2, #2099	; 0x833
 800217e:	4290      	cmp	r0, r2
 8002180:	d01b      	beq.n	80021ba <_cbDialog+0x2c6>
 8002182:	bd38      	pop	{r3, r4, r5, pc}
			case ID_RADIO_0: // Notifications sent by 'FanControl'
			  switch(NCode) {
 8002184:	2b05      	cmp	r3, #5
 8002186:	d12e      	bne.n	80021e6 <_cbDialog+0x2f2>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					break;
				  case WM_NOTIFICATION_VALUE_CHANGED:
					hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_0);
 8002188:	6860      	ldr	r0, [r4, #4]
 800218a:	f009 fbcb 	bl	800b924 <WM_GetDialogItem>
					t1 = RADIO_GetValue(hItem);
 800218e:	f006 ff8c 	bl	80090aa <RADIO_GetValue>
					g_manCtl.fanCtl = (enm_FanCtl) t1;        
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <_cbDialog+0x358>)
 8002194:	7098      	strb	r0, [r3, #2]
					break;
 8002196:	bd38      	pop	{r3, r4, r5, pc}
				  }
			break;
			case ID_SLIDER_0: // Notifications sent by 'SetToSlider'
			  switch(NCode) {
 8002198:	2b05      	cmp	r3, #5
 800219a:	d124      	bne.n	80021e6 <_cbDialog+0x2f2>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					break;
				  case WM_NOTIFICATION_VALUE_CHANGED:
					hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
 800219c:	6860      	ldr	r0, [r4, #4]
 800219e:	f009 fbc1 	bl	800b924 <WM_GetDialogItem>
					g_manSetTmp = TEMP_MAX - SLIDER_GetValue(hItem);
 80021a2:	f006 fd8c 	bl	8008cbe <SLIDER_GetValue>
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <_cbDialog+0x368>)
 80021a8:	f1c0 005f 	rsb	r0, r0, #95	; 0x5f
 80021ac:	6018      	str	r0, [r3, #0]
					g_manCtl.cx16setTmp = g_manSetTmp;
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <_cbDialog+0x358>)
 80021b0:	6058      	str	r0, [r3, #4]
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80021b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					break;
				  case WM_NOTIFICATION_VALUE_CHANGED:
					hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
					g_manSetTmp = TEMP_MAX - SLIDER_GetValue(hItem);
					g_manCtl.cx16setTmp = g_manSetTmp;
					UpdateSetToTemperature();
 80021b6:	f7ff be37 	b.w	8001e28 <UpdateSetToTemperature>
					break;
			  }
			break;
			case ID_RADIO_1: // Notifications sent by 'rdo_Cndtnr'
			  switch(NCode) {
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d113      	bne.n	80021e6 <_cbDialog+0x2f2>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					break;
				  case WM_NOTIFICATION_VALUE_CHANGED:
					hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_1);
 80021be:	6860      	ldr	r0, [r4, #4]
 80021c0:	f009 fbb0 	bl	800b924 <WM_GetDialogItem>
					t1 = RADIO_GetValue(hItem);
 80021c4:	f006 ff71 	bl	80090aa <RADIO_GetValue>
					g_manCtl.airCtl = (enm_AirCtl) t1;
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <_cbDialog+0x358>)
 80021ca:	7058      	strb	r0, [r3, #1]
					break;
 80021cc:	bd38      	pop	{r3, r4, r5, pc}
			  }
			break;
			case ID_BUTTON_9: // Notifications sent by 'btnSetup'
			  switch(NCode) {
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d109      	bne.n	80021e6 <_cbDialog+0x2f2>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					ShowWindow(_hWindow4);
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <_cbDialog+0x370>)
 80021d4:	6818      	ldr	r0, [r3, #0]
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80021d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			case ID_BUTTON_9: // Notifications sent by 'btnSetup'
			  switch(NCode) {
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					ShowWindow(_hWindow4);
 80021da:	f000 b893 	b.w	8002304 <ShowWindow>
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80021de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			  }
			break;*/
		}
	  break;
	  default:
		WM_DefaultProc(pMsg);
 80021e2:	f00a bce9 	b.w	800cbb8 <WM_DefaultProc>
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
 80021e8:	08027f04 	.word	0x08027f04
 80021ec:	0801b2d1 	.word	0x0801b2d1
 80021f0:	08025f28 	.word	0x08025f28
 80021f4:	00258d52 	.word	0x00258d52
 80021f8:	08029fe0 	.word	0x08029fe0
 80021fc:	0801b2d4 	.word	0x0801b2d4
 8002200:	0801b2d7 	.word	0x0801b2d7
 8002204:	08026ce4 	.word	0x08026ce4
 8002208:	008d2552 	.word	0x008d2552
 800220c:	0801b2da 	.word	0x0801b2da
 8002210:	0802d03c 	.word	0x0802d03c
 8002214:	0801b2de 	.word	0x0801b2de
 8002218:	0801b2e3 	.word	0x0801b2e3
 800221c:	0802dd64 	.word	0x0802dd64
 8002220:	0801b2e6 	.word	0x0801b2e6
 8002224:	0801b2ea 	.word	0x0801b2ea
 8002228:	0801b2f1 	.word	0x0801b2f1
 800222c:	0801b2f8 	.word	0x0801b2f8
 8002230:	080274b0 	.word	0x080274b0
 8002234:	0801b2fb 	.word	0x0801b2fb
 8002238:	0801b2fd 	.word	0x0801b2fd
 800223c:	0801b300 	.word	0x0801b300
 8002240:	0801b3e2 	.word	0x0801b3e2
 8002244:	0802c0fc 	.word	0x0802c0fc
 8002248:	0801b305 	.word	0x0801b305
 800224c:	20017904 	.word	0x20017904
 8002250:	0801b314 	.word	0x0801b314
 8002254:	0801b318 	.word	0x0801b318
 8002258:	0801b3dc 	.word	0x0801b3dc
 800225c:	20017918 	.word	0x20017918
 8002260:	20016afc 	.word	0x20016afc
 8002264:	20017944 	.word	0x20017944

08002268 <CreateThermostat>:
*
*       CreateThermostat
**********************************************************************
*/

WM_HWIN CreateThermostat(void) {
 8002268:	b530      	push	{r4, r5, lr}
  WM_HWIN hWin;
  
  FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
 800226a:	4813      	ldr	r0, [pc, #76]	; (80022b8 <CreateThermostat+0x50>)
*
*       CreateThermostat
**********************************************************************
*/

WM_HWIN CreateThermostat(void) {
 800226c:	b085      	sub	sp, #20
  WM_HWIN hWin;
  
  FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
 800226e:	f007 fde5 	bl	8009e3c <FRAMEWIN_SetDefaultSkin>
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);
 8002272:	4812      	ldr	r0, [pc, #72]	; (80022bc <CreateThermostat+0x54>)
 8002274:	f008 fd66 	bl	800ad44 <BUTTON_SetDefaultSkin>

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), &_cbDialog, WM_HBKWIN, 0, 0);
 8002278:	f009 fb58 	bl	800b92c <WM_GetDesktopWindow>
 800227c:	2500      	movs	r5, #0
 800227e:	4603      	mov	r3, r0
 8002280:	9500      	str	r5, [sp, #0]
 8002282:	9501      	str	r5, [sp, #4]
 8002284:	2111      	movs	r1, #17
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <CreateThermostat+0x58>)
 8002288:	480e      	ldr	r0, [pc, #56]	; (80022c4 <CreateThermostat+0x5c>)
 800228a:	f008 fa07 	bl	800a69c <GUI_CreateDialogBox>
  #ifdef SHOW_FAN
	hWinFanImg = WM_CreateWindowAsChild(114, 104, 63, 63, 
 800228e:	2306      	movs	r3, #6
 8002290:	223f      	movs	r2, #63	; 0x3f
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <CreateThermostat+0x60>)
 8002296:	9000      	str	r0, [sp, #0]
  WM_HWIN hWin;
  
  FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), &_cbDialog, WM_HBKWIN, 0, 0);
 8002298:	4604      	mov	r4, r0
  #ifdef SHOW_FAN
	hWinFanImg = WM_CreateWindowAsChild(114, 104, 63, 63, 
 800229a:	9302      	str	r3, [sp, #8]
 800229c:	2168      	movs	r1, #104	; 0x68
 800229e:	4613      	mov	r3, r2
 80022a0:	9503      	str	r5, [sp, #12]
 80022a2:	2072      	movs	r0, #114	; 0x72
 80022a4:	f00a f91a 	bl	800c4dc <WM_CreateWindowAsChild>
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <CreateThermostat+0x64>)
 80022aa:	6018      	str	r0, [r3, #0]
		hWin,
		WM_CF_FGND | WM_CF_MEMDEV | WM_CF_SHOW,
		_cbFanImg, 0
	);
  #endif
  WM_HideWindow(hWin);
 80022ac:	4620      	mov	r0, r4
 80022ae:	f009 fa76 	bl	800b79e <WM_HideWindow>
  
  return hWin;
}
 80022b2:	4620      	mov	r0, r4
 80022b4:	b005      	add	sp, #20
 80022b6:	bd30      	pop	{r4, r5, pc}
 80022b8:	0800996d 	.word	0x0800996d
 80022bc:	0800aa25 	.word	0x0800aa25
 80022c0:	08001ef5 	.word	0x08001ef5
 80022c4:	0801b3e8 	.word	0x0801b3e8
 80022c8:	08001e49 	.word	0x08001e49
 80022cc:	20017910 	.word	0x20017910

080022d0 <_cbBkWindow>:
/*********************************************************************
	*	_cbBkWindow
	*		:CallBack for BkWindow
	**********************************************************************
*/
static void _cbBkWindow(WM_MESSAGE *pMsg){
 80022d0:	b508      	push	{r3, lr}
	switch(pMsg->MsgId){
 80022d2:	6803      	ldr	r3, [r0, #0]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d10d      	bne.n	80022f4 <_cbBkWindow+0x24>
		case WM_PAINT:
		GUI_SetColor(GUI_WHITE);
 80022d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80022dc:	f00d ffd4 	bl	8010288 <GUI_SetColor>
		GUI_SetFont(&GUI_Font24_ASCII);
 80022e0:	4806      	ldr	r0, [pc, #24]	; (80022fc <_cbBkWindow+0x2c>)
 80022e2:	f00d ffa3 	bl	801022c <GUI_SetFont>
		GUI_DispStringAt(_acInfoText, 5, 40);
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <_cbBkWindow+0x30>)
 80022e8:	2105      	movs	r1, #5
 80022ea:	2228      	movs	r2, #40	; 0x28
		break;
		default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80022ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static void _cbBkWindow(WM_MESSAGE *pMsg){
	switch(pMsg->MsgId){
		case WM_PAINT:
		GUI_SetColor(GUI_WHITE);
		GUI_SetFont(&GUI_Font24_ASCII);
		GUI_DispStringAt(_acInfoText, 5, 40);
 80022f0:	f00e bd12 	b.w	8010d18 <GUI_DispStringAt>
		break;
		default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80022f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_SetColor(GUI_WHITE);
		GUI_SetFont(&GUI_Font24_ASCII);
		GUI_DispStringAt(_acInfoText, 5, 40);
		break;
		default:
		WM_DefaultProc(pMsg);
 80022f8:	f00a bc5e 	b.w	800cbb8 <WM_DefaultProc>
 80022fc:	0802afa0 	.word	0x0802afa0
 8002300:	20016b08 	.word	0x20016b08

08002304 <ShowWindow>:
	*		:Hide all windows and then show 'Window'
	**********************************************************************
*/
void ShowWindow(WM_HWIN window)
{
	WM_HideWindow(hWinThermostat);
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <ShowWindow+0x3c>)
	*	ShowWindow
	*		:Hide all windows and then show 'Window'
	**********************************************************************
*/
void ShowWindow(WM_HWIN window)
{
 8002306:	b510      	push	{r4, lr}
 8002308:	4604      	mov	r4, r0
	WM_HideWindow(hWinThermostat);
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	f009 fa47 	bl	800b79e <WM_HideWindow>
	WM_HideWindow(hWinModbusStats);
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <ShowWindow+0x40>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	f009 fa43 	bl	800b79e <WM_HideWindow>
	WM_HideWindow(_hWindow4);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <ShowWindow+0x44>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	f009 fa3f 	bl	800b79e <WM_HideWindow>
	WM_HideWindow(_hWindow5);
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <ShowWindow+0x48>)
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	f009 fa3b 	bl	800b79e <WM_HideWindow>
	WM_HideWindow(_hWindow6);
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <ShowWindow+0x4c>)
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	f009 fa37 	bl	800b79e <WM_HideWindow>
	//WM_HideWindow(hWinProgramTime);
	WM_ShowWindow(window);
 8002330:	4620      	mov	r0, r4
 8002332:	f008 ff00 	bl	800b136 <WM_ShowWindow>
	GUI_Exec();
}
 8002336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	WM_HideWindow(_hWindow4);
	WM_HideWindow(_hWindow5);
	WM_HideWindow(_hWindow6);
	//WM_HideWindow(hWinProgramTime);
	WM_ShowWindow(window);
	GUI_Exec();
 800233a:	f00e b907 	b.w	801054c <GUI_Exec>
 800233e:	bf00      	nop
 8002340:	20017924 	.word	0x20017924
 8002344:	20017950 	.word	0x20017950
 8002348:	20017944 	.word	0x20017944
 800234c:	20017930 	.word	0x20017930
 8002350:	20017940 	.word	0x20017940

08002354 <_cbWindow2>:
	**********************************************************************
*/
static void _cbWindow2(WM_MESSAGE *pMsg){
	GUI_COLOR Color;
	int Id, NCode;
	switch(pMsg->MsgId){
 8002354:	6803      	ldr	r3, [r0, #0]
 8002356:	2b0f      	cmp	r3, #15
/*********************************************************************
	*	_cbWindow2
	*		:CallBack for BkWindow
	**********************************************************************
*/
static void _cbWindow2(WM_MESSAGE *pMsg){
 8002358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800235a:	4604      	mov	r4, r0
	GUI_COLOR Color;
	int Id, NCode;
	switch(pMsg->MsgId){
 800235c:	d027      	beq.n	80023ae <_cbWindow2+0x5a>
 800235e:	2b26      	cmp	r3, #38	; 0x26
 8002360:	d130      	bne.n	80023c4 <_cbWindow2+0x70>
		case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 8002362:	6880      	ldr	r0, [r0, #8]
 8002364:	f009 fa9d 	bl	800b8a2 <WM_GetId>
		NCode = pMsg->Data.v;
		switch(Id) {
 8002368:	f640 0211 	movw	r2, #2065	; 0x811
 800236c:	4290      	cmp	r0, r2
	GUI_COLOR Color;
	int Id, NCode;
	switch(pMsg->MsgId){
		case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
		NCode = pMsg->Data.v;
 800236e:	68e3      	ldr	r3, [r4, #12]
		switch(Id) {
 8002370:	d004      	beq.n	800237c <_cbWindow2+0x28>
 8002372:	f640 0212 	movw	r2, #2066	; 0x812
 8002376:	4290      	cmp	r0, r2
 8002378:	d00c      	beq.n	8002394 <_cbWindow2+0x40>
 800237a:	e025      	b.n	80023c8 <_cbWindow2+0x74>
			case ID_BUTTON_6: // Notifications sent by 'btnSetup'
			switch(NCode) {
 800237c:	2b02      	cmp	r3, #2
 800237e:	d123      	bne.n	80023c8 <_cbWindow2+0x74>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				ShowWindow(_hWindow4);
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <_cbWindow2+0x78>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	f7ff ffbe 	bl	8002304 <ShowWindow>
				PROGBAR_SetValue(_hProgBar_1, 0);
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_cbWindow2+0x7c>)
 800238a:	2100      	movs	r1, #0
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	f007 f93d 	bl	800960c <PROGBAR_SetValue>
 8002392:	e019      	b.n	80023c8 <_cbWindow2+0x74>
				break;
			}
			break;
			case ID_BUTTON_7: // Notifications sent by 'btnSetup'
			switch(NCode) {
 8002394:	2b02      	cmp	r3, #2
 8002396:	d117      	bne.n	80023c8 <_cbWindow2+0x74>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				_ProgBarStat(_hProgBar_1);
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <_cbWindow2+0x7c>)
 800239a:	681d      	ldr	r5, [r3, #0]
*/
static void _ProgBarStat(PROGBAR_Handle _hProgBar){
	int n;
	
	//PROGBAR_SetValue(_hProgBar, -16383);
	for(n=0; n <= 100; n++){
 800239c:	2400      	movs	r4, #0
		PROGBAR_SetValue(_hProgBar, n);
 800239e:	4621      	mov	r1, r4
 80023a0:	4628      	mov	r0, r5
*/
static void _ProgBarStat(PROGBAR_Handle _hProgBar){
	int n;
	
	//PROGBAR_SetValue(_hProgBar, -16383);
	for(n=0; n <= 100; n++){
 80023a2:	3401      	adds	r4, #1
		PROGBAR_SetValue(_hProgBar, n);
 80023a4:	f007 f932 	bl	800960c <PROGBAR_SetValue>
*/
static void _ProgBarStat(PROGBAR_Handle _hProgBar){
	int n;
	
	//PROGBAR_SetValue(_hProgBar, -16383);
	for(n=0; n <= 100; n++){
 80023a8:	2c65      	cmp	r4, #101	; 0x65
 80023aa:	d1f8      	bne.n	800239e <_cbWindow2+0x4a>
 80023ac:	e00c      	b.n	80023c8 <_cbWindow2+0x74>
			}
			break;
		}
		break;
		case WM_PAINT:
		WM_GetUserData(pMsg->hWin, &Color, 4);
 80023ae:	a901      	add	r1, sp, #4
 80023b0:	2204      	movs	r2, #4
 80023b2:	6840      	ldr	r0, [r0, #4]
 80023b4:	f008 fea9 	bl	800b10a <WM_GetUserData>
		GUI_SetBkColor(Color);
 80023b8:	9801      	ldr	r0, [sp, #4]
 80023ba:	f00d ff63 	bl	8010284 <GUI_SetBkColor>
		GUI_Clear();
 80023be:	f00e fe7b 	bl	80110b8 <GUI_Clear>
		break;
 80023c2:	e001      	b.n	80023c8 <_cbWindow2+0x74>
		default:
		WM_DefaultProc(pMsg);
 80023c4:	f00a fbf8 	bl	800cbb8 <WM_DefaultProc>
		break;
	}
}
 80023c8:	b003      	add	sp, #12
 80023ca:	bd30      	pop	{r4, r5, pc}
 80023cc:	20017944 	.word	0x20017944
 80023d0:	20016b38 	.word	0x20016b38

080023d4 <_cbWindow1>:
/*********************************************************************
	*	_cbWindow1
	*		:CallBack for BkWindow
	**********************************************************************
*/
void _cbWindow1(WM_MESSAGE *pMsg){
 80023d4:	b530      	push	{r4, r5, lr}
	WM_HWIN hWindow;
	GUI_COLOR Color;
	int Id, NCode;
	hWindow = pMsg->hWin;
	switch(pMsg->MsgId){
 80023d6:	6803      	ldr	r3, [r0, #0]
 80023d8:	2b0f      	cmp	r3, #15
/*********************************************************************
	*	_cbWindow1
	*		:CallBack for BkWindow
	**********************************************************************
*/
void _cbWindow1(WM_MESSAGE *pMsg){
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	4604      	mov	r4, r0
	WM_HWIN hWindow;
	GUI_COLOR Color;
	int Id, NCode;
	hWindow = pMsg->hWin;
	switch(pMsg->MsgId){
 80023de:	d043      	beq.n	8002468 <_cbWindow1+0x94>
 80023e0:	2b26      	cmp	r3, #38	; 0x26
 80023e2:	d14c      	bne.n	800247e <_cbWindow1+0xaa>
		case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 80023e4:	6880      	ldr	r0, [r0, #8]
 80023e6:	f009 fa5c 	bl	800b8a2 <WM_GetId>
		NCode = pMsg->Data.v;
		switch(Id) {
 80023ea:	f6a0 000b 	subw	r0, r0, #2059	; 0x80b
	int Id, NCode;
	hWindow = pMsg->hWin;
	switch(pMsg->MsgId){
		case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
		NCode = pMsg->Data.v;
 80023ee:	68e3      	ldr	r3, [r4, #12]
		switch(Id) {
 80023f0:	280a      	cmp	r0, #10
 80023f2:	d846      	bhi.n	8002482 <_cbWindow1+0xae>
 80023f4:	e8df f000 	tbb	[pc, r0]
 80023f8:	110a4506 	.word	0x110a4506
 80023fc:	45454545 	.word	0x45454545
 8002400:	4545      	.short	0x4545
 8002402:	15          	.byte	0x15
 8002403:	00          	.byte	0x00
			case ID_BUTTON_0: // Notifications sent by 'btnSetup'
			switch(NCode) {
 8002404:	2b02      	cmp	r3, #2
 8002406:	d13c      	bne.n	8002482 <_cbWindow1+0xae>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				ShowWindow(_hWindow5);
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <_cbWindow1+0xb4>)
 800240a:	e002      	b.n	8002412 <_cbWindow1+0x3e>
				break;
			}
			break;
			case ID_BUTTON_2: // Notifications sent by 'btnSetup'
			switch(NCode) {
 800240c:	2b02      	cmp	r3, #2
 800240e:	d138      	bne.n	8002482 <_cbWindow1+0xae>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				ShowWindow(hWinModbusStats);
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <_cbWindow1+0xb8>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	f7ff ff76 	bl	8002304 <ShowWindow>
 8002418:	e033      	b.n	8002482 <_cbWindow1+0xae>
				break;
			}
			break;
			case ID_BUTTON_3: // Notifications sent by 'btnSetup'
			switch(NCode) {
 800241a:	2b02      	cmp	r3, #2
 800241c:	d131      	bne.n	8002482 <_cbWindow1+0xae>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				ShowWindow(hWinThermostat);
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <_cbWindow1+0xbc>)
 8002420:	e7f7      	b.n	8002412 <_cbWindow1+0x3e>
				break;
			}
			break;
			case ID_SLIDER_1:
			switch(NCode) {
 8002422:	2b05      	cmp	r3, #5
 8002424:	d12d      	bne.n	8002482 <_cbWindow1+0xae>
*/
static void _OnValueChanged(WM_HWIN hWindow, int Id){
	TIM_OC_InitTypeDef sConfig;
	uint16_t v;
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <_cbWindow1+0xc0>)
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	f006 fc48 	bl	8008cbe <SLIDER_GetValue>
 800242e:	4604      	mov	r4, r0
 8002430:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8002434:	0064      	lsls	r4, r4, #1
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
		
		sConfig.OCMode			= TIM_OCMODE_PWM1;
		sConfig.OCPolarity		= TIM_OCPOLARITY_HIGH;
 8002436:	2500      	movs	r5, #0
	TIM_OC_InitTypeDef sConfig;
	uint16_t v;
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
 8002438:	2100      	movs	r1, #0
 800243a:	4817      	ldr	r0, [pc, #92]	; (8002498 <_cbWindow1+0xc4>)
*/
static void _OnValueChanged(WM_HWIN hWindow, int Id){
	TIM_OC_InitTypeDef sConfig;
	uint16_t v;
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
 800243c:	3405      	adds	r4, #5
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
 800243e:	f004 fec5 	bl	80071cc <HAL_TIM_PWM_Stop>
		sConfig.OCNPolarity		= TIM_OCNPOLARITY_HIGH;
		sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
		sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
		sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
		
		sConfig.Pulse = v;
 8002442:	b2a4      	uxth	r4, r4
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
		
		sConfig.OCMode			= TIM_OCMODE_PWM1;
 8002444:	2360      	movs	r3, #96	; 0x60
		sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
		sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
		sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
		
		sConfig.Pulse = v;
		HAL_TIM_PWM_ConfigChannel(&TimHandle_9, &sConfig, TIM_CHANNEL_1);
 8002446:	a901      	add	r1, sp, #4
 8002448:	462a      	mov	r2, r5
 800244a:	4813      	ldr	r0, [pc, #76]	; (8002498 <_cbWindow1+0xc4>)
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
		
		sConfig.OCMode			= TIM_OCMODE_PWM1;
 800244c:	9301      	str	r3, [sp, #4]
		sConfig.OCPolarity		= TIM_OCPOLARITY_HIGH;
 800244e:	9503      	str	r5, [sp, #12]
		sConfig.OCNPolarity		= TIM_OCNPOLARITY_HIGH;
 8002450:	9504      	str	r5, [sp, #16]
		sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
 8002452:	9507      	str	r5, [sp, #28]
		sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
 8002454:	9506      	str	r5, [sp, #24]
		sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
 8002456:	9505      	str	r5, [sp, #20]
		
		sConfig.Pulse = v;
 8002458:	9402      	str	r4, [sp, #8]
		HAL_TIM_PWM_ConfigChannel(&TimHandle_9, &sConfig, TIM_CHANNEL_1);
 800245a:	f004 fcc1 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
		
		HAL_TIM_PWM_Start(&TimHandle_9, TIM_CHANNEL_1);
 800245e:	4629      	mov	r1, r5
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <_cbWindow1+0xc4>)
 8002462:	f004 fe55 	bl	8007110 <HAL_TIM_PWM_Start>
 8002466:	e00c      	b.n	8002482 <_cbWindow1+0xae>
			}
			break;
		}
		break;
		case WM_PAINT:
		WM_GetUserData(pMsg->hWin, &Color, 4);
 8002468:	a901      	add	r1, sp, #4
 800246a:	2204      	movs	r2, #4
 800246c:	6840      	ldr	r0, [r0, #4]
 800246e:	f008 fe4c 	bl	800b10a <WM_GetUserData>
		GUI_SetBkColor(Color);
 8002472:	9801      	ldr	r0, [sp, #4]
 8002474:	f00d ff06 	bl	8010284 <GUI_SetBkColor>
		GUI_Clear();
 8002478:	f00e fe1e 	bl	80110b8 <GUI_Clear>
		break;
 800247c:	e001      	b.n	8002482 <_cbWindow1+0xae>
		default:
		WM_DefaultProc(pMsg);
 800247e:	f00a fb9b 	bl	800cbb8 <WM_DefaultProc>
		break;
	}
}
 8002482:	b009      	add	sp, #36	; 0x24
 8002484:	bd30      	pop	{r4, r5, pc}
 8002486:	bf00      	nop
 8002488:	20017930 	.word	0x20017930
 800248c:	20017950 	.word	0x20017950
 8002490:	20017924 	.word	0x20017924
 8002494:	20016b34 	.word	0x20016b34
 8002498:	20017550 	.word	0x20017550

0800249c <Init_GUI_verventa>:
/*********************************************************************
	*	Init_GUI_calor
	*		:Init all windows and callbacks for the GUI
	**********************************************************************
*/
ErrorStatus Init_GUI_verventa(void){
 800249c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*	_SetDesktopColor
	*		:Set Color for desktop Black
	**********************************************************************
*/
static void _SetDesktopColor(void){
	GUI_SetBkColor(GUI_BLUE);
 80024a0:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
/*********************************************************************
	*	Init_GUI_calor
	*		:Init all windows and callbacks for the GUI
	**********************************************************************
*/
ErrorStatus Init_GUI_verventa(void){
 80024a4:	b087      	sub	sp, #28
	*	_SetDesktopColor
	*		:Set Color for desktop Black
	**********************************************************************
*/
static void _SetDesktopColor(void){
	GUI_SetBkColor(GUI_BLUE);
 80024a6:	f00d feed 	bl	8010284 <GUI_SetBkColor>
	GUI_Clear();
 80024aa:	f00e fe05 	bl	80110b8 <GUI_Clear>
	*	_DrawInfoText
	*		:Drawes the info text directly on the display
	**********************************************************************
*/
static void _DrawInfoText(char *pStr){
	GUI_SetColor(GUI_WHITE);
 80024ae:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	GUI_SetFont(&GUI_Font24_ASCII);
	GUI_DispStringHCenterAt("WindowManager - MultiCalor", 160, 5);
	GUI_SetFont(&GUI_Font8x16);
 80024b2:	f8df 83b8 	ldr.w	r8, [pc, #952]	; 800286c <Init_GUI_verventa+0x3d0>
	*	_CreateWindow
	*		:Create all windows
	**********************************************************************
*/
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 80024b6:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 8002870 <Init_GUI_verventa+0x3d4>
 80024ba:	4fda      	ldr	r7, [pc, #872]	; (8002824 <Init_GUI_verventa+0x388>)
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
 80024bc:	4eda      	ldr	r6, [pc, #872]	; (8002828 <Init_GUI_verventa+0x38c>)
	//GUI_Delay(SPEED/3);
	_hWindow5 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 80024be:	f8df b3b4 	ldr.w	fp, [pc, #948]	; 8002874 <Init_GUI_verventa+0x3d8>
 80024c2:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8002878 <Init_GUI_verventa+0x3dc>
	*	_DrawInfoText
	*		:Drawes the info text directly on the display
	**********************************************************************
*/
static void _DrawInfoText(char *pStr){
	GUI_SetColor(GUI_WHITE);
 80024c6:	f00d fedf 	bl	8010288 <GUI_SetColor>
	GUI_SetFont(&GUI_Font24_ASCII);
 80024ca:	48d8      	ldr	r0, [pc, #864]	; (800282c <Init_GUI_verventa+0x390>)
 80024cc:	f00d feae 	bl	801022c <GUI_SetFont>
	GUI_DispStringHCenterAt("WindowManager - MultiCalor", 160, 5);
 80024d0:	21a0      	movs	r1, #160	; 0xa0
 80024d2:	2205      	movs	r2, #5
 80024d4:	48d6      	ldr	r0, [pc, #856]	; (8002830 <Init_GUI_verventa+0x394>)
 80024d6:	f00e fbfd 	bl	8010cd4 <GUI_DispStringHCenterAt>
	GUI_SetFont(&GUI_Font8x16);
 80024da:	4640      	mov	r0, r8
 80024dc:	f00d fea6 	bl	801022c <GUI_SetFont>
	GUI_DispStringAtCEOL(pStr, 5, 40);
 80024e0:	2228      	movs	r2, #40	; 0x28
 80024e2:	2105      	movs	r1, #5
 80024e4:	48d3      	ldr	r0, [pc, #844]	; (8002834 <Init_GUI_verventa+0x398>)
 80024e6:	f00e fc0f 	bl	8010d08 <GUI_DispStringAtCEOL>
*/
static void _SetDesktopColor(void){
	GUI_SetBkColor(GUI_BLUE);
	GUI_Clear();
	_DrawInfoText("WM_SetDesktopColor()");
	GUI_Exec();
 80024ea:	f00e f82f 	bl	801054c <GUI_Exec>
	//GUI_Delay(SPEED/2);
	WM_SetDesktopColor(GUI_BLACK);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f008 ff60 	bl	800b3b4 <WM_SetDesktopColor>
	GUI_Exec();
 80024f4:	f00e f82a 	bl	801054c <GUI_Exec>
	//GUI_Delay(SPEED/2);
	GUI_SetBkColor(GUI_BLACK);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f00d fec3 	bl	8010284 <GUI_SetBkColor>
	WM_SetDesktopColor(GUI_INVALID_COLOR);
 80024fe:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 8002502:	f008 ff57 	bl	800b3b4 <WM_SetDesktopColor>
	*	_CreateWindow
	*		:Create all windows
	**********************************************************************
*/
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 8002506:	f009 fa11 	bl	800b92c <WM_GetDesktopWindow>
 800250a:	4651      	mov	r1, sl
 800250c:	f008 ffdc 	bl	800b4c8 <WM_SetCallback>
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
 8002510:	2400      	movs	r4, #0
 8002512:	2506      	movs	r5, #6
 8002514:	4bc8      	ldr	r3, [pc, #800]	; (8002838 <Init_GUI_verventa+0x39c>)
	*	_CreateWindow
	*		:Create all windows
	**********************************************************************
*/
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 8002516:	6038      	str	r0, [r7, #0]
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
 8002518:	4621      	mov	r1, r4
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	9500      	str	r5, [sp, #0]
 800251e:	9402      	str	r4, [sp, #8]
 8002520:	4620      	mov	r0, r4
 8002522:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002526:	23f0      	movs	r3, #240	; 0xf0
 8002528:	f00a f888 	bl	800c63c <WM_CreateWindow>
	//GUI_Delay(SPEED/3);
	_hWindow5 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 800252c:	f8cd b004 	str.w	fp, [sp, #4]
	**********************************************************************
*/
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
 8002530:	6030      	str	r0, [r6, #0]
	//GUI_Delay(SPEED/3);
	_hWindow5 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002532:	4621      	mov	r1, r4
 8002534:	9500      	str	r5, [sp, #0]
 8002536:	9402      	str	r4, [sp, #8]
 8002538:	4620      	mov	r0, r4
 800253a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800253e:	23f0      	movs	r3, #240	; 0xf0
 8002540:	f00a f87c 	bl	800c63c <WM_CreateWindow>
	//GUI_Delay(SPEED/3);
	_hWindow6 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002544:	4621      	mov	r1, r4
 8002546:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800254a:	23f0      	movs	r3, #240	; 0xf0
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
	//GUI_Delay(SPEED/3);
	_hWindow5 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 800254c:	f8c9 0000 	str.w	r0, [r9]
	//GUI_Delay(SPEED/3);
	_hWindow6 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002550:	e88d 0820 	stmia.w	sp, {r5, fp}
 8002554:	9402      	str	r4, [sp, #8]
 8002556:	4620      	mov	r0, r4
 8002558:	f00a f870 	bl	800c63c <WM_CreateWindow>
 800255c:	f8df b31c 	ldr.w	fp, [pc, #796]	; 800287c <Init_GUI_verventa+0x3e0>
 8002560:	f8cb 0000 	str.w	r0, [fp]
	//GUI_Delay(SPEED/3);
	
	ShowWindow(_hWindow4);
 8002564:	6830      	ldr	r0, [r6, #0]
 8002566:	f7ff fecd 	bl	8002304 <ShowWindow>
	*	_CreateWindowAsChild
	*		:Create all child windows
	**********************************************************************
*/
static void _CreateWindowAsChild(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 800256a:	f009 f9df 	bl	800b92c <WM_GetDesktopWindow>
 800256e:	4651      	mov	r1, sl
 8002570:	f008 ffaa 	bl	800b4c8 <WM_SetCallback>
	
	_hButton_button1 = BUTTON_CreateAsChild(0, 0, 150, 50, _hWindow4, ID_BUTTON_0, WM_CF_SHOW | WM_CF_MEMDEV);
 8002574:	6833      	ldr	r3, [r6, #0]
	*	_CreateWindowAsChild
	*		:Create all child windows
	**********************************************************************
*/
static void _CreateWindowAsChild(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 8002576:	6038      	str	r0, [r7, #0]
	
	_hButton_button1 = BUTTON_CreateAsChild(0, 0, 150, 50, _hWindow4, ID_BUTTON_0, WM_CF_SHOW | WM_CF_MEMDEV);
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f640 030b 	movw	r3, #2059	; 0x80b
 800257e:	2296      	movs	r2, #150	; 0x96
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	4621      	mov	r1, r4
 8002584:	2332      	movs	r3, #50	; 0x32
 8002586:	9502      	str	r5, [sp, #8]
 8002588:	4620      	mov	r0, r4
 800258a:	f008 fc0c 	bl	800ada6 <BUTTON_CreateAsChild>
 800258e:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8002880 <Init_GUI_verventa+0x3e4>
	BUTTON_SetFont(_hButton_button1, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button1, "Menu Load");
	BUTTON_SetFocussable(_hButton_button1, 1);
	BUTTON_SetSkin(_hButton_button1, BUTTON_SKIN_FLEX);
 8002592:	4faa      	ldr	r7, [pc, #680]	; (800283c <Init_GUI_verventa+0x3a0>)
	**********************************************************************
*/
static void _CreateWindowAsChild(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
	
	_hButton_button1 = BUTTON_CreateAsChild(0, 0, 150, 50, _hWindow4, ID_BUTTON_0, WM_CF_SHOW | WM_CF_MEMDEV);
 8002594:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button1, &GUI_Font8x16);
 8002598:	4641      	mov	r1, r8
 800259a:	f008 fd43 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button1, "Menu Load");
 800259e:	f8da 0000 	ldr.w	r0, [sl]
 80025a2:	49a7      	ldr	r1, [pc, #668]	; (8002840 <Init_GUI_verventa+0x3a4>)
 80025a4:	f008 fd16 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button1, 1);
 80025a8:	f8da 0000 	ldr.w	r0, [sl]
 80025ac:	2101      	movs	r1, #1
 80025ae:	f008 fd4a 	bl	800b046 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button1, BUTTON_SKIN_FLEX);
 80025b2:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button2 = BUTTON_CreateAsChild(0, 60, 150, 50, _hWindow4, ID_BUTTON_1, WM_CF_SHOW | WM_CF_MEMDEV);
 80025b6:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8002884 <Init_GUI_verventa+0x3e8>
	
	_hButton_button1 = BUTTON_CreateAsChild(0, 0, 150, 50, _hWindow4, ID_BUTTON_0, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button1, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button1, "Menu Load");
	BUTTON_SetFocussable(_hButton_button1, 1);
	BUTTON_SetSkin(_hButton_button1, BUTTON_SKIN_FLEX);
 80025ba:	4639      	mov	r1, r7
 80025bc:	f008 fbae 	bl	800ad1c <BUTTON_SetSkin>
	
	
	_hButton_button2 = BUTTON_CreateAsChild(0, 60, 150, 50, _hWindow4, ID_BUTTON_1, WM_CF_SHOW | WM_CF_MEMDEV);
 80025c0:	6833      	ldr	r3, [r6, #0]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f640 030c 	movw	r3, #2060	; 0x80c
 80025c8:	2296      	movs	r2, #150	; 0x96
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	9502      	str	r5, [sp, #8]
 80025ce:	2332      	movs	r3, #50	; 0x32
 80025d0:	4620      	mov	r0, r4
 80025d2:	213c      	movs	r1, #60	; 0x3c
 80025d4:	f008 fbe7 	bl	800ada6 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button2, &GUI_Font8x16);
 80025d8:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button1, "Menu Load");
	BUTTON_SetFocussable(_hButton_button1, 1);
	BUTTON_SetSkin(_hButton_button1, BUTTON_SKIN_FLEX);
	
	
	_hButton_button2 = BUTTON_CreateAsChild(0, 60, 150, 50, _hWindow4, ID_BUTTON_1, WM_CF_SHOW | WM_CF_MEMDEV);
 80025da:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button2, &GUI_Font8x16);
 80025de:	f008 fd21 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button2, "Menu Reserve");
 80025e2:	f8da 0000 	ldr.w	r0, [sl]
 80025e6:	4997      	ldr	r1, [pc, #604]	; (8002844 <Init_GUI_verventa+0x3a8>)
 80025e8:	f008 fcf4 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button2, 1);
 80025ec:	f8da 0000 	ldr.w	r0, [sl]
 80025f0:	2101      	movs	r1, #1
 80025f2:	f008 fd28 	bl	800b046 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button2, BUTTON_SKIN_FLEX);
 80025f6:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button3 = BUTTON_CreateAsChild(0, 120, 150, 50, _hWindow4, ID_BUTTON_2, WM_CF_SHOW | WM_CF_MEMDEV);
 80025fa:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8002888 <Init_GUI_verventa+0x3ec>
	
	_hButton_button2 = BUTTON_CreateAsChild(0, 60, 150, 50, _hWindow4, ID_BUTTON_1, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button2, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button2, "Menu Reserve");
	BUTTON_SetFocussable(_hButton_button2, 1);
	BUTTON_SetSkin(_hButton_button2, BUTTON_SKIN_FLEX);
 80025fe:	4639      	mov	r1, r7
 8002600:	f008 fb8c 	bl	800ad1c <BUTTON_SetSkin>
	
	
	_hButton_button3 = BUTTON_CreateAsChild(0, 120, 150, 50, _hWindow4, ID_BUTTON_2, WM_CF_SHOW | WM_CF_MEMDEV);
 8002604:	6833      	ldr	r3, [r6, #0]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	f640 030d 	movw	r3, #2061	; 0x80d
 800260c:	2296      	movs	r2, #150	; 0x96
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	9502      	str	r5, [sp, #8]
 8002612:	2332      	movs	r3, #50	; 0x32
 8002614:	4620      	mov	r0, r4
 8002616:	2178      	movs	r1, #120	; 0x78
 8002618:	f008 fbc5 	bl	800ada6 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button3, &GUI_Font8x16);
 800261c:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button2, "Menu Reserve");
	BUTTON_SetFocussable(_hButton_button2, 1);
	BUTTON_SetSkin(_hButton_button2, BUTTON_SKIN_FLEX);
	
	
	_hButton_button3 = BUTTON_CreateAsChild(0, 120, 150, 50, _hWindow4, ID_BUTTON_2, WM_CF_SHOW | WM_CF_MEMDEV);
 800261e:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button3, &GUI_Font8x16);
 8002622:	f008 fcff 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button3, "Modbus Stats");
 8002626:	f8da 0000 	ldr.w	r0, [sl]
 800262a:	4987      	ldr	r1, [pc, #540]	; (8002848 <Init_GUI_verventa+0x3ac>)
 800262c:	f008 fcd2 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button3, 1);
 8002630:	f8da 0000 	ldr.w	r0, [sl]
 8002634:	2101      	movs	r1, #1
 8002636:	f008 fd06 	bl	800b046 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button3, BUTTON_SKIN_FLEX);
 800263a:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button4 = BUTTON_CreateAsChild(160, 0, 150, 50, _hWindow4, ID_BUTTON_3, WM_CF_SHOW | WM_CF_MEMDEV);
 800263e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 800288c <Init_GUI_verventa+0x3f0>
	
	_hButton_button3 = BUTTON_CreateAsChild(0, 120, 150, 50, _hWindow4, ID_BUTTON_2, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button3, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button3, "Modbus Stats");
	BUTTON_SetFocussable(_hButton_button3, 1);
	BUTTON_SetSkin(_hButton_button3, BUTTON_SKIN_FLEX);
 8002642:	4639      	mov	r1, r7
 8002644:	f008 fb6a 	bl	800ad1c <BUTTON_SetSkin>
	
	
	_hButton_button4 = BUTTON_CreateAsChild(160, 0, 150, 50, _hWindow4, ID_BUTTON_3, WM_CF_SHOW | WM_CF_MEMDEV);
 8002648:	6833      	ldr	r3, [r6, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	f640 030e 	movw	r3, #2062	; 0x80e
 8002650:	2296      	movs	r2, #150	; 0x96
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	4621      	mov	r1, r4
 8002656:	2332      	movs	r3, #50	; 0x32
 8002658:	9502      	str	r5, [sp, #8]
 800265a:	20a0      	movs	r0, #160	; 0xa0
 800265c:	f008 fba3 	bl	800ada6 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button4, &GUI_Font8x16);
 8002660:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button3, "Modbus Stats");
	BUTTON_SetFocussable(_hButton_button3, 1);
	BUTTON_SetSkin(_hButton_button3, BUTTON_SKIN_FLEX);
	
	
	_hButton_button4 = BUTTON_CreateAsChild(160, 0, 150, 50, _hWindow4, ID_BUTTON_3, WM_CF_SHOW | WM_CF_MEMDEV);
 8002662:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button4, &GUI_Font8x16);
 8002666:	f008 fcdd 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button4, "Menu Vent");
 800266a:	f8da 0000 	ldr.w	r0, [sl]
 800266e:	4977      	ldr	r1, [pc, #476]	; (800284c <Init_GUI_verventa+0x3b0>)
 8002670:	f008 fcb0 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button4, 1);
 8002674:	f8da 0000 	ldr.w	r0, [sl]
 8002678:	2101      	movs	r1, #1
 800267a:	f008 fce4 	bl	800b046 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button4, BUTTON_SKIN_FLEX);
 800267e:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button5 = BUTTON_CreateAsChild(160, 60, 150, 50, _hWindow4, ID_BUTTON_4, WM_CF_SHOW | WM_CF_MEMDEV);
 8002682:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8002890 <Init_GUI_verventa+0x3f4>
	
	_hButton_button4 = BUTTON_CreateAsChild(160, 0, 150, 50, _hWindow4, ID_BUTTON_3, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button4, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button4, "Menu Vent");
	BUTTON_SetFocussable(_hButton_button4, 1);
	BUTTON_SetSkin(_hButton_button4, BUTTON_SKIN_FLEX);
 8002686:	4639      	mov	r1, r7
 8002688:	f008 fb48 	bl	800ad1c <BUTTON_SetSkin>
	
	
	_hButton_button5 = BUTTON_CreateAsChild(160, 60, 150, 50, _hWindow4, ID_BUTTON_4, WM_CF_SHOW | WM_CF_MEMDEV);
 800268c:	6833      	ldr	r3, [r6, #0]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	f640 030f 	movw	r3, #2063	; 0x80f
 8002694:	2296      	movs	r2, #150	; 0x96
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	9502      	str	r5, [sp, #8]
 800269a:	2332      	movs	r3, #50	; 0x32
 800269c:	213c      	movs	r1, #60	; 0x3c
 800269e:	20a0      	movs	r0, #160	; 0xa0
 80026a0:	f008 fb81 	bl	800ada6 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button5, &GUI_Font8x16);
 80026a4:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button4, "Menu Vent");
	BUTTON_SetFocussable(_hButton_button4, 1);
	BUTTON_SetSkin(_hButton_button4, BUTTON_SKIN_FLEX);
	
	
	_hButton_button5 = BUTTON_CreateAsChild(160, 60, 150, 50, _hWindow4, ID_BUTTON_4, WM_CF_SHOW | WM_CF_MEMDEV);
 80026a6:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button5, &GUI_Font8x16);
 80026aa:	f008 fcbb 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button5, "Touch Up");
 80026ae:	f8da 0000 	ldr.w	r0, [sl]
 80026b2:	4967      	ldr	r1, [pc, #412]	; (8002850 <Init_GUI_verventa+0x3b4>)
 80026b4:	f008 fc8e 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button5, 1);
 80026b8:	f8da 0000 	ldr.w	r0, [sl]
 80026bc:	2101      	movs	r1, #1
 80026be:	f008 fcc2 	bl	800b046 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button5, BUTTON_SKIN_FLEX);
 80026c2:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
 80026c6:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8002894 <Init_GUI_verventa+0x3f8>
	
	_hButton_button5 = BUTTON_CreateAsChild(160, 60, 150, 50, _hWindow4, ID_BUTTON_4, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button5, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button5, "Touch Up");
	BUTTON_SetFocussable(_hButton_button5, 1);
	BUTTON_SetSkin(_hButton_button5, BUTTON_SKIN_FLEX);
 80026ca:	4639      	mov	r1, r7
 80026cc:	f008 fb26 	bl	800ad1c <BUTTON_SetSkin>
	
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
 80026d0:	6833      	ldr	r3, [r6, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80026d8:	2296      	movs	r2, #150	; 0x96
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	9502      	str	r5, [sp, #8]
 80026de:	2332      	movs	r3, #50	; 0x32
 80026e0:	2178      	movs	r1, #120	; 0x78
 80026e2:	20a0      	movs	r0, #160	; 0xa0
 80026e4:	f008 fb5f 	bl	800ada6 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button6, &GUI_Font8x16);
 80026e8:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button5, "Touch Up");
	BUTTON_SetFocussable(_hButton_button5, 1);
	BUTTON_SetSkin(_hButton_button5, BUTTON_SKIN_FLEX);
	
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
 80026ea:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button6, &GUI_Font8x16);
 80026ee:	f008 fc99 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button6, "Touch Down");
 80026f2:	f8da 0000 	ldr.w	r0, [sl]
 80026f6:	4957      	ldr	r1, [pc, #348]	; (8002854 <Init_GUI_verventa+0x3b8>)
	BUTTON_SetFocussable(_hButton_button6, 1);
	BUTTON_SetSkin(_hButton_button6, BUTTON_SKIN_FLEX);
	
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
 80026f8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8002898 <Init_GUI_verventa+0x3fc>
	BUTTON_SetSkin(_hButton_button5, BUTTON_SKIN_FLEX);
	
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button6, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button6, "Touch Down");
 80026fc:	f008 fc6a 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button6, 1);
 8002700:	f8da 0000 	ldr.w	r0, [sl]
 8002704:	2101      	movs	r1, #1
 8002706:	f008 fc9e 	bl	800b046 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button6, BUTTON_SKIN_FLEX);
 800270a:	f8da 0000 	ldr.w	r0, [sl]
	
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
 800270e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800289c <Init_GUI_verventa+0x400>
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button6, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button6, "Touch Down");
	BUTTON_SetFocussable(_hButton_button6, 1);
	BUTTON_SetSkin(_hButton_button6, BUTTON_SKIN_FLEX);
 8002712:	4639      	mov	r1, r7
 8002714:	f008 fb02 	bl	800ad1c <BUTTON_SetSkin>
	
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
 8002718:	f8d9 3000 	ldr.w	r3, [r9]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2132      	movs	r1, #50	; 0x32
 8002720:	f640 0311 	movw	r3, #2065	; 0x811
 8002724:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	9502      	str	r5, [sp, #8]
 800272c:	460b      	mov	r3, r1
 800272e:	4620      	mov	r0, r4
 8002730:	f008 fb39 	bl	800ada6 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
 8002734:	4651      	mov	r1, sl
	BUTTON_SetFocussable(_hButton_button6, 1);
	BUTTON_SetSkin(_hButton_button6, BUTTON_SKIN_FLEX);
	
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
 8002736:	f8c8 0000 	str.w	r0, [r8]
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
 800273a:	f008 fc73 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button7, "MAIN");
 800273e:	f8df c160 	ldr.w	ip, [pc, #352]	; 80028a0 <Init_GUI_verventa+0x404>
 8002742:	f8d8 0000 	ldr.w	r0, [r8]
 8002746:	f8cd c014 	str.w	ip, [sp, #20]
 800274a:	4661      	mov	r1, ip
 800274c:	f008 fc42 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button7, 1);
 8002750:	f8d8 0000 	ldr.w	r0, [r8]
	
	
	_hButton_button8 = BUTTON_CreateAsChild(0, 110, 320, 50, _hWindow5, ID_BUTTON_7, WM_CF_SHOW | WM_CF_MEMDEV);
 8002754:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80028a4 <Init_GUI_verventa+0x408>
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
	BUTTON_SetText(_hButton_button7, "MAIN");
	BUTTON_SetFocussable(_hButton_button7, 1);
 8002758:	2101      	movs	r1, #1
 800275a:	f008 fc74 	bl	800b046 <BUTTON_SetFocussable>
	
	
	_hButton_button8 = BUTTON_CreateAsChild(0, 110, 320, 50, _hWindow5, ID_BUTTON_7, WM_CF_SHOW | WM_CF_MEMDEV);
 800275e:	f8d9 3000 	ldr.w	r3, [r9]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f640 0312 	movw	r3, #2066	; 0x812
 8002768:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	9502      	str	r5, [sp, #8]
 8002770:	2332      	movs	r3, #50	; 0x32
 8002772:	4620      	mov	r0, r4
 8002774:	216e      	movs	r1, #110	; 0x6e
 8002776:	f008 fb16 	bl	800ada6 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button8, &GUI_Font24B_ASCII);
 800277a:	4651      	mov	r1, sl
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
	BUTTON_SetText(_hButton_button7, "MAIN");
	BUTTON_SetFocussable(_hButton_button7, 1);
	
	
	_hButton_button8 = BUTTON_CreateAsChild(0, 110, 320, 50, _hWindow5, ID_BUTTON_7, WM_CF_SHOW | WM_CF_MEMDEV);
 800277c:	f8c8 0000 	str.w	r0, [r8]
	BUTTON_SetFont(_hButton_button8, &GUI_Font24B_ASCII);
 8002780:	f008 fc50 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button8, "Load Temp");
 8002784:	f8d8 0000 	ldr.w	r0, [r8]
 8002788:	4933      	ldr	r1, [pc, #204]	; (8002858 <Init_GUI_verventa+0x3bc>)
 800278a:	f008 fc23 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button8, 1);
 800278e:	f8d8 0000 	ldr.w	r0, [r8]
 8002792:	2101      	movs	r1, #1
 8002794:	f008 fc57 	bl	800b046 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button8, BUTTON_SKIN_FLEX);
 8002798:	f8d8 0000 	ldr.w	r0, [r8]
 800279c:	4639      	mov	r1, r7
 800279e:	f008 fabd 	bl	800ad1c <BUTTON_SetSkin>
	
	
	_hProgBar_1 = PROGBAR_CreateAsChild(20, 200, 200, 25, _hWindow5, ID_PROGBAR_1, WM_CF_SHOW | WM_CF_MEMDEV);
 80027a2:	f8d9 3000 	ldr.w	r3, [r9]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	21c8      	movs	r1, #200	; 0xc8
 80027aa:	f640 0314 	movw	r3, #2068	; 0x814
 80027ae:	460a      	mov	r2, r1
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	9502      	str	r5, [sp, #8]
 80027b4:	2319      	movs	r3, #25
 80027b6:	2014      	movs	r0, #20
 80027b8:	f006 fdfe 	bl	80093b8 <PROGBAR_CreateAsChild>
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <Init_GUI_verventa+0x3c0>)
	//PROGBAR_SetMinMax(_hProgBar_1, -16383, 16383);
	//PROGBAR_SetText(_hProgBar_1, "Load in temp...");
	PROGBAR_SetSkin(_hProgBar_1, PROGBAR_SKIN_FLEX);
 80027be:	4928      	ldr	r1, [pc, #160]	; (8002860 <Init_GUI_verventa+0x3c4>)
	BUTTON_SetText(_hButton_button8, "Load Temp");
	BUTTON_SetFocussable(_hButton_button8, 1);
	BUTTON_SetSkin(_hButton_button8, BUTTON_SKIN_FLEX);
	
	
	_hProgBar_1 = PROGBAR_CreateAsChild(20, 200, 200, 25, _hWindow5, ID_PROGBAR_1, WM_CF_SHOW | WM_CF_MEMDEV);
 80027c0:	6018      	str	r0, [r3, #0]
	//PROGBAR_SetMinMax(_hProgBar_1, -16383, 16383);
	//PROGBAR_SetText(_hProgBar_1, "Load in temp...");
	PROGBAR_SetSkin(_hProgBar_1, PROGBAR_SKIN_FLEX);
 80027c2:	f006 fde5 	bl	8009390 <PROGBAR_SetSkin>
	//PROGBAR_SetValue(_hProgBar_1, 50);
	
	_hButton_button9 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow6, ID_BUTTON_8, WM_CF_SHOW | WM_CF_MEMDEV);
 80027c6:	f8db 3000 	ldr.w	r3, [fp]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2132      	movs	r1, #50	; 0x32
 80027ce:	f640 0313 	movw	r3, #2067	; 0x813
 80027d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	9502      	str	r5, [sp, #8]
 80027da:	460b      	mov	r3, r1
 80027dc:	4620      	mov	r0, r4
 80027de:	f008 fae2 	bl	800ada6 <BUTTON_CreateAsChild>
 80027e2:	4f20      	ldr	r7, [pc, #128]	; (8002864 <Init_GUI_verventa+0x3c8>)
	BUTTON_SetFont(_hButton_button9, &GUI_Font24B_ASCII);
 80027e4:	4651      	mov	r1, sl
	//PROGBAR_SetMinMax(_hProgBar_1, -16383, 16383);
	//PROGBAR_SetText(_hProgBar_1, "Load in temp...");
	PROGBAR_SetSkin(_hProgBar_1, PROGBAR_SKIN_FLEX);
	//PROGBAR_SetValue(_hProgBar_1, 50);
	
	_hButton_button9 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow6, ID_BUTTON_8, WM_CF_SHOW | WM_CF_MEMDEV);
 80027e6:	6038      	str	r0, [r7, #0]
	BUTTON_SetFont(_hButton_button9, &GUI_Font24B_ASCII);
 80027e8:	f008 fc1c 	bl	800b024 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button9, "MAIN");
 80027ec:	f8dd c014 	ldr.w	ip, [sp, #20]
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	4661      	mov	r1, ip
 80027f4:	f008 fbee 	bl	800afd4 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button9, 1);
 80027f8:	6838      	ldr	r0, [r7, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	f008 fc23 	bl	800b046 <BUTTON_SetFocussable>
	
	_hSlider_1 = SLIDER_CreateEx(20, 180, 150, 35, _hWindow4, WM_CF_SHOW | WM_CF_MEMDEV, 0, ID_SLIDER_1);
 8002800:	6833      	ldr	r3, [r6, #0]
 8002802:	9402      	str	r4, [sp, #8]
 8002804:	e88d 0028 	stmia.w	sp, {r3, r5}
 8002808:	f640 0315 	movw	r3, #2069	; 0x815
 800280c:	21b4      	movs	r1, #180	; 0xb4
 800280e:	2296      	movs	r2, #150	; 0x96
 8002810:	9303      	str	r3, [sp, #12]
 8002812:	2014      	movs	r0, #20
 8002814:	2323      	movs	r3, #35	; 0x23
 8002816:	f006 f915 	bl	8008a44 <SLIDER_CreateEx>
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <Init_GUI_verventa+0x3cc>)
 800281c:	6018      	str	r0, [r3, #0]
	
	GUI_Exec();
 800281e:	f00d fe95 	bl	801054c <GUI_Exec>
 8002822:	e041      	b.n	80028a8 <Init_GUI_verventa+0x40c>
 8002824:	20016b4c 	.word	0x20016b4c
 8002828:	20017944 	.word	0x20017944
 800282c:	0802afa0 	.word	0x0802afa0
 8002830:	0801b5c4 	.word	0x0801b5c4
 8002834:	0801b5df 	.word	0x0801b5df
 8002838:	080023d5 	.word	0x080023d5
 800283c:	0800aa25 	.word	0x0800aa25
 8002840:	0801b5f4 	.word	0x0801b5f4
 8002844:	0801b5fe 	.word	0x0801b5fe
 8002848:	0801b60b 	.word	0x0801b60b
 800284c:	0801b618 	.word	0x0801b618
 8002850:	0801b622 	.word	0x0801b622
 8002854:	0801b62b 	.word	0x0801b62b
 8002858:	0801b63b 	.word	0x0801b63b
 800285c:	20016b38 	.word	0x20016b38
 8002860:	080090c9 	.word	0x080090c9
 8002864:	20016b44 	.word	0x20016b44
 8002868:	20016b34 	.word	0x20016b34
 800286c:	08027f04 	.word	0x08027f04
 8002870:	080022d1 	.word	0x080022d1
 8002874:	08002355 	.word	0x08002355
 8002878:	20017930 	.word	0x20017930
 800287c:	20017940 	.word	0x20017940
 8002880:	20016b04 	.word	0x20016b04
 8002884:	20016b48 	.word	0x20016b48
 8002888:	20016b30 	.word	0x20016b30
 800288c:	20016b50 	.word	0x20016b50
 8002890:	20016b54 	.word	0x20016b54
 8002894:	20016b58 	.word	0x20016b58
 8002898:	20016b3c 	.word	0x20016b3c
 800289c:	0802c0fc 	.word	0x0802c0fc
 80028a0:	0801b636 	.word	0x0801b636
 80028a4:	20016b40 	.word	0x20016b40
*/
ErrorStatus Init_GUI_verventa(void){
	_SetDesktopColor();
	_CreateWindow();
	_CreateWindowAsChild();
	hWinThermostat	= CreateThermostat();
 80028a8:	f7ff fcde 	bl	8002268 <CreateThermostat>
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <Init_GUI_verventa+0x424>)
 80028ae:	6018      	str	r0, [r3, #0]
	hWinModbusStats	= CreateModbusStats();
 80028b0:	f000 f89a 	bl	80029e8 <CreateModbusStats>
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <Init_GUI_verventa+0x428>)
 80028b6:	6018      	str	r0, [r3, #0]
	
	return(SUCCESS);
 80028b8:	2001      	movs	r0, #1
 80028ba:	b007      	add	sp, #28
 80028bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028c0:	20017924 	.word	0x20017924
 80028c4:	20017950 	.word	0x20017950

080028c8 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg){
 80028c8:	b538      	push	{r3, r4, r5, lr}
  WM_HWIN hItem;
  int Id, NCode, t1;

  switch (pMsg->MsgId) {
 80028ca:	6803      	ldr	r3, [r0, #0]
 80028cc:	2b26      	cmp	r3, #38	; 0x26

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg){
 80028ce:	4604      	mov	r4, r0
  WM_HWIN hItem;
  int Id, NCode, t1;

  switch (pMsg->MsgId) {
 80028d0:	d064      	beq.n	800299c <_cbDialog+0xd4>
 80028d2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80028d6:	d075      	beq.n	80029c4 <_cbDialog+0xfc>
 80028d8:	2b1d      	cmp	r3, #29
 80028da:	d16f      	bne.n	80029bc <_cbDialog+0xf4>
	  case WM_INIT_DIALOG:
		// Initialization of 'Thermostat'
		hItem = pMsg->hWin;
 80028dc:	6845      	ldr	r5, [r0, #4]
		FRAMEWIN_SetFont(hItem, &GUI_Font8x16);
 80028de:	493a      	ldr	r1, [pc, #232]	; (80029c8 <_cbDialog+0x100>)
 80028e0:	4628      	mov	r0, r5
 80028e2:	f007 fac1 	bl	8009e68 <FRAMEWIN_SetFont>
		FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 80028e6:	4628      	mov	r0, r5
 80028e8:	210e      	movs	r1, #14
 80028ea:	f007 fd7d 	bl	800a3e8 <FRAMEWIN_SetTextAlign>
		FRAMEWIN_SetTextColor(hItem, 0x00000000);
 80028ee:	4628      	mov	r0, r5
 80028f0:	2100      	movs	r1, #0
 80028f2:	f007 faeb 	bl	8009ecc <FRAMEWIN_SetTextColor>
		// Initialization of 'modbus_TimeOut'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
 80028f6:	6860      	ldr	r0, [r4, #4]
 80028f8:	f640 0117 	movw	r1, #2071	; 0x817
 80028fc:	f009 f812 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetText(hItem, "modbus timeout");
 8002900:	4932      	ldr	r1, [pc, #200]	; (80029cc <_cbDialog+0x104>)
		hItem = pMsg->hWin;
		FRAMEWIN_SetFont(hItem, &GUI_Font8x16);
		FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		FRAMEWIN_SetTextColor(hItem, 0x00000000);
		// Initialization of 'modbus_TimeOut'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
 8002902:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "modbus timeout");
 8002904:	f005 ff34 	bl	8008770 <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 8002908:	4628      	mov	r0, r5
 800290a:	492f      	ldr	r1, [pc, #188]	; (80029c8 <_cbDialog+0x100>)
 800290c:	f005 ff58 	bl	80087c0 <TEXT_SetFont>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8002910:	4628      	mov	r0, r5
 8002912:	210e      	movs	r1, #14
 8002914:	f005 ff1a 	bl	800874c <TEXT_SetTextAlign>
		// Initialization of 'modbus_Slaves'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
 8002918:	6860      	ldr	r0, [r4, #4]
 800291a:	f640 0118 	movw	r1, #2072	; 0x818
 800291e:	f009 f801 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 8002922:	4929      	ldr	r1, [pc, #164]	; (80029c8 <_cbDialog+0x100>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
		TEXT_SetText(hItem, "modbus timeout");
		TEXT_SetFont(hItem, GUI_FONT_8X16);
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'modbus_Slaves'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
 8002924:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 8002926:	f005 ff4b 	bl	80087c0 <TEXT_SetFont>
		TEXT_SetText(hItem, "modbus slaves");
 800292a:	4628      	mov	r0, r5
 800292c:	4928      	ldr	r1, [pc, #160]	; (80029d0 <_cbDialog+0x108>)
 800292e:	f005 ff1f 	bl	8008770 <TEXT_SetText>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8002932:	4628      	mov	r0, r5
 8002934:	210e      	movs	r1, #14
 8002936:	f005 ff09 	bl	800874c <TEXT_SetTextAlign>
		// Initialization of 'modbus_connects'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_21);
 800293a:	6860      	ldr	r0, [r4, #4]
 800293c:	f641 0109 	movw	r1, #6153	; 0x1809
 8002940:	f008 fff0 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 8002944:	4920      	ldr	r1, [pc, #128]	; (80029c8 <_cbDialog+0x100>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
		TEXT_SetFont(hItem, GUI_FONT_8X16);
		TEXT_SetText(hItem, "modbus slaves");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'modbus_connects'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_21);
 8002946:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 8002948:	f005 ff3a 	bl	80087c0 <TEXT_SetFont>
		TEXT_SetText(hItem, "modbus connections");
 800294c:	4628      	mov	r0, r5
 800294e:	4921      	ldr	r1, [pc, #132]	; (80029d4 <_cbDialog+0x10c>)
 8002950:	f005 ff0e 	bl	8008770 <TEXT_SetText>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8002954:	4628      	mov	r0, r5
 8002956:	210e      	movs	r1, #14
 8002958:	f005 fef8 	bl	800874c <TEXT_SetTextAlign>
		// Initialization of 'modbus_reserve'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_31);
 800295c:	6860      	ldr	r0, [r4, #4]
 800295e:	f640 0119 	movw	r1, #2073	; 0x819
 8002962:	f008 ffdf 	bl	800b924 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 8002966:	4918      	ldr	r1, [pc, #96]	; (80029c8 <_cbDialog+0x100>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_21);
		TEXT_SetFont(hItem, GUI_FONT_8X16);
		TEXT_SetText(hItem, "modbus connections");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'modbus_reserve'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_31);
 8002968:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 800296a:	f005 ff29 	bl	80087c0 <TEXT_SetFont>
		TEXT_SetText(hItem, "modbus stats");
 800296e:	4628      	mov	r0, r5
 8002970:	4919      	ldr	r1, [pc, #100]	; (80029d8 <_cbDialog+0x110>)
 8002972:	f005 fefd 	bl	8008770 <TEXT_SetText>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8002976:	4628      	mov	r0, r5
 8002978:	210e      	movs	r1, #14
 800297a:	f005 fee7 	bl	800874c <TEXT_SetTextAlign>
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
 800297e:	6860      	ldr	r0, [r4, #4]
 8002980:	f640 011f 	movw	r1, #2079	; 0x81f
 8002984:	f008 ffce 	bl	800b924 <WM_GetDialogItem>
		BUTTON_SetText(hItem, "main");
 8002988:	4914      	ldr	r1, [pc, #80]	; (80029dc <_cbDialog+0x114>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_31);
		TEXT_SetFont(hItem, GUI_FONT_8X16);
		TEXT_SetText(hItem, "modbus stats");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
 800298a:	4604      	mov	r4, r0
		BUTTON_SetText(hItem, "main");
 800298c:	f008 fb22 	bl	800afd4 <BUTTON_SetText>
		BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 8002990:	4620      	mov	r0, r4
 8002992:	4913      	ldr	r1, [pc, #76]	; (80029e0 <_cbDialog+0x118>)
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 8002994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TEXT_SetText(hItem, "modbus stats");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
		BUTTON_SetText(hItem, "main");
		BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 8002998:	f008 bb44 	b.w	800b024 <BUTTON_SetFont>
		break;
	  case WM_TOUCH:
		break;
	  case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 800299c:	6880      	ldr	r0, [r0, #8]
 800299e:	f008 ff80 	bl	800b8a2 <WM_GetId>
		NCode = pMsg->Data.v;
		switch(Id) {
 80029a2:	f640 021f 	movw	r2, #2079	; 0x81f
 80029a6:	4290      	cmp	r0, r2
		break;
	  case WM_TOUCH:
		break;
	  case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
		NCode = pMsg->Data.v;
 80029a8:	68e3      	ldr	r3, [r4, #12]
		switch(Id) {
 80029aa:	d10b      	bne.n	80029c4 <_cbDialog+0xfc>
			case ID_BUTTON_10: // Notifications sent by 'btnSetup'
			  switch(NCode) {
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d109      	bne.n	80029c4 <_cbDialog+0xfc>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					ShowWindow(_hWindow4);
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <_cbDialog+0x11c>)
 80029b2:	6818      	ldr	r0, [r3, #0]
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80029b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			case ID_BUTTON_10: // Notifications sent by 'btnSetup'
			  switch(NCode) {
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					ShowWindow(_hWindow4);
 80029b8:	f7ff bca4 	b.w	8002304 <ShowWindow>
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80029bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			  }
			break;
		}
	  break;
	  default:
		WM_DefaultProc(pMsg);
 80029c0:	f00a b8fa 	b.w	800cbb8 <WM_DefaultProc>
 80029c4:	bd38      	pop	{r3, r4, r5, pc}
 80029c6:	bf00      	nop
 80029c8:	08027f04 	.word	0x08027f04
 80029cc:	0801b645 	.word	0x0801b645
 80029d0:	0801b654 	.word	0x0801b654
 80029d4:	0801b662 	.word	0x0801b662
 80029d8:	0801b675 	.word	0x0801b675
 80029dc:	0801b300 	.word	0x0801b300
 80029e0:	0802dd64 	.word	0x0802dd64
 80029e4:	20017944 	.word	0x20017944

080029e8 <CreateModbusStats>:
*
*       CreateThermostat
**********************************************************************
*/

WM_HWIN CreateModbusStats(void) {
 80029e8:	b513      	push	{r0, r1, r4, lr}
  WM_HWIN hWin;
  
  FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
 80029ea:	480b      	ldr	r0, [pc, #44]	; (8002a18 <CreateModbusStats+0x30>)
 80029ec:	f007 fa26 	bl	8009e3c <FRAMEWIN_SetDefaultSkin>
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);
 80029f0:	480a      	ldr	r0, [pc, #40]	; (8002a1c <CreateModbusStats+0x34>)
 80029f2:	f008 f9a7 	bl	800ad44 <BUTTON_SetDefaultSkin>

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), &_cbDialog, WM_HBKWIN, 0, 0);
 80029f6:	f008 ff99 	bl	800b92c <WM_GetDesktopWindow>
 80029fa:	2200      	movs	r2, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	9200      	str	r2, [sp, #0]
 8002a00:	9201      	str	r2, [sp, #4]
 8002a02:	2106      	movs	r1, #6
 8002a04:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <CreateModbusStats+0x38>)
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <CreateModbusStats+0x3c>)
 8002a08:	f007 fe48 	bl	800a69c <GUI_CreateDialogBox>
 8002a0c:	4604      	mov	r4, r0
  
  WM_HideWindow(hWin);
 8002a0e:	f008 fec6 	bl	800b79e <WM_HideWindow>
  
  return hWin;
}
 8002a12:	4620      	mov	r0, r4
 8002a14:	b002      	add	sp, #8
 8002a16:	bd10      	pop	{r4, pc}
 8002a18:	0800996d 	.word	0x0800996d
 8002a1c:	0800aa25 	.word	0x0800aa25
 8002a20:	080028c9 	.word	0x080028c9
 8002a24:	0801b6c0 	.word	0x0801b6c0

08002a28 <UB_STemWIN_init>:
/**
  * @brief  This function Init STemWin Display Touchpanel.
  * @param  None
  * @retval ErrorStatus
  */
ErrorStatus UB_STemWIN_init(void){
 8002a28:	b508      	push	{r3, lr}
  int16_t error_stat;
  uint8_t threshhold = 0;
  RCC_ClocksTypeDef RCC_Clocks;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE); // Don't forget!!
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a30:	f000 f880 	bl	8002b34 <RCC_AHB1PeriphClockCmd>
  
  /*	Display Init	*/
  init_ili9341();
 8002a34:	f005 fd04 	bl	8008440 <init_ili9341>
  HAL_Delay(2);
 8002a38:	2002      	movs	r0, #2
 8002a3a:	f004 fddb 	bl	80075f4 <HAL_Delay>

  /*	Touch Init	*/
  FT6206_begin(threshhold);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f005 fe22 	bl	8008688 <FT6206_begin>
  HAL_Delay(5);
 8002a44:	2005      	movs	r0, #5
 8002a46:	f004 fdd5 	bl	80075f4 <HAL_Delay>

  /*	STemWin-GUI Init	*/
  if(GUI_Init()!=0) {
 8002a4a:	f00e fb73 	bl	8011134 <GUI_Init>
    return(ERROR);
  }
  
  return(SUCCESS);
}
 8002a4e:	fab0 f080 	clz	r0, r0
 8002a52:	0940      	lsrs	r0, r0, #5
 8002a54:	bd08      	pop	{r3, pc}

08002a56 <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U16 Data) {
  LCD_REG_ADDRESS = Data;
 8002a56:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002a5a:	8018      	strh	r0, [r3, #0]
 8002a5c:	4770      	bx	lr
	...

08002a60 <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U16 Data) {
  LCD_DATA_ADDRESS = Data;
 8002a60:	4b01      	ldr	r3, [pc, #4]	; (8002a68 <LcdWriteData+0x8>)
 8002a62:	8018      	strh	r0, [r3, #0]
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	60100000 	.word	0x60100000

08002a6c <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U16 * pData, int NumItems) {
 8002a6c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  while (NumItems--) {
 8002a70:	4288      	cmp	r0, r1
 8002a72:	d004      	beq.n	8002a7e <LcdWriteDataMultiple+0x12>
    LCD_DATA_ADDRESS = *pData++;
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <LcdWriteDataMultiple+0x14>)
 8002a76:	f830 2b02 	ldrh.w	r2, [r0], #2
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	e7f8      	b.n	8002a70 <LcdWriteDataMultiple+0x4>
  }
}
 8002a7e:	4770      	bx	lr
 8002a80:	60100000 	.word	0x60100000

08002a84 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U16 * pData, int NumItems) {
 8002a84:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  while (NumItems--) {
 8002a88:	4288      	cmp	r0, r1
 8002a8a:	d004      	beq.n	8002a96 <LcdReadDataMultiple+0x12>
    *pData++ = LCD_DATA_ADDRESS;
 8002a8c:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <LcdReadDataMultiple+0x14>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	f820 3b02 	strh.w	r3, [r0], #2
 8002a94:	e7f8      	b.n	8002a88 <LcdReadDataMultiple+0x4>
  }
}
 8002a96:	4770      	bx	lr
 8002a98:	60100000 	.word	0x60100000

08002a9c <LCD_X_Config>:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/

void LCD_X_Config(void) {
 8002a9c:	b510      	push	{r4, lr}
 8002a9e:	b0a0      	sub	sp, #128	; 0x80
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8002aa0:	a801      	add	r0, sp, #4
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	2214      	movs	r2, #20
 8002aa6:	f013 fa09 	bl	8015ebc <memset>
  GUI_PORT_API PortAPI = {0};
 8002aaa:	a806      	add	r0, sp, #24
 8002aac:	2100      	movs	r1, #0
 8002aae:	2268      	movs	r2, #104	; 0x68
 8002ab0:	f013 fa04 	bl	8015ebc <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	4913      	ldr	r1, [pc, #76]	; (8002b08 <LCD_X_Config+0x6c>)
 8002aba:	4814      	ldr	r0, [pc, #80]	; (8002b0c <LCD_X_Config+0x70>)
 8002abc:	f00e fa5e 	bl	8010f7c <GUI_DEVICE_CreateAndLink>
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8002ac0:	21f0      	movs	r1, #240	; 0xf0
  CONFIG_FLEXCOLOR Config = {0};
  GUI_PORT_API PortAPI = {0};
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);
 8002ac2:	4604      	mov	r4, r0
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8002ac4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f00c f9c0 	bl	800ee4e <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8002ace:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ad2:	21f0      	movs	r1, #240	; 0xf0
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f00c f9a3 	bl	800ee20 <LCD_SetVSizeEx>

  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_MIRROR_Y; // Landscape
 8002ada:	2306      	movs	r3, #6

  GUIDRV_FlexColor_Config(pDevice, &Config);
 8002adc:	4620      	mov	r0, r4
 8002ade:	a901      	add	r1, sp, #4
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);

  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_MIRROR_Y; // Landscape
 8002ae0:	9303      	str	r3, [sp, #12]

  GUIDRV_FlexColor_Config(pDevice, &Config);
 8002ae2:	f00c f93c 	bl	800ed5e <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite16_A0  = LcdWriteReg;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <LCD_X_Config+0x74>)
 8002ae8:	930e      	str	r3, [sp, #56]	; 0x38
  PortAPI.pfWrite16_A1  = LcdWriteData;
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <LCD_X_Config+0x78>)
 8002aec:	930f      	str	r3, [sp, #60]	; 0x3c
  PortAPI.pfWriteM16_A1 = LcdWriteDataMultiple;
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <LCD_X_Config+0x7c>)
 8002af0:	9311      	str	r3, [sp, #68]	; 0x44
  PortAPI.pfReadM16_A1  = LcdReadDataMultiple;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <LCD_X_Config+0x80>)
 8002af4:	9315      	str	r3, [sp, #84]	; 0x54
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B16);
 8002af6:	4620      	mov	r0, r4
 8002af8:	a906      	add	r1, sp, #24
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <LCD_X_Config+0x84>)
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <LCD_X_Config+0x88>)
 8002afe:	f00c f94c 	bl	800ed9a <GUIDRV_FlexColor_SetFunc>
}
 8002b02:	b020      	add	sp, #128	; 0x80
 8002b04:	bd10      	pop	{r4, pc}
 8002b06:	bf00      	nop
 8002b08:	0802f764 	.word	0x0802f764
 8002b0c:	0802f5f4 	.word	0x0802f5f4
 8002b10:	08002a57 	.word	0x08002a57
 8002b14:	08002a61 	.word	0x08002a61
 8002b18:	08002a6d 	.word	0x08002a6d
 8002b1c:	08002a85 	.word	0x08002a85
 8002b20:	0800e0c5 	.word	0x0800e0c5
 8002b24:	0800e761 	.word	0x0800e761

08002b28 <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;
  (void) LayerIndex;
  (void) pData;

  switch (Cmd) {
 8002b28:	2901      	cmp	r1, #1
  }
  default:
    r = -1;
  }
  return r;
}
 8002b2a:	bf14      	ite	ne
 8002b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8002b30:	2000      	moveq	r0, #0
 8002b32:	4770      	bx	lr

08002b34 <RCC_AHB1PeriphClockCmd>:
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002b36:	4003      	ands	r3, r0
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	4605      	mov	r5, r0
 8002b3c:	460e      	mov	r6, r1
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8002b3e:	b903      	cbnz	r3, 8002b42 <RCC_AHB1PeriphClockCmd+0xe>
 8002b40:	b920      	cbnz	r0, 8002b4c <RCC_AHB1PeriphClockCmd+0x18>
 8002b42:	480c      	ldr	r0, [pc, #48]	; (8002b74 <RCC_AHB1PeriphClockCmd+0x40>)
 8002b44:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002b48:	f7fe feb2 	bl	80018b0 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8002b4c:	2e01      	cmp	r6, #1
 8002b4e:	4c0a      	ldr	r4, [pc, #40]	; (8002b78 <RCC_AHB1PeriphClockCmd+0x44>)
 8002b50:	d905      	bls.n	8002b5e <RCC_AHB1PeriphClockCmd+0x2a>
 8002b52:	4808      	ldr	r0, [pc, #32]	; (8002b74 <RCC_AHB1PeriphClockCmd+0x40>)
 8002b54:	f240 4142 	movw	r1, #1090	; 0x442
 8002b58:	f7fe feaa 	bl	80018b0 <assert_failed>
 8002b5c:	e000      	b.n	8002b60 <RCC_AHB1PeriphClockCmd+0x2c>
  if (NewState != DISABLE)
 8002b5e:	b116      	cbz	r6, 8002b66 <RCC_AHB1PeriphClockCmd+0x32>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b62:	431d      	orrs	r5, r3
 8002b64:	e002      	b.n	8002b6c <RCC_AHB1PeriphClockCmd+0x38>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b68:	ea23 0505 	bic.w	r5, r3, r5
 8002b6c:	6325      	str	r5, [r4, #48]	; 0x30
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	818bee00 	.word	0x818bee00
 8002b74:	08023fc8 	.word	0x08023fc8
 8002b78:	40023800 	.word	0x40023800

08002b7c <GUI_X_Config>:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <GUI_X_Config+0xc>)
 8002b7e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8002b82:	f00e bed1 	b.w	8011928 <GUI_ALLOC_AssignMemory>
 8002b86:	bf00      	nop
 8002b88:	20000b7c 	.word	0x20000b7c

08002b8c <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8002b8c:	4770      	bx	lr
	...

08002b90 <xMBMasterPortEventInit>:
extern bool		xtNeedPoll;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
    xEventInQueue = FALSE;
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <xMBMasterPortEventInit+0xc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8002b96:	2001      	movs	r0, #1
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20016b5c 	.word	0x20016b5c

08002ba0 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8002ba0:	4a03      	ldr	r2, [pc, #12]	; (8002bb0 <xMBMasterPortEventPost+0x10>)
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8002ba6:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <xMBMasterPortEventPost+0x14>)
 8002ba8:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20016b5c 	.word	0x20016b5c
 8002bb4:	20016b5d 	.word	0x20016b5d

08002bb8 <xMBMasterPortEventGet>:
BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8002bb8:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <xMBMasterPortEventGet+0x18>)
 8002bba:	7813      	ldrb	r3, [r2, #0]
 8002bbc:	b133      	cbz	r3, 8002bcc <xMBMasterPortEventGet+0x14>
    {
        *eEvent = eQueuedEvent;
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <xMBMasterPortEventGet+0x1c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	8003      	strh	r3, [r0, #0]
        xEventInQueue = FALSE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 8002bc8:	2001      	movs	r0, #1
 8002bca:	4770      	bx	lr
}

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
 8002bcc:	4618      	mov	r0, r3
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
 8002bce:	4770      	bx	lr
 8002bd0:	20016b5c 	.word	0x20016b5c
 8002bd4:	20016b5d 	.word	0x20016b5d

08002bd8 <xMBMasterRunResTake>:
{
    /*If waiting time is -1 .It will wait forever */
    //return rt_sem_take(&xMasterRunRes, lTimeOut) ? FALSE : TRUE ;
	
	return TRUE;
}
 8002bd8:	2001      	movs	r0, #1
 8002bda:	4770      	bx	lr

08002bdc <vMBMasterRunResRelease>:
 *
 */
void vMBMasterRunResRelease( void )
{
    /* release resource */
    xtNeedPoll = true;
 8002bdc:	4b01      	ldr	r3, [pc, #4]	; (8002be4 <vMBMasterRunResRelease+0x8>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	4770      	bx	lr
 8002be4:	20000004 	.word	0x20000004

08002be8 <vMBMasterErrorCBRespondTimeout>:
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <vMBMasterErrorCBRespondTimeout+0x10>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8002bee:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <vMBMasterErrorCBRespondTimeout+0x14>)
 8002bf0:	2240      	movs	r2, #64	; 0x40
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20016b5c 	.word	0x20016b5c
 8002bfc:	20016b5d 	.word	0x20016b5d

08002c00 <vMBMasterErrorCBReceiveData>:
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <vMBMasterErrorCBReceiveData+0x10>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8002c06:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <vMBMasterErrorCBReceiveData+0x14>)
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20016b5c 	.word	0x20016b5c
 8002c14:	20016b5d 	.word	0x20016b5d

08002c18 <vMBMasterErrorCBExecuteFunction>:
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <vMBMasterErrorCBExecuteFunction+0x10>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8002c1e:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <vMBMasterErrorCBExecuteFunction+0x14>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20016b5c 	.word	0x20016b5c
 8002c2c:	20016b5d 	.word	0x20016b5d

08002c30 <vMBMasterCBRequestScuuess>:
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <vMBMasterCBRequestScuuess+0x10>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8002c36:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <vMBMasterCBRequestScuuess+0x14>)
 8002c38:	2220      	movs	r2, #32
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20016b5c 	.word	0x20016b5c
 8002c44:	20016b5d 	.word	0x20016b5d

08002c48 <vMBMasterPortSerialEnable>:
__IO ITStatus UartReady_Transmit = RESET;
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBMasterPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8002c48:	b538      	push	{r3, r4, r5, lr}
 8002c4a:	4c15      	ldr	r4, [pc, #84]	; (8002ca0 <vMBMasterPortSerialEnable+0x58>)
    if( xRxEnable )
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8002c4c:	6822      	ldr	r2, [r4, #0]
__IO ITStatus UartReady_Transmit = RESET;
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBMasterPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8002c4e:	460d      	mov	r5, r1
    if( xRxEnable )
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8002c50:	68d3      	ldr	r3, [r2, #12]
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBMasterPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
    if( xRxEnable )
 8002c52:	b130      	cbz	r0, 8002c62 <vMBMasterPortSerialEnable+0x1a>
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8002c54:	f043 0320 	orr.w	r3, r3, #32
 8002c58:	60d3      	str	r3, [r2, #12]
		printf("Receive enabled\n");
 8002c5a:	4812      	ldr	r0, [pc, #72]	; (8002ca4 <vMBMasterPortSerialEnable+0x5c>)
 8002c5c:	f013 f9be 	bl	8015fdc <puts>
 8002c60:	e002      	b.n	8002c68 <vMBMasterPortSerialEnable+0x20>
    }
    else
    {
		/* Disable the UART Data Register not empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_RXNE);
 8002c62:	f023 0320 	bic.w	r3, r3, #32
 8002c66:	60d3      	str	r3, [r2, #12]
    }
    if( xTxEnable )
 8002c68:	b17d      	cbz	r5, 8002c8a <vMBMasterPortSerialEnable+0x42>
    {
		/*	Enable DE transmit signal	*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	480e      	ldr	r0, [pc, #56]	; (8002ca8 <vMBMasterPortSerialEnable+0x60>)
 8002c70:	f004 fc62 	bl	8007538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002c74:	2201      	movs	r2, #1
 8002c76:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <vMBMasterPortSerialEnable+0x60>)
 8002c78:	2102      	movs	r1, #2
 8002c7a:	f004 fc5d 	bl	8007538 <HAL_GPIO_WritePin>
		/* Enable the UART Transmit data register empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TXE);
 8002c7e:	6822      	ldr	r2, [r4, #0]
 8002c80:	68d3      	ldr	r3, [r2, #12]
 8002c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c86:	60d3      	str	r3, [r2, #12]
 8002c88:	bd38      	pop	{r3, r4, r5, pc}
        //prvvUARTTxReadyISR();
    }
    else
    {
		/* Disable the UART Transmit data register empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_TXE);
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c92:	60da      	str	r2, [r3, #12]
		/* Enable the UART Transmit Complete Interrupt */    
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TC);
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	bd38      	pop	{r3, r4, r5, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20016fc8 	.word	0x20016fc8
 8002ca4:	08023fe5 	.word	0x08023fe5
 8002ca8:	40020800 	.word	0x40020800

08002cac <xMBMasterPortSerialInit>:
	
	//Uart_Error = HAL_UART_GetError(&UartHandle);
	//printf("Uart_Error: %d\n", Uart_Error);

    return bInitialized;
}
 8002cac:	2001      	movs	r0, #1
 8002cae:	4770      	bx	lr

08002cb0 <xMBMasterPortSerialPutByte>:
{
	UART_HandleTypeDef *huart;
	
	huart = &UartHandle;
	
	huart->Instance->DR = (uint8_t)ucByte;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <xMBMasterPortSerialPutByte+0xc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6058      	str	r0, [r3, #4]
    return TRUE;
}
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20016fc8 	.word	0x20016fc8

08002cc0 <xMBMasterPortSerialGetByte>:
{
	UART_HandleTypeDef *huart;
	
	huart = &UartHandle;
	
	*pucByte = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <xMBMasterPortSerialGetByte+0xc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	7003      	strb	r3, [r0, #0]
	
    return TRUE;
}
 8002cc8:	2001      	movs	r0, #1
 8002cca:	4770      	bx	lr
 8002ccc:	20016fc8 	.word	0x20016fc8

08002cd0 <HAL_UART_ErrorCallback>:
  * @param  UartHandle: UART handle
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	4604      	mov	r4, r0
  /* Transfer error in reception/transmission process */
	printf("USART bus Error\n"); 
 8002cd4:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <HAL_UART_ErrorCallback+0x18>)
 8002cd6:	f013 f981 	bl	8015fdc <puts>
	printf("Uart Error Code: %d\n", UartHandle->ErrorCode);
 8002cda:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <HAL_UART_ErrorCallback+0x1c>)
}
 8002cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
  /* Transfer error in reception/transmission process */
	printf("USART bus Error\n"); 
	printf("Uart Error Code: %d\n", UartHandle->ErrorCode);
 8002ce2:	f013 b939 	b.w	8015f58 <printf>
 8002ce6:	bf00      	nop
 8002ce8:	08023ff5 	.word	0x08023ff5
 8002cec:	08024005 	.word	0x08024005

08002cf0 <USART1_IRQHandler>:
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 8002cf0:	b530      	push	{r4, r5, lr}
	bool            xtNeedPoll;
	UART_HandleTypeDef *huart;

	huart = &UartHandle;
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002cf2:	4c3a      	ldr	r4, [pc, #232]	; (8002ddc <USART1_IRQHandler+0xec>)
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002cf8:	68da      	ldr	r2, [r3, #12]
	/* UART parity error interrupt occurred ------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8002cfa:	07c9      	lsls	r1, r1, #31
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 8002cfc:	b085      	sub	sp, #20
	huart = &UartHandle;
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
	/* UART parity error interrupt occurred ------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8002cfe:	d50a      	bpl.n	8002d16 <USART1_IRQHandler+0x26>
 8002d00:	05d2      	lsls	r2, r2, #23
 8002d02:	d508      	bpl.n	8002d16 <USART1_IRQHandler+0x26>
	{
		__HAL_UART_CLEAR_PEFLAG(huart);
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	9200      	str	r2, [sp, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	9200      	str	r2, [sp, #0]
 8002d0c:	9a00      	ldr	r2, [sp, #0]
		
		huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002d16:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002d18:	695a      	ldr	r2, [r3, #20]
	/* UART frame error interrupt occurred -------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8002d1a:	078d      	lsls	r5, r1, #30
 8002d1c:	d50a      	bpl.n	8002d34 <USART1_IRQHandler+0x44>
 8002d1e:	07d0      	lsls	r0, r2, #31
 8002d20:	d508      	bpl.n	8002d34 <USART1_IRQHandler+0x44>
	{
		__HAL_UART_CLEAR_FEFLAG(huart);
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	9201      	str	r2, [sp, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	9201      	str	r2, [sp, #4]
 8002d2a:	9a01      	ldr	r2, [sp, #4]

		huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d2e:	f042 0204 	orr.w	r2, r2, #4
 8002d32:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002d34:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002d36:	695a      	ldr	r2, [r3, #20]
	/* UART noise error interrupt occurred -------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8002d38:	0749      	lsls	r1, r1, #29
 8002d3a:	d50a      	bpl.n	8002d52 <USART1_IRQHandler+0x62>
 8002d3c:	07d5      	lsls	r5, r2, #31
 8002d3e:	d508      	bpl.n	8002d52 <USART1_IRQHandler+0x62>
	{ 
		__HAL_UART_CLEAR_NEFLAG(huart);
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	9202      	str	r2, [sp, #8]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	9202      	str	r2, [sp, #8]
 8002d48:	9a02      	ldr	r2, [sp, #8]

		huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d4c:	f042 0202 	orr.w	r2, r2, #2
 8002d50:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
  
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002d52:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002d54:	695a      	ldr	r2, [r3, #20]
	/* UART Over-Run interrupt occurred ----------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8002d56:	0708      	lsls	r0, r1, #28
 8002d58:	d50a      	bpl.n	8002d70 <USART1_IRQHandler+0x80>
 8002d5a:	07d1      	lsls	r1, r2, #31
 8002d5c:	d508      	bpl.n	8002d70 <USART1_IRQHandler+0x80>
	{ 
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	9203      	str	r2, [sp, #12]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	9203      	str	r2, [sp, #12]
 8002d66:	9a03      	ldr	r2, [sp, #12]

		huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d6a:	f042 0208 	orr.w	r2, r2, #8
 8002d6e:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_RXNE);
 8002d70:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(&UartHandle, UART_IT_RXNE);
 8002d72:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Receiver ---------------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8002d74:	0692      	lsls	r2, r2, #26
 8002d76:	d504      	bpl.n	8002d82 <USART1_IRQHandler+0x92>
 8002d78:	069d      	lsls	r5, r3, #26
 8002d7a:	d502      	bpl.n	8002d82 <USART1_IRQHandler+0x92>
	{
		pxMBMasterFrameCBByteReceived();
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <USART1_IRQHandler+0xf0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4798      	blx	r3
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002d86:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Transmitter ------------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8002d88:	0610      	lsls	r0, r2, #24
 8002d8a:	d504      	bpl.n	8002d96 <USART1_IRQHandler+0xa6>
 8002d8c:	0619      	lsls	r1, r3, #24
 8002d8e:	d502      	bpl.n	8002d96 <USART1_IRQHandler+0xa6>
	{
		xtNeedPoll = pxMBMasterFrameCBTransmitterEmpty();
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <USART1_IRQHandler+0xf4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4798      	blx	r3
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002d9a:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Transmitter end --------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8002d9c:	0652      	lsls	r2, r2, #25
 8002d9e:	d511      	bpl.n	8002dc4 <USART1_IRQHandler+0xd4>
 8002da0:	065b      	lsls	r3, r3, #25
 8002da2:	d50f      	bpl.n	8002dc4 <USART1_IRQHandler+0xd4>
	{
		/*	Enable DE receive signal	*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002da4:	4810      	ldr	r0, [pc, #64]	; (8002de8 <USART1_IRQHandler+0xf8>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	2200      	movs	r2, #0
 8002daa:	f004 fbc5 	bl	8007538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <USART1_IRQHandler+0xf8>)
 8002db2:	2102      	movs	r1, #2
 8002db4:	f004 fbc0 	bl	8007538 <HAL_GPIO_WritePin>
		/* Disable the UART Transmit Complete Interrupt */    
		__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <USART1_IRQHandler+0xec>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68d3      	ldr	r3, [r2, #12]
 8002dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc2:	60d3      	str	r3, [r2, #12]
	}
	
	if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dc6:	4d05      	ldr	r5, [pc, #20]	; (8002ddc <USART1_IRQHandler+0xec>)
 8002dc8:	b133      	cbz	r3, 8002dd8 <USART1_IRQHandler+0xe8>
	{
		HAL_UART_ErrorCallback(huart);
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f7ff ff80 	bl	8002cd0 <HAL_UART_ErrorCallback>
		printf("Uart_ErrCode: %d\n", huart->ErrorCode);
 8002dd0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8002dd2:	4806      	ldr	r0, [pc, #24]	; (8002dec <USART1_IRQHandler+0xfc>)
 8002dd4:	f013 f8c0 	bl	8015f58 <printf>
	}
}
 8002dd8:	b005      	add	sp, #20
 8002dda:	bd30      	pop	{r4, r5, pc}
 8002ddc:	20016fc8 	.word	0x20016fc8
 8002de0:	20017960 	.word	0x20017960
 8002de4:	2001795c 	.word	0x2001795c
 8002de8:	40020800 	.word	0x40020800
 8002dec:	0802401a 	.word	0x0802401a

08002df0 <xMBMasterPortTimersInit>:
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortTimersInit( USHORT usTim1Timerout50us )
{
    return TRUE;
}
 8002df0:	2001      	movs	r0, #1
 8002df2:	4770      	bx	lr

08002df4 <vMBMasterPortTimersT35Enable>:


void
vMBMasterPortTimersT35Enable()
{
 8002df4:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
 8002df6:	4c06      	ldr	r4, [pc, #24]	; (8002e10 <vMBMasterPortTimersT35Enable+0x1c>)
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f003 fd53 	bl	80068a4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	2200      	movs	r2, #0
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer-5
 8002e02:	4620      	mov	r0, r4

void
vMBMasterPortTimersT35Enable()
{
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer-5
}
 8002e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
vMBMasterPortTimersT35Enable()
{
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer-5
 8002e0a:	f003 bcfd 	b.w	8006808 <HAL_TIM_Base_Start_IT>
 8002e0e:	bf00      	nop
 8002e10:	20017510 	.word	0x20017510

08002e14 <vMBMasterPortTimersConvertDelayEnable>:
}

void 
vMBMasterPortTimersConvertDelayEnable()
{
 8002e14:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
 8002e16:	4c07      	ldr	r4, [pc, #28]	; (8002e34 <vMBMasterPortTimersConvertDelayEnable+0x20>)
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f003 fd43 	bl	80068a4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	2200      	movs	r2, #0
	
	/* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8002e22:	2002      	movs	r0, #2

void 
vMBMasterPortTimersConvertDelayEnable()
{
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
	
	/* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8002e26:	f000 fbcf 	bl	80035c8 <vMBMasterSetCurTimerMode>
	
	HAL_TIM_Base_Start_IT(&TimHandle_4);	// Enable Timer-4
 8002e2a:	4620      	mov	r0, r4
}
 8002e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
	
	/* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
	
	HAL_TIM_Base_Start_IT(&TimHandle_4);	// Enable Timer-4
 8002e30:	f003 bcea 	b.w	8006808 <HAL_TIM_Base_Start_IT>
 8002e34:	20017880 	.word	0x20017880

08002e38 <vMBMasterPortTimersRespondTimeoutEnable>:
}

void 
vMBMasterPortTimersRespondTimeoutEnable()
{
 8002e38:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
 8002e3a:	4c08      	ldr	r4, [pc, #32]	; (8002e5c <vMBMasterPortTimersRespondTimeoutEnable+0x24>)
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f003 fd31 	bl	80068a4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
 8002e42:	6823      	ldr	r3, [r4, #0]
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002e44:	4806      	ldr	r0, [pc, #24]	; (8002e60 <vMBMasterPortTimersRespondTimeoutEnable+0x28>)

void 
vMBMasterPortTimersRespondTimeoutEnable()
{
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e4e:	f004 fb73 	bl	8007538 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&TimHandle_4);	// Enable Timer-4
 8002e52:	4620      	mov	r0, r4
}
 8002e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
	HAL_TIM_Base_Start_IT(&TimHandle_4);	// Enable Timer-4
 8002e58:	f003 bcd6 	b.w	8006808 <HAL_TIM_Base_Start_IT>
 8002e5c:	20017880 	.word	0x20017880
 8002e60:	40020800 	.word	0x40020800

08002e64 <vMBMasterPortTimersDisable>:
}

void
vMBMasterPortTimersDisable(  )
{
 8002e64:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
 8002e66:	4804      	ldr	r0, [pc, #16]	; (8002e78 <vMBMasterPortTimersDisable+0x14>)
 8002e68:	f003 fd1c 	bl	80068a4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
 8002e6c:	4803      	ldr	r0, [pc, #12]	; (8002e7c <vMBMasterPortTimersDisable+0x18>)
}
 8002e6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void
vMBMasterPortTimersDisable(  )
{
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
 8002e72:	f003 bd17 	b.w	80068a4 <HAL_TIM_Base_Stop_IT>
 8002e76:	bf00      	nop
 8002e78:	20017880 	.word	0x20017880
 8002e7c:	20017510 	.word	0x20017510

08002e80 <TIM4_IRQHandler>:
  * @param  None
  * @retval None
  */
void 
TIMx_4_IRQHandler(void)
{
 8002e80:	b508      	push	{r3, lr}
	printf("Timer 4 elapsed...\n");
 8002e82:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <TIM4_IRQHandler+0x20>)
 8002e84:	f013 f8aa 	bl	8015fdc <puts>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002e88:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <TIM4_IRQHandler+0x24>)
 8002e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f004 fb52 	bl	8007538 <HAL_GPIO_WritePin>
	HAL_TIM_IRQHandler(&TimHandle_4);
 8002e94:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <TIM4_IRQHandler+0x28>)
}
 8002e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void 
TIMx_4_IRQHandler(void)
{
	printf("Timer 4 elapsed...\n");
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
	HAL_TIM_IRQHandler(&TimHandle_4);
 8002e9a:	f003 bd5f 	b.w	800695c <HAL_TIM_IRQHandler>
 8002e9e:	bf00      	nop
 8002ea0:	0802402c 	.word	0x0802402c
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	20017880 	.word	0x20017880

08002eac <TIM5_IRQHandler>:
  * @param  None
  * @retval None
  */
void 
TIMx_5_IRQHandler(void)
{
 8002eac:	b508      	push	{r3, lr}
	printf("Timer 5 elapsed...\n");
 8002eae:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <TIM5_IRQHandler+0x14>)
 8002eb0:	f013 f894 	bl	8015fdc <puts>
	HAL_TIM_IRQHandler(&TimHandle_5);
 8002eb4:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <TIM5_IRQHandler+0x18>)
}
 8002eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void 
TIMx_5_IRQHandler(void)
{
	printf("Timer 5 elapsed...\n");
	HAL_TIM_IRQHandler(&TimHandle_5);
 8002eba:	f003 bd4f 	b.w	800695c <HAL_TIM_IRQHandler>
 8002ebe:	bf00      	nop
 8002ec0:	0802403f 	.word	0x0802403f
 8002ec4:	20017510 	.word	0x20017510

08002ec8 <HAL_TIM_PeriodElapsedCallback>:
void 
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	//counter_val = __HAL_TIM_GET_COUNTER(&TimHandle_5);
	//printf("Counter at interrupt: %d\n", counter_val);
	pxMBMasterPortCBTimerExpired();
 8002ec8:	4b01      	ldr	r3, [pc, #4]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4718      	bx	r3
 8002ece:	bf00      	nop
 8002ed0:	20017964 	.word	0x20017964

08002ed4 <EnterCriticalSection>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed4:	b672      	cpsid	i
 8002ed6:	4770      	bx	lr

08002ed8 <ExitCriticalSection>:
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002ed8:	b662      	cpsie	i
 8002eda:	4770      	bx	lr

08002edc <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8002edc:	b538      	push	{r3, r4, r5, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

	switch (eMode)
 8002ede:	bb20      	cbnz	r0, 8002f2a <eMBMasterInit+0x4e>
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 8002ee0:	4c14      	ldr	r4, [pc, #80]	; (8002f34 <eMBMasterInit+0x58>)
 8002ee2:	4d15      	ldr	r5, [pc, #84]	; (8002f38 <eMBMasterInit+0x5c>)
 8002ee4:	6025      	str	r5, [r4, #0]
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 8002ee6:	4c15      	ldr	r4, [pc, #84]	; (8002f3c <eMBMasterInit+0x60>)
 8002ee8:	4d15      	ldr	r5, [pc, #84]	; (8002f40 <eMBMasterInit+0x64>)
 8002eea:	6025      	str	r5, [r4, #0]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 8002eec:	4c15      	ldr	r4, [pc, #84]	; (8002f44 <eMBMasterInit+0x68>)
 8002eee:	4d16      	ldr	r5, [pc, #88]	; (8002f48 <eMBMasterInit+0x6c>)
 8002ef0:	6025      	str	r5, [r4, #0]
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 8002ef2:	4c16      	ldr	r4, [pc, #88]	; (8002f4c <eMBMasterInit+0x70>)
 8002ef4:	4d16      	ldr	r5, [pc, #88]	; (8002f50 <eMBMasterInit+0x74>)
 8002ef6:	6025      	str	r5, [r4, #0]
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8002ef8:	4c16      	ldr	r4, [pc, #88]	; (8002f54 <eMBMasterInit+0x78>)
 8002efa:	6020      	str	r0, [r4, #0]
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8002efc:	4816      	ldr	r0, [pc, #88]	; (8002f58 <eMBMasterInit+0x7c>)
 8002efe:	4c17      	ldr	r4, [pc, #92]	; (8002f5c <eMBMasterInit+0x80>)
 8002f00:	6004      	str	r4, [r0, #0]
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 8002f02:	4817      	ldr	r0, [pc, #92]	; (8002f60 <eMBMasterInit+0x84>)
 8002f04:	4c17      	ldr	r4, [pc, #92]	; (8002f64 <eMBMasterInit+0x88>)
 8002f06:	6004      	str	r4, [r0, #0]
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8002f08:	4817      	ldr	r0, [pc, #92]	; (8002f68 <eMBMasterInit+0x8c>)
 8002f0a:	4c18      	ldr	r4, [pc, #96]	; (8002f6c <eMBMasterInit+0x90>)
 8002f0c:	6004      	str	r4, [r0, #0]

		eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 8002f0e:	4608      	mov	r0, r1
 8002f10:	4611      	mov	r1, r2
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 f94e 	bl	80031b4 <eMBMasterRTUInit>
	default:
		eStatus = MB_EINVAL;
		break;
	}

	if (eStatus == MB_ENOERR)
 8002f18:	4604      	mov	r4, r0
 8002f1a:	b948      	cbnz	r0, 8002f30 <eMBMasterInit+0x54>
	{
		if (!xMBMasterPortEventInit())
 8002f1c:	f7ff fe38 	bl	8002b90 <xMBMasterPortEventInit>
 8002f20:	b128      	cbz	r0, 8002f2e <eMBMasterInit+0x52>
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
		}
		else
		{
			eMBState = STATE_DISABLED;
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <eMBMasterInit+0x94>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e002      	b.n	8002f30 <eMBMasterInit+0x54>

		eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
		break;
#endif
	default:
		eStatus = MB_EINVAL;
 8002f2a:	2402      	movs	r4, #2
 8002f2c:	e000      	b.n	8002f30 <eMBMasterInit+0x54>
	if (eStatus == MB_ENOERR)
	{
		if (!xMBMasterPortEventInit())
		{
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
 8002f2e:	2403      	movs	r4, #3
		}
		/* initialize the OS resource for modbus master. */
		//vMBMasterOsResInit();
	}
	return eStatus;
}
 8002f30:	4620      	mov	r0, r4
 8002f32:	bd38      	pop	{r3, r4, r5, pc}
 8002f34:	20016b70 	.word	0x20016b70
 8002f38:	08003201 	.word	0x08003201
 8002f3c:	20016b68 	.word	0x20016b68
 8002f40:	08003225 	.word	0x08003225
 8002f44:	20016b84 	.word	0x20016b84
 8002f48:	080032b5 	.word	0x080032b5
 8002f4c:	20016b74 	.word	0x20016b74
 8002f50:	08003241 	.word	0x08003241
 8002f54:	20016b60 	.word	0x20016b60
 8002f58:	20017960 	.word	0x20017960
 8002f5c:	08003349 	.word	0x08003349
 8002f60:	2001795c 	.word	0x2001795c
 8002f64:	080033e9 	.word	0x080033e9
 8002f68:	20017964 	.word	0x20017964
 8002f6c:	08003499 	.word	0x08003499
 8002f70:	20000005 	.word	0x20000005

08002f74 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 8002f74:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8002f76:	4c06      	ldr	r4, [pc, #24]	; (8002f90 <eMBMasterEnable+0x1c>)
 8002f78:	7823      	ldrb	r3, [r4, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <eMBMasterEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <eMBMasterEnable+0x20>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8002f84:	2000      	movs	r0, #0
 8002f86:	7020      	strb	r0, [r4, #0]
 8002f88:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002f8a:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000005 	.word	0x20000005
 8002f94:	20016b70 	.word	0x20016b70

08002f98 <eMBMasterPoll>:
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002f98:	4b69      	ldr	r3, [pc, #420]	; (8003140 <eMBMasterPoll+0x1a8>)
    return eStatus;
}

eMBErrorCode
eMBMasterPoll( void )
{
 8002f9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002f9e:	781c      	ldrb	r4, [r3, #0]
 8002fa0:	2c00      	cmp	r4, #0
 8002fa2:	f040 80c7 	bne.w	8003134 <eMBMasterPoll+0x19c>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8002fa6:	f10d 0006 	add.w	r0, sp, #6
 8002faa:	f7ff fe05 	bl	8002bb8 <xMBMasterPortEventGet>
 8002fae:	2801      	cmp	r0, #1
 8002fb0:	f040 80c2 	bne.w	8003138 <eMBMasterPoll+0x1a0>
    {
        switch ( eEvent )
 8002fb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	f200 80bc 	bhi.w	8003138 <eMBMasterPoll+0x1a0>
 8002fc0:	e8df f003 	tbb	[pc, r3]
 8002fc4:	20ba0c08 	.word	0x20ba0c08
 8002fc8:	6bbababa 	.word	0x6bbababa
 8002fcc:	babababa 	.word	0xbabababa
 8002fd0:	7ebababa 	.word	0x7ebababa
        {
        case EV_MASTER_READY:
			printf("EV_MASTER_READY\n");
 8002fd4:	485b      	ldr	r0, [pc, #364]	; (8003144 <eMBMasterPoll+0x1ac>)
 8002fd6:	f013 f801 	bl	8015fdc <puts>
 8002fda:	e0ad      	b.n	8003138 <eMBMasterPoll+0x1a0>
            break;

        case EV_MASTER_FRAME_RECEIVED:
			printf("EV_MASTER_FRAME_RECEIVED\n");
 8002fdc:	485a      	ldr	r0, [pc, #360]	; (8003148 <eMBMasterPoll+0x1b0>)
			eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002fde:	4d5b      	ldr	r5, [pc, #364]	; (800314c <eMBMasterPoll+0x1b4>)
        case EV_MASTER_READY:
			printf("EV_MASTER_READY\n");
            break;

        case EV_MASTER_FRAME_RECEIVED:
			printf("EV_MASTER_FRAME_RECEIVED\n");
 8002fe0:	f012 fffc 	bl	8015fdc <puts>
			eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002fe4:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <eMBMasterPoll+0x1b8>)
 8002fe6:	495b      	ldr	r1, [pc, #364]	; (8003154 <eMBMasterPoll+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5b      	ldr	r2, [pc, #364]	; (8003158 <eMBMasterPoll+0x1c0>)
 8002fec:	4628      	mov	r0, r5
 8002fee:	4798      	blx	r3
			/* Check if the frame is for us. If not ,send an error process event. */
			if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 8002ff0:	b930      	cbnz	r0, 8003000 <eMBMasterPoll+0x68>
 8002ff2:	4b5a      	ldr	r3, [pc, #360]	; (800315c <eMBMasterPoll+0x1c4>)
 8002ff4:	782a      	ldrb	r2, [r5, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d101      	bne.n	8003000 <eMBMasterPoll+0x68>
			{
				( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8002ffc:	2004      	movs	r0, #4
 8002ffe:	e046      	b.n	800308e <eMBMasterPoll+0xf6>
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 8003000:	2201      	movs	r2, #1
 8003002:	e041      	b.n	8003088 <eMBMasterPoll+0xf0>
			}
			break;

        case EV_MASTER_EXECUTE:
			printf("EV_MASTER_EXECUTE\n");
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003004:	4e53      	ldr	r6, [pc, #332]	; (8003154 <eMBMasterPoll+0x1bc>)
				( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
			}
			break;

        case EV_MASTER_EXECUTE:
			printf("EV_MASTER_EXECUTE\n");
 8003006:	4856      	ldr	r0, [pc, #344]	; (8003160 <eMBMasterPoll+0x1c8>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
 8003008:	4c56      	ldr	r4, [pc, #344]	; (8003164 <eMBMasterPoll+0x1cc>)
				( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
			}
			break;

        case EV_MASTER_EXECUTE:
			printf("EV_MASTER_EXECUTE\n");
 800300a:	f012 ffe7 	bl	8015fdc <puts>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800300e:	6833      	ldr	r3, [r6, #0]
 8003010:	4955      	ldr	r1, [pc, #340]	; (8003168 <eMBMasterPoll+0x1d0>)
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	700a      	strb	r2, [r1, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8003016:	2101      	movs	r1, #1
 8003018:	7021      	strb	r1, [r4, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 800301a:	0611      	lsls	r1, r2, #24
 800301c:	d502      	bpl.n	8003024 <eMBMasterPoll+0x8c>
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	7023      	strb	r3, [r4, #0]
 8003022:	e02e      	b.n	8003082 <eMBMasterPoll+0xea>
 8003024:	2300      	movs	r3, #0
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
				{
					/* No more function handlers registered. Abort. */
					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 8003026:	f8df a164 	ldr.w	sl, [pc, #356]	; 800318c <eMBMasterPoll+0x1f4>
 800302a:	f81a 1033 	ldrb.w	r1, [sl, r3, lsl #3]
 800302e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003032:	46d1      	mov	r9, sl
 8003034:	b329      	cbz	r1, 8003082 <eMBMasterPoll+0xea>
						break;
					}
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 8003036:	4291      	cmp	r1, r2
 8003038:	d120      	bne.n	800307c <eMBMasterPoll+0xe4>
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
	xMBRunInMasterMode = IsMasterMode;
 800303a:	4f4c      	ldr	r7, [pc, #304]	; (800316c <eMBMasterPoll+0x1d4>)
 800303c:	2501      	movs	r5, #1
 800303e:	703d      	strb	r5, [r7, #0]
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
						vMBMasterSetCBRunInMasterMode(TRUE);
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
 8003040:	f000 fac8 	bl	80035d4 <xMBMasterRequestIsBroadcast>
 8003044:	b180      	cbz	r0, 8003068 <eMBMasterPoll+0xd0>
							usLength = usMBMasterGetPDUSndLength();
 8003046:	f000 fab9 	bl	80035bc <usMBMasterGetPDUSndLength>
 800304a:	4b43      	ldr	r3, [pc, #268]	; (8003158 <eMBMasterPoll+0x1c0>)
 800304c:	8018      	strh	r0, [r3, #0]
	return ucMBMasterDestAddress;
}
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
	ucMBMasterDestAddress = Address;
 800304e:	4b43      	ldr	r3, [pc, #268]	; (800315c <eMBMasterPoll+0x1c4>)
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8003050:	6830      	ldr	r0, [r6, #0]
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
								vMBMasterSetDestAddress(j);
 8003052:	701d      	strb	r5, [r3, #0]
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8003054:	eb09 0308 	add.w	r3, r9, r8
 8003058:	493f      	ldr	r1, [pc, #252]	; (8003158 <eMBMasterPoll+0x1c0>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4798      	blx	r3
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 800305e:	3501      	adds	r5, #1
 8003060:	2d11      	cmp	r5, #17
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8003062:	7020      	strb	r0, [r4, #0]
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8003064:	d1f3      	bne.n	800304e <eMBMasterPoll+0xb6>
 8003066:	e006      	b.n	8003076 <eMBMasterPoll+0xde>
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
							}
						}
						else {
							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8003068:	44d0      	add	r8, sl
 800306a:	6830      	ldr	r0, [r6, #0]
 800306c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003070:	4939      	ldr	r1, [pc, #228]	; (8003158 <eMBMasterPoll+0x1c0>)
 8003072:	4798      	blx	r3
 8003074:	7020      	strb	r0, [r4, #0]
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
	xMBRunInMasterMode = IsMasterMode;
 8003076:	2300      	movs	r3, #0
 8003078:	703b      	strb	r3, [r7, #0]
 800307a:	e002      	b.n	8003082 <eMBMasterPoll+0xea>
            if(ucFunctionCode >> 7) {
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
            }
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 800307c:	3301      	adds	r3, #1
 800307e:	2b10      	cmp	r3, #16
 8003080:	d1d1      	bne.n	8003026 <eMBMasterPoll+0x8e>
						break;
					}
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 8003082:	7824      	ldrb	r4, [r4, #0]
 8003084:	b134      	cbz	r4, 8003094 <eMBMasterPoll+0xfc>
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 8003086:	2202      	movs	r2, #2
 8003088:	4b39      	ldr	r3, [pc, #228]	; (8003170 <eMBMasterPoll+0x1d8>)
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
            	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
            	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 800308a:	2010      	movs	r0, #16
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 800308c:	701a      	strb	r2, [r3, #0]
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
            	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
            	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 800308e:	f7ff fd87 	bl	8002ba0 <xMBMasterPortEventPost>
 8003092:	e051      	b.n	8003138 <eMBMasterPoll+0x1a0>
            }
            else {
            	vMBMasterCBRequestScuuess( );
 8003094:	f7ff fdcc 	bl	8002c30 <vMBMasterCBRequestScuuess>
 8003098:	e049      	b.n	800312e <eMBMasterPoll+0x196>
            break;

        case EV_MASTER_FRAME_SENT:
			printf("EV_MASTER_FRAME_SENT\n");
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
 800309a:	4c2e      	ldr	r4, [pc, #184]	; (8003154 <eMBMasterPoll+0x1bc>)
            	vMBMasterRunResRelease( );
            }
            break;

        case EV_MASTER_FRAME_SENT:
			printf("EV_MASTER_FRAME_SENT\n");
 800309c:	4835      	ldr	r0, [pc, #212]	; (8003174 <eMBMasterPoll+0x1dc>)
 800309e:	f012 ff9d 	bl	8015fdc <puts>
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
 80030a2:	4620      	mov	r0, r4
 80030a4:	f000 fa7e 	bl	80035a4 <vMBMasterGetPDUSndBuf>
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 80030a8:	4b33      	ldr	r3, [pc, #204]	; (8003178 <eMBMasterPoll+0x1e0>)
 80030aa:	6824      	ldr	r4, [r4, #0]
 80030ac:	681d      	ldr	r5, [r3, #0]
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 80030ae:	4b2b      	ldr	r3, [pc, #172]	; (800315c <eMBMasterPoll+0x1c4>)
 80030b0:	781e      	ldrb	r6, [r3, #0]

        case EV_MASTER_FRAME_SENT:
			printf("EV_MASTER_FRAME_SENT\n");
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 80030b2:	f000 fa83 	bl	80035bc <usMBMasterGetPDUSndLength>
 80030b6:	4621      	mov	r1, r4
 80030b8:	4602      	mov	r2, r0
 80030ba:	4630      	mov	r0, r6
 80030bc:	47a8      	blx	r5
 80030be:	e03b      	b.n	8003138 <eMBMasterPoll+0x1a0>
            break;

        case EV_MASTER_ERROR_PROCESS:
			printf("EV_MASTER_ERROR_PROCESS\n");
 80030c0:	482e      	ldr	r0, [pc, #184]	; (800317c <eMBMasterPoll+0x1e4>)
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
 80030c2:	4c24      	ldr	r4, [pc, #144]	; (8003154 <eMBMasterPoll+0x1bc>)
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
            break;

        case EV_MASTER_ERROR_PROCESS:
			printf("EV_MASTER_ERROR_PROCESS\n");
 80030c4:	f012 ff8a 	bl	8015fdc <puts>
	ucMBMasterDestAddress = Address;
}
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
	return eMBMasterCurErrorType;
 80030c8:	4b29      	ldr	r3, [pc, #164]	; (8003170 <eMBMasterPoll+0x1d8>)
 80030ca:	781d      	ldrb	r5, [r3, #0]

        case EV_MASTER_ERROR_PROCESS:
			printf("EV_MASTER_ERROR_PROCESS\n");
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
 80030cc:	4620      	mov	r0, r4
 80030ce:	f000 fa69 	bl	80035a4 <vMBMasterGetPDUSndBuf>
			switch (errorType) {
 80030d2:	2d01      	cmp	r5, #1
 80030d4:	d01e      	beq.n	8003114 <eMBMasterPoll+0x17c>
 80030d6:	d30f      	bcc.n	80030f8 <eMBMasterPoll+0x160>
 80030d8:	2d02      	cmp	r5, #2
 80030da:	d128      	bne.n	800312e <eMBMasterPoll+0x196>
				printf("EV_ERROR_RECEIVE_DATA\n");
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_EXECUTE_FUNCTION:
				printf("EV_ERROR_EXECUTE_FUNCTION\n");
 80030dc:	4828      	ldr	r0, [pc, #160]	; (8003180 <eMBMasterPoll+0x1e8>)
 80030de:	f012 ff7d 	bl	8015fdc <puts>
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <eMBMasterPoll+0x1c4>)
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_EXECUTE_FUNCTION:
				printf("EV_ERROR_EXECUTE_FUNCTION\n");
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 80030e4:	6824      	ldr	r4, [r4, #0]
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 80030e6:	781d      	ldrb	r5, [r3, #0]
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_EXECUTE_FUNCTION:
				printf("EV_ERROR_EXECUTE_FUNCTION\n");
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 80030e8:	f000 fa68 	bl	80035bc <usMBMasterGetPDUSndLength>
 80030ec:	4621      	mov	r1, r4
 80030ee:	4602      	mov	r2, r0
 80030f0:	4628      	mov	r0, r5
 80030f2:	f7ff fd91 	bl	8002c18 <vMBMasterErrorCBExecuteFunction>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 80030f6:	e01a      	b.n	800312e <eMBMasterPoll+0x196>
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
			switch (errorType) {
			case EV_ERROR_RESPOND_TIMEOUT:
				printf("EV_ERROR_RESPOND_TIMEOUT\n");
 80030f8:	4822      	ldr	r0, [pc, #136]	; (8003184 <eMBMasterPoll+0x1ec>)
 80030fa:	f012 ff6f 	bl	8015fdc <puts>
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <eMBMasterPoll+0x1c4>)
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
			switch (errorType) {
			case EV_ERROR_RESPOND_TIMEOUT:
				printf("EV_ERROR_RESPOND_TIMEOUT\n");
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 8003100:	6824      	ldr	r4, [r4, #0]
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 8003102:	781d      	ldrb	r5, [r3, #0]
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
			switch (errorType) {
			case EV_ERROR_RESPOND_TIMEOUT:
				printf("EV_ERROR_RESPOND_TIMEOUT\n");
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 8003104:	f000 fa5a 	bl	80035bc <usMBMasterGetPDUSndLength>
 8003108:	4621      	mov	r1, r4
 800310a:	4602      	mov	r2, r0
 800310c:	4628      	mov	r0, r5
 800310e:	f7ff fd6b 	bl	8002be8 <vMBMasterErrorCBRespondTimeout>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8003112:	e00c      	b.n	800312e <eMBMasterPoll+0x196>
			case EV_ERROR_RECEIVE_DATA:
				printf("EV_ERROR_RECEIVE_DATA\n");
 8003114:	481c      	ldr	r0, [pc, #112]	; (8003188 <eMBMasterPoll+0x1f0>)
 8003116:	f012 ff61 	bl	8015fdc <puts>
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <eMBMasterPoll+0x1c4>)
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_RECEIVE_DATA:
				printf("EV_ERROR_RECEIVE_DATA\n");
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 800311c:	6824      	ldr	r4, [r4, #0]
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 800311e:	781d      	ldrb	r5, [r3, #0]
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_RECEIVE_DATA:
				printf("EV_ERROR_RECEIVE_DATA\n");
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8003120:	f000 fa4c 	bl	80035bc <usMBMasterGetPDUSndLength>
 8003124:	4621      	mov	r1, r4
 8003126:	4602      	mov	r2, r0
 8003128:	4628      	mov	r0, r5
 800312a:	f7ff fd69 	bl	8002c00 <vMBMasterErrorCBReceiveData>
				printf("EV_ERROR_EXECUTE_FUNCTION\n");
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			}
			vMBMasterRunResRelease();
 800312e:	f7ff fd55 	bl	8002bdc <vMBMasterRunResRelease>
 8003132:	e001      	b.n	8003138 <eMBMasterPoll+0x1a0>
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
 8003134:	2006      	movs	r0, #6
 8003136:	e000      	b.n	800313a <eMBMasterPoll+0x1a2>
			}
			vMBMasterRunResRelease();
        	break;
        }
    }
    return MB_ENOERR;
 8003138:	2000      	movs	r0, #0
}
 800313a:	b002      	add	sp, #8
 800313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003140:	20000005 	.word	0x20000005
 8003144:	08024052 	.word	0x08024052
 8003148:	08024062 	.word	0x08024062
 800314c:	20016b78 	.word	0x20016b78
 8003150:	20016b74 	.word	0x20016b74
 8003154:	20016b7c 	.word	0x20016b7c
 8003158:	20016b80 	.word	0x20016b80
 800315c:	20016b6c 	.word	0x20016b6c
 8003160:	0802407b 	.word	0x0802407b
 8003164:	20016b83 	.word	0x20016b83
 8003168:	20016b64 	.word	0x20016b64
 800316c:	20016b79 	.word	0x20016b79
 8003170:	20016b82 	.word	0x20016b82
 8003174:	0802408d 	.word	0x0802408d
 8003178:	20016b84 	.word	0x20016b84
 800317c:	080240a2 	.word	0x080240a2
 8003180:	080240e9 	.word	0x080240e9
 8003184:	080240ba 	.word	0x080240ba
 8003188:	080240d3 	.word	0x080240d3
 800318c:	08024104 	.word	0x08024104

08003190 <ucMBMasterGetDestAddress>:
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
}
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <ucMBMasterGetDestAddress+0x8>)
 8003192:	7818      	ldrb	r0, [r3, #0]
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20016b6c 	.word	0x20016b6c

0800319c <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
	ucMBMasterDestAddress = Address;
 800319c:	4b01      	ldr	r3, [pc, #4]	; (80031a4 <vMBMasterSetDestAddress+0x8>)
 800319e:	7018      	strb	r0, [r3, #0]
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20016b6c 	.word	0x20016b6c

080031a8 <vMBMasterSetErrorType>:
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 80031a8:	4b01      	ldr	r3, [pc, #4]	; (80031b0 <vMBMasterSetErrorType+0x8>)
 80031aa:	7018      	strb	r0, [r3, #0]
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20016b82 	.word	0x20016b82

080031b4 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/*  Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4615      	mov	r5, r2
 80031b8:	4606      	mov	r6, r0
 80031ba:	460c      	mov	r4, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 80031bc:	f7ff fe8a 	bl	8002ed4 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 80031c0:	4630      	mov	r0, r6
 80031c2:	4621      	mov	r1, r4
 80031c4:	2208      	movs	r2, #8
 80031c6:	462b      	mov	r3, r5
 80031c8:	f7ff fd70 	bl	8002cac <xMBMasterPortSerialInit>
 80031cc:	2801      	cmp	r0, #1
 80031ce:	d10f      	bne.n	80031f0 <eMBMasterRTUInit+0x3c>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80031d0:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80031d4:	bf97      	itett	ls
 80031d6:	4809      	ldrls	r0, [pc, #36]	; (80031fc <eMBMasterRTUInit+0x48>)
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80031d8:	2023      	movhi	r0, #35	; 0x23
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80031da:	0064      	lslls	r4, r4, #1
 80031dc:	fbb0 f0f4 	udivls	r0, r0, r4
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80031e0:	b280      	uxth	r0, r0
 80031e2:	f7ff fe05 	bl	8002df0 <xMBMasterPortTimersInit>
 80031e6:	2801      	cmp	r0, #1
        {
            eStatus = MB_EPORTERR;
 80031e8:	bf0c      	ite	eq
 80031ea:	2400      	moveq	r4, #0
 80031ec:	2403      	movne	r4, #3
 80031ee:	e000      	b.n	80031f2 <eMBMasterRTUInit+0x3e>
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
 80031f0:	2403      	movs	r4, #3
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80031f2:	f7ff fe71 	bl	8002ed8 <ExitCriticalSection>

    return eStatus;
}
 80031f6:	4620      	mov	r0, r4
 80031f8:	bd70      	pop	{r4, r5, r6, pc}
 80031fa:	bf00      	nop
 80031fc:	00177fa0 	.word	0x00177fa0

08003200 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 8003200:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8003202:	f7ff fe67 	bl	8002ed4 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <eMBMasterRTUStart+0x20>)
 8003208:	2100      	movs	r1, #0
    vMBMasterPortSerialEnable( TRUE, FALSE );
 800320a:	2001      	movs	r0, #1
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 800320c:	7019      	strb	r1, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 800320e:	f7ff fd1b 	bl	8002c48 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 8003212:	f7ff fdef 	bl	8002df4 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
}
 8003216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     */
    eRcvState = STATE_M_RX_INIT;
    vMBMasterPortSerialEnable( TRUE, FALSE );
    vMBMasterPortTimersT35Enable(  );

    EXIT_CRITICAL_SECTION(  );
 800321a:	f7ff be5d 	b.w	8002ed8 <ExitCriticalSection>
 800321e:	bf00      	nop
 8003220:	20016c92 	.word	0x20016c92

08003224 <eMBMasterRTUStop>:
}

void
eMBMasterRTUStop( void )
{
 8003224:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8003226:	f7ff fe55 	bl	8002ed4 <EnterCriticalSection>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 800322a:	2000      	movs	r0, #0
 800322c:	4601      	mov	r1, r0
 800322e:	f7ff fd0b 	bl	8002c48 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 8003232:	f7ff fe17 	bl	8002e64 <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
}
 8003236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
eMBMasterRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    vMBMasterPortSerialEnable( FALSE, FALSE );
    vMBMasterPortTimersDisable(  );
    EXIT_CRITICAL_SECTION(  );
 800323a:	f7ff be4d 	b.w	8002ed8 <ExitCriticalSection>
	...

08003240 <eMBMasterRTUReceive>:
}

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8003240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003244:	4d16      	ldr	r5, [pc, #88]	; (80032a0 <eMBMasterRTUReceive+0x60>)
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8003246:	4680      	mov	r8, r0
 8003248:	460e      	mov	r6, r1
 800324a:	4617      	mov	r7, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 800324c:	f7ff fe42 	bl	8002ed4 <EnterCriticalSection>
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003250:	882b      	ldrh	r3, [r5, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	2bff      	cmp	r3, #255	; 0xff
 8003256:	d905      	bls.n	8003264 <eMBMasterRTUReceive+0x24>
 8003258:	4812      	ldr	r0, [pc, #72]	; (80032a4 <eMBMasterRTUReceive+0x64>)
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <eMBMasterRTUReceive+0x68>)
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <eMBMasterRTUReceive+0x6c>)
 800325e:	21a3      	movs	r1, #163	; 0xa3
 8003260:	f012 fd96 	bl	8015d90 <__assert_func>

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003264:	882b      	ldrh	r3, [r5, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b03      	cmp	r3, #3
 800326a:	d801      	bhi.n	8003270 <eMBMasterRTUReceive+0x30>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 800326c:	2405      	movs	r4, #5
 800326e:	e011      	b.n	8003294 <eMBMasterRTUReceive+0x54>
    ENTER_CRITICAL_SECTION(  );
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 8003270:	8829      	ldrh	r1, [r5, #0]
 8003272:	4c0f      	ldr	r4, [pc, #60]	; (80032b0 <eMBMasterRTUReceive+0x70>)
 8003274:	b289      	uxth	r1, r1
 8003276:	4620      	mov	r0, r4
 8003278:	f000 f9b2 	bl	80035e0 <usMBCRC16>
 800327c:	2800      	cmp	r0, #0
 800327e:	d1f5      	bne.n	800326c <eMBMasterRTUReceive+0x2c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 8003280:	4623      	mov	r3, r4
}

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8003282:	4604      	mov	r4, r0
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 8003284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003288:	f888 2000 	strb.w	r2, [r8]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800328c:	882a      	ldrh	r2, [r5, #0]
 800328e:	3a03      	subs	r2, #3
 8003290:	803a      	strh	r2, [r7, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8003292:	6033      	str	r3, [r6, #0]
    else
    {
        eStatus = MB_EIO;
    }

    EXIT_CRITICAL_SECTION(  );
 8003294:	f7ff fe20 	bl	8002ed8 <ExitCriticalSection>
    return eStatus;
}
 8003298:	4620      	mov	r0, r4
 800329a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800329e:	bf00      	nop
 80032a0:	20016c8a 	.word	0x20016c8a
 80032a4:	080241c7 	.word	0x080241c7
 80032a8:	0802419c 	.word	0x0802419c
 80032ac:	080241ee 	.word	0x080241ee
 80032b0:	20016b88 	.word	0x20016b88

080032b4 <eMBMasterRTUSend>:
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 80032b4:	2810      	cmp	r0, #16
    return eStatus;
}

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80032b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ba:	4607      	mov	r7, r0
 80032bc:	460e      	mov	r6, r1
 80032be:	4690      	mov	r8, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 80032c0:	d834      	bhi.n	800332c <eMBMasterRTUSend+0x78>

    ENTER_CRITICAL_SECTION(  );
 80032c2:	f7ff fe07 	bl	8002ed4 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <eMBMasterRTUSend+0x80>)
 80032c8:	781d      	ldrb	r5, [r3, #0]
 80032ca:	b2ed      	uxtb	r5, r5
 80032cc:	2d01      	cmp	r5, #1
 80032ce:	d127      	bne.n	8003320 <eMBMasterRTUSend+0x6c>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
        usMasterSndBufferCount = 1;
 80032d0:	4c19      	ldr	r4, [pc, #100]	; (8003338 <eMBMasterRTUSend+0x84>)
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <eMBMasterRTUSend+0x88>)
        usMasterSndBufferCount = 1;
 80032d4:	8025      	strh	r5, [r4, #0]
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80032d6:	1e70      	subs	r0, r6, #1
        usMasterSndBufferCount = 1;

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80032d8:	f806 7c01 	strb.w	r7, [r6, #-1]
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80032dc:	6018      	str	r0, [r3, #0]
        usMasterSndBufferCount = 1;

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usMasterSndBufferCount += usLength;
 80032de:	8823      	ldrh	r3, [r4, #0]
 80032e0:	fa18 f283 	uxtah	r2, r8, r3
 80032e4:	b292      	uxth	r2, r2
 80032e6:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 80032e8:	8821      	ldrh	r1, [r4, #0]
 80032ea:	b289      	uxth	r1, r1
 80032ec:	f000 f978 	bl	80035e0 <usMBCRC16>
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80032f0:	8823      	ldrh	r3, [r4, #0]
 80032f2:	4913      	ldr	r1, [pc, #76]	; (8003340 <eMBMasterRTUSend+0x8c>)
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	b292      	uxth	r2, r2
 80032fa:	8022      	strh	r2, [r4, #0]
 80032fc:	b2c2      	uxtb	r2, r0
 80032fe:	54ca      	strb	r2, [r1, r3]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003300:	8823      	ldrh	r3, [r4, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	b292      	uxth	r2, r2
 8003308:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800330c:	8022      	strh	r2, [r4, #0]
 800330e:	54c8      	strb	r0, [r1, r3]

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <eMBMasterRTUSend+0x90>)
        vMBMasterPortSerialEnable( FALSE, TRUE );
 8003312:	2000      	movs	r0, #0
 8003314:	4629      	mov	r1, r5
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8003316:	701d      	strb	r5, [r3, #0]
}

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8003318:	2400      	movs	r4, #0
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
        vMBMasterPortSerialEnable( FALSE, TRUE );
 800331a:	f7ff fc95 	bl	8002c48 <vMBMasterPortSerialEnable>
 800331e:	e000      	b.n	8003322 <eMBMasterRTUSend+0x6e>
    }
    else
    {
        eStatus = MB_EIO;
 8003320:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 8003322:	f7ff fdd9 	bl	8002ed8 <ExitCriticalSection>
    return eStatus;
 8003326:	4620      	mov	r0, r4
 8003328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 800332c:	2002      	movs	r0, #2
    {
        eStatus = MB_EIO;
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 800332e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003332:	bf00      	nop
 8003334:	20016c92 	.word	0x20016c92
 8003338:	20016c8c 	.word	0x20016c8c
 800333c:	20016c94 	.word	0x20016c94
 8003340:	20016c98 	.word	0x20016c98
 8003344:	20016c8e 	.word	0x20016c8e

08003348 <xMBMasterRTUReceiveFSM>:
xMBMasterRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 8003348:	4b20      	ldr	r3, [pc, #128]	; (80033cc <xMBMasterRTUReceiveFSM+0x84>)
    return eStatus;
}

BOOL
xMBMasterRTUReceiveFSM( void )
{
 800334a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	461d      	mov	r5, r3
 8003350:	b142      	cbz	r2, 8003364 <xMBMasterRTUReceiveFSM+0x1c>
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d005      	beq.n	8003364 <xMBMasterRTUReceiveFSM+0x1c>
 8003358:	481d      	ldr	r0, [pc, #116]	; (80033d0 <xMBMasterRTUReceiveFSM+0x88>)
 800335a:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <xMBMasterRTUReceiveFSM+0x8c>)
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <xMBMasterRTUReceiveFSM+0x90>)
 800335e:	21ee      	movs	r1, #238	; 0xee
 8003360:	f012 fd16 	bl	8015d90 <__assert_func>

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );

    switch ( eRcvState )
 8003364:	4c1d      	ldr	r4, [pc, #116]	; (80033dc <xMBMasterRTUReceiveFSM+0x94>)
    UCHAR           ucByte;

    assert(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 8003366:	f10d 0007 	add.w	r0, sp, #7
 800336a:	f7ff fca9 	bl	8002cc0 <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 800336e:	7823      	ldrb	r3, [r4, #0]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d827      	bhi.n	80033c4 <xMBMasterRTUReceiveFSM+0x7c>
 8003374:	e8df f003 	tbb	[pc, r3]
 8003378:	24130224 	.word	0x24130224
         */
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
 800337c:	f7ff fd72 	bl	8002e64 <vMBMasterPortTimersDisable>
    	eSndState = STATE_M_TX_IDLE;

        usMasterRcvBufferPos = 0;
 8003380:	4a17      	ldr	r2, [pc, #92]	; (80033e0 <xMBMasterRTUReceiveFSM+0x98>)
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
    	eSndState = STATE_M_TX_IDLE;
 8003382:	2300      	movs	r3, #0
 8003384:	702b      	strb	r3, [r5, #0]

        usMasterRcvBufferPos = 0;
 8003386:	8013      	strh	r3, [r2, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8003388:	8813      	ldrh	r3, [r2, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	b289      	uxth	r1, r1
 8003390:	8011      	strh	r1, [r2, #0]
 8003392:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <xMBMasterRTUReceiveFSM+0x9c>)
 8003394:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003398:	54d1      	strb	r1, [r2, r3]
        eRcvState = STATE_M_RX_RCV;
 800339a:	2302      	movs	r3, #2
 800339c:	e00f      	b.n	80033be <xMBMasterRTUReceiveFSM+0x76>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800339e:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <xMBMasterRTUReceiveFSM+0x98>)
 80033a0:	8813      	ldrh	r3, [r2, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2bff      	cmp	r3, #255	; 0xff
 80033a6:	d809      	bhi.n	80033bc <xMBMasterRTUReceiveFSM+0x74>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 80033a8:	8813      	ldrh	r3, [r2, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	1c59      	adds	r1, r3, #1
 80033ae:	b289      	uxth	r1, r1
 80033b0:	8011      	strh	r1, [r2, #0]
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <xMBMasterRTUReceiveFSM+0x9c>)
 80033b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80033b8:	54d1      	strb	r1, [r2, r3]
 80033ba:	e001      	b.n	80033c0 <xMBMasterRTUReceiveFSM+0x78>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 80033bc:	2303      	movs	r3, #3
 80033be:	7023      	strb	r3, [r4, #0]
        }
        vMBMasterPortTimersT35Enable();
 80033c0:	f7ff fd18 	bl	8002df4 <vMBMasterPortTimersT35Enable>
        break;
    }
    return xTaskNeedSwitch;
}
 80033c4:	2000      	movs	r0, #0
 80033c6:	b003      	add	sp, #12
 80033c8:	bd30      	pop	{r4, r5, pc}
 80033ca:	bf00      	nop
 80033cc:	20016c8e 	.word	0x20016c8e
 80033d0:	080241c7 	.word	0x080241c7
 80033d4:	080241b0 	.word	0x080241b0
 80033d8:	08024219 	.word	0x08024219
 80033dc:	20016c92 	.word	0x20016c92
 80033e0:	20016c8a 	.word	0x20016c8a
 80033e4:	20016b88 	.word	0x20016b88

080033e8 <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 80033e8:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_M_RX_IDLE );
 80033ea:	4b21      	ldr	r3, [pc, #132]	; (8003470 <xMBMasterRTUTransmitFSM+0x88>)
 80033ec:	7818      	ldrb	r0, [r3, #0]
 80033ee:	b2c0      	uxtb	r0, r0
 80033f0:	2801      	cmp	r0, #1
 80033f2:	d006      	beq.n	8003402 <xMBMasterRTUTransmitFSM+0x1a>
 80033f4:	481f      	ldr	r0, [pc, #124]	; (8003474 <xMBMasterRTUTransmitFSM+0x8c>)
 80033f6:	4a20      	ldr	r2, [pc, #128]	; (8003478 <xMBMasterRTUTransmitFSM+0x90>)
 80033f8:	4b20      	ldr	r3, [pc, #128]	; (800347c <xMBMasterRTUTransmitFSM+0x94>)
 80033fa:	f44f 7198 	mov.w	r1, #304	; 0x130
 80033fe:	f012 fcc7 	bl	8015d90 <__assert_func>

    switch ( eSndState )
 8003402:	4d1f      	ldr	r5, [pc, #124]	; (8003480 <xMBMasterRTUTransmitFSM+0x98>)
 8003404:	782b      	ldrb	r3, [r5, #0]
 8003406:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800340a:	b113      	cbz	r3, 8003412 <xMBMasterRTUTransmitFSM+0x2a>
 800340c:	2901      	cmp	r1, #1
 800340e:	d003      	beq.n	8003418 <xMBMasterRTUTransmitFSM+0x30>
 8003410:	e02b      	b.n	800346a <xMBMasterRTUTransmitFSM+0x82>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_M_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBMasterPortSerialEnable( TRUE, FALSE );
 8003412:	f7ff fc19 	bl	8002c48 <vMBMasterPortSerialEnable>
        break;
 8003416:	e028      	b.n	800346a <xMBMasterRTUTransmitFSM+0x82>

    case STATE_M_TX_XMIT:
        /* check if we are finished. */
        if( usMasterSndBufferCount != 0 )
 8003418:	4c1a      	ldr	r4, [pc, #104]	; (8003484 <xMBMasterRTUTransmitFSM+0x9c>)
 800341a:	8822      	ldrh	r2, [r4, #0]
 800341c:	b292      	uxth	r2, r2
 800341e:	b162      	cbz	r2, 800343a <xMBMasterRTUTransmitFSM+0x52>
        {
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 8003420:	4d19      	ldr	r5, [pc, #100]	; (8003488 <xMBMasterRTUTransmitFSM+0xa0>)
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	7818      	ldrb	r0, [r3, #0]
 8003426:	f7ff fc43 	bl	8002cb0 <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	602b      	str	r3, [r5, #0]
            usMasterSndBufferCount--;
 8003430:	8823      	ldrh	r3, [r4, #0]
 8003432:	3b01      	subs	r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	8023      	strh	r3, [r4, #0]
 8003438:	e017      	b.n	800346a <xMBMasterRTUTransmitFSM+0x82>
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <xMBMasterRTUTransmitFSM+0xa4>)
 800343c:	4c14      	ldr	r4, [pc, #80]	; (8003490 <xMBMasterRTUTransmitFSM+0xa8>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	fab3 f383 	clz	r3, r3
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8003444:	4608      	mov	r0, r1
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
            usMasterSndBufferCount--;
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8003446:	095b      	lsrs	r3, r3, #5
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8003448:	4611      	mov	r1, r2
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
            usMasterSndBufferCount--;
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 800344a:	7023      	strb	r3, [r4, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 800344c:	f7ff fbfc 	bl	8002c48 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 8003450:	2302      	movs	r3, #2
 8003452:	702b      	strb	r3, [r5, #0]
            /* If the frame is broadcast ,master will enable timer of convert delay,
             * else master will enable timer of respond timeout. */
            if ( xFrameIsBroadcast == TRUE )
 8003454:	7823      	ldrb	r3, [r4, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <xMBMasterRTUTransmitFSM+0x78>
            {
            	vMBMasterPortTimersConvertDelayEnable( );
 800345a:	f7ff fcdb 	bl	8002e14 <vMBMasterPortTimersConvertDelayEnable>
 800345e:	e004      	b.n	800346a <xMBMasterRTUTransmitFSM+0x82>
            }
            else
            {
				printf("Start TimeOut Timer 4...\n");
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <xMBMasterRTUTransmitFSM+0xac>)
 8003462:	f012 fdbb 	bl	8015fdc <puts>
            	vMBMasterPortTimersRespondTimeoutEnable( );
 8003466:	f7ff fce7 	bl	8002e38 <vMBMasterPortTimersRespondTimeoutEnable>
        }
        break;
    }

    return xNeedPoll;
}
 800346a:	2000      	movs	r0, #0
 800346c:	bd38      	pop	{r3, r4, r5, pc}
 800346e:	bf00      	nop
 8003470:	20016c92 	.word	0x20016c92
 8003474:	080241c7 	.word	0x080241c7
 8003478:	08024184 	.word	0x08024184
 800347c:	0802425e 	.word	0x0802425e
 8003480:	20016c8e 	.word	0x20016c8e
 8003484:	20016c8c 	.word	0x20016c8c
 8003488:	20016c94 	.word	0x20016c94
 800348c:	20016c98 	.word	0x20016c98
 8003490:	20016c88 	.word	0x20016c88
 8003494:	0802427b 	.word	0x0802427b

08003498 <xMBMasterRTUTimerExpired>:
BOOL
xMBMasterRTUTimerExpired(void)
{
	BOOL xNeedPoll = FALSE;

	switch (eRcvState)
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <xMBMasterRTUTimerExpired+0xd4>)
    return xNeedPoll;
}

BOOL
xMBMasterRTUTimerExpired(void)
{
 800349a:	b570      	push	{r4, r5, r6, lr}
	BOOL xNeedPoll = FALSE;

	switch (eRcvState)
 800349c:	781c      	ldrb	r4, [r3, #0]
 800349e:	b2e4      	uxtb	r4, r4
 80034a0:	2c02      	cmp	r4, #2
 80034a2:	461d      	mov	r5, r3
 80034a4:	d007      	beq.n	80034b6 <xMBMasterRTUTimerExpired+0x1e>
 80034a6:	2c03      	cmp	r4, #3
 80034a8:	d00d      	beq.n	80034c6 <xMBMasterRTUTimerExpired+0x2e>
 80034aa:	b9a4      	cbnz	r4, 80034d6 <xMBMasterRTUTimerExpired+0x3e>
	{
		/* Timer t35 expired. Startup phase is finished. */
	case STATE_M_RX_INIT:
		printf("STATE_M_RX_INIT\n");
 80034ac:	4830      	ldr	r0, [pc, #192]	; (8003570 <xMBMasterRTUTimerExpired+0xd8>)
 80034ae:	f012 fd95 	bl	8015fdc <puts>
		xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY);
 80034b2:	2001      	movs	r0, #1
 80034b4:	e003      	b.n	80034be <xMBMasterRTUTimerExpired+0x26>
		break;

		/* A frame was received and t35 expired. Notify the listener that
		 * a new frame was received. */
	case STATE_M_RX_RCV:
		printf("STATE_M_RX_RCV\n");
 80034b6:	482f      	ldr	r0, [pc, #188]	; (8003574 <xMBMasterRTUTimerExpired+0xdc>)
 80034b8:	f012 fd90 	bl	8015fdc <puts>
		xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED);
 80034bc:	4620      	mov	r0, r4
 80034be:	f7ff fb6f 	bl	8002ba0 <xMBMasterPortEventPost>
 80034c2:	4604      	mov	r4, r0
		break;
 80034c4:	e01b      	b.n	80034fe <xMBMasterRTUTimerExpired+0x66>

		/* An error occured while receiving the frame. */
	case STATE_M_RX_ERROR:
		printf("STATE_M_RX_ERROR\n");
 80034c6:	482c      	ldr	r0, [pc, #176]	; (8003578 <xMBMasterRTUTimerExpired+0xe0>)
 80034c8:	f012 fd88 	bl	8015fdc <puts>
		vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 80034cc:	2001      	movs	r0, #1
 80034ce:	f7ff fe6b 	bl	80031a8 <vMBMasterSetErrorType>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 80034d2:	2010      	movs	r0, #16
 80034d4:	e7f3      	b.n	80034be <xMBMasterRTUTimerExpired+0x26>
		break;

		/* Function called in an illegal state. */
	default:
		//printf("assert\n");
		assert(
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80034dc:	b17a      	cbz	r2, 80034fe <xMBMasterRTUTimerExpired+0x66>
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	2a02      	cmp	r2, #2
 80034e2:	d00b      	beq.n	80034fc <xMBMasterRTUTimerExpired+0x64>
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	2a03      	cmp	r2, #3
 80034e8:	d008      	beq.n	80034fc <xMBMasterRTUTimerExpired+0x64>
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d005      	beq.n	80034fc <xMBMasterRTUTimerExpired+0x64>
 80034f0:	4822      	ldr	r0, [pc, #136]	; (800357c <xMBMasterRTUTimerExpired+0xe4>)
 80034f2:	4a23      	ldr	r2, [pc, #140]	; (8003580 <xMBMasterRTUTimerExpired+0xe8>)
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <xMBMasterRTUTimerExpired+0xec>)
 80034f6:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80034fa:	e023      	b.n	8003544 <xMBMasterRTUTimerExpired+0xac>
}

BOOL
xMBMasterRTUTimerExpired(void)
{
	BOOL xNeedPoll = FALSE;
 80034fc:	2400      	movs	r4, #0
		assert(
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
	}
	eRcvState = STATE_M_RX_IDLE;
 80034fe:	2301      	movs	r3, #1
 8003500:	702b      	strb	r3, [r5, #0]

	switch (eSndState)
 8003502:	4d21      	ldr	r5, [pc, #132]	; (8003588 <xMBMasterRTUTimerExpired+0xf0>)
 8003504:	782b      	ldrb	r3, [r5, #0]
 8003506:	2b02      	cmp	r3, #2
 8003508:	462e      	mov	r6, r5
 800350a:	d10e      	bne.n	800352a <xMBMasterRTUTimerExpired+0x92>
	{
		/* A frame was send finish and convert delay or respond timeout expired.
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		printf("STATE_M_TX_XFWR\n");
 800350c:	481f      	ldr	r0, [pc, #124]	; (800358c <xMBMasterRTUTimerExpired+0xf4>)
 800350e:	f012 fd65 	bl	8015fdc <puts>
		if ( xFrameIsBroadcast == FALSE ) {
 8003512:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <xMBMasterRTUTimerExpired+0xf8>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800351a:	b9ab      	cbnz	r3, 8003548 <xMBMasterRTUTimerExpired+0xb0>
			vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 800351c:	f7ff fe44 	bl	80031a8 <vMBMasterSetErrorType>
			xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 8003520:	2010      	movs	r0, #16
 8003522:	f7ff fb3d 	bl	8002ba0 <xMBMasterPortEventPost>
 8003526:	4604      	mov	r4, r0
 8003528:	e00e      	b.n	8003548 <xMBMasterRTUTimerExpired+0xb0>
		}
		break;
		/* Function called in an illegal state. */
	default:
		printf("assert\n");
 800352a:	481a      	ldr	r0, [pc, #104]	; (8003594 <xMBMasterRTUTimerExpired+0xfc>)
 800352c:	f012 fd56 	bl	8015fdc <puts>
		assert(
 8003530:	782b      	ldrb	r3, [r5, #0]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d008      	beq.n	8003548 <xMBMasterRTUTimerExpired+0xb0>
 8003536:	782b      	ldrb	r3, [r5, #0]
 8003538:	b133      	cbz	r3, 8003548 <xMBMasterRTUTimerExpired+0xb0>
 800353a:	4810      	ldr	r0, [pc, #64]	; (800357c <xMBMasterRTUTimerExpired+0xe4>)
 800353c:	4a10      	ldr	r2, [pc, #64]	; (8003580 <xMBMasterRTUTimerExpired+0xe8>)
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <xMBMasterRTUTimerExpired+0x100>)
 8003540:	f240 1191 	movw	r1, #401	; 0x191
 8003544:	f012 fc24 	bl	8015d90 <__assert_func>
				( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
	}
	eSndState = STATE_M_TX_IDLE;
 8003548:	2300      	movs	r3, #0
	
	printf("Timers get disabled...\n");
 800354a:	4814      	ldr	r0, [pc, #80]	; (800359c <xMBMasterRTUTimerExpired+0x104>)
		printf("assert\n");
		assert(
				( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
	}
	eSndState = STATE_M_TX_IDLE;
 800354c:	7033      	strb	r3, [r6, #0]
	
	printf("Timers get disabled...\n");
 800354e:	f012 fd45 	bl	8015fdc <puts>
	vMBMasterPortTimersDisable( );
 8003552:	f7ff fc87 	bl	8002e64 <vMBMasterPortTimersDisable>
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <xMBMasterRTUTimerExpired+0x108>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d104      	bne.n	8003568 <xMBMasterRTUTimerExpired+0xd0>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 800355e:	2004      	movs	r0, #4
	}

	return xNeedPoll;
}
 8003560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	
	printf("Timers get disabled...\n");
	vMBMasterPortTimersDisable( );
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8003564:	f7ff bb1c 	b.w	8002ba0 <xMBMasterPortEventPost>
	}

	return xNeedPoll;
}
 8003568:	4620      	mov	r0, r4
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	20016c92 	.word	0x20016c92
 8003570:	08024294 	.word	0x08024294
 8003574:	080242a4 	.word	0x080242a4
 8003578:	080242b3 	.word	0x080242b3
 800357c:	080241c7 	.word	0x080241c7
 8003580:	080243c4 	.word	0x080243c4
 8003584:	080242c4 	.word	0x080242c4
 8003588:	20016c8e 	.word	0x20016c8e
 800358c:	08024351 	.word	0x08024351
 8003590:	20016c88 	.word	0x20016c88
 8003594:	08024361 	.word	0x08024361
 8003598:	08024368 	.word	0x08024368
 800359c:	080243ad 	.word	0x080243ad
 80035a0:	20016c8f 	.word	0x20016c8f

080035a4 <vMBMasterGetPDUSndBuf>:
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
	*pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 80035a4:	4b01      	ldr	r3, [pc, #4]	; (80035ac <vMBMasterGetPDUSndBuf+0x8>)
 80035a6:	6003      	str	r3, [r0, #0]
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20016c99 	.word	0x20016c99

080035b0 <vMBMasterSetPDUSndLength>:
}

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
	usMasterSendPDULength = SendPDULength;
 80035b0:	4b01      	ldr	r3, [pc, #4]	; (80035b8 <vMBMasterSetPDUSndLength+0x8>)
 80035b2:	8018      	strh	r0, [r3, #0]
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20016c90 	.word	0x20016c90

080035bc <usMBMasterGetPDUSndLength>:
}

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
	return usMasterSendPDULength;
 80035bc:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <usMBMasterGetPDUSndLength+0x8>)
 80035be:	8818      	ldrh	r0, [r3, #0]
}
 80035c0:	b280      	uxth	r0, r0
 80035c2:	4770      	bx	lr
 80035c4:	20016c90 	.word	0x20016c90

080035c8 <vMBMasterSetCurTimerMode>:

/* Set Modbus Master current timer mode.*/
void vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
	eMasterCurTimerMode = eMBTimerMode;
 80035c8:	4b01      	ldr	r3, [pc, #4]	; (80035d0 <vMBMasterSetCurTimerMode+0x8>)
 80035ca:	7018      	strb	r0, [r3, #0]
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20016c8f 	.word	0x20016c8f

080035d4 <xMBMasterRequestIsBroadcast>:
}

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
	return xFrameIsBroadcast;
 80035d4:	4b01      	ldr	r3, [pc, #4]	; (80035dc <xMBMasterRequestIsBroadcast+0x8>)
 80035d6:	7818      	ldrb	r0, [r3, #0]
}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20016c88 	.word	0x20016c88

080035e0 <usMBCRC16>:

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 80035e0:	23ff      	movs	r3, #255	; 0xff
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80035e2:	b510      	push	{r4, lr}
    UCHAR           ucCRCHi = 0xFF;
 80035e4:	461c      	mov	r4, r3
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 80035e6:	3901      	subs	r1, #1
 80035e8:	b289      	uxth	r1, r1
 80035ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ee:	4291      	cmp	r1, r2
 80035f0:	d008      	beq.n	8003604 <usMBCRC16+0x24>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80035f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035f6:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <usMBCRC16+0x2c>)
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 80035fe:	4c04      	ldr	r4, [pc, #16]	; (8003610 <usMBCRC16+0x30>)
 8003600:	5ca4      	ldrb	r4, [r4, r2]
 8003602:	e7f0      	b.n	80035e6 <usMBCRC16+0x6>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8003604:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8003608:	bd10      	pop	{r4, pc}
 800360a:	bf00      	nop
 800360c:	080244dd 	.word	0x080244dd
 8003610:	080243dd 	.word	0x080243dd

08003614 <xMBUtilSetBits>:
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8003614:	2a08      	cmp	r2, #8

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8003616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003618:	4616      	mov	r6, r2
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 800361a:	d905      	bls.n	8003628 <xMBUtilSetBits+0x14>
 800361c:	480e      	ldr	r0, [pc, #56]	; (8003658 <xMBUtilSetBits+0x44>)
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <xMBUtilSetBits+0x48>)
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <xMBUtilSetBits+0x4c>)
 8003622:	2138      	movs	r1, #56	; 0x38
 8003624:	f012 fbb4 	bl	8015d90 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8003628:	08cd      	lsrs	r5, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - (usByteOffset * BITS_UCHAR);

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800362a:	1c6c      	adds	r4, r5, #1

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 800362c:	2201      	movs	r2, #1
 800362e:	40b2      	lsls	r2, r6
    usMask <<= usBitOffset - (usByteOffset * BITS_UCHAR);

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003630:	5d07      	ldrb	r7, [r0, r4]
 8003632:	5d46      	ldrb	r6, [r0, r5]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8003634:	3a01      	subs	r2, #1
    usMask <<= usBitOffset - (usByteOffset * BITS_UCHAR);
 8003636:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
 800363a:	b292      	uxth	r2, r2
 800363c:	408a      	lsls	r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800363e:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - (usByteOffset * BITS_UCHAR)) ;

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8003642:	b289      	uxth	r1, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8003644:	ea26 0202 	bic.w	r2, r6, r2

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - (usByteOffset * BITS_UCHAR)) ;

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8003648:	408b      	lsls	r3, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 800364a:	4313      	orrs	r3, r2
 800364c:	b29b      	uxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 800364e:	5543      	strb	r3, [r0, r5]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	5503      	strb	r3, [r0, r4]
 8003654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003656:	bf00      	nop
 8003658:	080245e5 	.word	0x080245e5
 800365c:	0802461f 	.word	0x0802461f
 8003660:	08024612 	.word	0x08024612

08003664 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003664:	2807      	cmp	r0, #7
 8003666:	bf9a      	itte	ls
 8003668:	4b01      	ldrls	r3, [pc, #4]	; (8003670 <prveMBError2Exception+0xc>)
 800366a:	5c18      	ldrbls	r0, [r3, r0]
 800366c:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 800366e:	4770      	bx	lr
 8003670:	080245dd 	.word	0x080245dd

08003674 <eMBMasterReqReadCoils>:
eMBMasterReqReadCoils( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usNCoils ,LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8003674:	2810      	cmp	r0, #16
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadCoils( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usNCoils ,LONG lTimeOut )
{
 8003676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003678:	4606      	mov	r6, r0
 800367a:	460d      	mov	r5, r1
 800367c:	4614      	mov	r4, r2
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 800367e:	d825      	bhi.n	80036cc <eMBMasterReqReadCoils+0x58>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff faa9 	bl	8002bd8 <xMBMasterRunResTake>
 8003686:	b318      	cbz	r0, 80036d0 <eMBMasterReqReadCoils+0x5c>
    else
    {
		printf("Frame to be constructed...\n");
 8003688:	4813      	ldr	r0, [pc, #76]	; (80036d8 <eMBMasterReqReadCoils+0x64>)
 800368a:	f012 fca7 	bl	8015fdc <puts>
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 800368e:	a801      	add	r0, sp, #4
 8003690:	f7ff ff88 	bl	80035a4 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 8003694:	4630      	mov	r0, r6
 8003696:	f7ff fd81 	bl	800319c <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                 = MB_FUNC_READ_COILS;
 800369a:	9b01      	ldr	r3, [sp, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]        = usCoilAddr >> 8;
 80036a0:	9b01      	ldr	r3, [sp, #4]
 80036a2:	0a2a      	lsrs	r2, r5, #8
 80036a4:	705a      	strb	r2, [r3, #1]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]    = usCoilAddr;
 80036a6:	9b01      	ldr	r3, [sp, #4]
 80036a8:	709d      	strb	r5, [r3, #2]
		ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF ]    = usNCoils >> 8;
 80036aa:	9b01      	ldr	r3, [sp, #4]
 80036ac:	0a22      	lsrs	r2, r4, #8
 80036ae:	70da      	strb	r2, [r3, #3]
		ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] = usNCoils;
 80036b0:	9b01      	ldr	r3, [sp, #4]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 80036b2:	2005      	movs	r0, #5
		vMBMasterSetDestAddress(ucSndAddr);
		ucMBFrame[MB_PDU_FUNC_OFF]                 = MB_FUNC_READ_COILS;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]        = usCoilAddr >> 8;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]    = usCoilAddr;
		ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF ]    = usNCoils >> 8;
		ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] = usNCoils;
 80036b4:	711c      	strb	r4, [r3, #4]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 80036b6:	f7ff ff7b 	bl	80035b0 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80036ba:	2008      	movs	r0, #8
 80036bc:	f7ff fa70 	bl	8002ba0 <xMBMasterPortEventPost>
		//eErrStatus = eMBMasterWaitRequestFinish( );
		printf("eErrStatus Request: %d\n", eErrStatus);
 80036c0:	4806      	ldr	r0, [pc, #24]	; (80036dc <eMBMasterReqReadCoils+0x68>)
 80036c2:	2100      	movs	r1, #0
 80036c4:	f012 fc48 	bl	8015f58 <printf>
 */
eMBMasterReqErrCode
eMBMasterReqReadCoils( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usNCoils ,LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80036c8:	2000      	movs	r0, #0
 80036ca:	e002      	b.n	80036d2 <eMBMasterReqReadCoils+0x5e>

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80036cc:	2002      	movs	r0, #2
 80036ce:	e000      	b.n	80036d2 <eMBMasterReqReadCoils+0x5e>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80036d0:	2005      	movs	r0, #5
		//eErrStatus = eMBMasterWaitRequestFinish( );
		printf("eErrStatus Request: %d\n", eErrStatus);

    }
    return eErrStatus;
}
 80036d2:	b002      	add	sp, #8
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	bf00      	nop
 80036d8:	0802462e 	.word	0x0802462e
 80036dc:	08024649 	.word	0x08024649

080036e0 <eMBMasterFuncReadCoils>:

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80036e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036e2:	4605      	mov	r5, r0
 80036e4:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 80036e6:	f7ff ff75 	bl	80035d4 <xMBMasterRequestIsBroadcast>
 80036ea:	b108      	cbz	r0, 80036f0 <eMBMasterFuncReadCoils+0x10>
    {
    	eStatus = MB_EX_NONE;
 80036ec:	2000      	movs	r0, #0
 80036ee:	e02f      	b.n	8003750 <eMBMasterFuncReadCoils+0x70>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80036f0:	8823      	ldrh	r3, [r4, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d801      	bhi.n	80036fa <eMBMasterFuncReadCoils+0x1a>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80036f6:	2003      	movs	r0, #3
 80036f8:	e02a      	b.n	8003750 <eMBMasterFuncReadCoils+0x70>
    {
    	eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 80036fa:	a801      	add	r0, sp, #4
 80036fc:	f7ff ff52 	bl	80035a4 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8003700:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 8003702:	78dc      	ldrb	r4, [r3, #3]
    	eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8003704:	7859      	ldrb	r1, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8003706:	789a      	ldrb	r2, [r3, #2]
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 8003708:	791b      	ldrb	r3, [r3, #4]
 800370a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 800370e:	0763      	lsls	r3, r4, #29
 8003710:	d003      	beq.n	800371a <eMBMasterFuncReadCoils+0x3a>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 8003712:	08e3      	lsrs	r3, r4, #3
 8003714:	3301      	adds	r3, #1
 8003716:	b2db      	uxtb	r3, r3
 8003718:	e003      	b.n	8003722 <eMBMasterFuncReadCoils+0x42>
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800371a:	2c00      	cmp	r4, #0
 800371c:	d0eb      	beq.n	80036f6 <eMBMasterFuncReadCoils+0x16>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
        }
        else
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 );
 800371e:	f3c4 03c7 	ubfx	r3, r4, #3, #8
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8003722:	7868      	ldrb	r0, [r5, #1]
 8003724:	4298      	cmp	r0, r3
 8003726:	d1e6      	bne.n	80036f6 <eMBMasterFuncReadCoils+0x16>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8003728:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
        usRegAddress++;
 800372c:	3101      	adds	r1, #1
         */
        if( ( usCoilCount >= 1 ) &&
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 800372e:	1ca8      	adds	r0, r5, #2
 8003730:	b289      	uxth	r1, r1
 8003732:	4622      	mov	r2, r4
 8003734:	2300      	movs	r3, #0
 8003736:	f7fe f86d 	bl	8001814 <eMBMasterRegCoilsCB>
			
			iNReg =  (usCoilCount / 8) + 1;
 800373a:	08e1      	lsrs	r1, r4, #3
         */
        if( ( usCoilCount >= 1 ) &&
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 800373c:	4605      	mov	r5, r0
			
			iNReg =  (usCoilCount / 8) + 1;
			
			printf("iNReg: %d\n", iNReg);
 800373e:	3101      	adds	r1, #1
 8003740:	4804      	ldr	r0, [pc, #16]	; (8003754 <eMBMasterFuncReadCoils+0x74>)
 8003742:	f012 fc09 	bl	8015f58 <printf>
			{
				printf("Coil[%d]: %d\n", i, pucFrame[MB_PDU_FUNC_READ_VALUES_OFF + i]);
			}*/

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003746:	2d00      	cmp	r5, #0
 8003748:	d0d0      	beq.n	80036ec <eMBMasterFuncReadCoils+0xc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800374a:	4628      	mov	r0, r5
 800374c:	f7ff ff8a 	bl	8003664 <prveMBError2Exception>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003750:	b003      	add	sp, #12
 8003752:	bd30      	pop	{r4, r5, pc}
 8003754:	08024661 	.word	0x08024661

08003758 <eMBMasterFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003758:	880b      	ldrh	r3, [r1, #0]
 800375a:	2b05      	cmp	r3, #5
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 800375c:	b513      	push	{r0, r1, r4, lr}
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800375e:	d11c      	bne.n	800379a <eMBMasterFuncWriteCoil+0x42>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003760:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003762:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003764:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003766:	b9c2      	cbnz	r2, 800379a <eMBMasterFuncWriteCoil+0x42>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8003768:	78c4      	ldrb	r4, [r0, #3]
 800376a:	1e60      	subs	r0, r4, #1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800376c:	b2c0      	uxtb	r0, r0
 800376e:	28fd      	cmp	r0, #253	; 0xfd
 8003770:	d913      	bls.n	800379a <eMBMasterFuncWriteCoil+0x42>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8003772:	2cff      	cmp	r4, #255	; 0xff

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 8003774:	f88d 2005 	strb.w	r2, [sp, #5]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003778:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
            {
                ucBuf[0] = 1;
 800377c:	bf08      	it	eq
 800377e:	2201      	moveq	r2, #1
            }
            else
            {
                ucBuf[0] = 0;
 8003780:	f88d 2004 	strb.w	r2, [sp, #4]

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;
 8003784:	3101      	adds	r1, #1
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
 8003786:	2201      	movs	r2, #1
 8003788:	a801      	add	r0, sp, #4
 800378a:	b289      	uxth	r1, r1
 800378c:	4613      	mov	r3, r2
 800378e:	f7fe f841 	bl	8001814 <eMBMasterRegCoilsCB>
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003792:	b120      	cbz	r0, 800379e <eMBMasterFuncWriteCoil+0x46>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003794:	f7ff ff66 	bl	8003664 <prveMBError2Exception>
 8003798:	e001      	b.n	800379e <eMBMasterFuncWriteCoil+0x46>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800379a:	2003      	movs	r0, #3
 800379c:	e7ff      	b.n	800379e <eMBMasterFuncWriteCoil+0x46>
    }
    return eStatus;
}
 800379e:	b002      	add	sp, #8
 80037a0:	bd10      	pop	{r4, pc}

080037a2 <eMBMasterFuncWriteMultipleCoils>:

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80037a2:	880b      	ldrh	r3, [r1, #0]
 80037a4:	2b05      	cmp	r3, #5
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80037a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037a8:	4604      	mov	r4, r0

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80037aa:	d110      	bne.n	80037ce <eMBMasterFuncWriteMultipleCoils+0x2c>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 80037ac:	a801      	add	r0, sp, #4
 80037ae:	f7ff fef9 	bl	80035a4 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80037b2:	7923      	ldrb	r3, [r4, #4]
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80037b4:	78e2      	ldrb	r2, [r4, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 80037b6:	9801      	ldr	r0, [sp, #4]

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80037b8:	7865      	ldrb	r5, [r4, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80037ba:	78a1      	ldrb	r1, [r4, #2]
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 80037bc:	7944      	ldrb	r4, [r0, #5]
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80037be:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80037c2:	0753      	lsls	r3, r2, #29
 80037c4:	d009      	beq.n	80037da <eMBMasterFuncWriteMultipleCoils+0x38>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80037c6:	08d3      	lsrs	r3, r2, #3
 80037c8:	3301      	adds	r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e009      	b.n	80037e2 <eMBMasterFuncWriteMultipleCoils+0x40>

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80037ce:	f7ff ff01 	bl	80035d4 <xMBMasterRequestIsBroadcast>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d1ea      	bne.n	80037ac <eMBMasterFuncWriteMultipleCoils+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80037d6:	2003      	movs	r0, #3
 80037d8:	e011      	b.n	80037fe <eMBMasterFuncWriteMultipleCoils+0x5c>
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 80037da:	2a00      	cmp	r2, #0
 80037dc:	d0fb      	beq.n	80037d6 <eMBMasterFuncWriteMultipleCoils+0x34>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80037de:	f3c2 03c7 	ubfx	r3, r2, #3, #8
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 80037e2:	42a3      	cmp	r3, r4
 80037e4:	d1f7      	bne.n	80037d6 <eMBMasterFuncWriteMultipleCoils+0x34>
    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80037e6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
        usRegAddress++;
 80037ea:	3101      	adds	r1, #1
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 80037ec:	3006      	adds	r0, #6
 80037ee:	b289      	uxth	r1, r1
 80037f0:	2301      	movs	r3, #1
 80037f2:	f7fe f80f 	bl	8001814 <eMBMasterRegCoilsCB>
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80037f6:	b110      	cbz	r0, 80037fe <eMBMasterFuncWriteMultipleCoils+0x5c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80037f8:	f7ff ff34 	bl	8003664 <prveMBError2Exception>
 80037fc:	e7ff      	b.n	80037fe <eMBMasterFuncWriteMultipleCoils+0x5c>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80037fe:	b003      	add	sp, #12
 8003800:	bd30      	pop	{r4, r5, pc}
	...

08003804 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003804:	b538      	push	{r3, r4, r5, lr}
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <eMBFuncReportSlaveID+0x1c>)
 8003808:	881c      	ldrh	r4, [r3, #0]
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800380a:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800380c:	4622      	mov	r2, r4
 800380e:	4905      	ldr	r1, [pc, #20]	; (8003824 <eMBFuncReportSlaveID+0x20>)
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003810:	3401      	adds	r4, #1
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003812:	3001      	adds	r0, #1
 8003814:	f7fc fcb8 	bl	8000188 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003818:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 800381a:	2000      	movs	r0, #0
 800381c:	bd38      	pop	{r3, r4, r5, pc}
 800381e:	bf00      	nop
 8003820:	20016d96 	.word	0x20016d96
 8003824:	20016d98 	.word	0x20016d98

08003828 <eMBMasterFuncReadDiscreteInputs>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8003828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800382a:	4604      	mov	r4, r0
 800382c:	460d      	mov	r5, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800382e:	f7ff fed1 	bl	80035d4 <xMBMasterRequestIsBroadcast>
 8003832:	b108      	cbz	r0, 8003838 <eMBMasterFuncReadDiscreteInputs+0x10>
    {
    	eStatus = MB_EX_NONE;
 8003834:	2000      	movs	r0, #0
 8003836:	e026      	b.n	8003886 <eMBMasterFuncReadDiscreteInputs+0x5e>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8003838:	882b      	ldrh	r3, [r5, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d801      	bhi.n	8003842 <eMBMasterFuncReadDiscreteInputs+0x1a>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800383e:	2003      	movs	r0, #3
 8003840:	e021      	b.n	8003886 <eMBMasterFuncReadDiscreteInputs+0x5e>
    {
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8003842:	a801      	add	r0, sp, #4
 8003844:	f7ff feae 	bl	80035a4 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8003848:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 800384a:	78da      	ldrb	r2, [r3, #3]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800384c:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800384e:	7899      	ldrb	r1, [r3, #2]
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8003850:	791b      	ldrb	r3, [r3, #4]
 8003852:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8003856:	0753      	lsls	r3, r2, #29
 8003858:	d003      	beq.n	8003862 <eMBMasterFuncReadDiscreteInputs+0x3a>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 800385a:	08d3      	lsrs	r3, r2, #3
 800385c:	3301      	adds	r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e003      	b.n	800386a <eMBMasterFuncReadDiscreteInputs+0x42>
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 8003862:	2a00      	cmp	r2, #0
 8003864:	d0eb      	beq.n	800383e <eMBMasterFuncReadDiscreteInputs+0x16>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
        }
        else
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 8003866:	f3c2 03c7 	ubfx	r3, r2, #3, #8
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 800386a:	7865      	ldrb	r5, [r4, #1]
 800386c:	429d      	cmp	r5, r3
 800386e:	d1e6      	bne.n	800383e <eMBMasterFuncReadDiscreteInputs+0x16>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8003870:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 8003874:	3101      	adds	r1, #1
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
        {
	       	/* Make callback to fill the buffer. */
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 8003876:	1ca0      	adds	r0, r4, #2
 8003878:	b289      	uxth	r1, r1
 800387a:	f7fe f80d 	bl	8001898 <eMBMasterRegDiscreteCB>

			/* If an error occured convert it into a Modbus exception. */
			if( eRegStatus != MB_ENOERR )
 800387e:	2800      	cmp	r0, #0
 8003880:	d0d8      	beq.n	8003834 <eMBMasterFuncReadDiscreteInputs+0xc>
			{
				eStatus = prveMBError2Exception( eRegStatus );
 8003882:	f7ff feef 	bl	8003664 <prveMBError2Exception>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003886:	b003      	add	sp, #12
 8003888:	bd30      	pop	{r4, r5, pc}
	...

0800388c <eMBMasterFuncReadInputRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800388c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800388e:	4604      	mov	r4, r0
	USHORT	 		i;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

	printf("Start Read Input...\n");
 8003890:	4814      	ldr	r0, [pc, #80]	; (80038e4 <eMBMasterFuncReadInputRegister+0x58>)
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003892:	460d      	mov	r5, r1
	USHORT	 		i;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

	printf("Start Read Input...\n");
 8003894:	f012 fba2 	bl	8015fdc <puts>
    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
 8003898:	f7ff fe9c 	bl	80035d4 <xMBMasterRequestIsBroadcast>
 800389c:	b108      	cbz	r0, 80038a2 <eMBMasterFuncReadInputRegister+0x16>
	{
		eStatus = MB_EX_NONE;
 800389e:	2000      	movs	r0, #0
 80038a0:	e01e      	b.n	80038e0 <eMBMasterFuncReadInputRegister+0x54>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80038a2:	882b      	ldrh	r3, [r5, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d801      	bhi.n	80038ac <eMBMasterFuncReadInputRegister+0x20>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80038a8:	2003      	movs	r0, #3
 80038aa:	e019      	b.n	80038e0 <eMBMasterFuncReadInputRegister+0x54>
	{
		eStatus = MB_EX_NONE;
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80038ac:	a801      	add	r0, sp, #4
 80038ae:	f7ff fe79 	bl	80035a4 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80038b2:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 80038b4:	78da      	ldrb	r2, [r3, #3]
		eStatus = MB_EX_NONE;
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80038b6:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80038b8:	7899      	ldrb	r1, [r3, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 80038ba:	791b      	ldrb	r3, [r3, #4]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80038bc:	ea53 2202 	orrs.w	r2, r3, r2, lsl #8
 80038c0:	d0f2      	beq.n	80038a8 <eMBMasterFuncReadInputRegister+0x1c>
 80038c2:	7863      	ldrb	r3, [r4, #1]
 80038c4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80038c8:	d1ee      	bne.n	80038a8 <eMBMasterFuncReadInputRegister+0x1c>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80038ca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 80038ce:	3101      	adds	r1, #1
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 80038d0:	1ca0      	adds	r0, r4, #2
 80038d2:	b289      	uxth	r1, r1
 80038d4:	f7fd ff2e 	bl	8001734 <eMBMasterRegInputCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80038d8:	2800      	cmp	r0, #0
 80038da:	d0e0      	beq.n	800389e <eMBMasterFuncReadInputRegister+0x12>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80038dc:	f7ff fec2 	bl	8003664 <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80038e0:	b003      	add	sp, #12
 80038e2:	bd30      	pop	{r4, r5, pc}
 80038e4:	0802466c 	.word	0x0802466c

080038e8 <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80038e8:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 80038ea:	880b      	ldrh	r3, [r1, #0]
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d10f      	bne.n	8003910 <eMBMasterFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80038f0:	7883      	ldrb	r3, [r0, #2]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80038f2:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80038f4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegAddress++;
 80038f8:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80038fa:	2201      	movs	r2, #1
 80038fc:	3003      	adds	r0, #3
 80038fe:	b289      	uxth	r1, r1
 8003900:	4613      	mov	r3, r2
 8003902:	f7fd ff53 	bl	80017ac <eMBMasterRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8003906:	b128      	cbz	r0, 8003914 <eMBMasterFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800390c:	f7ff beaa 	b.w	8003664 <prveMBError2Exception>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003910:	2003      	movs	r0, #3
 8003912:	bd08      	pop	{r3, pc}
    }
    return eStatus;
}
 8003914:	bd08      	pop	{r3, pc}

08003916 <eMBMasterFuncWriteMultipleHoldingRegister>:

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8003916:	880b      	ldrh	r3, [r1, #0]
 8003918:	2b05      	cmp	r3, #5
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800391a:	b513      	push	{r0, r1, r4, lr}

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 800391c:	d10e      	bne.n	800393c <eMBMasterFuncWriteMultipleHoldingRegister+0x26>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 800391e:	a801      	add	r0, sp, #4
 8003920:	f7ff fe40 	bl	80035a4 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 8003924:	9801      	ldr	r0, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 8003926:	78c4      	ldrb	r4, [r0, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 8003928:	7902      	ldrb	r2, [r0, #4]

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 800392a:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 800392c:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 800392e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
 8003932:	7944      	ldrb	r4, [r0, #5]
 8003934:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 8003938:	d104      	bne.n	8003944 <eMBMasterFuncWriteMultipleHoldingRegister+0x2e>
 800393a:	e005      	b.n	8003948 <eMBMasterFuncWriteMultipleHoldingRegister+0x32>

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 800393c:	f7ff fe4a 	bl	80035d4 <xMBMasterRequestIsBroadcast>
 8003940:	2800      	cmp	r0, #0
 8003942:	d1ec      	bne.n	800391e <eMBMasterFuncWriteMultipleHoldingRegister+0x8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003944:	2003      	movs	r0, #3
 8003946:	e00b      	b.n	8003960 <eMBMasterFuncWriteMultipleHoldingRegister+0x4a>
    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 8003948:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegAddress++;
 800394c:	3101      	adds	r1, #1
        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
        {
            /* Make callback to update the register values. */
            eRegStatus =
 800394e:	3006      	adds	r0, #6
 8003950:	b289      	uxth	r1, r1
 8003952:	2301      	movs	r3, #1
 8003954:	f7fd ff2a 	bl	80017ac <eMBMasterRegHoldingCB>
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003958:	b110      	cbz	r0, 8003960 <eMBMasterFuncWriteMultipleHoldingRegister+0x4a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800395a:	f7ff fe83 	bl	8003664 <prveMBError2Exception>
 800395e:	e7ff      	b.n	8003960 <eMBMasterFuncWriteMultipleHoldingRegister+0x4a>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003960:	b002      	add	sp, #8
 8003962:	bd10      	pop	{r4, pc}

08003964 <eMBMasterReqReadHoldingRegister>:
eMBMasterReqReadHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8003964:	2810      	cmp	r0, #16
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
 8003966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003968:	4606      	mov	r6, r0
 800396a:	460d      	mov	r5, r1
 800396c:	4614      	mov	r4, r2
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 800396e:	d81e      	bhi.n	80039ae <eMBMasterReqReadHoldingRegister+0x4a>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff f931 	bl	8002bd8 <xMBMasterRunResTake>
 8003976:	b1e0      	cbz	r0, 80039b2 <eMBMasterReqReadHoldingRegister+0x4e>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8003978:	a801      	add	r0, sp, #4
 800397a:	f7ff fe13 	bl	80035a4 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff fc0c 	bl	800319c <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	2203      	movs	r2, #3
 8003988:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 800398a:	9b01      	ldr	r3, [sp, #4]
 800398c:	0a2a      	lsrs	r2, r5, #8
 800398e:	705a      	strb	r2, [r3, #1]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 8003990:	9b01      	ldr	r3, [sp, #4]
 8003992:	709d      	strb	r5, [r3, #2]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 8003994:	9b01      	ldr	r3, [sp, #4]
 8003996:	0a22      	lsrs	r2, r4, #8
 8003998:	70da      	strb	r2, [r3, #3]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 800399a:	9b01      	ldr	r3, [sp, #4]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 800399c:	2005      	movs	r0, #5
		vMBMasterSetDestAddress(ucSndAddr);
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 800399e:	711c      	strb	r4, [r3, #4]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 80039a0:	f7ff fe06 	bl	80035b0 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80039a4:	2008      	movs	r0, #8
 80039a6:	f7ff f8fb 	bl	8002ba0 <xMBMasterPortEventPost>
 */
eMBMasterReqErrCode
eMBMasterReqReadHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80039aa:	2000      	movs	r0, #0
 80039ac:	e002      	b.n	80039b4 <eMBMasterReqReadHoldingRegister+0x50>

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80039ae:	2002      	movs	r0, #2
 80039b0:	e000      	b.n	80039b4 <eMBMasterReqReadHoldingRegister+0x50>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80039b2:	2005      	movs	r0, #5
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
		//eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
}
 80039b4:	b002      	add	sp, #8
 80039b6:	bd70      	pop	{r4, r5, r6, pc}

080039b8 <eMBMasterFuncReadHoldingRegister>:

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80039b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039ba:	4605      	mov	r5, r0
 80039bc:	460e      	mov	r6, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 80039be:	f7ff fe09 	bl	80035d4 <xMBMasterRequestIsBroadcast>
 80039c2:	4604      	mov	r4, r0
 80039c4:	b108      	cbz	r0, 80039ca <eMBMasterFuncReadHoldingRegister+0x12>
    {
    	eStatus = MB_EX_NONE;
 80039c6:	2000      	movs	r0, #0
 80039c8:	e01f      	b.n	8003a0a <eMBMasterFuncReadHoldingRegister+0x52>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80039ca:	8833      	ldrh	r3, [r6, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d801      	bhi.n	80039d4 <eMBMasterFuncReadHoldingRegister+0x1c>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80039d0:	2003      	movs	r0, #3
 80039d2:	e01a      	b.n	8003a0a <eMBMasterFuncReadHoldingRegister+0x52>
    {
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80039d4:	a801      	add	r0, sp, #4
 80039d6:	f7ff fde5 	bl	80035a4 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80039da:	9801      	ldr	r0, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 80039dc:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 80039de:	7902      	ldrb	r2, [r0, #4]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80039e0:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80039e2:	7881      	ldrb	r1, [r0, #2]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80039e4:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 80039e8:	d0f2      	beq.n	80039d0 <eMBMasterFuncReadHoldingRegister+0x18>
 80039ea:	786b      	ldrb	r3, [r5, #1]
 80039ec:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80039f0:	d1ee      	bne.n	80039d0 <eMBMasterFuncReadHoldingRegister+0x18>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80039f2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
        usRegAddress++;
 80039f6:	3101      	adds	r1, #1
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 80039f8:	1ca8      	adds	r0, r5, #2
 80039fa:	b289      	uxth	r1, r1
 80039fc:	4623      	mov	r3, r4
 80039fe:	f7fd fed5 	bl	80017ac <eMBMasterRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d0df      	beq.n	80039c6 <eMBMasterFuncReadHoldingRegister+0xe>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003a06:	f7ff fe2d 	bl	8003664 <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}

08003a0e <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a10:	4605      	mov	r5, r0
 8003a12:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8003a14:	f7ff fdde 	bl	80035d4 <xMBMasterRequestIsBroadcast>
 8003a18:	b108      	cbz	r0, 8003a1e <eMBMasterFuncReadWriteMultipleHoldingRegister+0x10>
    {
    	eStatus = MB_EX_NONE;
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	e032      	b.n	8003a84 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x76>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 8003a1e:	8823      	ldrh	r3, [r4, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d9fa      	bls.n	8003a1a <eMBMasterFuncReadWriteMultipleHoldingRegister+0xc>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8003a24:	a801      	add	r0, sp, #4
 8003a26:	f7ff fdbd 	bl	80035a4 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8003a2a:	9801      	ldr	r0, [sp, #4]
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8003a2c:	f895 c001 	ldrb.w	ip, [r5, #1]
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8003a30:	7903      	ldrb	r3, [r0, #4]
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 8003a32:	78c6      	ldrb	r6, [r0, #3]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8003a34:	7847      	ldrb	r7, [r0, #1]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8003a36:	7884      	ldrb	r4, [r0, #2]
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003a38:	7941      	ldrb	r1, [r0, #5]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8003a3a:	f890 e007 	ldrb.w	lr, [r0, #7]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 8003a3e:	7a02      	ldrb	r2, [r0, #8]
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8003a40:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8003a44:	ebbc 0f46 	cmp.w	ip, r6, lsl #1

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 8003a48:	7983      	ldrb	r3, [r0, #6]
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8003a4a:	d11a      	bne.n	8003a82 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x74>

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 8003a4c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegWriteAddress++;
 8003a50:	3101      	adds	r1, #1
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 8003a52:	2301      	movs	r3, #1
 8003a54:	300a      	adds	r0, #10
 8003a56:	b289      	uxth	r1, r1
 8003a58:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8003a5c:	f7fd fea6 	bl	80017ac <eMBMasterRegHoldingCB>
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8003a60:	4603      	mov	r3, r0
 8003a62:	b950      	cbnz	r0, 8003a7a <eMBMasterFuncReadWriteMultipleHoldingRegister+0x6c>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8003a64:	ea44 2107 	orr.w	r1, r4, r7, lsl #8
        usRegReadAddress++;
 8003a68:	3101      	adds	r1, #1
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
            {
                /* Make the read callback. */
				eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 8003a6a:	1ca8      	adds	r0, r5, #2
 8003a6c:	b289      	uxth	r1, r1
 8003a6e:	4632      	mov	r2, r6
 8003a70:	f7fd fe9c 	bl	80017ac <eMBMasterRegHoldingCB>
						                      usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 8003a74:	4603      	mov	r3, r0
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d0cf      	beq.n	8003a1a <eMBMasterFuncReadWriteMultipleHoldingRegister+0xc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fdf2 	bl	8003664 <prveMBError2Exception>
 8003a80:	e000      	b.n	8003a84 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x76>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003a82:	2003      	movs	r0, #3
        }
    }
    return eStatus;
}
 8003a84:	b003      	add	sp, #12
 8003a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  Init: SDIO initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003a88:	b084      	sub	sp, #16
 8003a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8e:	4606      	mov	r6, r0
 8003a90:	a809      	add	r0, sp, #36	; 0x24
 8003a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0; 

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 8003a96:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <SDIO_Init+0xac>)
 8003a98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003a9c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003aa0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003aa2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003aa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003aa6:	429e      	cmp	r6, r3
 8003aa8:	4689      	mov	r9, r1
 8003aaa:	d003      	beq.n	8003ab4 <SDIO_Init+0x2c>
 8003aac:	4822      	ldr	r0, [pc, #136]	; (8003b38 <SDIO_Init+0xb0>)
 8003aae:	21da      	movs	r1, #218	; 0xda
 8003ab0:	f7fd fefe 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 8003ab4:	f439 5300 	bics.w	r3, r9, #8192	; 0x2000
 8003ab8:	d003      	beq.n	8003ac2 <SDIO_Init+0x3a>
 8003aba:	481f      	ldr	r0, [pc, #124]	; (8003b38 <SDIO_Init+0xb0>)
 8003abc:	21db      	movs	r1, #219	; 0xdb
 8003abe:	f7fd fef7 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 8003ac2:	f43a 6380 	bics.w	r3, sl, #1024	; 0x400
 8003ac6:	d003      	beq.n	8003ad0 <SDIO_Init+0x48>
 8003ac8:	481b      	ldr	r0, [pc, #108]	; (8003b38 <SDIO_Init+0xb0>)
 8003aca:	21dc      	movs	r1, #220	; 0xdc
 8003acc:	f7fd fef0 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8003ad0:	f438 7300 	bics.w	r3, r8, #512	; 0x200
 8003ad4:	d003      	beq.n	8003ade <SDIO_Init+0x56>
 8003ad6:	4818      	ldr	r0, [pc, #96]	; (8003b38 <SDIO_Init+0xb0>)
 8003ad8:	21dd      	movs	r1, #221	; 0xdd
 8003ada:	f7fd fee9 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 8003ade:	f434 6300 	bics.w	r3, r4, #2048	; 0x800
 8003ae2:	d006      	beq.n	8003af2 <SDIO_Init+0x6a>
 8003ae4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003ae8:	d003      	beq.n	8003af2 <SDIO_Init+0x6a>
 8003aea:	4813      	ldr	r0, [pc, #76]	; (8003b38 <SDIO_Init+0xb0>)
 8003aec:	21de      	movs	r1, #222	; 0xde
 8003aee:	f7fd fedf 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8003af2:	f437 4380 	bics.w	r3, r7, #16384	; 0x4000
 8003af6:	d003      	beq.n	8003b00 <SDIO_Init+0x78>
 8003af8:	480f      	ldr	r0, [pc, #60]	; (8003b38 <SDIO_Init+0xb0>)
 8003afa:	21df      	movs	r1, #223	; 0xdf
 8003afc:	f7fd fed8 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 8003b00:	2dff      	cmp	r5, #255	; 0xff
 8003b02:	d903      	bls.n	8003b0c <SDIO_Init+0x84>
 8003b04:	480c      	ldr	r0, [pc, #48]	; (8003b38 <SDIO_Init+0xb0>)
 8003b06:	21e0      	movs	r1, #224	; 0xe0
 8003b08:	f7fd fed2 	bl	80018b0 <assert_failed>
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003b0c:	ea4a 0909 	orr.w	r9, sl, r9
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003b10:	6872      	ldr	r2, [r6, #4]
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
 8003b12:	ea49 0808 	orr.w	r8, r9, r8
             Init.ClockPowerSave      |\
 8003b16:	ea48 0404 	orr.w	r4, r8, r4
             Init.BusWide             |\
 8003b1a:	433c      	orrs	r4, r7
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003b1c:	f422 43fd 	bic.w	r3, r2, #32384	; 0x7e80
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
             Init.HardwareFlowControl |\
 8003b20:	4325      	orrs	r5, r4
             Init.ClockDiv
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003b22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b26:	432b      	orrs	r3, r5
 8003b28:	6073      	str	r3, [r6, #4]

  return HAL_OK;
}
 8003b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b2e:	2000      	movs	r0, #0
 8003b30:	b004      	add	sp, #16
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	08024680 	.word	0x08024680

08003b3c <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003b3c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8003b40:	4770      	bx	lr

08003b42 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003b42:	680b      	ldr	r3, [r1, #0]
 8003b44:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8003b48:	2000      	movs	r0, #0
 8003b4a:	4770      	bx	lr

08003b4c <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 8003b50:	2000      	movs	r0, #0
 8003b52:	4770      	bx	lr

08003b54 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003b54:	6800      	ldr	r0, [r0, #0]
}
 8003b56:	f000 0003 	and.w	r0, r0, #3
 8003b5a:	4770      	bx	lr

08003b5c <SDIO_SendCommand>:
  * @param  SDIO_CmdInitStruct: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8003b5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->CmdIndex));
 8003b5e:	684b      	ldr	r3, [r1, #4]
 8003b60:	2b3f      	cmp	r3, #63	; 0x3f
  * @param  SDIO_CmdInitStruct: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8003b62:	4605      	mov	r5, r0
 8003b64:	460c      	mov	r4, r1
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->CmdIndex));
 8003b66:	d904      	bls.n	8003b72 <SDIO_SendCommand+0x16>
 8003b68:	481b      	ldr	r0, [pc, #108]	; (8003bd8 <SDIO_SendCommand+0x7c>)
 8003b6a:	f240 1165 	movw	r1, #357	; 0x165
 8003b6e:	f7fd fe9f 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->Response));
 8003b72:	68a3      	ldr	r3, [r4, #8]
 8003b74:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8003b78:	d006      	beq.n	8003b88 <SDIO_SendCommand+0x2c>
 8003b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b7c:	d004      	beq.n	8003b88 <SDIO_SendCommand+0x2c>
 8003b7e:	4816      	ldr	r0, [pc, #88]	; (8003bd8 <SDIO_SendCommand+0x7c>)
 8003b80:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8003b84:	f7fd fe94 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->WaitForInterrupt));
 8003b88:	68e3      	ldr	r3, [r4, #12]
 8003b8a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8003b8e:	d007      	beq.n	8003ba0 <SDIO_SendCommand+0x44>
 8003b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b94:	d004      	beq.n	8003ba0 <SDIO_SendCommand+0x44>
 8003b96:	4810      	ldr	r0, [pc, #64]	; (8003bd8 <SDIO_SendCommand+0x7c>)
 8003b98:	f240 1167 	movw	r1, #359	; 0x167
 8003b9c:	f7fd fe88 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->CPSM));
 8003ba0:	6923      	ldr	r3, [r4, #16]
 8003ba2:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8003ba6:	d004      	beq.n	8003bb2 <SDIO_SendCommand+0x56>
 8003ba8:	480b      	ldr	r0, [pc, #44]	; (8003bd8 <SDIO_SendCommand+0x7c>)
 8003baa:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003bae:	f7fd fe7f 	bl	80018b0 <assert_failed>

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	60ab      	str	r3, [r5, #8]

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8003bb6:	68a1      	ldr	r1, [r4, #8]
 8003bb8:	6863      	ldr	r3, [r4, #4]
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);
  
  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bba:	68ea      	ldr	r2, [r5, #12]

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8003bbc:	4319      	orrs	r1, r3
                       SDIO_CmdInitStruct->Response         |\
 8003bbe:	68e3      	ldr	r3, [r4, #12]
 8003bc0:	430b      	orrs	r3, r1

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 8003bc2:	6921      	ldr	r1, [r4, #16]
 8003bc4:	4319      	orrs	r1, r3
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);
  
  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bc6:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
 8003bca:	f023 030f 	bic.w	r3, r3, #15
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	60eb      	str	r3, [r5, #12]
  
  return HAL_OK;  
}
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	bd38      	pop	{r3, r4, r5, pc}
 8003bd6:	bf00      	nop
 8003bd8:	08024680 	.word	0x08024680

08003bdc <SDIO_GetCommandResponse>:
  * @param  SDIOx: Pointer to SDIO register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
  return (uint8_t)(SDIOx->RESPCMD);
 8003bdc:	6900      	ldr	r0, [r0, #16]
}
 8003bde:	b2c0      	uxtb	r0, r0
 8003be0:	4770      	bx	lr
	...

08003be4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8003be4:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));
 8003bea:	f030 030c 	bics.w	r3, r0, #12
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8003bee:	4604      	mov	r4, r0
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));
 8003bf0:	d004      	beq.n	8003bfc <SDIO_GetResponse+0x18>
 8003bf2:	4806      	ldr	r0, [pc, #24]	; (8003c0c <SDIO_GetResponse+0x28>)
 8003bf4:	f240 1193 	movw	r1, #403	; 0x193
 8003bf8:	f7fd fe5a 	bl	80018b0 <assert_failed>

  /* Get the response */
  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <SDIO_GetResponse+0x2c>)
 8003bfe:	4423      	add	r3, r4
 8003c00:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 8003c02:	9b01      	ldr	r3, [sp, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
}  
 8003c06:	b002      	add	sp, #8
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08024680 	.word	0x08024680
 8003c10:	40012c14 	.word	0x40012c14

08003c14 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8003c14:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->DataLength));
 8003c16:	684b      	ldr	r3, [r1, #4]
 8003c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	460c      	mov	r4, r1
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->DataLength));
 8003c20:	d304      	bcc.n	8003c2c <SDIO_DataConfig+0x18>
 8003c22:	4822      	ldr	r0, [pc, #136]	; (8003cac <SDIO_DataConfig+0x98>)
 8003c24:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8003c28:	f7fd fe42 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->DataBlockSize));
 8003c2c:	68a3      	ldr	r3, [r4, #8]
 8003c2e:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 8003c32:	f023 0110 	bic.w	r1, r3, #16
 8003c36:	d00c      	beq.n	8003c52 <SDIO_DataConfig+0x3e>
 8003c38:	2a40      	cmp	r2, #64	; 0x40
 8003c3a:	d00a      	beq.n	8003c52 <SDIO_DataConfig+0x3e>
 8003c3c:	2a80      	cmp	r2, #128	; 0x80
 8003c3e:	d008      	beq.n	8003c52 <SDIO_DataConfig+0x3e>
 8003c40:	29c0      	cmp	r1, #192	; 0xc0
 8003c42:	d006      	beq.n	8003c52 <SDIO_DataConfig+0x3e>
 8003c44:	2be0      	cmp	r3, #224	; 0xe0
 8003c46:	d004      	beq.n	8003c52 <SDIO_DataConfig+0x3e>
 8003c48:	4818      	ldr	r0, [pc, #96]	; (8003cac <SDIO_DataConfig+0x98>)
 8003c4a:	f240 11a9 	movw	r1, #425	; 0x1a9
 8003c4e:	f7fd fe2f 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->TransferDir));
 8003c52:	68e3      	ldr	r3, [r4, #12]
 8003c54:	f033 0302 	bics.w	r3, r3, #2
 8003c58:	d004      	beq.n	8003c64 <SDIO_DataConfig+0x50>
 8003c5a:	4814      	ldr	r0, [pc, #80]	; (8003cac <SDIO_DataConfig+0x98>)
 8003c5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c60:	f7fd fe26 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->TransferMode));
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	f033 0304 	bics.w	r3, r3, #4
 8003c6a:	d004      	beq.n	8003c76 <SDIO_DataConfig+0x62>
 8003c6c:	480f      	ldr	r0, [pc, #60]	; (8003cac <SDIO_DataConfig+0x98>)
 8003c6e:	f240 11ab 	movw	r1, #427	; 0x1ab
 8003c72:	f7fd fe1d 	bl	80018b0 <assert_failed>
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->DPSM));
 8003c76:	6963      	ldr	r3, [r4, #20]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d904      	bls.n	8003c86 <SDIO_DataConfig+0x72>
 8003c7c:	480b      	ldr	r0, [pc, #44]	; (8003cac <SDIO_DataConfig+0x98>)
 8003c7e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003c82:	f7fd fe15 	bl	80018b0 <assert_failed>

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8003c86:	68a2      	ldr	r2, [r4, #8]
 8003c88:	68e1      	ldr	r1, [r4, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->DPSM));

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	626b      	str	r3, [r5, #36]	; 0x24

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8003c8e:	4311      	orrs	r1, r2

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;
 8003c90:	6863      	ldr	r3, [r4, #4]

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
                       SDIO_DataInitStruct->TransferDir   |\
 8003c92:	6922      	ldr	r2, [r4, #16]

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;
 8003c94:	62ab      	str	r3, [r5, #40]	; 0x28
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
  
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c96:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
                       SDIO_DataInitStruct->TransferDir   |\
 8003c98:	4311      	orrs	r1, r2

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8003c9a:	6962      	ldr	r2, [r4, #20]
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
  
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c9c:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8003ca0:	430a      	orrs	r2, r1
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
  
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	62eb      	str	r3, [r5, #44]	; 0x2c

  return HAL_OK;

}
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}
 8003caa:	bf00      	nop
 8003cac:	08024680 	.word	0x08024680

08003cb0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003cb2:	6803      	ldr	r3, [r0, #0]
 8003cb4:	2b0f      	cmp	r3, #15
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb6:	4604      	mov	r4, r0
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003cb8:	d904      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x14>
 8003cba:	48a2      	ldr	r0, [pc, #648]	; (8003f44 <HAL_RCC_OscConfig+0x294>)
 8003cbc:	f240 1115 	movw	r1, #277	; 0x115
 8003cc0:	f7fd fdf6 	bl	80018b0 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	07d8      	lsls	r0, r3, #31
 8003cc8:	d403      	bmi.n	8003cd2 <HAL_RCC_OscConfig+0x22>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	0799      	lsls	r1, r3, #30
 8003cce:	d456      	bmi.n	8003d7e <HAL_RCC_OscConfig+0xce>
 8003cd0:	e0b7      	b.n	8003e42 <HAL_RCC_OscConfig+0x192>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003cd2:	6863      	ldr	r3, [r4, #4]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d906      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x36>
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d004      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x36>
 8003cdc:	4899      	ldr	r0, [pc, #612]	; (8003f44 <HAL_RCC_OscConfig+0x294>)
 8003cde:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003ce2:	f7fd fde5 	bl	80018b0 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce6:	4b98      	ldr	r3, [pc, #608]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	f002 020c 	and.w	r2, r2, #12
 8003cee:	2a04      	cmp	r2, #4
 8003cf0:	d007      	beq.n	8003d02 <HAL_RCC_OscConfig+0x52>
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	f002 020c 	and.w	r2, r2, #12
 8003cf8:	2a08      	cmp	r2, #8
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCC_OscConfig+0x64>
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	025a      	lsls	r2, r3, #9
 8003d00:	d508      	bpl.n	8003d14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d02:	4b91      	ldr	r3, [pc, #580]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	039b      	lsls	r3, r3, #14
 8003d08:	d5df      	bpl.n	8003cca <HAL_RCC_OscConfig+0x1a>
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1dc      	bne.n	8003cca <HAL_RCC_OscConfig+0x1a>
      {
        return HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
 8003d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8003d14:	4d8d      	ldr	r5, [pc, #564]	; (8003f4c <HAL_RCC_OscConfig+0x29c>)
 8003d16:	2300      	movs	r3, #0
 8003d18:	702b      	strb	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f003 fc65 	bl	80075e8 <HAL_GetTick>
 8003d1e:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d20:	4b89      	ldr	r3, [pc, #548]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	039f      	lsls	r7, r3, #14
 8003d26:	d508      	bpl.n	8003d3a <HAL_RCC_OscConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d28:	f003 fc5e 	bl	80075e8 <HAL_GetTick>
 8003d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d30:	1b80      	subs	r0, r0, r6
 8003d32:	4298      	cmp	r0, r3
 8003d34:	d9f4      	bls.n	8003d20 <HAL_RCC_OscConfig+0x70>
        {
          return HAL_TIMEOUT;
 8003d36:	2003      	movs	r0, #3
 8003d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3a:	7923      	ldrb	r3, [r4, #4]
 8003d3c:	702b      	strb	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d3e:	6863      	ldr	r3, [r4, #4]
 8003d40:	b173      	cbz	r3, 8003d60 <HAL_RCC_OscConfig+0xb0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f003 fc51 	bl	80075e8 <HAL_GetTick>
 8003d46:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d48:	4b7f      	ldr	r3, [pc, #508]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	0398      	lsls	r0, r3, #14
 8003d4e:	d4bc      	bmi.n	8003cca <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d50:	f003 fc4a 	bl	80075e8 <HAL_GetTick>
 8003d54:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d58:	1b40      	subs	r0, r0, r5
 8003d5a:	4298      	cmp	r0, r3
 8003d5c:	d9f4      	bls.n	8003d48 <HAL_RCC_OscConfig+0x98>
 8003d5e:	e7ea      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f003 fc42 	bl	80075e8 <HAL_GetTick>
 8003d64:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d66:	4b78      	ldr	r3, [pc, #480]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	0399      	lsls	r1, r3, #14
 8003d6c:	d5ad      	bpl.n	8003cca <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6e:	f003 fc3b 	bl	80075e8 <HAL_GetTick>
 8003d72:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d76:	1b40      	subs	r0, r0, r5
 8003d78:	4298      	cmp	r0, r3
 8003d7a:	d9f4      	bls.n	8003d66 <HAL_RCC_OscConfig+0xb6>
 8003d7c:	e7db      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003d7e:	68e3      	ldr	r3, [r4, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d904      	bls.n	8003d8e <HAL_RCC_OscConfig+0xde>
 8003d84:	486f      	ldr	r0, [pc, #444]	; (8003f44 <HAL_RCC_OscConfig+0x294>)
 8003d86:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003d8a:	f7fd fd91 	bl	80018b0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003d8e:	6923      	ldr	r3, [r4, #16]
 8003d90:	2b1f      	cmp	r3, #31
 8003d92:	d904      	bls.n	8003d9e <HAL_RCC_OscConfig+0xee>
 8003d94:	486b      	ldr	r0, [pc, #428]	; (8003f44 <HAL_RCC_OscConfig+0x294>)
 8003d96:	f240 115b 	movw	r1, #347	; 0x15b
 8003d9a:	f7fd fd89 	bl	80018b0 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b6a      	ldr	r3, [pc, #424]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	f012 0f0c 	tst.w	r2, #12
 8003da6:	d007      	beq.n	8003db8 <HAL_RCC_OscConfig+0x108>
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	f002 020c 	and.w	r2, r2, #12
 8003dae:	2a08      	cmp	r2, #8
 8003db0:	d118      	bne.n	8003de4 <HAL_RCC_OscConfig+0x134>
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	025a      	lsls	r2, r3, #9
 8003db6:	d415      	bmi.n	8003de4 <HAL_RCC_OscConfig+0x134>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db8:	4a63      	ldr	r2, [pc, #396]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003dba:	6813      	ldr	r3, [r2, #0]
 8003dbc:	079b      	lsls	r3, r3, #30
 8003dbe:	d502      	bpl.n	8003dc6 <HAL_RCC_OscConfig+0x116>
 8003dc0:	68e3      	ldr	r3, [r4, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d1a4      	bne.n	8003d10 <HAL_RCC_OscConfig+0x60>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	6811      	ldr	r1, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	23f8      	movs	r3, #248	; 0xf8
 8003dca:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	6920      	ldr	r0, [r4, #16]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	4098      	lsls	r0, r3
 8003dd8:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8003ddc:	ea40 0301 	orr.w	r3, r0, r1
 8003de0:	6013      	str	r3, [r2, #0]
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e02e      	b.n	8003e42 <HAL_RCC_OscConfig+0x192>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003de4:	68e2      	ldr	r2, [r4, #12]
 8003de6:	4b5a      	ldr	r3, [pc, #360]	; (8003f50 <HAL_RCC_OscConfig+0x2a0>)
 8003de8:	b1ea      	cbz	r2, 8003e26 <HAL_RCC_OscConfig+0x176>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f003 fbfb 	bl	80075e8 <HAL_GetTick>
 8003df2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	4954      	ldr	r1, [pc, #336]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003df6:	680b      	ldr	r3, [r1, #0]
 8003df8:	079f      	lsls	r7, r3, #30
 8003dfa:	d405      	bmi.n	8003e08 <HAL_RCC_OscConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfc:	f003 fbf4 	bl	80075e8 <HAL_GetTick>
 8003e00:	1b40      	subs	r0, r0, r5
 8003e02:	2864      	cmp	r0, #100	; 0x64
 8003e04:	d9f6      	bls.n	8003df4 <HAL_RCC_OscConfig+0x144>
 8003e06:	e796      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e08:	680a      	ldr	r2, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0a:	23f8      	movs	r3, #248	; 0xf8
 8003e0c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	fab3 f383 	clz	r3, r3
 8003e14:	6920      	ldr	r0, [r4, #16]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4098      	lsls	r0, r3
 8003e1a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003e1e:	ea40 0302 	orr.w	r3, r0, r2
 8003e22:	600b      	str	r3, [r1, #0]
 8003e24:	e00d      	b.n	8003e42 <HAL_RCC_OscConfig+0x192>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f003 fbde 	bl	80075e8 <HAL_GetTick>
 8003e2c:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	4b46      	ldr	r3, [pc, #280]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	079e      	lsls	r6, r3, #30
 8003e34:	d505      	bpl.n	8003e42 <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e36:	f003 fbd7 	bl	80075e8 <HAL_GetTick>
 8003e3a:	1b40      	subs	r0, r0, r5
 8003e3c:	2864      	cmp	r0, #100	; 0x64
 8003e3e:	d9f6      	bls.n	8003e2e <HAL_RCC_OscConfig+0x17e>
 8003e40:	e779      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	071d      	lsls	r5, r3, #28
 8003e46:	d403      	bmi.n	8003e50 <HAL_RCC_OscConfig+0x1a0>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	0758      	lsls	r0, r3, #29
 8003e4c:	d428      	bmi.n	8003ea0 <HAL_RCC_OscConfig+0x1f0>
 8003e4e:	e052      	b.n	8003ef6 <HAL_RCC_OscConfig+0x246>
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003e50:	6963      	ldr	r3, [r4, #20]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d904      	bls.n	8003e60 <HAL_RCC_OscConfig+0x1b0>
 8003e56:	483b      	ldr	r0, [pc, #236]	; (8003f44 <HAL_RCC_OscConfig+0x294>)
 8003e58:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003e5c:	f7fd fd28 	bl	80018b0 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e60:	6962      	ldr	r2, [r4, #20]
 8003e62:	4b3c      	ldr	r3, [pc, #240]	; (8003f54 <HAL_RCC_OscConfig+0x2a4>)
 8003e64:	b172      	cbz	r2, 8003e84 <HAL_RCC_OscConfig+0x1d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f003 fbbd 	bl	80075e8 <HAL_GetTick>
 8003e6e:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e70:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e74:	0799      	lsls	r1, r3, #30
 8003e76:	d4e7      	bmi.n	8003e48 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e78:	f003 fbb6 	bl	80075e8 <HAL_GetTick>
 8003e7c:	1b40      	subs	r0, r0, r5
 8003e7e:	2864      	cmp	r0, #100	; 0x64
 8003e80:	d9f6      	bls.n	8003e70 <HAL_RCC_OscConfig+0x1c0>
 8003e82:	e758      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e84:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f003 fbaf 	bl	80075e8 <HAL_GetTick>
 8003e8a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e90:	079a      	lsls	r2, r3, #30
 8003e92:	d5d9      	bpl.n	8003e48 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e94:	f003 fba8 	bl	80075e8 <HAL_GetTick>
 8003e98:	1b40      	subs	r0, r0, r5
 8003e9a:	2864      	cmp	r0, #100	; 0x64
 8003e9c:	d9f6      	bls.n	8003e8c <HAL_RCC_OscConfig+0x1dc>
 8003e9e:	e74a      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d830      	bhi.n	8003f08 <HAL_RCC_OscConfig+0x258>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003ea8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6413      	str	r3, [r2, #64]	; 0x40
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003eb0:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 8003eb4:	6813      	ldr	r3, [r2, #0]
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ebc:	f003 fb94 	bl	80075e8 <HAL_GetTick>
 8003ec0:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ec2:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <HAL_RCC_OscConfig+0x2a8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	05db      	lsls	r3, r3, #23
 8003ec8:	d526      	bpl.n	8003f18 <HAL_RCC_OscConfig+0x268>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8003eca:	4d24      	ldr	r5, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	702b      	strb	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed0:	f003 fb8a 	bl	80075e8 <HAL_GetTick>
 8003ed4:	4606      	mov	r6, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	079f      	lsls	r7, r3, #30
 8003edc:	d422      	bmi.n	8003f24 <HAL_RCC_OscConfig+0x274>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ede:	7a23      	ldrb	r3, [r4, #8]
 8003ee0:	702b      	strb	r3, [r5, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 8003ee2:	68a3      	ldr	r3, [r4, #8]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d13b      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2b0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f003 fb7e 	bl	80075e8 <HAL_GetTick>
 8003eec:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	079e      	lsls	r6, r3, #30
 8003ef4:	d51e      	bpl.n	8003f34 <HAL_RCC_OscConfig+0x284>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003ef6:	69a3      	ldr	r3, [r4, #24]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d940      	bls.n	8003f7e <HAL_RCC_OscConfig+0x2ce>
 8003efc:	4811      	ldr	r0, [pc, #68]	; (8003f44 <HAL_RCC_OscConfig+0x294>)
 8003efe:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003f02:	f7fd fcd5 	bl	80018b0 <assert_failed>
 8003f06:	e03a      	b.n	8003f7e <HAL_RCC_OscConfig+0x2ce>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d0cc      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1f6>
 8003f0c:	480d      	ldr	r0, [pc, #52]	; (8003f44 <HAL_RCC_OscConfig+0x294>)
 8003f0e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003f12:	f7fd fccd 	bl	80018b0 <assert_failed>
 8003f16:	e7c6      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1f6>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f18:	f003 fb66 	bl	80075e8 <HAL_GetTick>
 8003f1c:	1b40      	subs	r0, r0, r5
 8003f1e:	2864      	cmp	r0, #100	; 0x64
 8003f20:	d9cf      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x212>
 8003f22:	e708      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f003 fb60 	bl	80075e8 <HAL_GetTick>
 8003f28:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f2c:	1b80      	subs	r0, r0, r6
 8003f2e:	4298      	cmp	r0, r3
 8003f30:	d9d1      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x226>
 8003f32:	e700      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f003 fb58 	bl	80075e8 <HAL_GetTick>
 8003f38:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f3c:	1b40      	subs	r0, r0, r5
 8003f3e:	4298      	cmp	r0, r3
 8003f40:	d9d5      	bls.n	8003eee <HAL_RCC_OscConfig+0x23e>
 8003f42:	e6f8      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
 8003f44:	080246e0 	.word	0x080246e0
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40023802 	.word	0x40023802
 8003f50:	42470000 	.word	0x42470000
 8003f54:	42470e80 	.word	0x42470e80
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	40023870 	.word	0x40023870
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f003 fb42 	bl	80075e8 <HAL_GetTick>
 8003f64:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f66:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_OscConfig+0x3f8>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	0798      	lsls	r0, r3, #30
 8003f6c:	d5c3      	bpl.n	8003ef6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f003 fb3b 	bl	80075e8 <HAL_GetTick>
 8003f72:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f76:	1b40      	subs	r0, r0, r5
 8003f78:	4298      	cmp	r0, r3
 8003f7a:	d9f4      	bls.n	8003f66 <HAL_RCC_OscConfig+0x2b6>
 8003f7c:	e6db      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7e:	69a2      	ldr	r2, [r4, #24]
 8003f80:	b90a      	cbnz	r2, 8003f86 <HAL_RCC_OscConfig+0x2d6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003f82:	2000      	movs	r0, #0
 8003f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f86:	4b48      	ldr	r3, [pc, #288]	; (80040a8 <HAL_RCC_OscConfig+0x3f8>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	f43f aebe 	beq.w	8003d10 <HAL_RCC_OscConfig+0x60>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f94:	2a02      	cmp	r2, #2
 8003f96:	4d45      	ldr	r5, [pc, #276]	; (80040ac <HAL_RCC_OscConfig+0x3fc>)
 8003f98:	d175      	bne.n	8004086 <HAL_RCC_OscConfig+0x3d6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003f9a:	69e3      	ldr	r3, [r4, #28]
 8003f9c:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8003fa0:	d004      	beq.n	8003fac <HAL_RCC_OscConfig+0x2fc>
 8003fa2:	4843      	ldr	r0, [pc, #268]	; (80040b0 <HAL_RCC_OscConfig+0x400>)
 8003fa4:	f240 2111 	movw	r1, #529	; 0x211
 8003fa8:	f7fd fc82 	bl	80018b0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003fac:	6a23      	ldr	r3, [r4, #32]
 8003fae:	2b3f      	cmp	r3, #63	; 0x3f
 8003fb0:	d904      	bls.n	8003fbc <HAL_RCC_OscConfig+0x30c>
 8003fb2:	483f      	ldr	r0, [pc, #252]	; (80040b0 <HAL_RCC_OscConfig+0x400>)
 8003fb4:	f240 2112 	movw	r1, #530	; 0x212
 8003fb8:	f7fd fc7a 	bl	80018b0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fbe:	3bc0      	subs	r3, #192	; 0xc0
 8003fc0:	2bf0      	cmp	r3, #240	; 0xf0
 8003fc2:	d904      	bls.n	8003fce <HAL_RCC_OscConfig+0x31e>
 8003fc4:	483a      	ldr	r0, [pc, #232]	; (80040b0 <HAL_RCC_OscConfig+0x400>)
 8003fc6:	f240 2113 	movw	r1, #531	; 0x213
 8003fca:	f7fd fc71 	bl	80018b0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003fce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fd0:	f023 0204 	bic.w	r2, r3, #4
 8003fd4:	2a02      	cmp	r2, #2
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_OscConfig+0x33a>
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d006      	beq.n	8003fea <HAL_RCC_OscConfig+0x33a>
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d004      	beq.n	8003fea <HAL_RCC_OscConfig+0x33a>
 8003fe0:	4833      	ldr	r0, [pc, #204]	; (80040b0 <HAL_RCC_OscConfig+0x400>)
 8003fe2:	f44f 7105 	mov.w	r1, #532	; 0x214
 8003fe6:	f7fd fc63 	bl	80018b0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fec:	3b04      	subs	r3, #4
 8003fee:	2b0b      	cmp	r3, #11
 8003ff0:	d904      	bls.n	8003ffc <HAL_RCC_OscConfig+0x34c>
 8003ff2:	482f      	ldr	r0, [pc, #188]	; (80040b0 <HAL_RCC_OscConfig+0x400>)
 8003ff4:	f240 2115 	movw	r1, #533	; 0x215
 8003ff8:	f7fd fc5a 	bl	80018b0 <assert_failed>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	602b      	str	r3, [r5, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f003 faf2 	bl	80075e8 <HAL_GetTick>
 8004004:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	4e28      	ldr	r6, [pc, #160]	; (80040a8 <HAL_RCC_OscConfig+0x3f8>)
 8004008:	6833      	ldr	r3, [r6, #0]
 800400a:	0199      	lsls	r1, r3, #6
 800400c:	d505      	bpl.n	800401a <HAL_RCC_OscConfig+0x36a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400e:	f003 faeb 	bl	80075e8 <HAL_GetTick>
 8004012:	1bc0      	subs	r0, r0, r7
 8004014:	2864      	cmp	r0, #100	; 0x64
 8004016:	d9f6      	bls.n	8004006 <HAL_RCC_OscConfig+0x356>
 8004018:	e68d      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 800401e:	fa90 f0a0 	rbit	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004022:	fab0 f080 	clz	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800402a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800402e:	fab1 f181 	clz	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8004036:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800403a:	fab2 f282 	clz	r2, r2
 800403e:	6a27      	ldr	r7, [r4, #32]
 8004040:	69e3      	ldr	r3, [r4, #28]
 8004042:	433b      	orrs	r3, r7
 8004044:	f043 5700 	orr.w	r7, r3, #536870912	; 0x20000000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800404a:	b2c0      	uxtb	r0, r0
 800404c:	4083      	lsls	r3, r0
 800404e:	ea47 0003 	orr.w	r0, r7, r3
 8004052:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	b2c9      	uxtb	r1, r1
 8004058:	3b01      	subs	r3, #1
 800405a:	408b      	lsls	r3, r1
 800405c:	b2d1      	uxtb	r1, r2
 800405e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004060:	4303      	orrs	r3, r0
 8004062:	408a      	lsls	r2, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004068:	2301      	movs	r3, #1
 800406a:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f003 fabc 	bl	80075e8 <HAL_GetTick>
 8004070:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_OscConfig+0x3f8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	019a      	lsls	r2, r3, #6
 8004078:	d483      	bmi.n	8003f82 <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407a:	f003 fab5 	bl	80075e8 <HAL_GetTick>
 800407e:	1b00      	subs	r0, r0, r4
 8004080:	2864      	cmp	r0, #100	; 0x64
 8004082:	d9f6      	bls.n	8004072 <HAL_RCC_OscConfig+0x3c2>
 8004084:	e657      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	602b      	str	r3, [r5, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f003 faad 	bl	80075e8 <HAL_GetTick>
 800408e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_RCC_OscConfig+0x3f8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	f57f af74 	bpl.w	8003f82 <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f003 faa5 	bl	80075e8 <HAL_GetTick>
 800409e:	1b00      	subs	r0, r0, r4
 80040a0:	2864      	cmp	r0, #100	; 0x64
 80040a2:	d9f5      	bls.n	8004090 <HAL_RCC_OscConfig+0x3e0>
 80040a4:	e647      	b.n	8003d36 <HAL_RCC_OscConfig+0x86>
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	42470060 	.word	0x42470060
 80040b0:	080246e0 	.word	0x080246e0

080040b4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80040b4:	6803      	ldr	r3, [r0, #0]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	2b0e      	cmp	r3, #14
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ba:	b570      	push	{r4, r5, r6, lr}
 80040bc:	4604      	mov	r4, r0
 80040be:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80040c0:	d904      	bls.n	80040cc <HAL_RCC_ClockConfig+0x18>
 80040c2:	48a5      	ldr	r0, [pc, #660]	; (8004358 <HAL_RCC_ClockConfig+0x2a4>)
 80040c4:	f240 2173 	movw	r1, #627	; 0x273
 80040c8:	f7fd fbf2 	bl	80018b0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80040cc:	2d0f      	cmp	r5, #15
 80040ce:	d904      	bls.n	80040da <HAL_RCC_ClockConfig+0x26>
 80040d0:	48a1      	ldr	r0, [pc, #644]	; (8004358 <HAL_RCC_ClockConfig+0x2a4>)
 80040d2:	f44f 711d 	mov.w	r1, #628	; 0x274
 80040d6:	f7fd fbeb 	bl	80018b0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80040da:	4ba0      	ldr	r3, [pc, #640]	; (800435c <HAL_RCC_ClockConfig+0x2a8>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f002 020f 	and.w	r2, r2, #15
 80040e2:	4295      	cmp	r5, r2
 80040e4:	f240 8081 	bls.w	80041ea <HAL_RCC_ClockConfig+0x136>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e8:	b2ea      	uxtb	r2, r5
 80040ea:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	42ab      	cmp	r3, r5
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80040f6:	2001      	movs	r0, #1
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	079e      	lsls	r6, r3, #30
 80040fe:	d51d      	bpl.n	800413c <HAL_RCC_ClockConfig+0x88>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004100:	68a3      	ldr	r3, [r4, #8]
 8004102:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8004106:	d012      	beq.n	800412e <HAL_RCC_ClockConfig+0x7a>
 8004108:	f023 0220 	bic.w	r2, r3, #32
 800410c:	2a90      	cmp	r2, #144	; 0x90
 800410e:	d00e      	beq.n	800412e <HAL_RCC_ClockConfig+0x7a>
 8004110:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004114:	2aa0      	cmp	r2, #160	; 0xa0
 8004116:	d00a      	beq.n	800412e <HAL_RCC_ClockConfig+0x7a>
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	2ac0      	cmp	r2, #192	; 0xc0
 800411e:	d006      	beq.n	800412e <HAL_RCC_ClockConfig+0x7a>
 8004120:	2bf0      	cmp	r3, #240	; 0xf0
 8004122:	d004      	beq.n	800412e <HAL_RCC_ClockConfig+0x7a>
 8004124:	488c      	ldr	r0, [pc, #560]	; (8004358 <HAL_RCC_ClockConfig+0x2a4>)
 8004126:	f240 218a 	movw	r1, #650	; 0x28a
 800412a:	f7fd fbc1 	bl	80018b0 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412e:	498c      	ldr	r1, [pc, #560]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 8004130:	688b      	ldr	r3, [r1, #8]
 8004132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	07dd      	lsls	r5, r3, #31
 8004140:	d404      	bmi.n	800414c <HAL_RCC_ClockConfig+0x98>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	0758      	lsls	r0, r3, #29
 8004146:	f100 80ce 	bmi.w	80042e6 <HAL_RCC_ClockConfig+0x232>
 800414a:	e0e4      	b.n	8004316 <HAL_RCC_ClockConfig+0x262>
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d904      	bls.n	800415c <HAL_RCC_ClockConfig+0xa8>
 8004152:	4881      	ldr	r0, [pc, #516]	; (8004358 <HAL_RCC_ClockConfig+0x2a4>)
 8004154:	f240 2191 	movw	r1, #657	; 0x291
 8004158:	f7fd fbaa 	bl	80018b0 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415c:	6862      	ldr	r2, [r4, #4]
 800415e:	4b80      	ldr	r3, [pc, #512]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 8004160:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004164:	d102      	bne.n	800416c <HAL_RCC_ClockConfig+0xb8>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800416a:	e006      	b.n	800417a <HAL_RCC_ClockConfig+0xc6>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416c:	2a02      	cmp	r2, #2
 800416e:	d102      	bne.n	8004176 <HAL_RCC_ClockConfig+0xc2>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004170:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8004174:	e001      	b.n	800417a <HAL_RCC_ClockConfig+0xc6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	f011 0f02 	tst.w	r1, #2
 800417a:	d0bc      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800417c:	6899      	ldr	r1, [r3, #8]
 800417e:	f021 0103 	bic.w	r1, r1, #3
 8004182:	430a      	orrs	r2, r1
 8004184:	609a      	str	r2, [r3, #8]
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f003 fa2f 	bl	80075e8 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	6863      	ldr	r3, [r4, #4]
 800418c:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004190:	d10e      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xfc>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8004192:	4b73      	ldr	r3, [pc, #460]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b04      	cmp	r3, #4
 800419c:	d0d1      	beq.n	8004142 <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419e:	f003 fa23 	bl	80075e8 <HAL_GetTick>
 80041a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80041a6:	1b40      	subs	r0, r0, r5
 80041a8:	4298      	cmp	r0, r3
 80041aa:	d9f2      	bls.n	8004192 <HAL_RCC_ClockConfig+0xde>
          {
            return HAL_TIMEOUT;
 80041ac:	2003      	movs	r0, #3
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d114      	bne.n	80041de <HAL_RCC_ClockConfig+0x12a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041b4:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d0c0      	beq.n	8004142 <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f003 fa12 	bl	80075e8 <HAL_GetTick>
 80041c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80041c8:	1b40      	subs	r0, r0, r5
 80041ca:	4298      	cmp	r0, r3
 80041cc:	d9f2      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x100>
 80041ce:	e7ed      	b.n	80041ac <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f003 fa0a 	bl	80075e8 <HAL_GetTick>
 80041d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80041d8:	1b40      	subs	r0, r0, r5
 80041da:	4298      	cmp	r0, r3
 80041dc:	d8e6      	bhi.n	80041ac <HAL_RCC_ClockConfig+0xf8>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80041de:	4b60      	ldr	r3, [pc, #384]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f013 0f0c 	tst.w	r3, #12
 80041e6:	d1f3      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x11c>
 80041e8:	e7ab      	b.n	8004142 <HAL_RCC_ClockConfig+0x8e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	0799      	lsls	r1, r3, #30
 80041ee:	d51d      	bpl.n	800422c <HAL_RCC_ClockConfig+0x178>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80041f0:	68a3      	ldr	r3, [r4, #8]
 80041f2:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80041f6:	d012      	beq.n	800421e <HAL_RCC_ClockConfig+0x16a>
 80041f8:	f023 0220 	bic.w	r2, r3, #32
 80041fc:	2a90      	cmp	r2, #144	; 0x90
 80041fe:	d00e      	beq.n	800421e <HAL_RCC_ClockConfig+0x16a>
 8004200:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004204:	2aa0      	cmp	r2, #160	; 0xa0
 8004206:	d00a      	beq.n	800421e <HAL_RCC_ClockConfig+0x16a>
 8004208:	f023 0210 	bic.w	r2, r3, #16
 800420c:	2ac0      	cmp	r2, #192	; 0xc0
 800420e:	d006      	beq.n	800421e <HAL_RCC_ClockConfig+0x16a>
 8004210:	2bf0      	cmp	r3, #240	; 0xf0
 8004212:	d004      	beq.n	800421e <HAL_RCC_ClockConfig+0x16a>
 8004214:	4850      	ldr	r0, [pc, #320]	; (8004358 <HAL_RCC_ClockConfig+0x2a4>)
 8004216:	f240 21d9 	movw	r1, #729	; 0x2d9
 800421a:	f7fd fb49 	bl	80018b0 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421e:	4950      	ldr	r1, [pc, #320]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 8004220:	688b      	ldr	r3, [r1, #8]
 8004222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004226:	68a3      	ldr	r3, [r4, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	07da      	lsls	r2, r3, #31
 8004230:	d409      	bmi.n	8004246 <HAL_RCC_ClockConfig+0x192>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_ClockConfig+0x2a8>)
 8004234:	b2ea      	uxtb	r2, r5
 8004236:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	42ab      	cmp	r3, r5
 8004240:	f47f af59 	bne.w	80040f6 <HAL_RCC_ClockConfig+0x42>
 8004244:	e77d      	b.n	8004142 <HAL_RCC_ClockConfig+0x8e>
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004246:	6863      	ldr	r3, [r4, #4]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d904      	bls.n	8004256 <HAL_RCC_ClockConfig+0x1a2>
 800424c:	4842      	ldr	r0, [pc, #264]	; (8004358 <HAL_RCC_ClockConfig+0x2a4>)
 800424e:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8004252:	f7fd fb2d 	bl	80018b0 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 800425a:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425c:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425e:	d102      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1b2>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004260:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8004264:	e006      	b.n	8004274 <HAL_RCC_ClockConfig+0x1c0>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004266:	2a02      	cmp	r2, #2
 8004268:	d102      	bne.n	8004270 <HAL_RCC_ClockConfig+0x1bc>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426a:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800426e:	e001      	b.n	8004274 <HAL_RCC_ClockConfig+0x1c0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004270:	f011 0f02 	tst.w	r1, #2
 8004274:	f43f af3f 	beq.w	80040f6 <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004278:	6899      	ldr	r1, [r3, #8]
 800427a:	f021 0103 	bic.w	r1, r1, #3
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004282:	f003 f9b1 	bl	80075e8 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004286:	6863      	ldr	r3, [r4, #4]
 8004288:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428c:	d10d      	bne.n	80042aa <HAL_RCC_ClockConfig+0x1f6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b04      	cmp	r3, #4
 8004298:	d0cb      	beq.n	8004232 <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429a:	f003 f9a5 	bl	80075e8 <HAL_GetTick>
 800429e:	f241 3388 	movw	r3, #5000	; 0x1388
 80042a2:	1b80      	subs	r0, r0, r6
 80042a4:	4298      	cmp	r0, r3
 80042a6:	d9f2      	bls.n	800428e <HAL_RCC_ClockConfig+0x1da>
 80042a8:	e780      	b.n	80041ac <HAL_RCC_ClockConfig+0xf8>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d115      	bne.n	80042da <HAL_RCC_ClockConfig+0x226>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ae:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d0bb      	beq.n	8004232 <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ba:	f003 f995 	bl	80075e8 <HAL_GetTick>
 80042be:	f241 3388 	movw	r3, #5000	; 0x1388
 80042c2:	1b80      	subs	r0, r0, r6
 80042c4:	4298      	cmp	r0, r3
 80042c6:	d9f2      	bls.n	80042ae <HAL_RCC_ClockConfig+0x1fa>
 80042c8:	e770      	b.n	80041ac <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ca:	f003 f98d 	bl	80075e8 <HAL_GetTick>
 80042ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80042d2:	1b80      	subs	r0, r0, r6
 80042d4:	4298      	cmp	r0, r3
 80042d6:	f63f af69 	bhi.w	80041ac <HAL_RCC_ClockConfig+0xf8>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80042da:	4b21      	ldr	r3, [pc, #132]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f013 0f0c 	tst.w	r3, #12
 80042e2:	d1f2      	bne.n	80042ca <HAL_RCC_ClockConfig+0x216>
 80042e4:	e7a5      	b.n	8004232 <HAL_RCC_ClockConfig+0x17e>
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80042e6:	68e3      	ldr	r3, [r4, #12]
 80042e8:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80042ec:	d00c      	beq.n	8004308 <HAL_RCC_ClockConfig+0x254>
 80042ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042f2:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80042f6:	d007      	beq.n	8004308 <HAL_RCC_ClockConfig+0x254>
 80042f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80042fc:	d004      	beq.n	8004308 <HAL_RCC_ClockConfig+0x254>
 80042fe:	4816      	ldr	r0, [pc, #88]	; (8004358 <HAL_RCC_ClockConfig+0x2a4>)
 8004300:	f44f 714c 	mov.w	r1, #816	; 0x330
 8004304:	f7fd fad4 	bl	80018b0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4915      	ldr	r1, [pc, #84]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 800430a:	688b      	ldr	r3, [r1, #8]
 800430c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004310:	68e3      	ldr	r3, [r4, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	071b      	lsls	r3, r3, #28
 800431a:	d518      	bpl.n	800434e <HAL_RCC_ClockConfig+0x29a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8004322:	d00c      	beq.n	800433e <HAL_RCC_ClockConfig+0x28a>
 8004324:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004328:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 800432c:	d007      	beq.n	800433e <HAL_RCC_ClockConfig+0x28a>
 800432e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004332:	d004      	beq.n	800433e <HAL_RCC_ClockConfig+0x28a>
 8004334:	4808      	ldr	r0, [pc, #32]	; (8004358 <HAL_RCC_ClockConfig+0x2a4>)
 8004336:	f240 3137 	movw	r1, #823	; 0x337
 800433a:	f7fd fab9 	bl	80018b0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <HAL_RCC_ClockConfig+0x2ac>)
 8004340:	6921      	ldr	r1, [r4, #16]
 8004342:	6893      	ldr	r3, [r2, #8]
 8004344:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004348:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800434c:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800434e:	200f      	movs	r0, #15
 8004350:	f003 f91a 	bl	8007588 <HAL_InitTick>
  
  return HAL_OK;
 8004354:	2000      	movs	r0, #0
}
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	080246e0 	.word	0x080246e0
 800435c:	40023c00 	.word	0x40023c00
 8004360:	40023800 	.word	0x40023800

08004364 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	b530      	push	{r4, r5, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004366:	4c1d      	ldr	r4, [pc, #116]	; (80043dc <HAL_RCC_GetSysClockFreq+0x78>)
 8004368:	68a3      	ldr	r3, [r4, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b04      	cmp	r3, #4
 8004370:	d030      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x70>
 8004372:	2b08      	cmp	r3, #8
 8004374:	d130      	bne.n	80043d8 <HAL_RCC_GetSysClockFreq+0x74>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004376:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004378:	6863      	ldr	r3, [r4, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800437a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800437e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004382:	f647 71c0 	movw	r1, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004386:	6863      	ldr	r3, [r4, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800438c:	fab1 f181 	clz	r1, r1
 8004390:	f647 70c0 	movw	r0, #32704	; 0x7fc0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004394:	bf04      	itt	eq
 8004396:	4a12      	ldreq	r2, [pc, #72]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004398:	fbb2 f2f5 	udiveq	r2, r2, r5
 800439c:	b2c9      	uxtb	r1, r1
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800439e:	ea00 0003 	and.w	r0, r0, r3
 80043a2:	fa20 f001 	lsr.w	r0, r0, r1
 80043a6:	bf1c      	itt	ne
 80043a8:	490e      	ldrne	r1, [pc, #56]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x80>)
 80043aa:	fbb1 f2f5 	udivne	r2, r1, r5
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80043ae:	fb02 f300 	mul.w	r3, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <HAL_RCC_GetSysClockFreq+0x78>)
 80043b4:	6850      	ldr	r0, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80043ba:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80043be:	fab2 f282 	clz	r2, r2
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80043c8:	40d0      	lsrs	r0, r2
 80043ca:	3001      	adds	r0, #1
 80043cc:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 80043ce:	fbb3 f0f0 	udiv	r0, r3, r0
 80043d2:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d4:	4803      	ldr	r0, [pc, #12]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x80>)
 80043d6:	bd30      	pop	{r4, r5, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4801      	ldr	r0, [pc, #4]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x7c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80043da:	bd30      	pop	{r4, r5, pc}
 80043dc:	40023800 	.word	0x40023800
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	017d7840 	.word	0x017d7840

080043e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80043ea:	f7ff ffbb 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_GetHCLKFreq+0x2c>)
 80043f0:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	23f0      	movs	r3, #240	; 0xf0
 80043f4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	fa22 f303 	lsr.w	r3, r2, r3
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <HAL_RCC_GetHCLKFreq+0x30>)
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	40d8      	lsrs	r0, r3
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_GetHCLKFreq+0x34>)
 800440e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8004410:	bd08      	pop	{r3, pc}
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	080246d0 	.word	0x080246d0
 800441c:	20000000 	.word	0x20000000

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8004420:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004422:	f7ff ffe1 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004428:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800442e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800443a:	b2db      	uxtb	r3, r3
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
 8004440:	4a02      	ldr	r2, [pc, #8]	; (800444c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
}
 8004444:	40d8      	lsrs	r0, r3
 8004446:	bd08      	pop	{r3, pc}
 8004448:	40023800 	.word	0x40023800
 800444c:	080246d0 	.word	0x080246d0

08004450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004450:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004452:	f7ff ffc9 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004458:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800445e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 800446a:	b2db      	uxtb	r3, r3
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	4a02      	ldr	r2, [pc, #8]	; (800447c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8004472:	5cd3      	ldrb	r3, [r2, r3]
} 
 8004474:	40d8      	lsrs	r0, r3
 8004476:	bd08      	pop	{r3, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	080246d0 	.word	0x080246d0

08004480 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004480:	230f      	movs	r3, #15
 8004482:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_GetClockConfig+0x34>)
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	f002 0203 	and.w	r2, r2, #3
 800448c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004494:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800449c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_GetClockConfig+0x38>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	600b      	str	r3, [r1, #0]
 80044b2:	4770      	bx	lr
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40023c00 	.word	0x40023c00

080044bc <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 80044bc:	6803      	ldr	r3, [r0, #0]
 80044be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c0:	f012 0f45 	tst.w	r2, #69	; 0x45
 80044c4:	d0fb      	beq.n	80044be <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 80044c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c8:	0752      	lsls	r2, r2, #29
 80044ca:	d503      	bpl.n	80044d4 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 80044cc:	2204      	movs	r2, #4
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80044d0:	2003      	movs	r0, #3
 80044d2:	4770      	bx	lr
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 80044d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80044d6:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 80044da:	bf15      	itete	ne
 80044dc:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044de:	f240 52ff 	movweq	r2, #1535	; 0x5ff
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 80044e2:	6398      	strne	r0, [r3, #56]	; 0x38
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044e4:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 80044e6:	4770      	bx	lr

080044e8 <SD_IsCardProgramming>:
  * @param  hsd: SD handle
  * @param  pStatus: pointer to the variable that will contain the SD card state  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
 80044e8:	b570      	push	{r4, r5, r6, lr}
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  __IO uint32_t responseR1 = 0;
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80044ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
  * @param  hsd: SD handle
  * @param  pStatus: pointer to the variable that will contain the SD card state  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
 80044ec:	b086      	sub	sp, #24
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  __IO uint32_t responseR1 = 0;
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 80044f2:	230d      	movs	r3, #13
  * @param  hsd: SD handle
  * @param  pStatus: pointer to the variable that will contain the SD card state  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
 80044f4:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  __IO uint32_t responseR1 = 0;
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 80044f6:	9302      	str	r3, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80044f8:	2340      	movs	r3, #64	; 0x40
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  __IO uint32_t responseR1 = 0;
 80044fa:	2200      	movs	r2, #0
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80044fc:	9303      	str	r3, [sp, #12]
  * @param  hsd: SD handle
  * @param  pStatus: pointer to the variable that will contain the SD card state  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
 80044fe:	460e      	mov	r6, r1
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004500:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004504:	6800      	ldr	r0, [r0, #0]
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  __IO uint32_t responseR1 = 0;
 8004506:	9200      	str	r2, [sp, #0]
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004508:	a901      	add	r1, sp, #4
  __IO uint32_t responseR1 = 0;
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800450a:	9204      	str	r2, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800450c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800450e:	f7ff fb25 	bl	8003b5c <SDIO_SendCommand>
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004512:	6828      	ldr	r0, [r5, #0]
 8004514:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004516:	f013 0f45 	tst.w	r3, #69	; 0x45
 800451a:	d0fb      	beq.n	8004514 <SD_IsCardProgramming+0x2c>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 800451c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800451e:	075b      	lsls	r3, r3, #29
 8004520:	d503      	bpl.n	800452a <SD_IsCardProgramming+0x42>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004522:	2304      	movs	r3, #4
 8004524:	6383      	str	r3, [r0, #56]	; 0x38
    
    return errorstate;
 8004526:	2003      	movs	r0, #3
 8004528:	e07c      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 800452a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800452c:	f013 0401 	ands.w	r4, r3, #1
 8004530:	d003      	beq.n	800453a <SD_IsCardProgramming+0x52>
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004532:	2301      	movs	r3, #1
 8004534:	6383      	str	r3, [r0, #56]	; 0x38
    
    return errorstate;
 8004536:	4618      	mov	r0, r3
 8004538:	e074      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if((uint32_t)SDIO_GetCommandResponse(hsd->Instance) != SD_CMD_SEND_STATUS)
 800453a:	f7ff fb4f 	bl	8003bdc <SDIO_GetCommandResponse>
 800453e:	280d      	cmp	r0, #13
 8004540:	d001      	beq.n	8004546 <SD_IsCardProgramming+0x5e>
  {
    errorstate = SD_ILLEGAL_CMD;
    
    return errorstate;
 8004542:	2010      	movs	r0, #16
 8004544:	e06e      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004546:	682b      	ldr	r3, [r5, #0]
 8004548:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
  
  
  /* We have received response, retrieve it for analysis */
  responseR1 = SDIO_GetResponse(SDIO_RESP1);
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff fb48 	bl	8003be4 <SDIO_GetResponse>
 8004554:	9000      	str	r0, [sp, #0]
  
  /* Find out card status */
  *pStatus = (uint8_t)((responseR1 >> 9) & 0x0000000F);
 8004556:	9b00      	ldr	r3, [sp, #0]
  
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8004558:	4833      	ldr	r0, [pc, #204]	; (8004628 <SD_IsCardProgramming+0x140>)
  
  /* We have received response, retrieve it for analysis */
  responseR1 = SDIO_GetResponse(SDIO_RESP1);
  
  /* Find out card status */
  *pStatus = (uint8_t)((responseR1 >> 9) & 0x0000000F);
 800455a:	f3c3 2343 	ubfx	r3, r3, #9, #4
 800455e:	7033      	strb	r3, [r6, #0]
  
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8004560:	9b00      	ldr	r3, [sp, #0]
 8004562:	4018      	ands	r0, r3
 8004564:	2800      	cmp	r0, #0
 8004566:	d05d      	beq.n	8004624 <SD_IsCardProgramming+0x13c>
  {
    return errorstate;
  }
  
  if((responseR1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8004568:	9b00      	ldr	r3, [sp, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	db39      	blt.n	80045e2 <SD_IsCardProgramming+0xfa>
  {
    return(SD_ADDR_OUT_OF_RANGE);
  }
  
  if((responseR1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 800456e:	9b00      	ldr	r3, [sp, #0]
 8004570:	005d      	lsls	r5, r3, #1
 8004572:	d438      	bmi.n	80045e6 <SD_IsCardProgramming+0xfe>
  {
    return(SD_ADDR_MISALIGNED);
  }
  
  if((responseR1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8004574:	9b00      	ldr	r3, [sp, #0]
 8004576:	009c      	lsls	r4, r3, #2
 8004578:	d437      	bmi.n	80045ea <SD_IsCardProgramming+0x102>
  {
    return(SD_BLOCK_LEN_ERR);
  }
  
  if((responseR1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 800457a:	9b00      	ldr	r3, [sp, #0]
 800457c:	00d9      	lsls	r1, r3, #3
 800457e:	d436      	bmi.n	80045ee <SD_IsCardProgramming+0x106>
  {
    return(SD_ERASE_SEQ_ERR);
  }
  
  if((responseR1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8004580:	9b00      	ldr	r3, [sp, #0]
 8004582:	011a      	lsls	r2, r3, #4
 8004584:	d435      	bmi.n	80045f2 <SD_IsCardProgramming+0x10a>
  {
    return(SD_BAD_ERASE_PARAM);
  }
  
  if((responseR1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8004586:	9b00      	ldr	r3, [sp, #0]
 8004588:	015b      	lsls	r3, r3, #5
 800458a:	d434      	bmi.n	80045f6 <SD_IsCardProgramming+0x10e>
  {
    return(SD_WRITE_PROT_VIOLATION);
  }
  
  if((responseR1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 800458c:	9b00      	ldr	r3, [sp, #0]
 800458e:	01de      	lsls	r6, r3, #7
 8004590:	d433      	bmi.n	80045fa <SD_IsCardProgramming+0x112>
  {
    return(SD_LOCK_UNLOCK_FAILED);
  }
  
  if((responseR1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8004592:	9b00      	ldr	r3, [sp, #0]
 8004594:	021d      	lsls	r5, r3, #8
 8004596:	d432      	bmi.n	80045fe <SD_IsCardProgramming+0x116>
  {
    return(SD_COM_CRC_FAILED);
  }
  
  if((responseR1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8004598:	9b00      	ldr	r3, [sp, #0]
 800459a:	025c      	lsls	r4, r3, #9
 800459c:	d4d1      	bmi.n	8004542 <SD_IsCardProgramming+0x5a>
  {
    return(SD_ILLEGAL_CMD);
  }
  
  if((responseR1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 800459e:	9b00      	ldr	r3, [sp, #0]
 80045a0:	0299      	lsls	r1, r3, #10
 80045a2:	d42e      	bmi.n	8004602 <SD_IsCardProgramming+0x11a>
  {
    return(SD_CARD_ECC_FAILED);
  }
  
  if((responseR1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 80045a4:	9b00      	ldr	r3, [sp, #0]
 80045a6:	02da      	lsls	r2, r3, #11
 80045a8:	d42d      	bmi.n	8004606 <SD_IsCardProgramming+0x11e>
  {
    return(SD_CC_ERROR);
  }
  
  if((responseR1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 80045aa:	9b00      	ldr	r3, [sp, #0]
 80045ac:	031b      	lsls	r3, r3, #12
 80045ae:	d42c      	bmi.n	800460a <SD_IsCardProgramming+0x122>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }
  
  if((responseR1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 80045b0:	9b00      	ldr	r3, [sp, #0]
 80045b2:	035e      	lsls	r6, r3, #13
 80045b4:	d42b      	bmi.n	800460e <SD_IsCardProgramming+0x126>
  {
    return(SD_STREAM_READ_UNDERRUN);
  }
  
  if((responseR1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 80045b6:	9b00      	ldr	r3, [sp, #0]
 80045b8:	039d      	lsls	r5, r3, #14
 80045ba:	d42a      	bmi.n	8004612 <SD_IsCardProgramming+0x12a>
  {
    return(SD_STREAM_WRITE_OVERRUN);
  }
  
  if((responseR1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 80045bc:	9b00      	ldr	r3, [sp, #0]
 80045be:	03dc      	lsls	r4, r3, #15
 80045c0:	d429      	bmi.n	8004616 <SD_IsCardProgramming+0x12e>
  {
    return(SD_CID_CSD_OVERWRITE);
  }
  
  if((responseR1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 80045c2:	9b00      	ldr	r3, [sp, #0]
 80045c4:	0419      	lsls	r1, r3, #16
 80045c6:	d428      	bmi.n	800461a <SD_IsCardProgramming+0x132>
  {
    return(SD_WP_ERASE_SKIP);
  }
  
  if((responseR1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 80045c8:	9b00      	ldr	r3, [sp, #0]
 80045ca:	045a      	lsls	r2, r3, #17
 80045cc:	d427      	bmi.n	800461e <SD_IsCardProgramming+0x136>
  {
    return(SD_CARD_ECC_DISABLED);
  }
  
  if((responseR1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 80045ce:	9b00      	ldr	r3, [sp, #0]
 80045d0:	049b      	lsls	r3, r3, #18
 80045d2:	d426      	bmi.n	8004622 <SD_IsCardProgramming+0x13a>
  {
    return(SD_ERASE_RESET);
  }
  
  if((responseR1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 80045d4:	9b00      	ldr	r3, [sp, #0]
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
 80045d6:	f013 0f08 	tst.w	r3, #8
 80045da:	bf14      	ite	ne
 80045dc:	201a      	movne	r0, #26
 80045de:	2000      	moveq	r0, #0
 80045e0:	e020      	b.n	8004624 <SD_IsCardProgramming+0x13c>
    return errorstate;
  }
  
  if((responseR1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
  {
    return(SD_ADDR_OUT_OF_RANGE);
 80045e2:	201c      	movs	r0, #28
 80045e4:	e01e      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
  {
    return(SD_ADDR_MISALIGNED);
 80045e6:	2009      	movs	r0, #9
 80045e8:	e01c      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
  {
    return(SD_BLOCK_LEN_ERR);
 80045ea:	200a      	movs	r0, #10
 80045ec:	e01a      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
  {
    return(SD_ERASE_SEQ_ERR);
 80045ee:	200b      	movs	r0, #11
 80045f0:	e018      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
  {
    return(SD_BAD_ERASE_PARAM);
 80045f2:	200c      	movs	r0, #12
 80045f4:	e016      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
  {
    return(SD_WRITE_PROT_VIOLATION);
 80045f6:	200d      	movs	r0, #13
 80045f8:	e014      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
  {
    return(SD_LOCK_UNLOCK_FAILED);
 80045fa:	200e      	movs	r0, #14
 80045fc:	e012      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 80045fe:	200f      	movs	r0, #15
 8004600:	e010      	b.n	8004624 <SD_IsCardProgramming+0x13c>
    return(SD_ILLEGAL_CMD);
  }
  
  if((responseR1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
  {
    return(SD_CARD_ECC_FAILED);
 8004602:	2011      	movs	r0, #17
 8004604:	e00e      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
  {
    return(SD_CC_ERROR);
 8004606:	2012      	movs	r0, #18
 8004608:	e00c      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 800460a:	2013      	movs	r0, #19
 800460c:	e00a      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
  {
    return(SD_STREAM_READ_UNDERRUN);
 800460e:	2014      	movs	r0, #20
 8004610:	e008      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
  {
    return(SD_STREAM_WRITE_OVERRUN);
 8004612:	2015      	movs	r0, #21
 8004614:	e006      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
  {
    return(SD_CID_CSD_OVERWRITE);
 8004616:	2016      	movs	r0, #22
 8004618:	e004      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
  {
    return(SD_WP_ERASE_SKIP);
 800461a:	2017      	movs	r0, #23
 800461c:	e002      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
  {
    return(SD_CARD_ECC_DISABLED);
 800461e:	2018      	movs	r0, #24
 8004620:	e000      	b.n	8004624 <SD_IsCardProgramming+0x13c>
  }
  
  if((responseR1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
  {
    return(SD_ERASE_RESET);
 8004622:	2019      	movs	r0, #25
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
}   
 8004624:	b006      	add	sp, #24
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	fdffe008 	.word	0xfdffe008

0800462c <SD_CmdResp1Error>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp1Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD)
{
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4605      	mov	r5, r0
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004630:	6800      	ldr	r0, [r0, #0]
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp1Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD)
{
 8004632:	460e      	mov	r6, r1
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004634:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004636:	f013 0f45 	tst.w	r3, #69	; 0x45
 800463a:	d0fb      	beq.n	8004634 <SD_CmdResp1Error+0x8>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 800463c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800463e:	075b      	lsls	r3, r3, #29
 8004640:	d503      	bpl.n	800464a <SD_CmdResp1Error+0x1e>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004642:	2304      	movs	r3, #4
 8004644:	6383      	str	r3, [r0, #56]	; 0x38
    
    return errorstate;
 8004646:	2003      	movs	r0, #3
 8004648:	bd70      	pop	{r4, r5, r6, pc}
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 800464a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800464c:	f013 0401 	ands.w	r4, r3, #1
 8004650:	d002      	beq.n	8004658 <SD_CmdResp1Error+0x2c>
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004652:	2301      	movs	r3, #1
 8004654:	6383      	str	r3, [r0, #56]	; 0x38
 8004656:	e039      	b.n	80046cc <SD_CmdResp1Error+0xa0>
    
    return errorstate;
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8004658:	f7ff fac0 	bl	8003bdc <SDIO_GetCommandResponse>
 800465c:	42b0      	cmp	r0, r6
 800465e:	d001      	beq.n	8004664 <SD_CmdResp1Error+0x38>
  {
    errorstate = SD_ILLEGAL_CMD;
    
    return errorstate;
 8004660:	2010      	movs	r0, #16
 8004662:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 800466c:	4620      	mov	r0, r4
 800466e:	f7ff fab9 	bl	8003be4 <SDIO_GetResponse>
  
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8004672:	4b28      	ldr	r3, [pc, #160]	; (8004714 <SD_CmdResp1Error+0xe8>)
 8004674:	4003      	ands	r3, r0
 8004676:	b34b      	cbz	r3, 80046cc <SD_CmdResp1Error+0xa0>
  {
    return errorstate;
  }
  
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8004678:	2800      	cmp	r0, #0
 800467a:	db29      	blt.n	80046d0 <SD_CmdResp1Error+0xa4>
  {
    return(SD_ADDR_OUT_OF_RANGE);
  }
  
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 800467c:	0045      	lsls	r5, r0, #1
 800467e:	d429      	bmi.n	80046d4 <SD_CmdResp1Error+0xa8>
  {
    return(SD_ADDR_MISALIGNED);
  }
  
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8004680:	0084      	lsls	r4, r0, #2
 8004682:	d429      	bmi.n	80046d8 <SD_CmdResp1Error+0xac>
  {
    return(SD_BLOCK_LEN_ERR);
  }
  
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8004684:	00c1      	lsls	r1, r0, #3
 8004686:	d429      	bmi.n	80046dc <SD_CmdResp1Error+0xb0>
  {
    return(SD_ERASE_SEQ_ERR);
  }
  
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8004688:	0102      	lsls	r2, r0, #4
 800468a:	d429      	bmi.n	80046e0 <SD_CmdResp1Error+0xb4>
  {
    return(SD_BAD_ERASE_PARAM);
  }
  
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 800468c:	0143      	lsls	r3, r0, #5
 800468e:	d429      	bmi.n	80046e4 <SD_CmdResp1Error+0xb8>
  {
    return(SD_WRITE_PROT_VIOLATION);
  }
  
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8004690:	01c6      	lsls	r6, r0, #7
 8004692:	d429      	bmi.n	80046e8 <SD_CmdResp1Error+0xbc>
  {
    return(SD_LOCK_UNLOCK_FAILED);
  }
  
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8004694:	0205      	lsls	r5, r0, #8
 8004696:	d429      	bmi.n	80046ec <SD_CmdResp1Error+0xc0>
  {
    return(SD_COM_CRC_FAILED);
  }
  
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8004698:	0244      	lsls	r4, r0, #9
 800469a:	d4e1      	bmi.n	8004660 <SD_CmdResp1Error+0x34>
  {
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 800469c:	0281      	lsls	r1, r0, #10
 800469e:	d427      	bmi.n	80046f0 <SD_CmdResp1Error+0xc4>
  {
    return(SD_CARD_ECC_FAILED);
  }
  
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 80046a0:	02c2      	lsls	r2, r0, #11
 80046a2:	d427      	bmi.n	80046f4 <SD_CmdResp1Error+0xc8>
  {
    return(SD_CC_ERROR);
  }
  
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 80046a4:	0303      	lsls	r3, r0, #12
 80046a6:	d427      	bmi.n	80046f8 <SD_CmdResp1Error+0xcc>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }
  
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 80046a8:	0346      	lsls	r6, r0, #13
 80046aa:	d427      	bmi.n	80046fc <SD_CmdResp1Error+0xd0>
  {
    return(SD_STREAM_READ_UNDERRUN);
  }
  
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 80046ac:	0385      	lsls	r5, r0, #14
 80046ae:	d427      	bmi.n	8004700 <SD_CmdResp1Error+0xd4>
  {
    return(SD_STREAM_WRITE_OVERRUN);
  }
  
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 80046b0:	03c4      	lsls	r4, r0, #15
 80046b2:	d427      	bmi.n	8004704 <SD_CmdResp1Error+0xd8>
  {
    return(SD_CID_CSD_OVERWRITE);
  }
  
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 80046b4:	0401      	lsls	r1, r0, #16
 80046b6:	d427      	bmi.n	8004708 <SD_CmdResp1Error+0xdc>
  {
    return(SD_WP_ERASE_SKIP);
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 80046b8:	0442      	lsls	r2, r0, #17
 80046ba:	d427      	bmi.n	800470c <SD_CmdResp1Error+0xe0>
  {
    return(SD_CARD_ECC_DISABLED);
  }
  
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 80046bc:	0483      	lsls	r3, r0, #18
 80046be:	d427      	bmi.n	8004710 <SD_CmdResp1Error+0xe4>
  if((response_r1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
 80046c0:	f010 0f08 	tst.w	r0, #8
 80046c4:	bf14      	ite	ne
 80046c6:	201a      	movne	r0, #26
 80046c8:	2000      	moveq	r0, #0
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
  
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
  {
    return errorstate;
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
  {
    return(SD_ADDR_OUT_OF_RANGE);
 80046d0:	201c      	movs	r0, #28
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
  {
    return(SD_ADDR_MISALIGNED);
 80046d4:	2009      	movs	r0, #9
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
  {
    return(SD_BLOCK_LEN_ERR);
 80046d8:	200a      	movs	r0, #10
 80046da:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
  {
    return(SD_ERASE_SEQ_ERR);
 80046dc:	200b      	movs	r0, #11
 80046de:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
  {
    return(SD_BAD_ERASE_PARAM);
 80046e0:	200c      	movs	r0, #12
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
  {
    return(SD_WRITE_PROT_VIOLATION);
 80046e4:	200d      	movs	r0, #13
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
  {
    return(SD_LOCK_UNLOCK_FAILED);
 80046e8:	200e      	movs	r0, #14
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 80046ec:	200f      	movs	r0, #15
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
  {
    return(SD_CARD_ECC_FAILED);
 80046f0:	2011      	movs	r0, #17
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
  {
    return(SD_CC_ERROR);
 80046f4:	2012      	movs	r0, #18
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 80046f8:	2013      	movs	r0, #19
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
  {
    return(SD_STREAM_READ_UNDERRUN);
 80046fc:	2014      	movs	r0, #20
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
  {
    return(SD_STREAM_WRITE_OVERRUN);
 8004700:	2015      	movs	r0, #21
 8004702:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
  {
    return(SD_CID_CSD_OVERWRITE);
 8004704:	2016      	movs	r0, #22
 8004706:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
  {
    return(SD_WP_ERASE_SKIP);
 8004708:	2017      	movs	r0, #23
 800470a:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
  {
    return(SD_CARD_ECC_DISABLED);
 800470c:	2018      	movs	r0, #24
 800470e:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
  {
    return(SD_ERASE_RESET);
 8004710:	2019      	movs	r0, #25
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
}
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	fdffe008 	.word	0xfdffe008

08004718 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b08f      	sub	sp, #60	; 0x3c
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 800471c:	2300      	movs	r3, #0
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800471e:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	9302      	str	r3, [sp, #8]
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004724:	2410      	movs	r4, #16
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004726:	2240      	movs	r2, #64	; 0x40
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004728:	9306      	str	r3, [sp, #24]
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800472a:	460e      	mov	r6, r1
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800472c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004730:	a903      	add	r1, sp, #12
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
 8004732:	2708      	movs	r7, #8
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004734:	6800      	ldr	r0, [r0, #0]
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
 8004736:	9703      	str	r7, [sp, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004738:	9404      	str	r4, [sp, #16]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800473a:	9205      	str	r2, [sp, #20]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800473c:	9307      	str	r3, [sp, #28]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800473e:	f7ff fa0d 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8004742:	4628      	mov	r0, r5
 8004744:	4621      	mov	r1, r4
 8004746:	f7ff ff71 	bl	800462c <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 800474a:	2800      	cmp	r0, #0
 800474c:	d161      	bne.n	8004812 <SD_FindSCR+0xfa>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800474e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004750:	6828      	ldr	r0, [r5, #0]
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8004752:	40a3      	lsls	r3, r4
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004754:	a903      	add	r1, sp, #12
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004756:	2437      	movs	r4, #55	; 0x37
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8004758:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800475a:	9404      	str	r4, [sp, #16]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800475c:	f7ff f9fe 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004760:	4621      	mov	r1, r4
 8004762:	4628      	mov	r0, r5
 8004764:	f7ff ff62 	bl	800462c <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8004768:	4604      	mov	r4, r0
 800476a:	2800      	cmp	r0, #0
 800476c:	d151      	bne.n	8004812 <SD_FindSCR+0xfa>
  {
    return errorstate;
  }
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	9308      	str	r3, [sp, #32]
  sdio_datainitstructure.DataLength    = 8;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004774:	2330      	movs	r3, #48	; 0x30
 8004776:	930a      	str	r3, [sp, #40]	; 0x28
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004778:	2302      	movs	r3, #2
 800477a:	930b      	str	r3, [sp, #44]	; 0x2c
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800477c:	900c      	str	r0, [sp, #48]	; 0x30
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 800477e:	2301      	movs	r3, #1
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004780:	a908      	add	r1, sp, #32
 8004782:	6828      	ldr	r0, [r5, #0]
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = 8;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8004784:	930d      	str	r3, [sp, #52]	; 0x34
  if(errorstate != SD_OK)
  {
    return errorstate;
  }
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = 8;
 8004786:	9709      	str	r7, [sp, #36]	; 0x24
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004788:	f7ff fa44 	bl	8003c14 <SDIO_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0;
 800478c:	9403      	str	r4, [sp, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800478e:	a903      	add	r1, sp, #12
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8004790:	2433      	movs	r4, #51	; 0x33
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004792:	6828      	ldr	r0, [r5, #0]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8004794:	9404      	str	r4, [sp, #16]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004796:	f7ff f9e1 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 800479a:	4628      	mov	r0, r5
 800479c:	4621      	mov	r1, r4
 800479e:	f7ff ff45 	bl	800462c <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d135      	bne.n	8004812 <SD_FindSCR+0xfa>
 80047a6:	466c      	mov	r4, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 80047a8:	6828      	ldr	r0, [r5, #0]
 80047aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80047ac:	f240 632a 	movw	r3, #1578	; 0x62a
 80047b0:	4013      	ands	r3, r2
 80047b2:	b93b      	cbnz	r3, 80047c4 <SD_FindSCR+0xac>
  {
    if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80047b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047b6:	029f      	lsls	r7, r3, #10
 80047b8:	d5f7      	bpl.n	80047aa <SD_FindSCR+0x92>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80047ba:	f7ff f9bf 	bl	8003b3c <SDIO_ReadFIFO>
 80047be:	f844 0f04 	str.w	r0, [r4, #4]!
 80047c2:	e7f1      	b.n	80047a8 <SD_FindSCR+0x90>
      index++;
    }
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80047c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047c6:	0719      	lsls	r1, r3, #28
 80047c8:	d503      	bpl.n	80047d2 <SD_FindSCR+0xba>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80047ca:	2308      	movs	r3, #8
 80047cc:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 80047ce:	2004      	movs	r0, #4
 80047d0:	e01f      	b.n	8004812 <SD_FindSCR+0xfa>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80047d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047d4:	079a      	lsls	r2, r3, #30
 80047d6:	d502      	bpl.n	80047de <SD_FindSCR+0xc6>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80047d8:	2302      	movs	r3, #2
 80047da:	6383      	str	r3, [r0, #56]	; 0x38
 80047dc:	e018      	b.n	8004810 <SD_FindSCR+0xf8>
    
    errorstate = SD_DATA_CRC_FAIL;
    
    return errorstate;
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80047de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047e0:	069b      	lsls	r3, r3, #26
 80047e2:	d503      	bpl.n	80047ec <SD_FindSCR+0xd4>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80047e4:	2320      	movs	r3, #32
 80047e6:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
    
    return errorstate;
 80047e8:	2006      	movs	r0, #6
 80047ea:	e012      	b.n	8004812 <SD_FindSCR+0xfa>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 80047ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047ee:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80047f2:	d004      	beq.n	80047fe <SD_FindSCR+0xe6>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 80047f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047f8:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
    
    return errorstate;
 80047fa:	2007      	movs	r0, #7
 80047fc:	e009      	b.n	8004812 <SD_FindSCR+0xfa>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004802:	6382      	str	r2, [r0, #56]	; 0x38
 8004804:	9a01      	ldr	r2, [sp, #4]
 8004806:	ba12      	rev	r2, r2
  
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 8004808:	6072      	str	r2, [r6, #4]
 800480a:	9a02      	ldr	r2, [sp, #8]
 800480c:	ba12      	rev	r2, r2
    ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800480e:	6032      	str	r2, [r6, #0]
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
 8004810:	4618      	mov	r0, r3
}
 8004812:	b00f      	add	sp, #60	; 0x3c
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004816 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8004816:	4770      	bx	lr

08004818 <HAL_SD_Get_CardInfo>:
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t tmp = 0;
  
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8004818:	6a02      	ldr	r2, [r0, #32]
 800481a:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 800481e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004820:	f8a1 2054 	strh.w	r2, [r1, #84]	; 0x54
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8004824:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
  * @param  pCardInfo: Pointer to a HAL_SD_CardInfoTypedef structure that  
  *         contains all SD cardinformation  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
 8004828:	4603      	mov	r3, r0
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800482a:	0990      	lsrs	r0, r2, #6
 800482c:	7008      	strb	r0, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800482e:	f3c2 0083 	ubfx	r0, r2, #2, #4
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8004832:	f002 0203 	and.w	r2, r2, #3
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004836:	7048      	strb	r0, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8004838:	708a      	strb	r2, [r1, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 800483a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800483e:	70ca      	strb	r2, [r1, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8004840:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004844:	710a      	strb	r2, [r1, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8004846:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800484a:	714a      	strb	r2, [r1, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	0e10      	lsrs	r0, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 8004850:	0100      	lsls	r0, r0, #4
 8004852:	80c8      	strh	r0, [r1, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004854:	88c8      	ldrh	r0, [r1, #6]
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
 8004856:	f3c2 4207 	ubfx	r2, r2, #16, #8
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800485a:	b280      	uxth	r0, r0
 800485c:	ea40 1012 	orr.w	r0, r0, r2, lsr #4
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004860:	f002 020f 	and.w	r2, r2, #15
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004864:	80c8      	strh	r0, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004866:	720a      	strb	r2, [r1, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8004868:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800486c:	09d0      	lsrs	r0, r2, #7
 800486e:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004870:	f3c2 1080 	ubfx	r0, r2, #6, #1
 8004874:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004876:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800487a:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800487c:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8004880:	7308      	strb	r0, [r1, #12]
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8004882:	2000      	movs	r0, #0
 8004884:	7348      	strb	r0, [r1, #13]
  * @param  pCardInfo: Pointer to a HAL_SD_CardInfoTypedef structure that  
  *         contains all SD cardinformation  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
 8004886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
  
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 800488a:	6a1c      	ldr	r4, [r3, #32]
 800488c:	2c01      	cmp	r4, #1
 800488e:	d83d      	bhi.n	800490c <HAL_SD_Get_CardInfo+0xf4>
  {
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8004890:	f002 0203 	and.w	r2, r2, #3
 8004894:	0292      	lsls	r2, r2, #10
 8004896:	610a      	str	r2, [r1, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8004898:	690a      	ldr	r2, [r1, #16]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
  {
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
 800489a:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 800489e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80048a2:	610a      	str	r2, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 80048a4:	690c      	ldr	r4, [r1, #16]
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80048a6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 80048aa:	ea44 1492 	orr.w	r4, r4, r2, lsr #6
 80048ae:	610c      	str	r4, [r1, #16]
    
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80048b0:	f3c2 04c2 	ubfx	r4, r2, #3, #3
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80048b4:	f002 0207 	and.w	r2, r2, #7
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
    
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80048b8:	750c      	strb	r4, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80048ba:	754a      	strb	r2, [r1, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
 80048bc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80048c0:	0954      	lsrs	r4, r2, #5
 80048c2:	758c      	strb	r4, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80048c4:	f3c2 0482 	ubfx	r4, r2, #2, #3
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 80048c8:	f002 0203 	and.w	r2, r2, #3
 80048cc:	0052      	lsls	r2, r2, #1
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80048ce:	75cc      	strb	r4, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 80048d0:	760a      	strb	r2, [r1, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80048d2:	7e0c      	ldrb	r4, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
 80048d4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80048d8:	ea44 14d2 	orr.w	r4, r4, r2, lsr #7
 80048dc:	760c      	strb	r4, [r1, #24]
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80048de:	690e      	ldr	r6, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80048e0:	7e0d      	ldrb	r5, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80048e2:	7a0f      	ldrb	r7, [r1, #8]
 80048e4:	2401      	movs	r4, #1
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80048e6:	3502      	adds	r5, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80048e8:	fa04 f707 	lsl.w	r7, r4, r7
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80048ec:	40ac      	lsls	r4, r5
 80048ee:	ea4f 79e4 	mov.w	r9, r4, asr #31
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80048f2:	3601      	adds	r6, #1
 80048f4:	fba4 4507 	umull	r4, r5, r4, r7
 80048f8:	fb07 5509 	mla	r5, r7, r9, r5
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80048fc:	fba4 8906 	umull	r8, r9, r4, r6
 8004900:	fb06 9905 	mla	r9, r6, r5, r9
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8004904:	650f      	str	r7, [r1, #80]	; 0x50
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8004906:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
 800490a:	e023      	b.n	8004954 <HAL_SD_Get_CardInfo+0x13c>
  }
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800490c:	2c02      	cmp	r4, #2
 800490e:	d120      	bne.n	8004952 <HAL_SD_Get_CardInfo+0x13a>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8004910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004912:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004916:	0412      	lsls	r2, r2, #16
 8004918:	610a      	str	r2, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800491a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800491c:	690c      	ldr	r4, [r1, #16]
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800491e:	0e15      	lsrs	r5, r2, #24
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8004920:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8004924:	610c      	str	r4, [r1, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8004926:	690c      	ldr	r4, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
 8004928:	f3c2 4507 	ubfx	r5, r2, #16, #8
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 800492c:	432c      	orrs	r4, r5
 800492e:	610c      	str	r4, [r1, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    
    pCardInfo->CardCapacity = (uint64_t)((((uint64_t)pCardInfo->SD_csd.DeviceSize + 1)) * 512 * 1024);
 8004930:	690c      	ldr	r4, [r1, #16]
 8004932:	2500      	movs	r5, #0
 8004934:	3401      	adds	r4, #1
 8004936:	f145 0500 	adc.w	r5, r5, #0
 800493a:	04ed      	lsls	r5, r5, #19
 800493c:	ea45 3554 	orr.w	r5, r5, r4, lsr #13
 8004940:	04e4      	lsls	r4, r4, #19
 8004942:	648c      	str	r4, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 8004944:	f44f 7400 	mov.w	r4, #512	; 0x200
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
 8004948:	f3c2 2207 	ubfx	r2, r2, #8, #8
    
    pCardInfo->CardCapacity = (uint64_t)((((uint64_t)pCardInfo->SD_csd.DeviceSize + 1)) * 512 * 1024);
 800494c:	64cd      	str	r5, [r1, #76]	; 0x4c
    pCardInfo->CardBlockSize = 512;    
 800494e:	650c      	str	r4, [r1, #80]	; 0x50
 8004950:	e000      	b.n	8004954 <HAL_SD_Get_CardInfo+0x13c>
  }
  else
  {
    /* Not supported card type */
    errorstate = SD_ERROR;
 8004952:	2029      	movs	r0, #41	; 0x29
  }
    
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8004954:	f3c2 1480 	ubfx	r4, r2, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8004958:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800495c:	0052      	lsls	r2, r2, #1
  {
    /* Not supported card type */
    errorstate = SD_ERROR;
  }
    
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800495e:	764c      	strb	r4, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8004960:	768a      	strb	r2, [r1, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8004962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8004964:	7e8d      	ldrb	r5, [r1, #26]
 8004966:	f3c2 14c0 	ubfx	r4, r2, #7, #1
 800496a:	432c      	orrs	r4, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 800496c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8004970:	768c      	strb	r4, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8004972:	76ca      	strb	r2, [r1, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8004974:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004978:	09d4      	lsrs	r4, r2, #7
 800497a:	770c      	strb	r4, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 800497c:	f3c2 1441 	ubfx	r4, r2, #5, #2
 8004980:	774c      	strb	r4, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004982:	f3c2 0482 	ubfx	r4, r2, #2, #3
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004986:	f002 0203 	and.w	r2, r2, #3
 800498a:	0092      	lsls	r2, r2, #2
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800498c:	778c      	strb	r4, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 800498e:	77ca      	strb	r2, [r1, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8004990:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004994:	7fcc      	ldrb	r4, [r1, #31]
 8004996:	ea44 1492 	orr.w	r4, r4, r2, lsr #6
 800499a:	77cc      	strb	r4, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800499c:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80049a0:	f881 4020 	strb.w	r4, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 80049a4:	f002 0201 	and.w	r2, r2, #1
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
  pCardInfo->SD_csd.Reserved3           = 0;
 80049a8:	2400      	movs	r4, #0
 80049aa:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 80049ae:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80049b2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 80049b6:	09d4      	lsrs	r4, r2, #7
 80049b8:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 80049bc:	f3c2 1480 	ubfx	r4, r2, #6, #1
 80049c0:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 80049c4:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80049c8:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 80049cc:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80049d0:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 80049d4:	f3c2 0481 	ubfx	r4, r2, #2, #2
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 80049d8:	f002 0203 	and.w	r2, r2, #3
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 80049dc:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 80049e0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80049e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pCardInfo->SD_csd.Reserved4 = 1;
 80049e6:	2401      	movs	r4, #1
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80049e8:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80049ec:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 80049f0:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  
  /* Byte 0 */
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ManufacturerID = tmp;
 80049f4:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80049f8:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  
  /* Byte 1 */
  tmp = (uint8_t)((hsd->CID[0] & 0x00FF0000) >> 16);
 80049fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fe:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8004a02:	022d      	lsls	r5, r5, #8
 8004a04:	85cd      	strh	r5, [r1, #46]	; 0x2e
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0] & 0x000000FF00) >> 8);
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8004a06:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
 8004a08:	b2ae      	uxth	r6, r5
  /* Byte 1 */
  tmp = (uint8_t)((hsd->CID[0] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0] & 0x000000FF00) >> 8);
 8004a0a:	f3c2 2507 	ubfx	r5, r2, #8, #8
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8004a0e:	4335      	orrs	r5, r6
  
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8004a10:	0612      	lsls	r2, r2, #24
  tmp = (uint8_t)((hsd->CID[0] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0] & 0x000000FF00) >> 8);
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8004a12:	85cd      	strh	r5, [r1, #46]	; 0x2e
  
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8004a14:	630a      	str	r2, [r1, #48]	; 0x30
  
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8004a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8004a18:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
  
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8004a1a:	0e16      	lsrs	r6, r2, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8004a1c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004a20:	630d      	str	r5, [r1, #48]	; 0x30
  
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8004a22:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
  
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
 8004a24:	f3c2 4607 	ubfx	r6, r2, #16, #8
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8004a28:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8004a2c:	630d      	str	r5, [r1, #48]	; 0x30
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8004a2e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1] & 0x0000FF00) >> 8);
 8004a30:	f3c2 2607 	ubfx	r6, r2, #8, #8
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8004a34:	4335      	orrs	r5, r6
  
  /* Byte 7 */
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
  pCardInfo->SD_cid.ProdName2 = tmp;
 8004a36:	b2d2      	uxtb	r2, r2
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8004a38:	630d      	str	r5, [r1, #48]	; 0x30
  
  /* Byte 7 */
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
  pCardInfo->SD_cid.ProdName2 = tmp;
 8004a3a:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
  
  /* Byte 8 */
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdRev = tmp;
 8004a3e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8004a42:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  
  /* Byte 9 */
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 8004a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a48:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 8004a4c:	062d      	lsls	r5, r5, #24
 8004a4e:	638d      	str	r5, [r1, #56]	; 0x38
  
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8004a50:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  /* Byte 9 */
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.ProdSN = tmp << 24;
  
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
 8004a52:	f3c2 2607 	ubfx	r6, r2, #8, #8
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8004a56:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004a5a:	638d      	str	r5, [r1, #56]	; 0x38
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 8004a5c:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
 8004a5e:	b2d2      	uxtb	r2, r2
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 8004a60:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 8004a64:	638a      	str	r2, [r1, #56]	; 0x38
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdSN |= tmp;
 8004a66:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8004a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8004a6a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8004a6e:	638d      	str	r5, [r1, #56]	; 0x38
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8004a70:	f891 503c 	ldrb.w	r5, [r1, #60]	; 0x3c
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdSN |= tmp;
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
 8004a74:	f3c2 4207 	ubfx	r2, r2, #16, #8
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8004a78:	ea45 1512 	orr.w	r5, r5, r2, lsr #4
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8004a7c:	f002 020f 	and.w	r2, r2, #15
 8004a80:	0212      	lsls	r2, r2, #8
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdSN |= tmp;
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8004a82:	f881 503c 	strb.w	r5, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8004a86:	87ca      	strh	r2, [r1, #62]	; 0x3e
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3] & 0x0000FF00) >> 8);
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8004a8a:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8004a8c:	b295      	uxth	r5, r2
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3] & 0x0000FF00) >> 8);
 8004a8e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8004a92:	432a      	orrs	r2, r5
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CID[3] & 0x000000FF);
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8004a94:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8004a98:	87ca      	strh	r2, [r1, #62]	; 0x3e
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CID[3] & 0x000000FF);
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8004a9a:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8004a9e:	f881 4041 	strb.w	r4, [r1, #65]	; 0x41
  
  return errorstate;
}
 8004aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004aa8 <HAL_SD_Init>:
  * @param  hsd: SD handle
  * @param  SDCardInfo: HAL_SD_CardInfoTypedef structure for SD card information   
  * @retval HAL SD error state
  */
HAL_SD_ErrorTypedef HAL_SD_Init(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *SDCardInfo)
{ 
 8004aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	b090      	sub	sp, #64	; 0x40
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004aae:	2500      	movs	r5, #0
  * @param  hsd: SD handle
  * @param  SDCardInfo: HAL_SD_CardInfoTypedef structure for SD card information   
  * @retval HAL SD error state
  */
HAL_SD_ErrorTypedef HAL_SD_Init(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *SDCardInfo)
{ 
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004ab4:	f88d 5012 	strb.w	r5, [sp, #18]
  SD_InitTypeDef tmpinit;
  
  /* Initialize the low level hardware (MSP) */
  HAL_SD_MspInit(hsd);
 8004ab8:	f7ff fead 	bl	8004816 <HAL_SD_MspInit>
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004abc:	2376      	movs	r3, #118	; 0x76
 8004abe:	930f      	str	r3, [sp, #60]	; 0x3c
  
  /* Default SDIO peripheral configuration for SD card initialization */
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
 8004ac0:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ac2:	950e      	str	r5, [sp, #56]	; 0x38
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
 8004ac4:	ab10      	add	r3, sp, #64	; 0x40
 8004ac6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004aca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  
  /* Initialize the low level hardware (MSP) */
  HAL_SD_MspInit(hsd);
  
  /* Default SDIO peripheral configuration for SD card initialization */
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004ace:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ad0:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ad2:	950c      	str	r5, [sp, #48]	; 0x30
  uint32_t response = 0, count = 0, validvoltage = 0;
  uint32_t sdtype = SD_STD_CAPACITY;
  
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
 8004ad4:	4fa8      	ldr	r7, [pc, #672]	; (8004d78 <HAL_SD_Init+0x2d0>)
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	ab0a      	add	r3, sp, #40	; 0x28
 8004ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004adc:	f7fe ffd4 	bl	8003a88 <SDIO_Init>
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_PowerON(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 8004ae0:	f88d 5013 	strb.w	r5, [sp, #19]
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8004ae4:	6820      	ldr	r0, [r4, #0]
  uint32_t response = 0, count = 0, validvoltage = 0;
  uint32_t sdtype = SD_STD_CAPACITY;
  
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
 8004ae6:	603d      	str	r5, [r7, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8004ae8:	f7ff f830 	bl	8003b4c <SDIO_PowerState_ON>
  
  /* 1ms: required power up waiting time before starting the SD initialization 
     sequence */
  HAL_Delay(1);
 8004aec:	2001      	movs	r0, #1
 8004aee:	f002 fd81 	bl	80075f4 <HAL_Delay>
  
  /* Enable SDIO Clock */
  __HAL_SD_SDIO_ENABLE();
 8004af2:	2301      	movs	r3, #1
 8004af4:	603b      	str	r3, [r7, #0]
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004af6:	a905      	add	r1, sp, #20
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004afc:	6820      	ldr	r0, [r4, #0]
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004afe:	9309      	str	r3, [sp, #36]	; 0x24
  /* Enable SDIO Clock */
  __HAL_SD_SDIO_ENABLE();
  
  /* CMD0: GO_IDLE_STATE -----------------------------------------------------*/
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0;
 8004b00:	9505      	str	r5, [sp, #20]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 8004b02:	9506      	str	r5, [sp, #24]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
 8004b04:	9507      	str	r5, [sp, #28]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004b06:	9508      	str	r5, [sp, #32]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004b08:	f7ff f828 	bl	8003b5c <SDIO_SendCommand>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t timeout, tmp;
  
  timeout = SDIO_CMD0TIMEOUT;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004b10:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b14:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    
  while((timeout > 0) && (!tmp))
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f040 819b 	bne.w	8004e54 <HAL_SD_Init+0x3ac>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8004b1e:	6b53      	ldr	r3, [r2, #52]	; 0x34
  
  timeout = SDIO_CMD0TIMEOUT;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
    
  while((timeout > 0) && (!tmp))
 8004b20:	3901      	subs	r1, #1
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8004b22:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  
  timeout = SDIO_CMD0TIMEOUT;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
    
  while((timeout > 0) && (!tmp))
 8004b26:	d1f7      	bne.n	8004b18 <HAL_SD_Init+0x70>
  }
  
  if(timeout == 0)
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    return errorstate;
 8004b28:	2303      	movs	r3, #3
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
  
  /* Check for error conditions */
  errorstate = SD_CmdError(hsd);
 8004b2a:	f88d 3013 	strb.w	r3, [sp, #19]
  
  printf("errorstate CMD0: %d\n", errorstate);
 8004b2e:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8004b32:	4892      	ldr	r0, [pc, #584]	; (8004d7c <HAL_SD_Init+0x2d4>)
 8004b34:	f011 fa10 	bl	8015f58 <printf>
  
  if(errorstate != SD_OK)
 8004b38:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004b3c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f040 80b2 	bne.w	8004caa <HAL_SD_Init+0x202>
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8004b46:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004b4a:	9305      	str	r3, [sp, #20]
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 8004b4c:	2308      	movs	r3, #8
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004b4e:	a905      	add	r1, sp, #20
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 8004b50:	9306      	str	r3, [sp, #24]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004b52:	6820      	ldr	r0, [r4, #0]
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004b54:	2340      	movs	r3, #64	; 0x40
 8004b56:	9307      	str	r3, [sp, #28]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004b58:	f7ff f800 	bl	8003b5c <SDIO_SendCommand>
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b60:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004b64:	bf14      	ite	ne
 8004b66:	2101      	movne	r1, #1
 8004b68:	2100      	moveq	r1, #0
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
 8004b6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
  
  while((!tmp) && (timeout > 0))
 8004b6e:	b941      	cbnz	r1, 8004b82 <HAL_SD_Init+0xda>
 8004b70:	b13a      	cbz	r2, 8004b82 <HAL_SD_Init+0xda>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
 8004b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b74:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004b78:	bf14      	ite	ne
 8004b7a:	2101      	movne	r1, #1
 8004b7c:	2100      	moveq	r1, #0
    timeout--;
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	e7f5      	b.n	8004b6e <HAL_SD_Init+0xc6>
  }
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT); 
 8004b82:	6b59      	ldr	r1, [r3, #52]	; 0x34
  
  if((timeout == 0) || tmp)
 8004b84:	b10a      	cbz	r2, 8004b8a <HAL_SD_Init+0xe2>
 8004b86:	0748      	lsls	r0, r1, #29
 8004b88:	d503      	bpl.n	8004b92 <HAL_SD_Init+0xea>
  {
    /* Card is not V2.0 compliant or card does not support the set voltage range */
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004b8e:	2503      	movs	r5, #3
 8004b90:	e005      	b.n	8004b9e <HAL_SD_Init+0xf6>
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDREND))
 8004b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b94:	0651      	lsls	r1, r2, #25
  {
    /* Card is SD V2.0 compliant */
    errorstate = SD_OK;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CMDREND);
 8004b96:	bf46      	itte	mi
 8004b98:	2240      	movmi	r2, #64	; 0x40
 8004b9a:	639a      	strmi	r2, [r3, #56]	; 0x38
    
    return errorstate;
  }
  
  return errorstate;
 8004b9c:	2529      	movpl	r5, #41	; 0x29
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
  
  /* Check for error conditions */ 
  errorstate = SD_CmdResp7Error(hsd);
 8004b9e:	f88d 5013 	strb.w	r5, [sp, #19]
  
  printf("errorstate CMD8: %d\n", errorstate);
 8004ba2:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8004ba6:	4876      	ldr	r0, [pc, #472]	; (8004d80 <HAL_SD_Init+0x2d8>)
 8004ba8:	f011 f9d6 	bl	8015f58 <printf>
  
  if (errorstate == SD_OK)
 8004bac:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	b922      	cbnz	r2, 8004bbe <HAL_SD_Init+0x116>
  {
    /* SD Card 2.0 */
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8004bb8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8004bbc:	e000      	b.n	8004bc0 <HAL_SD_Init+0x118>
static HAL_SD_ErrorTypedef SD_PowerON(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
  uint32_t response = 0, count = 0, validvoltage = 0;
  uint32_t sdtype = SD_STD_CAPACITY;
 8004bbe:	4698      	mov	r8, r3
    sdtype        = SD_HIGH_CAPACITY;
  }
  
  /* Send CMD55 */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004bc0:	2537      	movs	r5, #55	; 0x37
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004bc2:	a905      	add	r1, sp, #20
 8004bc4:	6820      	ldr	r0, [r4, #0]
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
    sdtype        = SD_HIGH_CAPACITY;
  }
  
  /* Send CMD55 */
  sdio_cmdinitstructure.Argument         = 0;
 8004bc6:	9305      	str	r3, [sp, #20]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004bc8:	9506      	str	r5, [sp, #24]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004bca:	f7fe ffc7 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7ff fd2b 	bl	800462c <SD_CmdResp1Error>
 8004bd6:	f88d 0013 	strb.w	r0, [sp, #19]
  
  printf("errorstate CMD55: %d\n", errorstate);
 8004bda:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8004bde:	4869      	ldr	r0, [pc, #420]	; (8004d84 <HAL_SD_Init+0x2dc>)
 8004be0:	f011 f9ba 	bl	8015f58 <printf>
  
  /* If errorstate is Command Timeout, it is a MMC card */
  /* If errorstate is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if(errorstate == SD_OK)
 8004be4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004be8:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d157      	bne.n	8004ca0 <HAL_SD_Init+0x1f8>
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0;
 8004bf0:	2300      	movs	r3, #0
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004bf2:	2537      	movs	r5, #55	; 0x37
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004bf4:	a905      	add	r1, sp, #20
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004bf6:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004bfa:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004bfe:	6820      	ldr	r0, [r4, #0]
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0;
 8004c00:	9305      	str	r3, [sp, #20]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004c02:	9308      	str	r3, [sp, #32]
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004c04:	9506      	str	r5, [sp, #24]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004c06:	f8cd a01c 	str.w	sl, [sp, #28]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004c0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c0e:	f7fe ffa5 	bl	8003b5c <SDIO_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004c12:	4629      	mov	r1, r5
 8004c14:	4620      	mov	r0, r4
 8004c16:	f7ff fd09 	bl	800462c <SD_CmdResp1Error>
 8004c1a:	f88d 0013 	strb.w	r0, [sp, #19]
      
      if(errorstate != SD_OK)
 8004c1e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004c22:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d13f      	bne.n	8004caa <HAL_SD_Init+0x202>
      {
        return errorstate;
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8004c2a:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
 8004c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c32:	9305      	str	r3, [sp, #20]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c34:	6820      	ldr	r0, [r4, #0]
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004c36:	f8cd a01c 	str.w	sl, [sp, #28]
        return errorstate;
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8004c3a:	2329      	movs	r3, #41	; 0x29
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c3c:	a905      	add	r1, sp, #20
        return errorstate;
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8004c3e:	9306      	str	r3, [sp, #24]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004c40:	9508      	str	r5, [sp, #32]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004c42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c46:	f7fe ff89 	bl	8003b5c <SDIO_SendCommand>
  */
static HAL_SD_ErrorTypedef SD_CmdResp3Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004c52:	d0fb      	beq.n	8004c4c <HAL_SD_Init+0x1a4>
  {
  }
  
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8004c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c56:	0752      	lsls	r2, r2, #29
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004c58:	bf45      	ittet	mi
 8004c5a:	2204      	movmi	r2, #4
    
    return errorstate;
 8004c5c:	2503      	movmi	r5, #3
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c5e:	f240 52ff 	movwpl	r2, #1535	; 0x5ff
  
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004c62:	639a      	strmi	r2, [r3, #56]	; 0x38
    
    return errorstate;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c64:	bf58      	it	pl
 8004c66:	639a      	strpl	r2, [r3, #56]	; 0x38
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
      
      /* Check for error conditions */
      errorstate = SD_CmdResp3Error(hsd);
 8004c68:	f88d 5013 	strb.w	r5, [sp, #19]
      
      if(errorstate != SD_OK)
 8004c6c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004c70:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004c74:	b9cb      	cbnz	r3, 8004caa <HAL_SD_Init+0x202>
      {
        return errorstate;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(SDIO_RESP1);
 8004c76:	f7fe ffb5 	bl	8003be4 <SDIO_GetResponse>
     or SD card 1.x */
  if(errorstate == SD_OK)
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8004c7a:	2800      	cmp	r0, #0
      response = SDIO_GetResponse(SDIO_RESP1);
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
      
      count++;
 8004c7c:	f107 0701 	add.w	r7, r7, #1
 8004c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
     or SD card 1.x */
  if(errorstate == SD_OK)
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8004c84:	db02      	blt.n	8004c8c <HAL_SD_Init+0x1e4>
 8004c86:	429f      	cmp	r7, r3
 8004c88:	d1b2      	bne.n	8004bf0 <HAL_SD_Init+0x148>
 8004c8a:	e001      	b.n	8004c90 <HAL_SD_Init+0x1e8>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
      
      count++;
    }
    
    if(count >= SD_MAX_VOLT_TRIAL)
 8004c8c:	429f      	cmp	r7, r3
 8004c8e:	d103      	bne.n	8004c98 <HAL_SD_Init+0x1f0>
    {
      errorstate = SD_INVALID_VOLTRANGE;
 8004c90:	231b      	movs	r3, #27
 8004c92:	f88d 3013 	strb.w	r3, [sp, #19]
 8004c96:	e008      	b.n	8004caa <HAL_SD_Init+0x202>
      
      return errorstate;
    }
    
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004c98:	0043      	lsls	r3, r0, #1
    {
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8004c9a:	bf44      	itt	mi
 8004c9c:	2302      	movmi	r3, #2
 8004c9e:	6223      	strmi	r3, [r4, #32]
    }
    
  } /* else MMC Card */
  
  printf("errorstate PWon: %d\n", errorstate);
 8004ca0:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8004ca4:	4838      	ldr	r0, [pc, #224]	; (8004d88 <HAL_SD_Init+0x2e0>)
 8004ca6:	f011 f957 	bl	8015f58 <printf>
  return errorstate;
 8004caa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004cae:	b2db      	uxtb	r3, r3
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd); 
 8004cb0:	f88d 3012 	strb.w	r3, [sp, #18]
  
  if(errorstate != SD_OK)     
 8004cb4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004cb8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f040 80c3 	bne.w	8004e48 <HAL_SD_Init+0x3a0>
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint16_t sd_rca = 1;
  
  if(SDIO_GetPowerState(hsd->Instance) == 0) /* Power off */
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	f7fe ff46 	bl	8003b54 <SDIO_GetPowerState>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	f000 8089 	beq.w	8004de0 <HAL_SD_Init+0x338>
    errorstate = SD_REQUEST_NOT_APPLICABLE;
    
    return errorstate;
  }
  
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8004cce:	6a23      	ldr	r3, [r4, #32]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d020      	beq.n	8004d16 <HAL_SD_Init+0x26e>
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0;
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8004cd8:	23c0      	movs	r3, #192	; 0xc0
 8004cda:	9307      	str	r3, [sp, #28]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004cdc:	6820      	ldr	r0, [r4, #0]
  }
  
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0;
 8004cde:	9505      	str	r5, [sp, #20]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004ce4:	a905      	add	r1, sp, #20
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0;
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004ce6:	9508      	str	r5, [sp, #32]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004ce8:	9309      	str	r3, [sp, #36]	; 0x24
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004cea:	f7fe ff37 	bl	8003b5c <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7ff fbe4 	bl	80044bc <SD_CmdResp2Error>
    
    if(errorstate != SD_OK)
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d175      	bne.n	8004de4 <HAL_SD_Init+0x33c>
    {
      return errorstate;
    }
    
    /* Get Card identification number data */
    hsd->CID[0] = SDIO_GetResponse(SDIO_RESP1);
 8004cf8:	f7fe ff74 	bl	8003be4 <SDIO_GetResponse>
 8004cfc:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDIO_GetResponse(SDIO_RESP2);
 8004cfe:	2004      	movs	r0, #4
 8004d00:	f7fe ff70 	bl	8003be4 <SDIO_GetResponse>
 8004d04:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDIO_GetResponse(SDIO_RESP3);
 8004d06:	2008      	movs	r0, #8
 8004d08:	f7fe ff6c 	bl	8003be4 <SDIO_GetResponse>
 8004d0c:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDIO_GetResponse(SDIO_RESP4);
 8004d0e:	200c      	movs	r0, #12
 8004d10:	f7fe ff68 	bl	8003be4 <SDIO_GetResponse>
 8004d14:	6460      	str	r0, [r4, #68]	; 0x44
  }
  
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8004d16:	6a23      	ldr	r3, [r4, #32]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_SD_Init+0x278>
 8004d1c:	2b06      	cmp	r3, #6
 8004d1e:	d13b      	bne.n	8004d98 <HAL_SD_Init+0x2f0>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 8004d20:	2303      	movs	r3, #3
 8004d22:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004d24:	6820      	ldr	r0, [r4, #0]
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004d26:	2340      	movs	r3, #64	; 0x40
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004d28:	a905      	add	r1, sp, #20
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004d2a:	9307      	str	r3, [sp, #28]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004d2c:	f7fe ff16 	bl	8003b5c <SDIO_SendCommand>
static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004d30:	6820      	ldr	r0, [r4, #0]
 8004d32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d34:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004d38:	d0fb      	beq.n	8004d32 <HAL_SD_Init+0x28a>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8004d3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d3c:	075f      	lsls	r7, r3, #29
 8004d3e:	d503      	bpl.n	8004d48 <HAL_SD_Init+0x2a0>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004d40:	2304      	movs	r3, #4
 8004d42:	6383      	str	r3, [r0, #56]	; 0x38
    
    return errorstate;
 8004d44:	2503      	movs	r5, #3
 8004d46:	e04e      	b.n	8004de6 <HAL_SD_Init+0x33e>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8004d48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d4a:	f013 0701 	ands.w	r7, r3, #1
 8004d4e:	d002      	beq.n	8004d56 <HAL_SD_Init+0x2ae>
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004d50:	2501      	movs	r5, #1
 8004d52:	6385      	str	r5, [r0, #56]	; 0x38
 8004d54:	e047      	b.n	8004de6 <HAL_SD_Init+0x33e>
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8004d56:	f7fe ff41 	bl	8003bdc <SDIO_GetCommandResponse>
 8004d5a:	2803      	cmp	r0, #3
 8004d5c:	d17f      	bne.n	8004e5e <HAL_SD_Init+0x3b6>
    
    return errorstate;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8004d66:	4638      	mov	r0, r7
 8004d68:	f7fe ff3c 	bl	8003be4 <SDIO_GetResponse>
  
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8004d6c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8004d70:	d10c      	bne.n	8004d8c <HAL_SD_Init+0x2e4>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004d72:	0c00      	lsrs	r0, r0, #16
 8004d74:	e011      	b.n	8004d9a <HAL_SD_Init+0x2f2>
 8004d76:	bf00      	nop
 8004d78:	422580a0 	.word	0x422580a0
 8004d7c:	0802472f 	.word	0x0802472f
 8004d80:	08024744 	.word	0x08024744
 8004d84:	08024759 	.word	0x08024759
 8004d88:	0802476f 	.word	0x0802476f
    
    return errorstate;
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8004d8c:	0481      	lsls	r1, r0, #18
 8004d8e:	d468      	bmi.n	8004e62 <HAL_SD_Init+0x3ba>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }
  
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8004d90:	0442      	lsls	r2, r0, #17
 8004d92:	d464      	bmi.n	8004e5e <HAL_SD_Init+0x3b6>
  {
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8004d94:	0403      	lsls	r3, r0, #16
 8004d96:	d466      	bmi.n	8004e66 <HAL_SD_Init+0x3be>
  */
static HAL_SD_ErrorTypedef SD_Initialize_Cards(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint16_t sd_rca = 1;
 8004d98:	2001      	movs	r0, #1
    {
      return errorstate;
    }
  }
  
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8004d9a:	6a23      	ldr	r3, [r4, #32]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d022      	beq.n	8004de6 <HAL_SD_Init+0x33e>
  {
    /* Get the SD card RCA */
    hsd->RCA = sd_rca;
 8004da0:	6260      	str	r0, [r4, #36]	; 0x24
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8004da2:	2309      	movs	r3, #9
  {
    /* Get the SD card RCA */
    hsd->RCA = sd_rca;
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8004da4:	0400      	lsls	r0, r0, #16
 8004da6:	9005      	str	r0, [sp, #20]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8004da8:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004daa:	a905      	add	r1, sp, #20
    hsd->RCA = sd_rca;
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8004dac:	23c0      	movs	r3, #192	; 0xc0
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004dae:	6820      	ldr	r0, [r4, #0]
    hsd->RCA = sd_rca;
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8004db0:	9307      	str	r3, [sp, #28]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004db2:	f7fe fed3 	bl	8003b5c <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 8004db6:	4620      	mov	r0, r4
 8004db8:	f7ff fb80 	bl	80044bc <SD_CmdResp2Error>
    
    if(errorstate != SD_OK)
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	b990      	cbnz	r0, 8004de6 <HAL_SD_Init+0x33e>
    {
      return errorstate;
    }
    
    /* Get Card Specific Data */
    hsd->CSD[0] = SDIO_GetResponse(SDIO_RESP1);
 8004dc0:	f7fe ff10 	bl	8003be4 <SDIO_GetResponse>
 8004dc4:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDIO_GetResponse(SDIO_RESP2);
 8004dc6:	2004      	movs	r0, #4
 8004dc8:	f7fe ff0c 	bl	8003be4 <SDIO_GetResponse>
 8004dcc:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDIO_GetResponse(SDIO_RESP3);
 8004dce:	2008      	movs	r0, #8
 8004dd0:	f7fe ff08 	bl	8003be4 <SDIO_GetResponse>
 8004dd4:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDIO_GetResponse(SDIO_RESP4);
 8004dd6:	200c      	movs	r0, #12
 8004dd8:	f7fe ff04 	bl	8003be4 <SDIO_GetResponse>
 8004ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8004dde:	e002      	b.n	8004de6 <HAL_SD_Init+0x33e>
  
  if(SDIO_GetPowerState(hsd->Instance) == 0) /* Power off */
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
    
    return errorstate;
 8004de0:	2525      	movs	r5, #37	; 0x25
 8004de2:	e000      	b.n	8004de6 <HAL_SD_Init+0x33e>
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
    
    if(errorstate != SD_OK)
 8004de4:	4605      	mov	r5, r0
  {
    return errorstate;
  }
  
  /* Initialize the present SDIO card(s) and put them in idle state */
  errorstate = SD_Initialize_Cards(hsd);
 8004de6:	f88d 5012 	strb.w	r5, [sp, #18]
  
  if (errorstate != SD_OK)
 8004dea:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004dee:	bb5b      	cbnz	r3, 8004e48 <HAL_SD_Init+0x3a0>
  {
    return errorstate;
  }
  
  /* Read CSD/CID MSD registers */
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 8004df0:	4620      	mov	r0, r4
 8004df2:	4631      	mov	r1, r6
 8004df4:	f7ff fd10 	bl	8004818 <HAL_SD_Get_CardInfo>
 8004df8:	f88d 0012 	strb.w	r0, [sp, #18]
  
  if (errorstate == SD_OK)
 8004dfc:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004e00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e04:	b9ab      	cbnz	r3, 8004e32 <HAL_SD_Init+0x38a>
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8004e06:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e0a:	6820      	ldr	r0, [r4, #0]
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004e0c:	9208      	str	r2, [sp, #32]
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
  
  if (errorstate == SD_OK)
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8004e0e:	041b      	lsls	r3, r3, #16
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
 8004e10:	9305      	str	r3, [sp, #20]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004e12:	2340      	movs	r3, #64	; 0x40
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8004e14:	2507      	movs	r5, #7
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004e16:	9307      	str	r3, [sp, #28]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e18:	a905      	add	r1, sp, #20
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1e:	9309      	str	r3, [sp, #36]	; 0x24
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8004e20:	9506      	str	r5, [sp, #24]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e22:	f7fe fe9b 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8004e26:	4620      	mov	r0, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	f7ff fbff 	bl	800462c <SD_CmdResp1Error>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
  
  if (errorstate == SD_OK)
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8004e2e:	f88d 0012 	strb.w	r0, [sp, #18]
  }
  
  /* Configure SDIO peripheral interface */
  SDIO_Init(hsd->Instance, hsd->Init);   
 8004e32:	f104 0310 	add.w	r3, r4, #16
 8004e36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e3a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004e3e:	1d23      	adds	r3, r4, #4
 8004e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	f7fe fe20 	bl	8003a88 <SDIO_Init>
  
  return errorstate;
 8004e48:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8004e4c:	b2c0      	uxtb	r0, r0
}
 8004e4e:	b010      	add	sp, #64	; 0x40
 8004e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorstate = SD_CMD_RSP_TIMEOUT;
    return errorstate;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e54:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8004e58:	6393      	str	r3, [r2, #56]	; 0x38
  
  return errorstate;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e665      	b.n	8004b2a <HAL_SD_Init+0x82>
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
  {
    errorstate = SD_ILLEGAL_CMD;
    
    return errorstate;
 8004e5e:	2510      	movs	r5, #16
 8004e60:	e7c1      	b.n	8004de6 <HAL_SD_Init+0x33e>
    return errorstate;
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8004e62:	2513      	movs	r5, #19
 8004e64:	e7bf      	b.n	8004de6 <HAL_SD_Init+0x33e>
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 8004e66:	250f      	movs	r5, #15
 8004e68:	e7bd      	b.n	8004de6 <HAL_SD_Init+0x33e>
 8004e6a:	bf00      	nop

08004e6c <HAL_SD_WideBusOperation_Config>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  SDIO_InitTypeDef tmpinit;
  
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
 8004e6e:	6a03      	ldr	r3, [r0, #32]
 8004e70:	2b03      	cmp	r3, #3
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004e72:	b08d      	sub	sp, #52	; 0x34
 8004e74:	4605      	mov	r5, r0
 8004e76:	460e      	mov	r6, r1
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  SDIO_InitTypeDef tmpinit;
  
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
 8004e78:	f000 8084 	beq.w	8004f84 <HAL_SD_WideBusOperation_Config+0x118>
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
    
    return errorstate;
  }
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f200 8083 	bhi.w	8004f88 <HAL_SD_WideBusOperation_Config+0x11c>
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    if (WideMode == SDIO_BUS_WIDE_8B)
 8004e82:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004e86:	f000 8081 	beq.w	8004f8c <HAL_SD_WideBusOperation_Config+0x120>
    {
      errorstate = SD_UNSUPPORTED_FEATURE;
    }
    else if (WideMode == SDIO_BUS_WIDE_4B)
 8004e8a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004e8e:	d129      	bne.n	8004ee4 <HAL_SD_WideBusOperation_Config+0x78>
static HAL_SD_ErrorTypedef SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  uint32_t scr[2] = {0, 0};
 8004e90:	2000      	movs	r0, #0
 8004e92:	9004      	str	r0, [sp, #16]
 8004e94:	9005      	str	r0, [sp, #20]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8004e96:	f7fe fea5 	bl	8003be4 <SDIO_GetResponse>
 8004e9a:	0180      	lsls	r0, r0, #6
 8004e9c:	d46e      	bmi.n	8004f7c <HAL_SD_WideBusOperation_Config+0x110>
    
    return errorstate;
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	a904      	add	r1, sp, #16
 8004ea2:	f7ff fc39 	bl	8004718 <SD_FindSCR>
  
  if(errorstate != SD_OK)
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d172      	bne.n	8004f92 <HAL_SD_WideBusOperation_Config+0x126>
  {
    return errorstate;
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8004eac:	9b05      	ldr	r3, [sp, #20]
 8004eae:	0359      	lsls	r1, r3, #13
 8004eb0:	d566      	bpl.n	8004f80 <HAL_SD_WideBusOperation_Config+0x114>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8004eb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004eb4:	9009      	str	r0, [sp, #36]	; 0x24
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8004eb6:	041b      	lsls	r3, r3, #16
 8004eb8:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004eba:	2340      	movs	r3, #64	; 0x40
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004ebc:	2737      	movs	r7, #55	; 0x37
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004ebe:	9308      	str	r3, [sp, #32]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004ec0:	a906      	add	r1, sp, #24
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004ec6:	6828      	ldr	r0, [r5, #0]
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004ec8:	930a      	str	r3, [sp, #40]	; 0x28
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004eca:	9707      	str	r7, [sp, #28]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004ecc:	f7fe fe46 	bl	8003b5c <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	f7ff fbaa 	bl	800462c <SD_CmdResp1Error>
    
    if(errorstate != SD_OK)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d159      	bne.n	8004f92 <HAL_SD_WideBusOperation_Config+0x126>
    {
      return errorstate;
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    sdio_cmdinitstructure.Argument         = 2;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	9306      	str	r3, [sp, #24]
 8004ee2:	e029      	b.n	8004f38 <HAL_SD_WideBusOperation_Config+0xcc>
    }
    else if (WideMode == SDIO_BUS_WIDE_4B)
    {
      errorstate = SD_WideBus_Enable(hsd);
    }
    else if (WideMode == SDIO_BUS_WIDE_1B)
 8004ee4:	2900      	cmp	r1, #0
 8004ee6:	d153      	bne.n	8004f90 <HAL_SD_WideBusOperation_Config+0x124>
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  uint32_t scr[2] = {0, 0};
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8004ee8:	4608      	mov	r0, r1
static HAL_SD_ErrorTypedef SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  uint32_t scr[2] = {0, 0};
 8004eea:	9104      	str	r1, [sp, #16]
 8004eec:	9105      	str	r1, [sp, #20]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8004eee:	f7fe fe79 	bl	8003be4 <SDIO_GetResponse>
 8004ef2:	0182      	lsls	r2, r0, #6
 8004ef4:	d442      	bmi.n	8004f7c <HAL_SD_WideBusOperation_Config+0x110>
    
    return errorstate;
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	a904      	add	r1, sp, #16
 8004efa:	f7ff fc0d 	bl	8004718 <SD_FindSCR>
  
  if(errorstate != SD_OK)
 8004efe:	4604      	mov	r4, r0
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d146      	bne.n	8004f92 <HAL_SD_WideBusOperation_Config+0x126>
  {
    return errorstate;
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8004f04:	9b05      	ldr	r3, [sp, #20]
 8004f06:	03db      	lsls	r3, r3, #15
 8004f08:	d53a      	bpl.n	8004f80 <HAL_SD_WideBusOperation_Config+0x114>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8004f0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004f0c:	9009      	str	r0, [sp, #36]	; 0x24
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004f12:	2340      	movs	r3, #64	; 0x40
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004f14:	2737      	movs	r7, #55	; 0x37
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004f16:	9308      	str	r3, [sp, #32]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004f18:	a906      	add	r1, sp, #24
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004f1e:	6828      	ldr	r0, [r5, #0]
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004f20:	930a      	str	r3, [sp, #40]	; 0x28
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004f22:	9707      	str	r7, [sp, #28]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004f24:	f7fe fe1a 	bl	8003b5c <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004f28:	4628      	mov	r0, r5
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7ff fb7e 	bl	800462c <SD_CmdResp1Error>
    
    if(errorstate != SD_OK)
 8004f30:	4604      	mov	r4, r0
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d12d      	bne.n	8004f92 <HAL_SD_WideBusOperation_Config+0x126>
    {
      return errorstate;
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    sdio_cmdinitstructure.Argument         = 0;
 8004f36:	9006      	str	r0, [sp, #24]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8004f38:	2406      	movs	r4, #6
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004f3a:	a906      	add	r1, sp, #24
 8004f3c:	6828      	ldr	r0, [r5, #0]
      return errorstate;
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    sdio_cmdinitstructure.Argument         = 0;
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8004f3e:	9407      	str	r4, [sp, #28]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004f40:	f7fe fe0c 	bl	8003b5c <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7ff fb70 	bl	800462c <SD_CmdResp1Error>
 8004f4c:	4604      	mov	r4, r0
    {
      /* WideMode is not a valid argument*/
      errorstate = SD_INVALID_PARAMETER;
    }
      
    if (errorstate == SD_OK)
 8004f4e:	bb00      	cbnz	r0, 8004f92 <HAL_SD_WideBusOperation_Config+0x126>
    {
      /* Configure the SDIO peripheral */
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 8004f50:	686b      	ldr	r3, [r5, #4]
 8004f52:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 8004f54:	68ab      	ldr	r3, [r5, #8]
 8004f56:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004f58:	68eb      	ldr	r3, [r5, #12]
 8004f5a:	9308      	str	r3, [sp, #32]
      tmpinit.BusWide             = WideMode;
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004f5c:	696b      	ldr	r3, [r5, #20]
 8004f5e:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 8004f60:	69ab      	ldr	r3, [r5, #24]
 8004f62:	930b      	str	r3, [sp, #44]	; 0x2c
    {
      /* Configure the SDIO peripheral */
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
      tmpinit.BusWide             = WideMode;
 8004f64:	9609      	str	r6, [sp, #36]	; 0x24
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
      SDIO_Init(hsd->Instance, tmpinit);
 8004f66:	ab0c      	add	r3, sp, #48	; 0x30
 8004f68:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004f6c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004f70:	ab06      	add	r3, sp, #24
 8004f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f74:	6828      	ldr	r0, [r5, #0]
 8004f76:	f7fe fd87 	bl	8003a88 <SDIO_Init>
 8004f7a:	e00a      	b.n	8004f92 <HAL_SD_WideBusOperation_Config+0x126>
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
    
    return errorstate;
 8004f7c:	240e      	movs	r4, #14
 8004f7e:	e008      	b.n	8004f92 <HAL_SD_WideBusOperation_Config+0x126>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
    
    return errorstate;
 8004f80:	2425      	movs	r4, #37	; 0x25
 8004f82:	e006      	b.n	8004f92 <HAL_SD_WideBusOperation_Config+0x126>
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
    
    return errorstate;
 8004f84:	2027      	movs	r0, #39	; 0x27
 8004f86:	e005      	b.n	8004f94 <HAL_SD_WideBusOperation_Config+0x128>
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e003      	b.n	8004f94 <HAL_SD_WideBusOperation_Config+0x128>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    if (WideMode == SDIO_BUS_WIDE_8B)
    {
      errorstate = SD_UNSUPPORTED_FEATURE;
 8004f8c:	2427      	movs	r4, #39	; 0x27
 8004f8e:	e000      	b.n	8004f92 <HAL_SD_WideBusOperation_Config+0x126>
      errorstate = SD_WideBus_Disable(hsd);
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = SD_INVALID_PARAMETER;
 8004f90:	2426      	movs	r4, #38	; 0x26
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
    
    return errorstate;
 8004f92:	4620      	mov	r0, r4
      SDIO_Init(hsd->Instance, tmpinit);
    }
  }
  
  return errorstate;
}
 8004f94:	b00d      	add	sp, #52	; 0x34
 8004f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f98 <HAL_SD_StopTransfer>:
  * @brief  Aborts an ongoing data transfer.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_StopTransfer(SD_HandleTypeDef *hsd)
{
 8004f98:	b530      	push	{r4, r5, lr}
 8004f9a:	b087      	sub	sp, #28
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
 8004f9c:	2300      	movs	r3, #0
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004f9e:	2240      	movs	r2, #64	; 0x40
  * @brief  Aborts an ongoing data transfer.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_StopTransfer(SD_HandleTypeDef *hsd)
{
 8004fa0:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
 8004fa2:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8004fa4:	240c      	movs	r4, #12
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004fa6:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004fa8:	a901      	add	r1, sp, #4
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004fae:	6800      	ldr	r0, [r0, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004fb0:	9203      	str	r2, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004fb2:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8004fb4:	9402      	str	r4, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004fb6:	f7fe fdd1 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8004fba:	4628      	mov	r0, r5
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	f7ff fb35 	bl	800462c <SD_CmdResp1Error>
  
  return errorstate;
}
 8004fc2:	b007      	add	sp, #28
 8004fc4:	bd30      	pop	{r4, r5, pc}

08004fc6 <HAL_SD_ReadBlocks>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004fc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fca:	4604      	mov	r4, r0
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t count = 0, *tempbuff = (uint32_t *)pReadBuffer;
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 8004fcc:	6800      	ldr	r0, [r0, #0]
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004fce:	4617      	mov	r7, r2
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t count = 0, *tempbuff = (uint32_t *)pReadBuffer;
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	62c2      	str	r2, [r0, #44]	; 0x2c
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8004fd4:	6a22      	ldr	r2, [r4, #32]
 8004fd6:	2a02      	cmp	r2, #2
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004fd8:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
    ReadAddr /= 512;
 8004fda:	bf04      	itt	eq
 8004fdc:	0a7f      	lsreq	r7, r7, #9
 8004fde:	ea47 57c3 	orreq.w	r7, r7, r3, lsl #23
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004fe2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004fe6:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004fe8:	f04f 0300 	mov.w	r3, #0
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004fec:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff0:	9304      	str	r3, [sp, #16]
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
 8004ff2:	bf08      	it	eq
 8004ff4:	f44f 7800 	moveq.w	r8, #512	; 0x200
    ReadAddr /= 512;
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004ff8:	2610      	movs	r6, #16
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004ffe:	460d      	mov	r5, r1
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005000:	a901      	add	r1, sp, #4
    ReadAddr /= 512;
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005002:	9602      	str	r6, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8005004:	9305      	str	r3, [sp, #20]
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8005006:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    BlockSize = 512;
    ReadAddr /= 512;
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
 800500a:	f8cd 8004 	str.w	r8, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800500e:	f7fe fda5 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005012:	4631      	mov	r1, r6
 8005014:	4620      	mov	r0, r4
 8005016:	f7ff fb09 	bl	800462c <SD_CmdResp1Error>
  
  if (errorstate != SD_OK)
 800501a:	4606      	mov	r6, r0
 800501c:	2800      	cmp	r0, #0
 800501e:	f040 808f 	bne.w	8005140 <HAL_SD_ReadBlocks+0x17a>
  {
    return errorstate;
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005022:	f04f 33ff 	mov.w	r3, #4294967295
 8005026:	9306      	str	r3, [sp, #24]
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8005028:	fb09 f308 	mul.w	r3, r9, r8
 800502c:	9307      	str	r3, [sp, #28]
  sdio_datainitstructure.DataBlockSize = DATA_BLOCK_SIZE;
 800502e:	2390      	movs	r3, #144	; 0x90
 8005030:	9308      	str	r3, [sp, #32]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005032:	2302      	movs	r3, #2
 8005034:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005036:	900a      	str	r0, [sp, #40]	; 0x28
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8005038:	2301      	movs	r3, #1
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 800503a:	a906      	add	r1, sp, #24
 800503c:	6820      	ldr	r0, [r4, #0]
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
  sdio_datainitstructure.DataBlockSize = DATA_BLOCK_SIZE;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 800503e:	930b      	str	r3, [sp, #44]	; 0x2c
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8005040:	f7fe fde8 	bl	8003c14 <SDIO_DataConfig>
  
  if(NumberOfBlocks > 1)
 8005044:	f1b9 0f01 	cmp.w	r9, #1
  {
    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8005048:	bf8c      	ite	hi
 800504a:	2312      	movhi	r3, #18
  }
  else
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;    
 800504c:	2311      	movls	r3, #17
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800504e:	6820      	ldr	r0, [r4, #0]
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
  }
  else
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;    
 8005050:	9302      	str	r3, [sp, #8]
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005052:	a901      	add	r1, sp, #4
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;    
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8005054:	9701      	str	r7, [sp, #4]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005056:	f7fe fd81 	bl	8003b5c <SDIO_SendCommand>
  
  /* Read block(s) in polling mode */
  if(NumberOfBlocks > 1)
 800505a:	f1b9 0f01 	cmp.w	r9, #1
  {
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 800505e:	4620      	mov	r0, r4
  
  sdio_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
  
  /* Read block(s) in polling mode */
  if(NumberOfBlocks > 1)
 8005060:	d919      	bls.n	8005096 <HAL_SD_ReadBlocks+0xd0>
  {
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8005062:	2112      	movs	r1, #18
 8005064:	f7ff fae2 	bl	800462c <SD_CmdResp1Error>
    
    if (errorstate != SD_OK)
 8005068:	2800      	cmp	r0, #0
 800506a:	d16a      	bne.n	8005142 <HAL_SD_ReadBlocks+0x17c>
    {
      return errorstate;
    }
    
    /* Poll on SDIO flags */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005070:	f240 332a 	movw	r3, #810	; 0x32a
 8005074:	400b      	ands	r3, r1
 8005076:	bb43      	cbnz	r3, 80050ca <HAL_SD_ReadBlocks+0x104>
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8005078:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800507a:	0418      	lsls	r0, r3, #16
 800507c:	d5f7      	bpl.n	800506e <HAL_SD_ReadBlocks+0xa8>
 800507e:	1f2f      	subs	r7, r5, #4
 8005080:	f105 081c 	add.w	r8, r5, #28
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0; count < 8; count++)
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8005084:	6820      	ldr	r0, [r4, #0]
 8005086:	f7fe fd59 	bl	8003b3c <SDIO_ReadFIFO>
 800508a:	f847 0f04 	str.w	r0, [r7, #4]!
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0; count < 8; count++)
 800508e:	4547      	cmp	r7, r8
 8005090:	d1f8      	bne.n	8005084 <HAL_SD_ReadBlocks+0xbe>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
        }
        
        tempbuff += 8;
 8005092:	3520      	adds	r5, #32
 8005094:	e7ea      	b.n	800506c <HAL_SD_ReadBlocks+0xa6>
    }      
  }
  else
  {
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK); 
 8005096:	2111      	movs	r1, #17
 8005098:	f7ff fac8 	bl	800462c <SD_CmdResp1Error>
    
    if (errorstate != SD_OK)
 800509c:	2800      	cmp	r0, #0
 800509e:	d150      	bne.n	8005142 <HAL_SD_ReadBlocks+0x17c>
    {
      return errorstate;
    }    
    
    /* In case of single block transfer, no need of stop transfer at all */
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80050a4:	f240 632a 	movw	r3, #1578	; 0x62a
 80050a8:	400b      	ands	r3, r1
 80050aa:	b973      	cbnz	r3, 80050ca <HAL_SD_ReadBlocks+0x104>
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 80050ac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80050ae:	0419      	lsls	r1, r3, #16
 80050b0:	d5f7      	bpl.n	80050a2 <HAL_SD_ReadBlocks+0xdc>
 80050b2:	1f2f      	subs	r7, r5, #4
 80050b4:	f105 081c 	add.w	r8, r5, #28
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0; count < 8; count++)
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 80050b8:	6820      	ldr	r0, [r4, #0]
 80050ba:	f7fe fd3f 	bl	8003b3c <SDIO_ReadFIFO>
 80050be:	f847 0f04 	str.w	r0, [r7, #4]!
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
      {
        /* Read data from SDIO Rx FIFO */
        for (count = 0; count < 8; count++)
 80050c2:	4547      	cmp	r7, r8
 80050c4:	d1f8      	bne.n	80050b8 <HAL_SD_ReadBlocks+0xf2>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
        }
        
        tempbuff += 8;
 80050c6:	3520      	adds	r5, #32
 80050c8:	e7ea      	b.n	80050a0 <HAL_SD_ReadBlocks+0xda>
      }
    }
  }
  
  /* Send stop transmission command in case of multiblock read */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1))
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ce:	05db      	lsls	r3, r3, #23
 80050d0:	d509      	bpl.n	80050e6 <HAL_SD_ReadBlocks+0x120>
 80050d2:	f1b9 0f01 	cmp.w	r9, #1
 80050d6:	d906      	bls.n	80050e6 <HAL_SD_ReadBlocks+0x120>
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
 80050d8:	6a23      	ldr	r3, [r4, #32]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d803      	bhi.n	80050e6 <HAL_SD_ReadBlocks+0x120>
      (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
        (hsd->CardType == HIGH_CAPACITY_SD_CARD))
    {
      /* Send stop transmission command */
      errorstate = HAL_SD_StopTransfer(hsd);
 80050de:	4620      	mov	r0, r4
 80050e0:	f7ff ff5a 	bl	8004f98 <HAL_SD_StopTransfer>
 80050e4:	4606      	mov	r6, r0
    }
  }
  
  /* Get error state */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	0717      	lsls	r7, r2, #28
 80050ec:	d503      	bpl.n	80050f6 <HAL_SD_ReadBlocks+0x130>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80050ee:	2208      	movs	r2, #8
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 80050f2:	2004      	movs	r0, #4
 80050f4:	e025      	b.n	8005142 <HAL_SD_ReadBlocks+0x17c>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80050f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f8:	0790      	lsls	r0, r2, #30
 80050fa:	d502      	bpl.n	8005102 <HAL_SD_ReadBlocks+0x13c>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80050fc:	2002      	movs	r0, #2
 80050fe:	6398      	str	r0, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
    
    return errorstate;
 8005100:	e01f      	b.n	8005142 <HAL_SD_ReadBlocks+0x17c>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005104:	0691      	lsls	r1, r2, #26
 8005106:	d503      	bpl.n	8005110 <HAL_SD_ReadBlocks+0x14a>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005108:	2220      	movs	r2, #32
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
    
    return errorstate;
 800510c:	2006      	movs	r0, #6
 800510e:	e018      	b.n	8005142 <HAL_SD_ReadBlocks+0x17c>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8005110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005112:	0592      	lsls	r2, r2, #22
 8005114:	d402      	bmi.n	800511c <HAL_SD_ReadBlocks+0x156>
 8005116:	f04f 37ff 	mov.w	r7, #4294967295
 800511a:	e00a      	b.n	8005132 <HAL_SD_ReadBlocks+0x16c>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 800511c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
    
    return errorstate;
 8005122:	2007      	movs	r0, #7
 8005124:	e00d      	b.n	8005142 <HAL_SD_ReadBlocks+0x17c>
  }
  
  count = SD_DATATIMEOUT;
  
  /* Empty FIFO if there is still any data */
  while ((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (count > 0))
 8005126:	b147      	cbz	r7, 800513a <HAL_SD_ReadBlocks+0x174>
  {
    *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8005128:	f7fe fd08 	bl	8003b3c <SDIO_ReadFIFO>
 800512c:	f845 0b04 	str.w	r0, [r5], #4
    tempbuff++;
    count--;
 8005130:	3f01      	subs	r7, #1
  }
  
  count = SD_DATATIMEOUT;
  
  /* Empty FIFO if there is still any data */
  while ((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (count > 0))
 8005132:	6820      	ldr	r0, [r4, #0]
 8005134:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005136:	029b      	lsls	r3, r3, #10
 8005138:	d4f5      	bmi.n	8005126 <HAL_SD_ReadBlocks+0x160>
    tempbuff++;
    count--;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800513a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800513e:	6383      	str	r3, [r0, #56]	; 0x38
 8005140:	4630      	mov	r0, r6
  
  return errorstate;
}
 8005142:	b00d      	add	sp, #52	; 0x34
 8005144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005148 <HAL_SD_WriteBlocks>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to write 
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8005148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	4605      	mov	r5, r0
 800514e:	b08c      	sub	sp, #48	; 0x30
  uint32_t totalnumberofbytes = 0, bytestransferred = 0, count = 0, restwords = 0;
  uint32_t *tempbuff = (uint32_t *)pWriteBuffer;
  uint8_t cardstate  = 0;
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 8005150:	6800      	ldr	r0, [r0, #0]
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to write 
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8005152:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005156:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8005158:	4614      	mov	r4, r2
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t totalnumberofbytes = 0, bytestransferred = 0, count = 0, restwords = 0;
  uint32_t *tempbuff = (uint32_t *)pWriteBuffer;
  uint8_t cardstate  = 0;
 800515a:	2200      	movs	r2, #0
 800515c:	f88d 2003 	strb.w	r2, [sp, #3]
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 8005160:	62c2      	str	r2, [r0, #44]	; 0x2c
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005162:	6a2a      	ldr	r2, [r5, #32]
 8005164:	2a02      	cmp	r2, #2
  {
    BlockSize = 512;
    WriteAddr /= 512;
 8005166:	bf04      	itt	eq
 8005168:	0a64      	lsreq	r4, r4, #9
 800516a:	ea44 54c3 	orreq.w	r4, r4, r3, lsl #23
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800516e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005172:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8005174:	f04f 0300 	mov.w	r3, #0
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
 8005178:	bf08      	it	eq
 800517a:	f44f 7800 	moveq.w	r8, #512	; 0x200
    WriteAddr /= 512;
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800517e:	f04f 0910 	mov.w	r9, #16
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8005182:	9304      	str	r3, [sp, #16]
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of SD blocks to write 
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8005184:	460e      	mov	r6, r1
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8005186:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800518a:	a901      	add	r1, sp, #4
    BlockSize = 512;
    WriteAddr /= 512;
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 800518c:	f8cd 8004 	str.w	r8, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005190:	f8cd 9008 	str.w	r9, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8005194:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005196:	f7fe fce1 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800519a:	4628      	mov	r0, r5
 800519c:	4649      	mov	r1, r9
 800519e:	f7ff fa45 	bl	800462c <SD_CmdResp1Error>
  
  if (errorstate != SD_OK)
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f040 80c3 	bne.w	800532e <HAL_SD_WriteBlocks+0x1e6>
  {
    return errorstate;
  }
  
  if(NumberOfBlocks > 1)
 80051a8:	2f01      	cmp	r7, #1
  {
    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 80051aa:	bf8c      	ite	hi
 80051ac:	2319      	movhi	r3, #25
  }
  else
  {
    /* Send CMD24 WRITE_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 80051ae:	2318      	movls	r3, #24
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80051b0:	a901      	add	r1, sp, #4
 80051b2:	6828      	ldr	r0, [r5, #0]
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
  }
  else
  {
    /* Send CMD24 WRITE_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 80051b4:	9302      	str	r3, [sp, #8]
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 80051b6:	9401      	str	r4, [sp, #4]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80051b8:	f7fe fcd0 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  if(NumberOfBlocks > 1)
 80051bc:	2f01      	cmp	r7, #1
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 80051be:	4628      	mov	r0, r5
 80051c0:	bf8c      	ite	hi
 80051c2:	2119      	movhi	r1, #25
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 80051c4:	2118      	movls	r1, #24
 80051c6:	f7ff fa31 	bl	800462c <SD_CmdResp1Error>
 80051ca:	4604      	mov	r4, r0
  }  
  
  if (errorstate != SD_OK)
 80051cc:	2800      	cmp	r0, #0
 80051ce:	f040 80ae 	bne.w	800532e <HAL_SD_WriteBlocks+0x1e6>
  
  /* Set total number of bytes to write */
  totalnumberofbytes = NumberOfBlocks * BlockSize;
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295
 80051d6:	9306      	str	r3, [sp, #24]
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80051d8:	2390      	movs	r3, #144	; 0x90
 80051da:	9308      	str	r3, [sp, #32]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80051dc:	9009      	str	r0, [sp, #36]	; 0x24
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80051de:	900a      	str	r0, [sp, #40]	; 0x28
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 80051e0:	2301      	movs	r3, #1
  {
    return errorstate;
  }
  
  /* Set total number of bytes to write */
  totalnumberofbytes = NumberOfBlocks * BlockSize;
 80051e2:	fb07 f808 	mul.w	r8, r7, r8
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 80051e6:	6828      	ldr	r0, [r5, #0]
  /* Set total number of bytes to write */
  totalnumberofbytes = NumberOfBlocks * BlockSize;
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 80051e8:	f8cd 801c 	str.w	r8, [sp, #28]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 80051ec:	a906      	add	r1, sp, #24
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 80051ee:	930b      	str	r3, [sp, #44]	; 0x2c
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 80051f0:	f7fe fd10 	bl	8003c14 <SDIO_DataConfig>
  
  /* Write block(s) in polling mode */
  if(NumberOfBlocks > 1)
 80051f4:	2f01      	cmp	r7, #1
 80051f6:	d940      	bls.n	800527a <HAL_SD_WriteBlocks+0x132>
  {
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051fc:	f240 321a 	movw	r2, #794	; 0x31a
 8005200:	400a      	ands	r2, r1
 8005202:	bb9a      	cbnz	r2, 800526c <HAL_SD_WriteBlocks+0x124>
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8005204:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005206:	0449      	lsls	r1, r1, #17
 8005208:	d5f7      	bpl.n	80051fa <HAL_SD_WriteBlocks+0xb2>
      {
        if ((totalnumberofbytes - bytestransferred) < 32)
 800520a:	ebc4 0308 	rsb	r3, r4, r8
 800520e:	2b1f      	cmp	r3, #31
 8005210:	d813      	bhi.n	800523a <HAL_SD_WriteBlocks+0xf2>
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 8005212:	f013 0f03 	tst.w	r3, #3
 8005216:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800521a:	bf18      	it	ne
 800521c:	3301      	addne	r3, #1
 800521e:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8005222:	eb06 0a09 	add.w	sl, r6, r9
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0; count < restwords; count++)
 8005226:	4556      	cmp	r6, sl
 8005228:	d005      	beq.n	8005236 <HAL_SD_WriteBlocks+0xee>
          {
            SDIO_WriteFIFO(hsd->Instance, tempbuff);
 800522a:	4631      	mov	r1, r6
 800522c:	6828      	ldr	r0, [r5, #0]
 800522e:	f7fe fc88 	bl	8003b42 <SDIO_WriteFIFO>
            tempbuff++;
 8005232:	3604      	adds	r6, #4
 8005234:	e7f7      	b.n	8005226 <HAL_SD_WriteBlocks+0xde>
 8005236:	444c      	add	r4, r9
 8005238:	e00d      	b.n	8005256 <HAL_SD_WriteBlocks+0x10e>
 800523a:	4691      	mov	r9, r2
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0; count < 8; count++)
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 800523c:	eb06 0109 	add.w	r1, r6, r9
 8005240:	6828      	ldr	r0, [r5, #0]
 8005242:	f109 0904 	add.w	r9, r9, #4
 8005246:	f7fe fc7c 	bl	8003b42 <SDIO_WriteFIFO>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0; count < 8; count++)
 800524a:	f1b9 0f20 	cmp.w	r9, #32
 800524e:	d1f5      	bne.n	800523c <HAL_SD_WriteBlocks+0xf4>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
          }
          
          tempbuff += 8;
 8005250:	f106 0a20 	add.w	sl, r6, #32
          bytestransferred += 32;
 8005254:	3420      	adds	r4, #32
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
  
  /* Write block(s) in polling mode */
  if(NumberOfBlocks > 1)
 8005256:	4656      	mov	r6, sl
 8005258:	e7ce      	b.n	80051f8 <HAL_SD_WriteBlocks+0xb0>
  else
  {
    /* In case of single data block transfer no need of stop command at all */ 
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 800525a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800525c:	0449      	lsls	r1, r1, #17
 800525e:	d40e      	bmi.n	800527e <HAL_SD_WriteBlocks+0x136>
    }   
  }
  else
  {
    /* In case of single data block transfer no need of stop command at all */ 
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 8005260:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005262:	f240 621a 	movw	r2, #1562	; 0x61a
 8005266:	400a      	ands	r2, r1
 8005268:	2a00      	cmp	r2, #0
 800526a:	d0f6      	beq.n	800525a <HAL_SD_WriteBlocks+0x112>
      }
    }  
  }
  
  /* Send stop transmission command in case of multiblock write */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1))
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005270:	05d8      	lsls	r0, r3, #23
 8005272:	d429      	bmi.n	80052c8 <HAL_SD_WriteBlocks+0x180>
 8005274:	e030      	b.n	80052d8 <HAL_SD_WriteBlocks+0x190>
 8005276:	444c      	add	r4, r9
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
  
  /* Write block(s) in polling mode */
  if(NumberOfBlocks > 1)
 8005278:	4656      	mov	r6, sl
    }   
  }
  else
  {
    /* In case of single data block transfer no need of stop command at all */ 
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 800527a:	682b      	ldr	r3, [r5, #0]
 800527c:	e7f0      	b.n	8005260 <HAL_SD_WriteBlocks+0x118>
    {
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
      {
        if ((totalnumberofbytes - bytestransferred) < 32)
 800527e:	ebc4 0308 	rsb	r3, r4, r8
 8005282:	2b1f      	cmp	r3, #31
 8005284:	d811      	bhi.n	80052aa <HAL_SD_WriteBlocks+0x162>
        {
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 8005286:	f013 0f03 	tst.w	r3, #3
 800528a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800528e:	bf18      	it	ne
 8005290:	3301      	addne	r3, #1
 8005292:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8005296:	eb06 0a09 	add.w	sl, r6, r9
          
          /* Write data to SDIO Tx FIFO */
          for (count = 0; count < restwords; count++)
 800529a:	4556      	cmp	r6, sl
 800529c:	d0eb      	beq.n	8005276 <HAL_SD_WriteBlocks+0x12e>
          {
            SDIO_WriteFIFO(hsd->Instance, tempbuff);
 800529e:	4631      	mov	r1, r6
 80052a0:	6828      	ldr	r0, [r5, #0]
 80052a2:	f7fe fc4e 	bl	8003b42 <SDIO_WriteFIFO>
            tempbuff++; 
 80052a6:	3604      	adds	r6, #4
 80052a8:	e7f7      	b.n	800529a <HAL_SD_WriteBlocks+0x152>
 80052aa:	4691      	mov	r9, r2
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0; count < 8; count++)
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80052ac:	eb06 0109 	add.w	r1, r6, r9
 80052b0:	6828      	ldr	r0, [r5, #0]
 80052b2:	f109 0904 	add.w	r9, r9, #4
 80052b6:	f7fe fc44 	bl	8003b42 <SDIO_WriteFIFO>
          }
        }
        else
        {
          /* Write data to SDIO Tx FIFO */
          for (count = 0; count < 8; count++)
 80052ba:	f1b9 0f20 	cmp.w	r9, #32
 80052be:	d1f5      	bne.n	80052ac <HAL_SD_WriteBlocks+0x164>
          {
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
          }
          
          tempbuff += 8;
 80052c0:	f106 0a20 	add.w	sl, r6, #32
          bytestransferred += 32;
 80052c4:	3420      	adds	r4, #32
 80052c6:	e7d7      	b.n	8005278 <HAL_SD_WriteBlocks+0x130>
      }
    }  
  }
  
  /* Send stop transmission command in case of multiblock write */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1))
 80052c8:	2f01      	cmp	r7, #1
 80052ca:	d905      	bls.n	80052d8 <HAL_SD_WriteBlocks+0x190>
  {    
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80052cc:	6a2b      	ldr	r3, [r5, #32]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d802      	bhi.n	80052d8 <HAL_SD_WriteBlocks+0x190>
      (hsd->CardType == HIGH_CAPACITY_SD_CARD))
    {
      /* Send stop transmission command */
      errorstate = HAL_SD_StopTransfer(hsd);
 80052d2:	4628      	mov	r0, r5
 80052d4:	f7ff fe60 	bl	8004f98 <HAL_SD_StopTransfer>
    }
  }
  
  /* Get error state */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052dc:	0714      	lsls	r4, r2, #28
 80052de:	d503      	bpl.n	80052e8 <HAL_SD_WriteBlocks+0x1a0>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80052e0:	2208      	movs	r2, #8
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 80052e4:	2004      	movs	r0, #4
 80052e6:	e022      	b.n	800532e <HAL_SD_WriteBlocks+0x1e6>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80052e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ea:	0790      	lsls	r0, r2, #30
 80052ec:	d502      	bpl.n	80052f4 <HAL_SD_WriteBlocks+0x1ac>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80052ee:	2002      	movs	r0, #2
 80052f0:	6398      	str	r0, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
    
    return errorstate;
 80052f2:	e01c      	b.n	800532e <HAL_SD_WriteBlocks+0x1e6>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80052f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f6:	06d1      	lsls	r1, r2, #27
 80052f8:	d503      	bpl.n	8005302 <HAL_SD_WriteBlocks+0x1ba>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_TXUNDERR);
 80052fa:	2210      	movs	r2, #16
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_TX_UNDERRUN;
    
    return errorstate;
 80052fe:	2005      	movs	r0, #5
 8005300:	e015      	b.n	800532e <HAL_SD_WriteBlocks+0x1e6>
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8005302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005304:	0592      	lsls	r2, r2, #22
 8005306:	d504      	bpl.n	8005312 <HAL_SD_WriteBlocks+0x1ca>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8005308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
    
    return errorstate;
 800530e:	2007      	movs	r0, #7
 8005310:	e00d      	b.n	800532e <HAL_SD_WriteBlocks+0x1e6>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005312:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005316:	639a      	str	r2, [r3, #56]	; 0x38
  /* Wait till the card is in programming state */
  errorstate = SD_IsCardProgramming(hsd, &cardstate);
  
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
  {
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
 8005318:	4628      	mov	r0, r5
 800531a:	f10d 0103 	add.w	r1, sp, #3
 800531e:	f7ff f8e3 	bl	80044e8 <SD_IsCardProgramming>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  /* Wait till the card is in programming state */
  errorstate = SD_IsCardProgramming(hsd, &cardstate);
  
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8005322:	b920      	cbnz	r0, 800532e <HAL_SD_WriteBlocks+0x1e6>
 8005324:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005328:	3b06      	subs	r3, #6
 800532a:	2b01      	cmp	r3, #1
 800532c:	d9f4      	bls.n	8005318 <HAL_SD_WriteBlocks+0x1d0>
  {
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
  }
  
  return errorstate;
}
 800532e:	b00c      	add	sp, #48	; 0x30
 8005330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005334 <HAL_SD_GetStatus>:
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 8005334:	b530      	push	{r4, r5, lr}
    
    return errorstate;
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005336:	6a43      	ldr	r3, [r0, #36]	; 0x24
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 8005338:	b087      	sub	sp, #28
    
    return errorstate;
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800533e:	2340      	movs	r3, #64	; 0x40
 8005340:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8005342:	2300      	movs	r3, #0
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 8005344:	4604      	mov	r4, r0
    return errorstate;
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8005346:	250d      	movs	r5, #13
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8005348:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800534a:	a901      	add	r1, sp, #4
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800534c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005350:	6800      	ldr	r0, [r0, #0]
    return errorstate;
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8005352:	9502      	str	r5, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8005354:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005356:	f7fe fc01 	bl	8003b5c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f7ff f965 	bl	800462c <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005362:	b938      	cbnz	r0, 8005374 <HAL_SD_GetStatus+0x40>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(SDIO_RESP1);
 8005364:	f7fe fc3e 	bl	8003be4 <SDIO_GetResponse>

  /* Get SD card state */
  cardstate = SD_GetState(hsd);
  
  /* Find SD status according to card state*/
  if (cardstate == SD_CARD_TRANSFER)
 8005368:	f3c0 2043 	ubfx	r0, r0, #9, #4
  {
    return SD_TRANSFER_OK;
 800536c:	3804      	subs	r0, #4
 800536e:	bf18      	it	ne
 8005370:	2001      	movne	r0, #1
 8005372:	e000      	b.n	8005376 <HAL_SD_GetStatus+0x42>
  }
  else if(cardstate == SD_CARD_ERROR)
  {
    return SD_TRANSFER_ERROR;
 8005374:	2002      	movs	r0, #2
  }
  else
  {
    return SD_TRANSFER_BUSY;
  }
}
 8005376:	b007      	add	sp, #28
 8005378:	bd30      	pop	{r4, r5, pc}

0800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Flag: specifies the I2C flag to check.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout)
{
 800537a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537e:	460d      	mov	r5, r1
 8005380:	4604      	mov	r4, r0
 8005382:	4616      	mov	r6, r2
  uint32_t tickstart = 0;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005384:	f002 f930 	bl	80075e8 <HAL_GetTick>

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005388:	f3c5 4807 	ubfx	r8, r5, #16, #8
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout)
{
  uint32_t tickstart = 0;

  /* Get tick */
  tickstart = HAL_GetTick();
 800538c:	4607      	mov	r7, r0
 800538e:	6823      	ldr	r3, [r4, #0]

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005390:	f1b8 0f01 	cmp.w	r8, #1
 8005394:	bf0c      	ite	eq
 8005396:	6958      	ldreq	r0, [r3, #20]
 8005398:	6998      	ldrne	r0, [r3, #24]
 800539a:	43c0      	mvns	r0, r0
 800539c:	b280      	uxth	r0, r0
 800539e:	4228      	tst	r0, r5
 80053a0:	bf14      	ite	ne
 80053a2:	2001      	movne	r0, #1
 80053a4:	2000      	moveq	r0, #0
 80053a6:	b328      	cbz	r0, 80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7a>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	0552      	lsls	r2, r2, #21
 80053ac:	d510      	bpl.n	80053d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x56>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ba:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80053bc:	2304      	movs	r3, #4
 80053be:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 80053c0:	2001      	movs	r0, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c2:	2300      	movs	r3, #0

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->State= HAL_I2C_STATE_READY;
 80053c4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      return HAL_ERROR;
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80053d0:	1c73      	adds	r3, r6, #1
 80053d2:	d0dc      	beq.n	800538e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x14>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80053d4:	b946      	cbnz	r6, 80053e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x6e>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053dc:	2300      	movs	r3, #0
 80053de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        return HAL_TIMEOUT;
 80053e2:	2003      	movs	r0, #3
 80053e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80053e8:	f002 f8fe 	bl	80075e8 <HAL_GetTick>
 80053ec:	1bc0      	subs	r0, r0, r7
 80053ee:	42b0      	cmp	r0, r6
 80053f0:	d9cd      	bls.n	800538e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x14>
 80053f2:	e7f0      	b.n	80053d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 80053f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80053f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fc:	460e      	mov	r6, r1
 80053fe:	461d      	mov	r5, r3
 8005400:	4604      	mov	r4, r0
 8005402:	4690      	mov	r8, r2
  uint32_t tickstart = 0;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005404:	f002 f8f0 	bl	80075e8 <HAL_GetTick>
 8005408:	0c33      	lsrs	r3, r6, #16
 800540a:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 800540c:	f1b8 0f00 	cmp.w	r8, #0
 8005410:	d134      	bne.n	800547c <I2C_WaitOnFlagUntilTimeout+0x84>
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005412:	fa5f f883 	uxtb.w	r8, r3
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	f1b8 0f01 	cmp.w	r8, #1
 800541c:	bf0c      	ite	eq
 800541e:	695b      	ldreq	r3, [r3, #20]
 8005420:	699b      	ldrne	r3, [r3, #24]
 8005422:	43db      	mvns	r3, r3
 8005424:	b29b      	uxth	r3, r3
 8005426:	4233      	tst	r3, r6
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b1c3      	cbz	r3, 8005462 <I2C_WaitOnFlagUntilTimeout+0x6a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005430:	1c6a      	adds	r2, r5, #1
 8005432:	d0f0      	beq.n	8005416 <I2C_WaitOnFlagUntilTimeout+0x1e>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005434:	b1cd      	cbz	r5, 800546a <I2C_WaitOnFlagUntilTimeout+0x72>
 8005436:	f002 f8d7 	bl	80075e8 <HAL_GetTick>
 800543a:	1bc0      	subs	r0, r0, r7
 800543c:	42a8      	cmp	r0, r5
 800543e:	d9ea      	bls.n	8005416 <I2C_WaitOnFlagUntilTimeout+0x1e>
 8005440:	e013      	b.n	800546a <I2C_WaitOnFlagUntilTimeout+0x72>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005442:	1c6b      	adds	r3, r5, #1
 8005444:	d110      	bne.n	8005468 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005446:	6823      	ldr	r3, [r4, #0]
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8005448:	f1b8 0f01 	cmp.w	r8, #1
 800544c:	bf0c      	ite	eq
 800544e:	695b      	ldreq	r3, [r3, #20]
 8005450:	699b      	ldrne	r3, [r3, #24]
 8005452:	43db      	mvns	r3, r3
 8005454:	b29b      	uxth	r3, r3
 8005456:	4233      	tst	r3, r6
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ef      	bne.n	8005442 <I2C_WaitOnFlagUntilTimeout+0x4a>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005462:	2000      	movs	r0, #0
 8005464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005468:	b95d      	cbnz	r5, 8005482 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 800546a:	2301      	movs	r3, #1
 800546c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          return HAL_TIMEOUT;
 8005476:	2003      	movs	r0, #3
 8005478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800547c:	fa5f f883 	uxtb.w	r8, r3
 8005480:	e7e1      	b.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x4e>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005482:	f002 f8b1 	bl	80075e8 <HAL_GetTick>
 8005486:	1bc0      	subs	r0, r0, r7
 8005488:	42a8      	cmp	r0, r5
 800548a:	d9dc      	bls.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x4e>
 800548c:	e7ed      	b.n	800546a <I2C_WaitOnFlagUntilTimeout+0x72>
	...

08005490 <I2C_MasterRequestWrite>:
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4616      	mov	r6, r2
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005494:	6802      	ldr	r2, [r0, #0]
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 800549e:	460d      	mov	r5, r1
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80054a0:	2200      	movs	r2, #0
 80054a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054a6:	4633      	mov	r3, r6
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 80054a8:	4604      	mov	r4, r0
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80054aa:	f7ff ffa5 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	bb20      	cbnz	r0, 80054fa <I2C_MasterRequestWrite+0x6a>
  {
    return HAL_TIMEOUT;
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b8:	d103      	bne.n	80054c2 <I2C_MasterRequestWrite+0x32>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ba:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80054be:	6115      	str	r5, [r2, #16]
 80054c0:	e013      	b.n	80054ea <I2C_MasterRequestWrite+0x5a>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054c2:	f405 7340 	and.w	r3, r5, #768	; 0x300
 80054c6:	11db      	asrs	r3, r3, #7
 80054c8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80054cc:	6113      	str	r3, [r2, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 80054ce:	4620      	mov	r0, r4
 80054d0:	490b      	ldr	r1, [pc, #44]	; (8005500 <I2C_MasterRequestWrite+0x70>)
 80054d2:	4632      	mov	r2, r6
 80054d4:	f7ff ff51 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d8:	b120      	cbz	r0, 80054e4 <I2C_MasterRequestWrite+0x54>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d10c      	bne.n	80054fa <I2C_MasterRequestWrite+0x6a>
      {
        return HAL_ERROR;
 80054e0:	2001      	movs	r0, #1
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	b2ed      	uxtb	r5, r5
 80054e8:	611d      	str	r5, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 80054ea:	4620      	mov	r0, r4
 80054ec:	4905      	ldr	r1, [pc, #20]	; (8005504 <I2C_MasterRequestWrite+0x74>)
 80054ee:	4632      	mov	r2, r6
 80054f0:	f7ff ff43 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d1f0      	bne.n	80054da <I2C_MasterRequestWrite+0x4a>
 80054f8:	e000      	b.n	80054fc <I2C_MasterRequestWrite+0x6c>
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 80054fa:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 80054fc:	bd70      	pop	{r4, r5, r6, pc}
 80054fe:	bf00      	nop
 8005500:	00010008 	.word	0x00010008
 8005504:	00010002 	.word	0x00010002

08005508 <I2C_MasterRequestRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005508:	6803      	ldr	r3, [r0, #0]
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 800550a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800550c:	4616      	mov	r6, r2
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005514:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551c:	601a      	str	r2, [r3, #0]
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 800551e:	460d      	mov	r5, r1

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005520:	2200      	movs	r2, #0
 8005522:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005526:	4633      	mov	r3, r6
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8005528:	4604      	mov	r4, r0

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 800552a:	f7ff ff65 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 800552e:	b9d0      	cbnz	r0, 8005566 <I2C_MasterRequestRead+0x5e>
  {
    return HAL_TIMEOUT;
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005538:	d104      	bne.n	8005544 <I2C_MasterRequestRead+0x3c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800553a:	f045 0501 	orr.w	r5, r5, #1
 800553e:	b2ed      	uxtb	r5, r5
 8005540:	6115      	str	r5, [r2, #16]
 8005542:	e033      	b.n	80055ac <I2C_MasterRequestRead+0xa4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005544:	f405 7340 	and.w	r3, r5, #768	; 0x300
 8005548:	09df      	lsrs	r7, r3, #7
 800554a:	f047 03f0 	orr.w	r3, r7, #240	; 0xf0
 800554e:	6113      	str	r3, [r2, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 8005550:	4620      	mov	r0, r4
 8005552:	491b      	ldr	r1, [pc, #108]	; (80055c0 <I2C_MasterRequestRead+0xb8>)
 8005554:	4632      	mov	r2, r6
 8005556:	f7ff ff10 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800555a:	b130      	cbz	r0, 800556a <I2C_MasterRequestRead+0x62>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800555e:	2b04      	cmp	r3, #4
 8005560:	d101      	bne.n	8005566 <I2C_MasterRequestRead+0x5e>
      {
        return HAL_ERROR;
 8005562:	2001      	movs	r0, #1
 8005564:	e029      	b.n	80055ba <I2C_MasterRequestRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8005566:	2003      	movs	r0, #3
 8005568:	e027      	b.n	80055ba <I2C_MasterRequestRead+0xb2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800556a:	6823      	ldr	r3, [r4, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 800556c:	4915      	ldr	r1, [pc, #84]	; (80055c4 <I2C_MasterRequestRead+0xbc>)
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800556e:	b2ed      	uxtb	r5, r5

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005570:	4632      	mov	r2, r6
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005572:	611d      	str	r5, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005574:	4620      	mov	r0, r4
 8005576:	f7ff ff00 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800557a:	4602      	mov	r2, r0
 800557c:	2800      	cmp	r0, #0
 800557e:	d1ed      	bne.n	800555c <I2C_MasterRequestRead+0x54>
        return HAL_TIMEOUT;
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	6959      	ldr	r1, [r3, #20]
 8005584:	9101      	str	r1, [sp, #4]
 8005586:	6999      	ldr	r1, [r3, #24]
 8005588:	9101      	str	r1, [sp, #4]
 800558a:	9901      	ldr	r1, [sp, #4]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005592:	6019      	str	r1, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005594:	4620      	mov	r0, r4
 8005596:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800559a:	4633      	mov	r3, r6
 800559c:	f7ff ff2c 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d1e0      	bne.n	8005566 <I2C_MasterRequestRead+0x5e>
    {
      return HAL_TIMEOUT;
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	f047 03f1 	orr.w	r3, r7, #241	; 0xf1
 80055aa:	6113      	str	r3, [r2, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 80055ac:	4620      	mov	r0, r4
 80055ae:	4905      	ldr	r1, [pc, #20]	; (80055c4 <I2C_MasterRequestRead+0xbc>)
 80055b0:	4632      	mov	r2, r6
 80055b2:	f7ff fee2 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d1d0      	bne.n	800555c <I2C_MasterRequestRead+0x54>
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 80055ba:	b003      	add	sp, #12
 80055bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055be:	bf00      	nop
 80055c0:	00010008 	.word	0x00010008
 80055c4:	00010002 	.word	0x00010002

080055c8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0;
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80055ca:	4604      	mov	r4, r0
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f000 80bb 	beq.w	8005748 <HAL_I2C_Init+0x180>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80055d2:	6803      	ldr	r3, [r0, #0]
 80055d4:	4a5d      	ldr	r2, [pc, #372]	; (800574c <HAL_I2C_Init+0x184>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00c      	beq.n	80055f4 <HAL_I2C_Init+0x2c>
 80055da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055de:	4293      	cmp	r3, r2
 80055e0:	d008      	beq.n	80055f4 <HAL_I2C_Init+0x2c>
 80055e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_I2C_Init+0x2c>
 80055ea:	4859      	ldr	r0, [pc, #356]	; (8005750 <HAL_I2C_Init+0x188>)
 80055ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80055f0:	f7fc f95e 	bl	80018b0 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80055f4:	6863      	ldr	r3, [r4, #4]
 80055f6:	4a57      	ldr	r2, [pc, #348]	; (8005754 <HAL_I2C_Init+0x18c>)
 80055f8:	3b01      	subs	r3, #1
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d904      	bls.n	8005608 <HAL_I2C_Init+0x40>
 80055fe:	4854      	ldr	r0, [pc, #336]	; (8005750 <HAL_I2C_Init+0x188>)
 8005600:	f240 112d 	movw	r1, #301	; 0x12d
 8005604:	f7fc f954 	bl	80018b0 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005608:	68a3      	ldr	r3, [r4, #8]
 800560a:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800560e:	d004      	beq.n	800561a <HAL_I2C_Init+0x52>
 8005610:	484f      	ldr	r0, [pc, #316]	; (8005750 <HAL_I2C_Init+0x188>)
 8005612:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8005616:	f7fc f94b 	bl	80018b0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005620:	f023 0303 	bic.w	r3, r3, #3
 8005624:	b123      	cbz	r3, 8005630 <HAL_I2C_Init+0x68>
 8005626:	484a      	ldr	r0, [pc, #296]	; (8005750 <HAL_I2C_Init+0x188>)
 8005628:	f240 112f 	movw	r1, #303	; 0x12f
 800562c:	f7fc f940 	bl	80018b0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800563a:	d004      	beq.n	8005646 <HAL_I2C_Init+0x7e>
 800563c:	4844      	ldr	r0, [pc, #272]	; (8005750 <HAL_I2C_Init+0x188>)
 800563e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8005642:	f7fc f935 	bl	80018b0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005646:	6963      	ldr	r3, [r4, #20]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d904      	bls.n	8005656 <HAL_I2C_Init+0x8e>
 800564c:	4840      	ldr	r0, [pc, #256]	; (8005750 <HAL_I2C_Init+0x188>)
 800564e:	f240 1131 	movw	r1, #305	; 0x131
 8005652:	f7fc f92d 	bl	80018b0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005656:	69a3      	ldr	r3, [r4, #24]
 8005658:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800565c:	d004      	beq.n	8005668 <HAL_I2C_Init+0xa0>
 800565e:	483c      	ldr	r0, [pc, #240]	; (8005750 <HAL_I2C_Init+0x188>)
 8005660:	f44f 7199 	mov.w	r1, #306	; 0x132
 8005664:	f7fc f924 	bl	80018b0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005668:	69e3      	ldr	r3, [r4, #28]
 800566a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800566e:	d004      	beq.n	800567a <HAL_I2C_Init+0xb2>
 8005670:	4837      	ldr	r0, [pc, #220]	; (8005750 <HAL_I2C_Init+0x188>)
 8005672:	f240 1133 	movw	r1, #307	; 0x133
 8005676:	f7fc f91b 	bl	80018b0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800567a:	6a23      	ldr	r3, [r4, #32]
 800567c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8005680:	d004      	beq.n	800568c <HAL_I2C_Init+0xc4>
 8005682:	4833      	ldr	r0, [pc, #204]	; (8005750 <HAL_I2C_Init+0x188>)
 8005684:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005688:	f7fc f912 	bl	80018b0 <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800568c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005690:	b913      	cbnz	r3, 8005698 <HAL_I2C_Init+0xd0>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005692:	4620      	mov	r0, r4
 8005694:	f7fc faac 	bl	8001bf0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005698:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800569a:	4d2f      	ldr	r5, [pc, #188]	; (8005758 <HAL_I2C_Init+0x190>)
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800569c:	2302      	movs	r3, #2
 800569e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a2:	6813      	ldr	r3, [r2, #0]
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056aa:	f7fe feb9 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80056ae:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80056b0:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056b2:	492a      	ldr	r1, [pc, #168]	; (800575c <HAL_I2C_Init+0x194>)
 80056b4:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	462e      	mov	r6, r5
 80056bc:	bf88      	it	hi
 80056be:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80056c2:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80056c4:	bf82      	ittt	hi
 80056c6:	4369      	mulhi	r1, r5
 80056c8:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80056cc:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80056d0:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80056d2:	f101 0101 	add.w	r1, r1, #1
 80056d6:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80056d8:	d808      	bhi.n	80056ec <HAL_I2C_Init+0x124>
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80056e0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	bf98      	it	ls
 80056e8:	2004      	movls	r0, #4
 80056ea:	e016      	b.n	800571a <HAL_I2C_Init+0x152>
 80056ec:	68a1      	ldr	r1, [r4, #8]
 80056ee:	b949      	cbnz	r1, 8005704 <HAL_I2C_Init+0x13c>
 80056f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80056f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80056f8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80056fc:	b163      	cbz	r3, 8005718 <HAL_I2C_Init+0x150>
 80056fe:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005702:	e00a      	b.n	800571a <HAL_I2C_Init+0x152>
 8005704:	2119      	movs	r1, #25
 8005706:	434b      	muls	r3, r1
 8005708:	fbb0 f0f3 	udiv	r0, r0, r3
 800570c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005710:	b113      	cbz	r3, 8005718 <HAL_I2C_Init+0x150>
 8005712:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8005716:	e000      	b.n	800571a <HAL_I2C_Init+0x152>
 8005718:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800571a:	6a21      	ldr	r1, [r4, #32]
 800571c:	69e3      	ldr	r3, [r4, #28]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800571e:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005720:	430b      	orrs	r3, r1
 8005722:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8005724:	68e1      	ldr	r1, [r4, #12]
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	430b      	orrs	r3, r1
 800572a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800572c:	69a1      	ldr	r1, [r4, #24]
 800572e:	6963      	ldr	r3, [r4, #20]
 8005730:	430b      	orrs	r3, r1
 8005732:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005734:	6813      	ldr	r3, [r2, #0]
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800573e:	2301      	movs	r3, #1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005740:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8005742:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8005746:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8005748:	2001      	movs	r0, #1

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;

  return HAL_OK;
}
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	40005400 	.word	0x40005400
 8005750:	08024784 	.word	0x08024784
 8005754:	00061a7f 	.word	0x00061a7f
 8005758:	000186a0 	.word	0x000186a0
 800575c:	000f4240 	.word	0x000f4240

08005760 <HAL_I2C_Master_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005764:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005768:	b2e4      	uxtb	r4, r4
 800576a:	2c01      	cmp	r4, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	4605      	mov	r5, r0
 800576e:	4617      	mov	r7, r2
 8005770:	461e      	mov	r6, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005772:	d15e      	bne.n	8005832 <HAL_I2C_Master_Transmit+0xd2>
  {
    if((pData == NULL) || (Size == 0))
 8005774:	2a00      	cmp	r2, #0
 8005776:	d05a      	beq.n	800582e <HAL_I2C_Master_Transmit+0xce>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d058      	beq.n	800582e <HAL_I2C_Master_Transmit+0xce>
    {
      return  HAL_ERROR;
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800577c:	6803      	ldr	r3, [r0, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f013 0802 	ands.w	r8, r3, #2
 8005784:	d155      	bne.n	8005832 <HAL_I2C_Master_Transmit+0xd2>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005786:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800578a:	2b01      	cmp	r3, #1
 800578c:	d051      	beq.n	8005832 <HAL_I2C_Master_Transmit+0xd2>

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 800578e:	2312      	movs	r3, #18
 8005790:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005794:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005798:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout) != HAL_OK)
 800579c:	9a08      	ldr	r2, [sp, #32]
 800579e:	f7ff fe77 	bl	8005490 <I2C_MasterRequestWrite>
 80057a2:	b128      	cbz	r0, 80057b0 <HAL_I2C_Master_Transmit+0x50>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a6:	f885 8034 	strb.w	r8, [r5, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d10d      	bne.n	80057ca <HAL_I2C_Master_Transmit+0x6a>
 80057ae:	e03e      	b.n	800582e <HAL_I2C_Master_Transmit+0xce>
        return HAL_TIMEOUT;
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	9201      	str	r2, [sp, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	9b01      	ldr	r3, [sp, #4]

    while(Size > 0)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80057bc:	491f      	ldr	r1, [pc, #124]	; (800583c <HAL_I2C_Master_Transmit+0xdc>)
 80057be:	9b08      	ldr	r3, [sp, #32]
 80057c0:	4628      	mov	r0, r5
 80057c2:	2200      	movs	r2, #0
 80057c4:	f7ff fe18 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 80057c8:	b108      	cbz	r0, 80057ce <HAL_I2C_Master_Transmit+0x6e>
      {
        return HAL_TIMEOUT;
 80057ca:	2003      	movs	r0, #3
 80057cc:	e032      	b.n	8005834 <HAL_I2C_Master_Transmit+0xd4>
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 80057ce:	682a      	ldr	r2, [r5, #0]
 80057d0:	783b      	ldrb	r3, [r7, #0]
 80057d2:	6113      	str	r3, [r2, #16]
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80057d4:	6951      	ldr	r1, [r2, #20]
        return HAL_TIMEOUT;
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
      Size--;
 80057d6:	1e73      	subs	r3, r6, #1

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80057d8:	0749      	lsls	r1, r1, #29
        return HAL_TIMEOUT;
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
      Size--;
 80057da:	b29b      	uxth	r3, r3

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80057dc:	d402      	bmi.n	80057e4 <HAL_I2C_Master_Transmit+0x84>
      {
        return HAL_TIMEOUT;
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 80057de:	3701      	adds	r7, #1
      Size--;
 80057e0:	461e      	mov	r6, r3
 80057e2:	e00e      	b.n	8005802 <HAL_I2C_Master_Transmit+0xa2>

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80057e4:	b943      	cbnz	r3, 80057f8 <HAL_I2C_Master_Transmit+0x98>
        Size--;
      }
    }

    /* Wait until TXE flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80057e6:	4628      	mov	r0, r5
 80057e8:	4914      	ldr	r1, [pc, #80]	; (800583c <HAL_I2C_Master_Transmit+0xdc>)
 80057ea:	9b08      	ldr	r3, [sp, #32]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f7ff fe03 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d1e9      	bne.n	80057ca <HAL_I2C_Master_Transmit+0x6a>
 80057f6:	e007      	b.n	8005808 <HAL_I2C_Master_Transmit+0xa8>
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 80057f8:	787b      	ldrb	r3, [r7, #1]
 80057fa:	6113      	str	r3, [r2, #16]
        Size--;
 80057fc:	3e02      	subs	r6, #2
 80057fe:	b2b6      	uxth	r6, r6
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 8005800:	3702      	adds	r7, #2
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    while(Size > 0)
 8005802:	2e00      	cmp	r6, #0
 8005804:	d1da      	bne.n	80057bc <HAL_I2C_Master_Transmit+0x5c>
 8005806:	e7ee      	b.n	80057e6 <HAL_I2C_Master_Transmit+0x86>
    {
      return HAL_TIMEOUT;
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005808:	682a      	ldr	r2, [r5, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 800580a:	490d      	ldr	r1, [pc, #52]	; (8005840 <HAL_I2C_Master_Transmit+0xe0>)
    {
      return HAL_TIMEOUT;
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800580c:	6813      	ldr	r3, [r2, #0]
 800580e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005812:	6013      	str	r3, [r2, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8005814:	4628      	mov	r0, r5
 8005816:	2201      	movs	r2, #1
 8005818:	9b08      	ldr	r3, [sp, #32]
 800581a:	f7ff fded 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 800581e:	2800      	cmp	r0, #0
 8005820:	d1d3      	bne.n	80057ca <HAL_I2C_Master_Transmit+0x6a>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005822:	2301      	movs	r3, #1
 8005824:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005828:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34

    return HAL_OK;
 800582c:	e002      	b.n	8005834 <HAL_I2C_Master_Transmit+0xd4>
{
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 800582e:	4620      	mov	r0, r4
 8005830:	e000      	b.n	8005834 <HAL_I2C_Master_Transmit+0xd4>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005832:	2002      	movs	r0, #2
  }
}
 8005834:	b002      	add	sp, #8
 8005836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583a:	bf00      	nop
 800583c:	00010080 	.word	0x00010080
 8005840:	00100002 	.word	0x00100002

08005844 <HAL_I2C_Master_Receive>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005844:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005848:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 800584c:	b2ed      	uxtb	r5, r5
 800584e:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005850:	4604      	mov	r4, r0
 8005852:	4617      	mov	r7, r2
 8005854:	461e      	mov	r6, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005856:	f040 80a9 	bne.w	80059ac <HAL_I2C_Master_Receive+0x168>
  {
    if((pData == NULL) || (Size == 0))
 800585a:	2a00      	cmp	r2, #0
 800585c:	f000 80a4 	beq.w	80059a8 <HAL_I2C_Master_Receive+0x164>
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80a1 	beq.w	80059a8 <HAL_I2C_Master_Receive+0x164>
    {
      return  HAL_ERROR;
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005866:	6803      	ldr	r3, [r0, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f013 0802 	ands.w	r8, r3, #2
 800586e:	f040 809d 	bne.w	80059ac <HAL_I2C_Master_Receive+0x168>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005872:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005876:	2b01      	cmp	r3, #1
 8005878:	f000 8098 	beq.w	80059ac <HAL_I2C_Master_Receive+0x168>

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 800587c:	2322      	movs	r3, #34	; 0x22
 800587e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005882:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005886:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout) != HAL_OK)
 800588a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800588c:	f7ff fe3c 	bl	8005508 <I2C_MasterRequestRead>
 8005890:	b128      	cbz	r0, 800589e <HAL_I2C_Master_Receive+0x5a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005894:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005898:	2b04      	cmp	r3, #4
 800589a:	d133      	bne.n	8005904 <HAL_I2C_Master_Receive+0xc0>
 800589c:	e084      	b.n	80059a8 <HAL_I2C_Master_Receive+0x164>
 800589e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(Size == 1)
 80058a0:	2e01      	cmp	r6, #1
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80058a2:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(Size == 1)
 80058a4:	d10c      	bne.n	80058c0 <HAL_I2C_Master_Receive+0x7c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058aa:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	9201      	str	r2, [sp, #4]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	9201      	str	r2, [sp, #4]
 80058b4:	9a01      	ldr	r2, [sp, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e016      	b.n	80058ee <HAL_I2C_Master_Receive+0xaa>
    }
    else if(Size == 2)
 80058c0:	2e02      	cmp	r6, #2
 80058c2:	d10c      	bne.n	80058de <HAL_I2C_Master_Receive+0x9a>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80058c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	9202      	str	r2, [sp, #8]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	9302      	str	r3, [sp, #8]
 80058da:	9b02      	ldr	r3, [sp, #8]
 80058dc:	e007      	b.n	80058ee <HAL_I2C_Master_Receive+0xaa>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80058de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058e2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	9203      	str	r2, [sp, #12]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	9303      	str	r3, [sp, #12]
 80058ec:	9b03      	ldr	r3, [sp, #12]
    }

    while(Size > 0)
    {
      if(Size <= 3)
 80058ee:	2e03      	cmp	r6, #3
      {
        /* One byte */
        if(Size == 1)
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80058f0:	4620      	mov	r0, r4
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(Size > 0)
    {
      if(Size <= 3)
 80058f2:	d840      	bhi.n	8005976 <HAL_I2C_Master_Receive+0x132>
      {
        /* One byte */
        if(Size == 1)
 80058f4:	2e01      	cmp	r6, #1
 80058f6:	d10b      	bne.n	8005910 <HAL_I2C_Master_Receive+0xcc>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80058f8:	4938      	ldr	r1, [pc, #224]	; (80059dc <HAL_I2C_Master_Receive+0x198>)
 80058fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fc:	2200      	movs	r2, #0
 80058fe:	f7ff fd7b 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8005902:	b108      	cbz	r0, 8005908 <HAL_I2C_Master_Receive+0xc4>
          {
            return HAL_TIMEOUT;
 8005904:	2003      	movs	r0, #3
 8005906:	e065      	b.n	80059d4 <HAL_I2C_Master_Receive+0x190>
          }

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	703b      	strb	r3, [r7, #0]
 800590e:	e04f      	b.n	80059b0 <HAL_I2C_Master_Receive+0x16c>
          Size--;
        }
        /* Two bytes */
        else if(Size == 2)
 8005910:	2e02      	cmp	r6, #2
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005912:	4933      	ldr	r1, [pc, #204]	; (80059e0 <HAL_I2C_Master_Receive+0x19c>)
 8005914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005916:	f04f 0200 	mov.w	r2, #0
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
          Size--;
        }
        /* Two bytes */
        else if(Size == 2)
 800591a:	d10e      	bne.n	800593a <HAL_I2C_Master_Receive+0xf6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 800591c:	f7ff fd6c 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8005920:	2800      	cmp	r0, #0
 8005922:	d1ef      	bne.n	8005904 <HAL_I2C_Master_Receive+0xc0>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	703b      	strb	r3, [r7, #0]
          Size--;

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	707b      	strb	r3, [r7, #1]
 8005938:	e03a      	b.n	80059b0 <HAL_I2C_Master_Receive+0x16c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 800593a:	f7ff fd5d 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 800593e:	4602      	mov	r2, r0
 8005940:	2800      	cmp	r0, #0
 8005942:	d1df      	bne.n	8005904 <HAL_I2C_Master_Receive+0xc0>
          {
            return HAL_TIMEOUT;
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	6819      	ldr	r1, [r3, #0]
 8005948:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800594c:	6019      	str	r1, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	703b      	strb	r3, [r7, #0]
          Size--;

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005952:	4620      	mov	r0, r4
 8005954:	4922      	ldr	r1, [pc, #136]	; (80059e0 <HAL_I2C_Master_Receive+0x19c>)
 8005956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005958:	f7ff fd4e 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 800595c:	2800      	cmp	r0, #0
 800595e:	d1d1      	bne.n	8005904 <HAL_I2C_Master_Receive+0xc0>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005968:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	707b      	strb	r3, [r7, #1]
          Size--;

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	70bb      	strb	r3, [r7, #2]
 8005974:	e01c      	b.n	80059b0 <HAL_I2C_Master_Receive+0x16c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005976:	4919      	ldr	r1, [pc, #100]	; (80059dc <HAL_I2C_Master_Receive+0x198>)
 8005978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597a:	2200      	movs	r2, #0
 800597c:	f7ff fd3c 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8005980:	2800      	cmp	r0, #0
 8005982:	d1bf      	bne.n	8005904 <HAL_I2C_Master_Receive+0xc0>
        {
          return HAL_TIMEOUT;
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	703b      	strb	r3, [r7, #0]
        Size--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	6953      	ldr	r3, [r2, #20]
 800598e:	075b      	lsls	r3, r3, #29
        {
          return HAL_TIMEOUT;
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 8005990:	bf59      	ittee	pl
 8005992:	1c7b      	addpl	r3, r7, #1
        Size--;
 8005994:	f106 36ff 	addpl.w	r6, r6, #4294967295

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005998:	1cbb      	addmi	r3, r7, #2
 800599a:	6912      	ldrmi	r2, [r2, #16]
 800599c:	bf44      	itt	mi
 800599e:	707a      	strbmi	r2, [r7, #1]
          Size--;
 80059a0:	3e02      	submi	r6, #2
 80059a2:	b2b6      	uxth	r6, r6
 80059a4:	461f      	mov	r7, r3
 80059a6:	e7a2      	b.n	80058ee <HAL_I2C_Master_Receive+0xaa>
{
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 80059a8:	4628      	mov	r0, r5
 80059aa:	e013      	b.n	80059d4 <HAL_I2C_Master_Receive+0x190>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80059ac:	2002      	movs	r0, #2
 80059ae:	e011      	b.n	80059d4 <HAL_I2C_Master_Receive+0x190>
        }
      }
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059b0:	6822      	ldr	r2, [r4, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 80059b2:	490c      	ldr	r1, [pc, #48]	; (80059e4 <HAL_I2C_Master_Receive+0x1a0>)
        }
      }
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059b4:	6813      	ldr	r3, [r2, #0]
 80059b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ba:	6013      	str	r3, [r2, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 80059bc:	4620      	mov	r0, r4
 80059be:	2201      	movs	r2, #1
 80059c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c2:	f7ff fd19 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d19c      	bne.n	8005904 <HAL_I2C_Master_Receive+0xc0>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  }
  else
  {
    return HAL_BUSY;
  }
}
 80059d4:	b004      	add	sp, #16
 80059d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059da:	bf00      	nop
 80059dc:	00010040 	.word	0x00010040
 80059e0:	00010004 	.word	0x00010004
 80059e4:	00100002 	.word	0x00100002

080059e8 <HAL_I2C_GetState>:
  *         the configuration information for I2C module
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 80059e8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80059ec:	4770      	bx	lr
	...

080059f0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80059f0:	1ec3      	subs	r3, r0, #3
 80059f2:	2b04      	cmp	r3, #4
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059f4:	b510      	push	{r4, lr}
 80059f6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80059f8:	d903      	bls.n	8005a02 <HAL_NVIC_SetPriorityGrouping+0x12>
 80059fa:	4809      	ldr	r0, [pc, #36]	; (8005a20 <HAL_NVIC_SetPriorityGrouping+0x30>)
 80059fc:	21a4      	movs	r1, #164	; 0xa4
 80059fe:	f7fb ff57 	bl	80018b0 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a02:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8005a04:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8005a06:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8005a14:	f004 0407 	and.w	r4, r4, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8005a18:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005a1c:	60d3      	str	r3, [r2, #12]
 8005a1e:	bd10      	pop	{r4, pc}
 8005a20:	080247d3 	.word	0x080247d3
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005a28:	2a0f      	cmp	r2, #15
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a2a:	b570      	push	{r4, r5, r6, lr}
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005a32:	d903      	bls.n	8005a3c <HAL_NVIC_SetPriority+0x14>
 8005a34:	481a      	ldr	r0, [pc, #104]	; (8005aa0 <HAL_NVIC_SetPriority+0x78>)
 8005a36:	21bc      	movs	r1, #188	; 0xbc
 8005a38:	f7fb ff3a 	bl	80018b0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005a3c:	2c0f      	cmp	r4, #15
 8005a3e:	d903      	bls.n	8005a48 <HAL_NVIC_SetPriority+0x20>
 8005a40:	4817      	ldr	r0, [pc, #92]	; (8005aa0 <HAL_NVIC_SetPriority+0x78>)
 8005a42:	21bd      	movs	r1, #189	; 0xbd
 8005a44:	f7fb ff34 	bl	80018b0 <assert_failed>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8005a48:	4b16      	ldr	r3, [pc, #88]	; (8005aa4 <HAL_NVIC_SetPriority+0x7c>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8005a50:	f1c3 0207 	rsb	r2, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8005a54:	1d19      	adds	r1, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8005a56:	2a04      	cmp	r2, #4
 8005a58:	bf28      	it	cs
 8005a5a:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8005a5c:	2906      	cmp	r1, #6
 8005a5e:	bf8c      	ite	hi
 8005a60:	3b03      	subhi	r3, #3
 8005a62:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8005a64:	2101      	movs	r1, #1
 8005a66:	fa01 f003 	lsl.w	r0, r1, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8005a6a:	4091      	lsls	r1, r2
 8005a6c:	3901      	subs	r1, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8005a6e:	3801      	subs	r0, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8005a70:	400c      	ands	r4, r1
 8005a72:	409c      	lsls	r4, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8005a74:	4006      	ands	r6, r0
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8005a76:	2d00      	cmp	r5, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8005a78:	ea44 0406 	orr.w	r4, r4, r6
 8005a7c:	ea4f 1404 	mov.w	r4, r4, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005a80:	bfaf      	iteee	ge
 8005a82:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005a86:	f005 050f 	andlt.w	r5, r5, #15
 8005a8a:	4b07      	ldrlt	r3, [pc, #28]	; (8005aa8 <HAL_NVIC_SetPriority+0x80>)
 8005a8c:	b2e4      	uxtblt	r4, r4
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005a8e:	bfa5      	ittet	ge
 8005a90:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
 8005a94:	b2e4      	uxtbge	r4, r4
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005a96:	555c      	strblt	r4, [r3, r5]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005a98:	f885 4300 	strbge.w	r4, [r5, #768]	; 0x300
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	bf00      	nop
 8005aa0:	080247d3 	.word	0x080247d3
 8005aa4:	e000ed00 	.word	0xe000ed00
 8005aa8:	e000ed14 	.word	0xe000ed14

08005aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aac:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005aae:	1e04      	subs	r4, r0, #0
 8005ab0:	da03      	bge.n	8005aba <HAL_NVIC_EnableIRQ+0xe>
 8005ab2:	4806      	ldr	r0, [pc, #24]	; (8005acc <HAL_NVIC_EnableIRQ+0x20>)
 8005ab4:	21d0      	movs	r1, #208	; 0xd0
 8005ab6:	f7fb fefb 	bl	80018b0 <assert_failed>
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8005aba:	0961      	lsrs	r1, r4, #5
 8005abc:	2301      	movs	r3, #1
 8005abe:	f004 041f 	and.w	r4, r4, #31
 8005ac2:	4a03      	ldr	r2, [pc, #12]	; (8005ad0 <HAL_NVIC_EnableIRQ+0x24>)
 8005ac4:	40a3      	lsls	r3, r4
 8005ac6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005aca:	bd10      	pop	{r4, pc}
 8005acc:	080247d3 	.word	0x080247d3
 8005ad0:	e000e100 	.word	0xe000e100

08005ad4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8005ad4:	3801      	subs	r0, #1
 8005ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8005ada:	bf3f      	itttt	cc
 8005adc:	4b06      	ldrcc	r3, [pc, #24]	; (8005af8 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005ade:	4a07      	ldrcc	r2, [pc, #28]	; (8005afc <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8005ae0:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005ae2:	21f0      	movcc	r1, #240	; 0xf0
 8005ae4:	bf3f      	itttt	cc
 8005ae6:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8005aea:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aec:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8005aee:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005af0:	bf34      	ite	cc
 8005af2:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8005af4:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005af6:	4770      	bx	lr
 8005af8:	e000e010 	.word	0xe000e010
 8005afc:	e000ed00 	.word	0xe000ed00

08005b00 <FMC_NORSRAM_Init>:
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 8005b00:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	4605      	mov	r5, r0
 8005b08:	460c      	mov	r4, r1
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 8005b0a:	d003      	beq.n	8005b14 <FMC_NORSRAM_Init+0x14>
 8005b0c:	4856      	ldr	r0, [pc, #344]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b0e:	219b      	movs	r1, #155	; 0x9b
 8005b10:	f7fb fece 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_NORSRAM_BANK(Init->NSBank));
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	f033 0306 	bics.w	r3, r3, #6
 8005b1a:	d003      	beq.n	8005b24 <FMC_NORSRAM_Init+0x24>
 8005b1c:	4852      	ldr	r0, [pc, #328]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b1e:	219c      	movs	r1, #156	; 0x9c
 8005b20:	f7fb fec6 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_MUX(Init->DataAddressMux));
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	f033 0302 	bics.w	r3, r3, #2
 8005b2a:	d003      	beq.n	8005b34 <FMC_NORSRAM_Init+0x34>
 8005b2c:	484e      	ldr	r0, [pc, #312]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b2e:	219d      	movs	r1, #157	; 0x9d
 8005b30:	f7fb febe 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_MEMORY(Init->MemoryType));
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	f033 0204 	bics.w	r2, r3, #4
 8005b3a:	d005      	beq.n	8005b48 <FMC_NORSRAM_Init+0x48>
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d003      	beq.n	8005b48 <FMC_NORSRAM_Init+0x48>
 8005b40:	4849      	ldr	r0, [pc, #292]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b42:	219e      	movs	r1, #158	; 0x9e
 8005b44:	f7fb feb4 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_NORSRAM_MEMORY_WIDTH(Init->MemoryDataWidth));
 8005b48:	68e3      	ldr	r3, [r4, #12]
 8005b4a:	f033 0210 	bics.w	r2, r3, #16
 8005b4e:	d005      	beq.n	8005b5c <FMC_NORSRAM_Init+0x5c>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d003      	beq.n	8005b5c <FMC_NORSRAM_Init+0x5c>
 8005b54:	4844      	ldr	r0, [pc, #272]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b56:	219f      	movs	r1, #159	; 0x9f
 8005b58:	f7fb feaa 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_BURSTMODE(Init->BurstAccessMode));
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8005b62:	d003      	beq.n	8005b6c <FMC_NORSRAM_Init+0x6c>
 8005b64:	4840      	ldr	r0, [pc, #256]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b66:	21a0      	movs	r1, #160	; 0xa0
 8005b68:	f7fb fea2 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_WAIT_POLARITY(Init->WaitSignalPolarity));
 8005b6c:	6963      	ldr	r3, [r4, #20]
 8005b6e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8005b72:	d003      	beq.n	8005b7c <FMC_NORSRAM_Init+0x7c>
 8005b74:	483c      	ldr	r0, [pc, #240]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b76:	21a1      	movs	r1, #161	; 0xa1
 8005b78:	f7fb fe9a 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_WRAP_MODE(Init->WrapMode));
 8005b7c:	69a3      	ldr	r3, [r4, #24]
 8005b7e:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8005b82:	d003      	beq.n	8005b8c <FMC_NORSRAM_Init+0x8c>
 8005b84:	4838      	ldr	r0, [pc, #224]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b86:	21a2      	movs	r1, #162	; 0xa2
 8005b88:	f7fb fe92 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_WAIT_SIGNAL_ACTIVE(Init->WaitSignalActive));
 8005b8c:	69e3      	ldr	r3, [r4, #28]
 8005b8e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8005b92:	d003      	beq.n	8005b9c <FMC_NORSRAM_Init+0x9c>
 8005b94:	4834      	ldr	r0, [pc, #208]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005b96:	21a3      	movs	r1, #163	; 0xa3
 8005b98:	f7fb fe8a 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_WRITE_OPERATION(Init->WriteOperation));
 8005b9c:	6a23      	ldr	r3, [r4, #32]
 8005b9e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005ba2:	d003      	beq.n	8005bac <FMC_NORSRAM_Init+0xac>
 8005ba4:	4830      	ldr	r0, [pc, #192]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005ba6:	21a4      	movs	r1, #164	; 0xa4
 8005ba8:	f7fb fe82 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_WAITE_SIGNAL(Init->WaitSignal));
 8005bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bae:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8005bb2:	d003      	beq.n	8005bbc <FMC_NORSRAM_Init+0xbc>
 8005bb4:	482c      	ldr	r0, [pc, #176]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005bb6:	21a5      	movs	r1, #165	; 0xa5
 8005bb8:	f7fb fe7a 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_EXTENDED_MODE(Init->ExtendedMode));
 8005bbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bbe:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8005bc2:	d003      	beq.n	8005bcc <FMC_NORSRAM_Init+0xcc>
 8005bc4:	4828      	ldr	r0, [pc, #160]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005bc6:	21a6      	movs	r1, #166	; 0xa6
 8005bc8:	f7fb fe72 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_ASYNWAIT(Init->AsynchronousWait));
 8005bcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005bce:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8005bd2:	d003      	beq.n	8005bdc <FMC_NORSRAM_Init+0xdc>
 8005bd4:	4824      	ldr	r0, [pc, #144]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005bd6:	21a7      	movs	r1, #167	; 0xa7
 8005bd8:	f7fb fe6a 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_WRITE_BURST(Init->WriteBurst));
 8005bdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005bde:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8005be2:	d003      	beq.n	8005bec <FMC_NORSRAM_Init+0xec>
 8005be4:	4820      	ldr	r0, [pc, #128]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005be6:	21a8      	movs	r1, #168	; 0xa8
 8005be8:	f7fb fe62 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock)); 
 8005bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bee:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8005bf2:	d003      	beq.n	8005bfc <FMC_NORSRAM_Init+0xfc>
 8005bf4:	481c      	ldr	r0, [pc, #112]	; (8005c68 <FMC_NORSRAM_Init+0x168>)
 8005bf6:	21a9      	movs	r1, #169	; 0xa9
 8005bf8:	f7fb fe5a 	bl	80018b0 <assert_failed>
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005bfc:	6821      	ldr	r1, [r4, #0]

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8005bfe:	4a1b      	ldr	r2, [pc, #108]	; (8005c6c <FMC_NORSRAM_Init+0x16c>)
  assert_param(IS_FMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock)); 
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005c00:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                    Init->MemoryType           |\
 8005c04:	68a7      	ldr	r7, [r4, #8]
                    Init->WriteOperation       |\
                    Init->WaitSignal           |\
                    Init->ExtendedMode         |\
                    Init->AsynchronousWait     |\
                    Init->WriteBurst           |\
                    Init->ContinuousClock);
 8005c06:	6b66      	ldr	r6, [r4, #52]	; 0x34
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8005c08:	401a      	ands	r2, r3
                       FMC_BCR1_WAITPOL   | FMC_BCR1_WRAPMOD  | FMC_BCR1_WAITCFG  | \
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	ea47 0003 	orr.w	r0, r7, r3
                    Init->MemoryType           |\
 8005c10:	68e3      	ldr	r3, [r4, #12]
 8005c12:	4318      	orrs	r0, r3
                    Init->MemoryDataWidth      |\
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	4318      	orrs	r0, r3
                    Init->BurstAccessMode      |\
 8005c18:	6963      	ldr	r3, [r4, #20]
 8005c1a:	4318      	orrs	r0, r3
                    Init->WaitSignalPolarity   |\
 8005c1c:	69a3      	ldr	r3, [r4, #24]
 8005c1e:	4318      	orrs	r0, r3
                    Init->WrapMode             |\
 8005c20:	69e3      	ldr	r3, [r4, #28]
 8005c22:	4318      	orrs	r0, r3
                    Init->WaitSignalActive     |\
 8005c24:	6a23      	ldr	r3, [r4, #32]
 8005c26:	4318      	orrs	r0, r3
                    Init->WriteOperation       |\
 8005c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c2a:	4318      	orrs	r0, r3
                    Init->WaitSignal           |\
 8005c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c2e:	4318      	orrs	r0, r3
                    Init->ExtendedMode         |\
 8005c30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c32:	4318      	orrs	r0, r3
                    Init->AsynchronousWait     |\
 8005c34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c36:	4303      	orrs	r3, r0
                       FMC_BCR1_WAITPOL   | FMC_BCR1_WRAPMOD  | FMC_BCR1_WAITCFG  | \
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005c38:	4333      	orrs	r3, r6
 8005c3a:	4313      	orrs	r3, r2
                    Init->ExtendedMode         |\
                    Init->AsynchronousWait     |\
                    Init->WriteBurst           |\
                    Init->ContinuousClock);
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8005c3c:	2f08      	cmp	r7, #8
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005c3e:	bf08      	it	eq
 8005c40:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }
  
  Device->BTCR[Init->NSBank] = tmpr;

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8005c44:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 8005c48:	f845 3021 	str.w	r3, [r5, r1, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8005c4c:	d109      	bne.n	8005c62 <FMC_NORSRAM_Init+0x162>
 8005c4e:	b141      	cbz	r1, 8005c62 <FMC_NORSRAM_Init+0x162>
  { 
    Init->BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE; 
 8005c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c54:	6123      	str	r3, [r4, #16]
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->BurstAccessMode  |\
 8005c56:	682b      	ldr	r3, [r5, #0]
 8005c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c60:	602b      	str	r3, [r5, #0]
                                                  Init->ContinuousClock);                    
  }                       
  
  return HAL_OK;
}
 8005c62:	2000      	movs	r0, #0
 8005c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c66:	bf00      	nop
 8005c68:	08024825 	.word	0x08024825
 8005c6c:	ffe70080 	.word	0xffe70080

08005c70 <FMC_NORSRAM_Timing_Init>:
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 8005c70:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	4605      	mov	r5, r0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 8005c7c:	d004      	beq.n	8005c88 <FMC_NORSRAM_Timing_Init+0x18>
 8005c7e:	4838      	ldr	r0, [pc, #224]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005c80:	f240 1107 	movw	r1, #263	; 0x107
 8005c84:	f7fb fe14 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d904      	bls.n	8005c98 <FMC_NORSRAM_Timing_Init+0x28>
 8005c8e:	4834      	ldr	r0, [pc, #208]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005c90:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005c94:	f7fb fe0c 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b0e      	cmp	r3, #14
 8005c9e:	d904      	bls.n	8005caa <FMC_NORSRAM_Timing_Init+0x3a>
 8005ca0:	482f      	ldr	r0, [pc, #188]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005ca2:	f240 1109 	movw	r1, #265	; 0x109
 8005ca6:	f7fb fe03 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_DATASETUP_TIME(Timing->DataSetupTime));
 8005caa:	68a3      	ldr	r3, [r4, #8]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	2bfe      	cmp	r3, #254	; 0xfe
 8005cb0:	d904      	bls.n	8005cbc <FMC_NORSRAM_Timing_Init+0x4c>
 8005cb2:	482b      	ldr	r0, [pc, #172]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005cb4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005cb8:	f7fb fdfa 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 8005cbc:	68e3      	ldr	r3, [r4, #12]
 8005cbe:	2b0f      	cmp	r3, #15
 8005cc0:	d904      	bls.n	8005ccc <FMC_NORSRAM_Timing_Init+0x5c>
 8005cc2:	4827      	ldr	r0, [pc, #156]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005cc4:	f240 110b 	movw	r1, #267	; 0x10b
 8005cc8:	f7fb fdf2 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_CLK_DIV(Timing->CLKDivision));
 8005ccc:	6923      	ldr	r3, [r4, #16]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	2b0f      	cmp	r3, #15
 8005cd2:	d904      	bls.n	8005cde <FMC_NORSRAM_Timing_Init+0x6e>
 8005cd4:	4822      	ldr	r0, [pc, #136]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005cd6:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8005cda:	f7fb fde9 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
 8005cde:	6963      	ldr	r3, [r4, #20]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d904      	bls.n	8005cf0 <FMC_NORSRAM_Timing_Init+0x80>
 8005ce6:	481e      	ldr	r0, [pc, #120]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005ce8:	f240 110d 	movw	r1, #269	; 0x10d
 8005cec:	f7fb fde0 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
 8005cf0:	69a3      	ldr	r3, [r4, #24]
 8005cf2:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8005cf6:	d004      	beq.n	8005d02 <FMC_NORSRAM_Timing_Init+0x92>
 8005cf8:	4819      	ldr	r0, [pc, #100]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005cfa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005cfe:	f7fb fdd7 	bl	80018b0 <assert_failed>
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
 8005d02:	f036 0306 	bics.w	r3, r6, #6
 8005d06:	d004      	beq.n	8005d12 <FMC_NORSRAM_Timing_Init+0xa2>
 8005d08:	4815      	ldr	r0, [pc, #84]	; (8005d60 <FMC_NORSRAM_Timing_Init+0xf0>)
 8005d0a:	f240 110f 	movw	r1, #271	; 0x10f
 8005d0e:	f7fb fdcf 	bl	80018b0 <assert_failed>
 8005d12:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8005d16:	69a1      	ldr	r1, [r4, #24]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];
 8005d18:	6853      	ldr	r3, [r2, #4]
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
                    ((Timing->DataSetupTime) << 8)            |\
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
 8005d1a:	6920      	ldr	r0, [r4, #16]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8005d1c:	f003 4640 	and.w	r6, r3, #3221225472	; 0xc0000000
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	430b      	orrs	r3, r1
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
 8005d24:	6861      	ldr	r1, [r4, #4]
 8005d26:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
                    ((Timing->DataSetupTime) << 8)            |\
 8005d2a:	68a3      	ldr	r3, [r4, #8]
 8005d2c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16)   |\
 8005d30:	68e3      	ldr	r3, [r4, #12]
                    (((Timing->CLKDivision)-1) << 20)         |\
 8005d32:	3801      	subs	r0, #1
 8005d34:	0500      	lsls	r0, r0, #20
 8005d36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d3a:	ea43 0100 	orr.w	r1, r3, r0
                    (((Timing->DataLatency)-2) << 24)         |\
 8005d3e:	6963      	ldr	r3, [r4, #20]
 8005d40:	3b02      	subs	r3, #2
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 8005d42:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8005d46:	4333      	orrs	r3, r6
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
                    (((Timing->DataLatency)-2) << 24)         |\
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr;
 8005d48:	6053      	str	r3, [r2, #4]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	02db      	lsls	r3, r3, #11
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1] & ~(((uint32_t)0x0F) << 20)); 
 8005d4e:	bf41      	itttt	mi
 8005d50:	686b      	ldrmi	r3, [r5, #4]
 8005d52:	f423 0370 	bicmi.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1) << 20);
 8005d56:	4318      	orrmi	r0, r3
    Device->BTCR[FMC_NORSRAM_BANK1 + 1] = tmpr;
 8005d58:	6068      	strmi	r0, [r5, #4]
  }  
  
  return HAL_OK;   
}
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
 8005d5e:	bf00      	nop
 8005d60:	08024825 	.word	0x08024825

08005d64 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	4605      	mov	r5, r0
 8005d68:	460c      	mov	r4, r1
 8005d6a:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
 8005d6c:	b13b      	cbz	r3, 8005d7e <FMC_NORSRAM_Extended_Timing_Init+0x1a>
 8005d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d72:	d00a      	beq.n	8005d8a <FMC_NORSRAM_Extended_Timing_Init+0x26>
 8005d74:	4838      	ldr	r0, [pc, #224]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005d76:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8005d7a:	f7fb fd99 	bl	80018b0 <assert_failed>

    Device->BWTR[Bank] = tmpr;
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFF;
 8005d7e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005d82:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
  }   
  
  return HAL_OK;  
}
 8005d86:	2000      	movs	r0, #0
 8005d88:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
  {
    /* Check the parameters */  
    assert_param(IS_FMC_NORSRAM_EXTENDED_DEVICE(Device));  
 8005d8a:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <FMC_NORSRAM_Extended_Timing_Init+0xf8>)
 8005d8c:	4298      	cmp	r0, r3
 8005d8e:	d004      	beq.n	8005d9a <FMC_NORSRAM_Extended_Timing_Init+0x36>
 8005d90:	4831      	ldr	r0, [pc, #196]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005d92:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005d96:	f7fb fd8b 	bl	80018b0 <assert_failed>
    assert_param(IS_FMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	2b0f      	cmp	r3, #15
 8005d9e:	d904      	bls.n	8005daa <FMC_NORSRAM_Extended_Timing_Init+0x46>
 8005da0:	482d      	ldr	r0, [pc, #180]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005da2:	f240 1143 	movw	r1, #323	; 0x143
 8005da6:	f7fb fd83 	bl	80018b0 <assert_failed>
    assert_param(IS_FMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	2b0e      	cmp	r3, #14
 8005db0:	d904      	bls.n	8005dbc <FMC_NORSRAM_Extended_Timing_Init+0x58>
 8005db2:	4829      	ldr	r0, [pc, #164]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005db4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005db8:	f7fb fd7a 	bl	80018b0 <assert_failed>
    assert_param(IS_FMC_DATASETUP_TIME(Timing->DataSetupTime));
 8005dbc:	68a3      	ldr	r3, [r4, #8]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	2bfe      	cmp	r3, #254	; 0xfe
 8005dc2:	d904      	bls.n	8005dce <FMC_NORSRAM_Extended_Timing_Init+0x6a>
 8005dc4:	4824      	ldr	r0, [pc, #144]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005dc6:	f240 1145 	movw	r1, #325	; 0x145
 8005dca:	f7fb fd71 	bl	80018b0 <assert_failed>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 8005dce:	68e3      	ldr	r3, [r4, #12]
 8005dd0:	2b0f      	cmp	r3, #15
 8005dd2:	d904      	bls.n	8005dde <FMC_NORSRAM_Extended_Timing_Init+0x7a>
 8005dd4:	4820      	ldr	r0, [pc, #128]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005dd6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005dda:	f7fb fd69 	bl	80018b0 <assert_failed>
    assert_param(IS_FMC_CLK_DIV(Timing->CLKDivision));
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	d904      	bls.n	8005df0 <FMC_NORSRAM_Extended_Timing_Init+0x8c>
 8005de6:	481c      	ldr	r0, [pc, #112]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005de8:	f240 1147 	movw	r1, #327	; 0x147
 8005dec:	f7fb fd60 	bl	80018b0 <assert_failed>
    assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
 8005df0:	6963      	ldr	r3, [r4, #20]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	d904      	bls.n	8005e02 <FMC_NORSRAM_Extended_Timing_Init+0x9e>
 8005df8:	4817      	ldr	r0, [pc, #92]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005dfa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005dfe:	f7fb fd57 	bl	80018b0 <assert_failed>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
 8005e02:	69a3      	ldr	r3, [r4, #24]
 8005e04:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8005e08:	d004      	beq.n	8005e14 <FMC_NORSRAM_Extended_Timing_Init+0xb0>
 8005e0a:	4813      	ldr	r0, [pc, #76]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005e0c:	f240 1149 	movw	r1, #329	; 0x149
 8005e10:	f7fb fd4e 	bl	80018b0 <assert_failed>
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
 8005e14:	f036 0306 	bics.w	r3, r6, #6
 8005e18:	d004      	beq.n	8005e24 <FMC_NORSRAM_Extended_Timing_Init+0xc0>
 8005e1a:	480f      	ldr	r0, [pc, #60]	; (8005e58 <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8005e1c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005e20:	f7fb fd46 	bl	80018b0 <assert_failed>
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005e24:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8005e28:	69a2      	ldr	r2, [r4, #24]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_CLKDIV | FMC_BWTR1_DATLAT | \
                         FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                      ((Timing->AddressHoldTime) << 4)          |\
                      ((Timing->DataSetupTime) << 8)            |\
 8005e2a:	68a1      	ldr	r1, [r4, #8]
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8005e2c:	f003 4040 	and.w	r0, r3, #3221225472	; 0xc0000000
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	4313      	orrs	r3, r2
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_CLKDIV | FMC_BWTR1_DATLAT | \
                         FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                      ((Timing->AddressHoldTime) << 4)          |\
 8005e34:	6862      	ldr	r2, [r4, #4]
 8005e36:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 8005e3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                      ((Timing->DataSetupTime) << 8)            |\
                      ((Timing->BusTurnAroundDuration) << 16)   |\
                      (((Timing->CLKDivision)-1) << 20)         |\
 8005e3e:	6923      	ldr	r3, [r4, #16]
                         FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                      ((Timing->AddressHoldTime) << 4)          |\
                      ((Timing->DataSetupTime) << 8)            |\
                      ((Timing->BusTurnAroundDuration) << 16)   |\
 8005e40:	68e1      	ldr	r1, [r4, #12]
                      (((Timing->CLKDivision)-1) << 20)         |\
 8005e42:	3b01      	subs	r3, #1
 8005e44:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8005e48:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
                      (((Timing->DataLatency)-2) << 24)         |\
 8005e4c:	6963      	ldr	r3, [r4, #20]
 8005e4e:	3b02      	subs	r3, #2
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_CLKDIV | FMC_BWTR1_DATLAT | \
                         FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 8005e50:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8005e54:	4303      	orrs	r3, r0
 8005e56:	e794      	b.n	8005d82 <FMC_NORSRAM_Extended_Timing_Init+0x1e>
 8005e58:	08024825 	.word	0x08024825
 8005e5c:	a0000104 	.word	0xa0000104

08005e60 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8005e64:	6842      	ldr	r2, [r0, #4]
 8005e66:	4b62      	ldr	r3, [pc, #392]	; (8005ff0 <UART_SetConfig+0x190>)
 8005e68:	429a      	cmp	r2, r3
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e6a:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8005e6c:	d904      	bls.n	8005e78 <UART_SetConfig+0x18>
 8005e6e:	4861      	ldr	r0, [pc, #388]	; (8005ff4 <UART_SetConfig+0x194>)
 8005e70:	f240 712e 	movw	r1, #1838	; 0x72e
 8005e74:	f7fb fd1c 	bl	80018b0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005e78:	68e3      	ldr	r3, [r4, #12]
 8005e7a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8005e7e:	d004      	beq.n	8005e8a <UART_SetConfig+0x2a>
 8005e80:	485c      	ldr	r0, [pc, #368]	; (8005ff4 <UART_SetConfig+0x194>)
 8005e82:	f240 712f 	movw	r1, #1839	; 0x72f
 8005e86:	f7fb fd13 	bl	80018b0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8005e90:	d007      	beq.n	8005ea2 <UART_SetConfig+0x42>
 8005e92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e96:	d004      	beq.n	8005ea2 <UART_SetConfig+0x42>
 8005e98:	4856      	ldr	r0, [pc, #344]	; (8005ff4 <UART_SetConfig+0x194>)
 8005e9a:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005e9e:	f7fb fd07 	bl	80018b0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005ea2:	6962      	ldr	r2, [r4, #20]
 8005ea4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	b903      	cbnz	r3, 8005eae <UART_SetConfig+0x4e>
 8005eac:	b922      	cbnz	r2, 8005eb8 <UART_SetConfig+0x58>
 8005eae:	4851      	ldr	r0, [pc, #324]	; (8005ff4 <UART_SetConfig+0x194>)
 8005eb0:	f240 7131 	movw	r1, #1841	; 0x731
 8005eb4:	f7fb fcfc 	bl	80018b0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005eb8:	6826      	ldr	r6, [r4, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eba:	6921      	ldr	r1, [r4, #16]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005ebc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ebe:	69e0      	ldr	r0, [r4, #28]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005ec0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005ec4:	68e3      	ldr	r3, [r4, #12]
 8005ec6:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ec8:	68a2      	ldr	r2, [r4, #8]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8005eca:	6133      	str	r3, [r6, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005ecc:	68f3      	ldr	r3, [r6, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ece:	4311      	orrs	r1, r2
 8005ed0:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005ed2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005eda:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ede:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8005ee0:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005ee2:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8005ee8:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8005eee:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8005ef2:	6173      	str	r3, [r6, #20]
 8005ef4:	4b40      	ldr	r3, [pc, #256]	; (8005ff8 <UART_SetConfig+0x198>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef6:	d136      	bne.n	8005f66 <UART_SetConfig+0x106>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ef8:	429e      	cmp	r6, r3
 8005efa:	d003      	beq.n	8005f04 <UART_SetConfig+0xa4>
 8005efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f00:	429e      	cmp	r6, r3
 8005f02:	d116      	bne.n	8005f32 <UART_SetConfig+0xd2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005f04:	f7fe faa4 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8005f08:	6867      	ldr	r7, [r4, #4]
 8005f0a:	2519      	movs	r5, #25
 8005f0c:	4368      	muls	r0, r5
 8005f0e:	007f      	lsls	r7, r7, #1
 8005f10:	fbb0 f7f7 	udiv	r7, r0, r7
 8005f14:	f7fe fa9c 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8005f18:	6862      	ldr	r2, [r4, #4]
 8005f1a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005f1e:	4368      	muls	r0, r5
 8005f20:	fbb7 f7f8 	udiv	r7, r7, r8
 8005f24:	0052      	lsls	r2, r2, #1
 8005f26:	013f      	lsls	r7, r7, #4
 8005f28:	fbb0 f9f2 	udiv	r9, r0, r2
 8005f2c:	f7fe fa90 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8005f30:	e015      	b.n	8005f5e <UART_SetConfig+0xfe>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005f32:	f7fe fa75 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005f36:	6867      	ldr	r7, [r4, #4]
 8005f38:	2519      	movs	r5, #25
 8005f3a:	4368      	muls	r0, r5
 8005f3c:	007f      	lsls	r7, r7, #1
 8005f3e:	fbb0 f7f7 	udiv	r7, r0, r7
 8005f42:	f7fe fa6d 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005f4c:	4368      	muls	r0, r5
 8005f4e:	fbb7 f7f8 	udiv	r7, r7, r8
 8005f52:	0052      	lsls	r2, r2, #1
 8005f54:	013f      	lsls	r7, r7, #4
 8005f56:	fbb0 f9f2 	udiv	r9, r0, r2
 8005f5a:	f7fe fa61 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005f5e:	4345      	muls	r5, r0
 8005f60:	6860      	ldr	r0, [r4, #4]
 8005f62:	0040      	lsls	r0, r0, #1
 8005f64:	e034      	b.n	8005fd0 <UART_SetConfig+0x170>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f66:	429e      	cmp	r6, r3
 8005f68:	d002      	beq.n	8005f70 <UART_SetConfig+0x110>
 8005f6a:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <UART_SetConfig+0x19c>)
 8005f6c:	429e      	cmp	r6, r3
 8005f6e:	d116      	bne.n	8005f9e <UART_SetConfig+0x13e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005f70:	f7fe fa6e 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8005f74:	6867      	ldr	r7, [r4, #4]
 8005f76:	2519      	movs	r5, #25
 8005f78:	4368      	muls	r0, r5
 8005f7a:	00bf      	lsls	r7, r7, #2
 8005f7c:	fbb0 f7f7 	udiv	r7, r0, r7
 8005f80:	f7fe fa66 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8005f84:	6862      	ldr	r2, [r4, #4]
 8005f86:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005f8a:	4368      	muls	r0, r5
 8005f8c:	fbb7 f7f8 	udiv	r7, r7, r8
 8005f90:	0092      	lsls	r2, r2, #2
 8005f92:	013f      	lsls	r7, r7, #4
 8005f94:	fbb0 f9f2 	udiv	r9, r0, r2
 8005f98:	f7fe fa5a 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8005f9c:	e015      	b.n	8005fca <UART_SetConfig+0x16a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005f9e:	f7fe fa3f 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005fa2:	6867      	ldr	r7, [r4, #4]
 8005fa4:	2519      	movs	r5, #25
 8005fa6:	4368      	muls	r0, r5
 8005fa8:	00bf      	lsls	r7, r7, #2
 8005faa:	fbb0 f7f7 	udiv	r7, r0, r7
 8005fae:	f7fe fa37 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005fb2:	6862      	ldr	r2, [r4, #4]
 8005fb4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005fb8:	4368      	muls	r0, r5
 8005fba:	fbb7 f7f8 	udiv	r7, r7, r8
 8005fbe:	0092      	lsls	r2, r2, #2
 8005fc0:	013f      	lsls	r7, r7, #4
 8005fc2:	fbb0 f9f2 	udiv	r9, r0, r2
 8005fc6:	f7fe fa2b 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005fca:	4345      	muls	r5, r0
 8005fcc:	6860      	ldr	r0, [r4, #4]
 8005fce:	0080      	lsls	r0, r0, #2
 8005fd0:	fbb5 f0f0 	udiv	r0, r5, r0
 8005fd4:	fbb0 f0f8 	udiv	r0, r0, r8
 8005fd8:	fb08 9210 	mls	r2, r8, r0, r9
 8005fdc:	0112      	lsls	r2, r2, #4
 8005fde:	3232      	adds	r2, #50	; 0x32
 8005fe0:	fbb2 f3f8 	udiv	r3, r2, r8
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	433b      	orrs	r3, r7
 8005fea:	60b3      	str	r3, [r6, #8]
 8005fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff0:	00a037a0 	.word	0x00a037a0
 8005ff4:	08024873 	.word	0x08024873
 8005ff8:	40011000 	.word	0x40011000
 8005ffc:	40011400 	.word	0x40011400

08006000 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006000:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006002:	4604      	mov	r4, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	d074      	beq.n	80060f2 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006008:	6981      	ldr	r1, [r0, #24]
 800600a:	6803      	ldr	r3, [r0, #0]
 800600c:	4a3a      	ldr	r2, [pc, #232]	; (80060f8 <HAL_UART_Init+0xf8>)
 800600e:	b1c1      	cbz	r1, 8006042 <HAL_UART_Init+0x42>
  { 
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006010:	4293      	cmp	r3, r2
 8006012:	d00f      	beq.n	8006034 <HAL_UART_Init+0x34>
 8006014:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <HAL_UART_Init+0x34>
 800601c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <HAL_UART_Init+0x34>
 8006024:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <HAL_UART_Init+0x34>
 800602c:	4833      	ldr	r0, [pc, #204]	; (80060fc <HAL_UART_Init+0xfc>)
 800602e:	21fc      	movs	r1, #252	; 0xfc
 8006030:	f7fb fc3e 	bl	80018b0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006034:	69a3      	ldr	r3, [r4, #24]
 8006036:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800603a:	d024      	beq.n	8006086 <HAL_UART_Init+0x86>
 800603c:	482f      	ldr	r0, [pc, #188]	; (80060fc <HAL_UART_Init+0xfc>)
 800603e:	21fd      	movs	r1, #253	; 0xfd
 8006040:	e01f      	b.n	8006082 <HAL_UART_Init+0x82>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006042:	4293      	cmp	r3, r2
 8006044:	d01f      	beq.n	8006086 <HAL_UART_Init+0x86>
 8006046:	4a2e      	ldr	r2, [pc, #184]	; (8006100 <HAL_UART_Init+0x100>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d01c      	beq.n	8006086 <HAL_UART_Init+0x86>
 800604c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006050:	4293      	cmp	r3, r2
 8006052:	d018      	beq.n	8006086 <HAL_UART_Init+0x86>
 8006054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006058:	4293      	cmp	r3, r2
 800605a:	d014      	beq.n	8006086 <HAL_UART_Init+0x86>
 800605c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006060:	4293      	cmp	r3, r2
 8006062:	d010      	beq.n	8006086 <HAL_UART_Init+0x86>
 8006064:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8006068:	4293      	cmp	r3, r2
 800606a:	d00c      	beq.n	8006086 <HAL_UART_Init+0x86>
 800606c:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8006070:	4293      	cmp	r3, r2
 8006072:	d008      	beq.n	8006086 <HAL_UART_Init+0x86>
 8006074:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_UART_Init+0x86>
 800607c:	481f      	ldr	r0, [pc, #124]	; (80060fc <HAL_UART_Init+0xfc>)
 800607e:	f240 1101 	movw	r1, #257	; 0x101
 8006082:	f7fb fc15 	bl	80018b0 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800608c:	d004      	beq.n	8006098 <HAL_UART_Init+0x98>
 800608e:	481b      	ldr	r0, [pc, #108]	; (80060fc <HAL_UART_Init+0xfc>)
 8006090:	f240 1103 	movw	r1, #259	; 0x103
 8006094:	f7fb fc0c 	bl	80018b0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006098:	69e3      	ldr	r3, [r4, #28]
 800609a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800609e:	d004      	beq.n	80060aa <HAL_UART_Init+0xaa>
 80060a0:	4816      	ldr	r0, [pc, #88]	; (80060fc <HAL_UART_Init+0xfc>)
 80060a2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80060a6:	f7fb fc03 	bl	80018b0 <assert_failed>
  
  if(huart->State == HAL_UART_STATE_RESET)
 80060aa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80060ae:	b913      	cbnz	r3, 80060b6 <HAL_UART_Init+0xb6>
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80060b0:	4620      	mov	r0, r4
 80060b2:	f7fb fd49 	bl	8001b48 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060b6:	6822      	ldr	r2, [r4, #0]
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 80060b8:	2302      	movs	r3, #2
 80060ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060be:	68d3      	ldr	r3, [r2, #12]
 80060c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060c4:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff feca 	bl	8005e60 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060d4:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060dc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 80060e8:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ea:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80060ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80060f0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80060f2:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	bf00      	nop
 80060f8:	40011000 	.word	0x40011000
 80060fc:	08024873 	.word	0x08024873
 8006100:	40004400 	.word	0x40004400

08006104 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	460e      	mov	r6, r1
 8006108:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800610a:	4604      	mov	r4, r0
 800610c:	b1f0      	cbz	r0, 800614c <HAL_SRAM_Init+0x48>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800610e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006112:	b90b      	cbnz	r3, 8006118 <HAL_SRAM_Init+0x14>
  {  
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006114:	f7fb fdc2 	bl	8001c9c <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006118:	f104 0108 	add.w	r1, r4, #8
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	f7ff fcef 	bl	8005b00 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006122:	4631      	mov	r1, r6
 8006124:	68a2      	ldr	r2, [r4, #8]
 8006126:	6820      	ldr	r0, [r4, #0]
 8006128:	f7ff fda2 	bl	8005c70 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800612c:	4629      	mov	r1, r5
 800612e:	68a2      	ldr	r2, [r4, #8]
 8006130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006132:	6860      	ldr	r0, [r4, #4]
 8006134:	f7ff fe16 	bl	8005d64 <FMC_NORSRAM_Extended_Timing_Init>
 8006138:	68a1      	ldr	r1, [r4, #8]
 800613a:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800613c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 8006148:	2000      	movs	r0, #0
 800614a:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
  {
     return HAL_ERROR;
 800614c:	2001      	movs	r0, #1
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
  
  return HAL_OK;
}
 800614e:	bd70      	pop	{r4, r5, r6, pc}

08006150 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006150:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006152:	4604      	mov	r4, r0
 8006154:	2800      	cmp	r0, #0
 8006156:	f000 80d4 	beq.w	8006302 <HAL_DMA_Init+0x1b2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800615a:	6803      	ldr	r3, [r0, #0]
 800615c:	4a6a      	ldr	r2, [pc, #424]	; (8006308 <HAL_DMA_Init+0x1b8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d031      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 8006162:	3218      	adds	r2, #24
 8006164:	4293      	cmp	r3, r2
 8006166:	d02e      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 8006168:	3218      	adds	r2, #24
 800616a:	4293      	cmp	r3, r2
 800616c:	d02b      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 800616e:	3218      	adds	r2, #24
 8006170:	4293      	cmp	r3, r2
 8006172:	d028      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 8006174:	3218      	adds	r2, #24
 8006176:	4293      	cmp	r3, r2
 8006178:	d025      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 800617a:	3218      	adds	r2, #24
 800617c:	4293      	cmp	r3, r2
 800617e:	d022      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 8006180:	3218      	adds	r2, #24
 8006182:	4293      	cmp	r3, r2
 8006184:	d01f      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 8006186:	3218      	adds	r2, #24
 8006188:	4293      	cmp	r3, r2
 800618a:	d01c      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 800618c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006190:	4293      	cmp	r3, r2
 8006192:	d018      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 8006194:	3218      	adds	r2, #24
 8006196:	4293      	cmp	r3, r2
 8006198:	d015      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 800619a:	3218      	adds	r2, #24
 800619c:	4293      	cmp	r3, r2
 800619e:	d012      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 80061a0:	3218      	adds	r2, #24
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00f      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 80061a6:	3218      	adds	r2, #24
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00c      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 80061ac:	3218      	adds	r2, #24
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 80061b2:	3218      	adds	r2, #24
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d006      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 80061b8:	3218      	adds	r2, #24
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d003      	beq.n	80061c6 <HAL_DMA_Init+0x76>
 80061be:	4853      	ldr	r0, [pc, #332]	; (800630c <HAL_DMA_Init+0x1bc>)
 80061c0:	21bf      	movs	r1, #191	; 0xbf
 80061c2:	f7fb fb75 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 80061cc:	d006      	beq.n	80061dc <HAL_DMA_Init+0x8c>
 80061ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d2:	d003      	beq.n	80061dc <HAL_DMA_Init+0x8c>
 80061d4:	484d      	ldr	r0, [pc, #308]	; (800630c <HAL_DMA_Init+0x1bc>)
 80061d6:	21c0      	movs	r1, #192	; 0xc0
 80061d8:	f7fb fb6a 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80061dc:	68a3      	ldr	r3, [r4, #8]
 80061de:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80061e2:	d005      	beq.n	80061f0 <HAL_DMA_Init+0xa0>
 80061e4:	2b80      	cmp	r3, #128	; 0x80
 80061e6:	d003      	beq.n	80061f0 <HAL_DMA_Init+0xa0>
 80061e8:	4848      	ldr	r0, [pc, #288]	; (800630c <HAL_DMA_Init+0x1bc>)
 80061ea:	21c1      	movs	r1, #193	; 0xc1
 80061ec:	f7fb fb60 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80061f0:	68e3      	ldr	r3, [r4, #12]
 80061f2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80061f6:	d003      	beq.n	8006200 <HAL_DMA_Init+0xb0>
 80061f8:	4844      	ldr	r0, [pc, #272]	; (800630c <HAL_DMA_Init+0x1bc>)
 80061fa:	21c2      	movs	r1, #194	; 0xc2
 80061fc:	f7fb fb58 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8006206:	d003      	beq.n	8006210 <HAL_DMA_Init+0xc0>
 8006208:	4840      	ldr	r0, [pc, #256]	; (800630c <HAL_DMA_Init+0x1bc>)
 800620a:	21c3      	movs	r1, #195	; 0xc3
 800620c:	f7fb fb50 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006210:	6963      	ldr	r3, [r4, #20]
 8006212:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006216:	d006      	beq.n	8006226 <HAL_DMA_Init+0xd6>
 8006218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621c:	d003      	beq.n	8006226 <HAL_DMA_Init+0xd6>
 800621e:	483b      	ldr	r0, [pc, #236]	; (800630c <HAL_DMA_Init+0x1bc>)
 8006220:	21c4      	movs	r1, #196	; 0xc4
 8006222:	f7fb fb45 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8006226:	69a3      	ldr	r3, [r4, #24]
 8006228:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800622c:	d006      	beq.n	800623c <HAL_DMA_Init+0xec>
 800622e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006232:	d003      	beq.n	800623c <HAL_DMA_Init+0xec>
 8006234:	4835      	ldr	r0, [pc, #212]	; (800630c <HAL_DMA_Init+0x1bc>)
 8006236:	21c5      	movs	r1, #197	; 0xc5
 8006238:	f7fb fb3a 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800623c:	69e3      	ldr	r3, [r4, #28]
 800623e:	f033 0220 	bics.w	r2, r3, #32
 8006242:	d006      	beq.n	8006252 <HAL_DMA_Init+0x102>
 8006244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006248:	d003      	beq.n	8006252 <HAL_DMA_Init+0x102>
 800624a:	4830      	ldr	r0, [pc, #192]	; (800630c <HAL_DMA_Init+0x1bc>)
 800624c:	21c6      	movs	r1, #198	; 0xc6
 800624e:	f7fb fb2f 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006252:	6a23      	ldr	r3, [r4, #32]
 8006254:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8006258:	d003      	beq.n	8006262 <HAL_DMA_Init+0x112>
 800625a:	482c      	ldr	r0, [pc, #176]	; (800630c <HAL_DMA_Init+0x1bc>)
 800625c:	21c7      	movs	r1, #199	; 0xc7
 800625e:	f7fb fb27 	bl	80018b0 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8006262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006264:	f033 0304 	bics.w	r3, r3, #4
 8006268:	d003      	beq.n	8006272 <HAL_DMA_Init+0x122>
 800626a:	4828      	ldr	r0, [pc, #160]	; (800630c <HAL_DMA_Init+0x1bc>)
 800626c:	21c8      	movs	r1, #200	; 0xc8
 800626e:	f7fb fb1f 	bl	80018b0 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8006272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006274:	b1b3      	cbz	r3, 80062a4 <HAL_DMA_Init+0x154>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8006276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006278:	2b03      	cmp	r3, #3
 800627a:	d903      	bls.n	8006284 <HAL_DMA_Init+0x134>
 800627c:	4823      	ldr	r0, [pc, #140]	; (800630c <HAL_DMA_Init+0x1bc>)
 800627e:	21cd      	movs	r1, #205	; 0xcd
 8006280:	f7fb fb16 	bl	80018b0 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8006284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006286:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800628a:	d003      	beq.n	8006294 <HAL_DMA_Init+0x144>
 800628c:	481f      	ldr	r0, [pc, #124]	; (800630c <HAL_DMA_Init+0x1bc>)
 800628e:	21ce      	movs	r1, #206	; 0xce
 8006290:	f7fb fb0e 	bl	80018b0 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8006294:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006296:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800629a:	d003      	beq.n	80062a4 <HAL_DMA_Init+0x154>
 800629c:	481b      	ldr	r0, [pc, #108]	; (800630c <HAL_DMA_Init+0x1bc>)
 800629e:	21cf      	movs	r1, #207	; 0xcf
 80062a0:	f7fb fb06 	bl	80018b0 <assert_failed>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062a4:	6821      	ldr	r1, [r4, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062a6:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_DMA_Init+0x1c0>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062a8:	68a0      	ldr	r0, [r4, #8]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062b0:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062b2:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	4318      	orrs	r0, r3
 80062b8:	68e3      	ldr	r3, [r4, #12]
 80062ba:	4318      	orrs	r0, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	4318      	orrs	r0, r3
 80062c0:	6963      	ldr	r3, [r4, #20]
 80062c2:	4318      	orrs	r0, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c4:	69a3      	ldr	r3, [r4, #24]
 80062c6:	4318      	orrs	r0, r3
 80062c8:	69e3      	ldr	r3, [r4, #28]
 80062ca:	4318      	orrs	r0, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062cc:	6a23      	ldr	r3, [r4, #32]
 80062ce:	4303      	orrs	r3, r0
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062d0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062d4:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062d6:	bf01      	itttt	eq
 80062d8:	6ae0      	ldreq	r0, [r4, #44]	; 0x2c
 80062da:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 80062dc:	4328      	orreq	r0, r5
 80062de:	4303      	orreq	r3, r0
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062e0:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062e2:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062e4:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062e6:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80062ea:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062ee:	bf04      	itt	eq
 80062f0:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
 80062f2:	4313      	orreq	r3, r2
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062f4:	614b      	str	r3, [r1, #20]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062f6:	2000      	movs	r0, #0

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062f8:	2301      	movs	r3, #1
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062fa:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8006300:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8006302:	2001      	movs	r0, #1

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8006304:	bd38      	pop	{r3, r4, r5, pc}
 8006306:	bf00      	nop
 8006308:	40026010 	.word	0x40026010
 800630c:	080248c3 	.word	0x080248c3
 8006310:	f010803f 	.word	0xf010803f

08006314 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006314:	b510      	push	{r4, lr}
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006316:	2800      	cmp	r0, #0
 8006318:	f000 81b1 	beq.w	800667e <HAL_DMA_DeInit+0x36a>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800631c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006320:	2b02      	cmp	r3, #2
 8006322:	f000 81ac 	beq.w	800667e <HAL_DMA_DeInit+0x36a>
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006326:	6803      	ldr	r3, [r0, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0;
 8006334:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0;
 8006336:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0;
 8006338:	60da      	str	r2, [r3, #12]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;
 800633a:	611a      	str	r2, [r3, #16]

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 800633c:	2221      	movs	r2, #33	; 0x21
 800633e:	615a      	str	r2, [r3, #20]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006340:	4aaf      	ldr	r2, [pc, #700]	; (8006600 <HAL_DMA_DeInit+0x2ec>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d917      	bls.n	8006376 <HAL_DMA_DeInit+0x62>
 8006346:	3218      	adds	r2, #24
 8006348:	4293      	cmp	r3, r2
 800634a:	d00a      	beq.n	8006362 <HAL_DMA_DeInit+0x4e>
 800634c:	49ad      	ldr	r1, [pc, #692]	; (8006604 <HAL_DMA_DeInit+0x2f0>)
 800634e:	428b      	cmp	r3, r1
 8006350:	d009      	beq.n	8006366 <HAL_DMA_DeInit+0x52>
 8006352:	3118      	adds	r1, #24
 8006354:	428b      	cmp	r3, r1
 8006356:	bf14      	ite	ne
 8006358:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 800635c:	f44f 2180 	moveq.w	r1, #262144	; 0x40000
 8006360:	e003      	b.n	800636a <HAL_DMA_DeInit+0x56>
 8006362:	49a9      	ldr	r1, [pc, #676]	; (8006608 <HAL_DMA_DeInit+0x2f4>)
 8006364:	e001      	b.n	800636a <HAL_DMA_DeInit+0x56>
 8006366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800636a:	4ca8      	ldr	r4, [pc, #672]	; (800660c <HAL_DMA_DeInit+0x2f8>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800636c:	4293      	cmp	r3, r2

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800636e:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006370:	d150      	bne.n	8006414 <HAL_DMA_DeInit+0x100>
 8006372:	2120      	movs	r1, #32
 8006374:	e05b      	b.n	800642e <HAL_DMA_DeInit+0x11a>

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006376:	4aa6      	ldr	r2, [pc, #664]	; (8006610 <HAL_DMA_DeInit+0x2fc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d918      	bls.n	80063ae <HAL_DMA_DeInit+0x9a>
 800637c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006380:	4293      	cmp	r3, r2
 8006382:	d00a      	beq.n	800639a <HAL_DMA_DeInit+0x86>
 8006384:	49a3      	ldr	r1, [pc, #652]	; (8006614 <HAL_DMA_DeInit+0x300>)
 8006386:	428b      	cmp	r3, r1
 8006388:	d009      	beq.n	800639e <HAL_DMA_DeInit+0x8a>
 800638a:	3118      	adds	r1, #24
 800638c:	428b      	cmp	r3, r1
 800638e:	bf14      	ite	ne
 8006390:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 8006394:	f44f 2180 	moveq.w	r1, #262144	; 0x40000
 8006398:	e003      	b.n	80063a2 <HAL_DMA_DeInit+0x8e>
 800639a:	499b      	ldr	r1, [pc, #620]	; (8006608 <HAL_DMA_DeInit+0x2f4>)
 800639c:	e001      	b.n	80063a2 <HAL_DMA_DeInit+0x8e>
 800639e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a2:	4c9a      	ldr	r4, [pc, #616]	; (800660c <HAL_DMA_DeInit+0x2f8>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80063a4:	4293      	cmp	r3, r2

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80063a6:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80063a8:	d146      	bne.n	8006438 <HAL_DMA_DeInit+0x124>
 80063aa:	2120      	movs	r1, #32
 80063ac:	e051      	b.n	8006452 <HAL_DMA_DeInit+0x13e>

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80063ae:	4a9a      	ldr	r2, [pc, #616]	; (8006618 <HAL_DMA_DeInit+0x304>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d917      	bls.n	80063e4 <HAL_DMA_DeInit+0xd0>
 80063b4:	3218      	adds	r2, #24
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00a      	beq.n	80063d0 <HAL_DMA_DeInit+0xbc>
 80063ba:	4998      	ldr	r1, [pc, #608]	; (800661c <HAL_DMA_DeInit+0x308>)
 80063bc:	428b      	cmp	r3, r1
 80063be:	d009      	beq.n	80063d4 <HAL_DMA_DeInit+0xc0>
 80063c0:	3118      	adds	r1, #24
 80063c2:	428b      	cmp	r3, r1
 80063c4:	bf14      	ite	ne
 80063c6:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 80063ca:	f44f 2180 	moveq.w	r1, #262144	; 0x40000
 80063ce:	e003      	b.n	80063d8 <HAL_DMA_DeInit+0xc4>
 80063d0:	498d      	ldr	r1, [pc, #564]	; (8006608 <HAL_DMA_DeInit+0x2f4>)
 80063d2:	e001      	b.n	80063d8 <HAL_DMA_DeInit+0xc4>
 80063d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063d8:	4c91      	ldr	r4, [pc, #580]	; (8006620 <HAL_DMA_DeInit+0x30c>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80063da:	4293      	cmp	r3, r2

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80063dc:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80063de:	d13d      	bne.n	800645c <HAL_DMA_DeInit+0x148>
 80063e0:	2120      	movs	r1, #32
 80063e2:	e048      	b.n	8006476 <HAL_DMA_DeInit+0x162>

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80063e4:	4a8f      	ldr	r2, [pc, #572]	; (8006624 <HAL_DMA_DeInit+0x310>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00a      	beq.n	8006400 <HAL_DMA_DeInit+0xec>
 80063ea:	498f      	ldr	r1, [pc, #572]	; (8006628 <HAL_DMA_DeInit+0x314>)
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d009      	beq.n	8006404 <HAL_DMA_DeInit+0xf0>
 80063f0:	3118      	adds	r1, #24
 80063f2:	428b      	cmp	r3, r1
 80063f4:	bf14      	ite	ne
 80063f6:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 80063fa:	f44f 2180 	moveq.w	r1, #262144	; 0x40000
 80063fe:	e003      	b.n	8006408 <HAL_DMA_DeInit+0xf4>
 8006400:	4981      	ldr	r1, [pc, #516]	; (8006608 <HAL_DMA_DeInit+0x2f4>)
 8006402:	e001      	b.n	8006408 <HAL_DMA_DeInit+0xf4>
 8006404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006408:	4c85      	ldr	r4, [pc, #532]	; (8006620 <HAL_DMA_DeInit+0x30c>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800640a:	4293      	cmp	r3, r2

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800640c:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800640e:	d137      	bne.n	8006480 <HAL_DMA_DeInit+0x16c>
 8006410:	2120      	movs	r1, #32
 8006412:	e042      	b.n	800649a <HAL_DMA_DeInit+0x186>
 8006414:	497b      	ldr	r1, [pc, #492]	; (8006604 <HAL_DMA_DeInit+0x2f0>)
 8006416:	428b      	cmp	r3, r1
 8006418:	d007      	beq.n	800642a <HAL_DMA_DeInit+0x116>
 800641a:	3118      	adds	r1, #24
 800641c:	428b      	cmp	r3, r1
 800641e:	bf14      	ite	ne
 8006420:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 8006424:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8006428:	e001      	b.n	800642e <HAL_DMA_DeInit+0x11a>
 800642a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800642e:	4293      	cmp	r3, r2
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006430:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006432:	d137      	bne.n	80064a4 <HAL_DMA_DeInit+0x190>
 8006434:	2108      	movs	r1, #8
 8006436:	e042      	b.n	80064be <HAL_DMA_DeInit+0x1aa>
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006438:	4976      	ldr	r1, [pc, #472]	; (8006614 <HAL_DMA_DeInit+0x300>)
 800643a:	428b      	cmp	r3, r1
 800643c:	d007      	beq.n	800644e <HAL_DMA_DeInit+0x13a>
 800643e:	3118      	adds	r1, #24
 8006440:	428b      	cmp	r3, r1
 8006442:	bf14      	ite	ne
 8006444:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 8006448:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 800644c:	e001      	b.n	8006452 <HAL_DMA_DeInit+0x13e>
 800644e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006452:	4293      	cmp	r3, r2
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006454:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006456:	d138      	bne.n	80064ca <HAL_DMA_DeInit+0x1b6>
 8006458:	2108      	movs	r1, #8
 800645a:	e043      	b.n	80064e4 <HAL_DMA_DeInit+0x1d0>
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800645c:	496f      	ldr	r1, [pc, #444]	; (800661c <HAL_DMA_DeInit+0x308>)
 800645e:	428b      	cmp	r3, r1
 8006460:	d007      	beq.n	8006472 <HAL_DMA_DeInit+0x15e>
 8006462:	3118      	adds	r1, #24
 8006464:	428b      	cmp	r3, r1
 8006466:	bf14      	ite	ne
 8006468:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 800646c:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8006470:	e001      	b.n	8006476 <HAL_DMA_DeInit+0x162>
 8006472:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006476:	4293      	cmp	r3, r2
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006478:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800647a:	d139      	bne.n	80064f0 <HAL_DMA_DeInit+0x1dc>
 800647c:	2108      	movs	r1, #8
 800647e:	e044      	b.n	800650a <HAL_DMA_DeInit+0x1f6>
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006480:	4969      	ldr	r1, [pc, #420]	; (8006628 <HAL_DMA_DeInit+0x314>)
 8006482:	428b      	cmp	r3, r1
 8006484:	d007      	beq.n	8006496 <HAL_DMA_DeInit+0x182>
 8006486:	3118      	adds	r1, #24
 8006488:	428b      	cmp	r3, r1
 800648a:	bf14      	ite	ne
 800648c:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 8006490:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8006494:	e001      	b.n	800649a <HAL_DMA_DeInit+0x186>
 8006496:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800649a:	4293      	cmp	r3, r2
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800649c:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800649e:	d13a      	bne.n	8006516 <HAL_DMA_DeInit+0x202>
 80064a0:	2108      	movs	r1, #8
 80064a2:	e045      	b.n	8006530 <HAL_DMA_DeInit+0x21c>
 80064a4:	4957      	ldr	r1, [pc, #348]	; (8006604 <HAL_DMA_DeInit+0x2f0>)
 80064a6:	428b      	cmp	r3, r1
 80064a8:	d007      	beq.n	80064ba <HAL_DMA_DeInit+0x1a6>
 80064aa:	3118      	adds	r1, #24
 80064ac:	428b      	cmp	r3, r1
 80064ae:	bf14      	ite	ne
 80064b0:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 80064b4:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 80064b8:	e001      	b.n	80064be <HAL_DMA_DeInit+0x1aa>
 80064ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064be:	4c53      	ldr	r4, [pc, #332]	; (800660c <HAL_DMA_DeInit+0x2f8>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80064c0:	4293      	cmp	r3, r2
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80064c2:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80064c4:	d13a      	bne.n	800653c <HAL_DMA_DeInit+0x228>
 80064c6:	4959      	ldr	r1, [pc, #356]	; (800662c <HAL_DMA_DeInit+0x318>)
 80064c8:	e044      	b.n	8006554 <HAL_DMA_DeInit+0x240>
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80064ca:	4952      	ldr	r1, [pc, #328]	; (8006614 <HAL_DMA_DeInit+0x300>)
 80064cc:	428b      	cmp	r3, r1
 80064ce:	d007      	beq.n	80064e0 <HAL_DMA_DeInit+0x1cc>
 80064d0:	3118      	adds	r1, #24
 80064d2:	428b      	cmp	r3, r1
 80064d4:	bf14      	ite	ne
 80064d6:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 80064da:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 80064de:	e001      	b.n	80064e4 <HAL_DMA_DeInit+0x1d0>
 80064e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064e4:	4c49      	ldr	r4, [pc, #292]	; (800660c <HAL_DMA_DeInit+0x2f8>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80064e6:	4293      	cmp	r3, r2
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80064e8:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80064ea:	d138      	bne.n	800655e <HAL_DMA_DeInit+0x24a>
 80064ec:	494f      	ldr	r1, [pc, #316]	; (800662c <HAL_DMA_DeInit+0x318>)
 80064ee:	e042      	b.n	8006576 <HAL_DMA_DeInit+0x262>
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80064f0:	494a      	ldr	r1, [pc, #296]	; (800661c <HAL_DMA_DeInit+0x308>)
 80064f2:	428b      	cmp	r3, r1
 80064f4:	d007      	beq.n	8006506 <HAL_DMA_DeInit+0x1f2>
 80064f6:	3118      	adds	r1, #24
 80064f8:	428b      	cmp	r3, r1
 80064fa:	bf14      	ite	ne
 80064fc:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 8006500:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8006504:	e001      	b.n	800650a <HAL_DMA_DeInit+0x1f6>
 8006506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800650a:	4c45      	ldr	r4, [pc, #276]	; (8006620 <HAL_DMA_DeInit+0x30c>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800650c:	4293      	cmp	r3, r2
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800650e:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006510:	d136      	bne.n	8006580 <HAL_DMA_DeInit+0x26c>
 8006512:	4946      	ldr	r1, [pc, #280]	; (800662c <HAL_DMA_DeInit+0x318>)
 8006514:	e040      	b.n	8006598 <HAL_DMA_DeInit+0x284>
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006516:	4944      	ldr	r1, [pc, #272]	; (8006628 <HAL_DMA_DeInit+0x314>)
 8006518:	428b      	cmp	r3, r1
 800651a:	d007      	beq.n	800652c <HAL_DMA_DeInit+0x218>
 800651c:	3118      	adds	r1, #24
 800651e:	428b      	cmp	r3, r1
 8006520:	bf14      	ite	ne
 8006522:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 8006526:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 800652a:	e001      	b.n	8006530 <HAL_DMA_DeInit+0x21c>
 800652c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006530:	4c3b      	ldr	r4, [pc, #236]	; (8006620 <HAL_DMA_DeInit+0x30c>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006532:	4293      	cmp	r3, r2
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006534:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006536:	d134      	bne.n	80065a2 <HAL_DMA_DeInit+0x28e>
 8006538:	493c      	ldr	r1, [pc, #240]	; (800662c <HAL_DMA_DeInit+0x318>)
 800653a:	e03e      	b.n	80065ba <HAL_DMA_DeInit+0x2a6>
 800653c:	4931      	ldr	r1, [pc, #196]	; (8006604 <HAL_DMA_DeInit+0x2f0>)
 800653e:	428b      	cmp	r3, r1
 8006540:	d007      	beq.n	8006552 <HAL_DMA_DeInit+0x23e>
 8006542:	3118      	adds	r1, #24
 8006544:	428b      	cmp	r3, r1
 8006546:	bf14      	ite	ne
 8006548:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 800654c:	f44f 3180 	moveq.w	r1, #65536	; 0x10000
 8006550:	e000      	b.n	8006554 <HAL_DMA_DeInit+0x240>
 8006552:	2140      	movs	r1, #64	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006554:	4293      	cmp	r3, r2

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006556:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006558:	d134      	bne.n	80065c4 <HAL_DMA_DeInit+0x2b0>
 800655a:	2310      	movs	r3, #16
 800655c:	e03f      	b.n	80065de <HAL_DMA_DeInit+0x2ca>

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800655e:	492d      	ldr	r1, [pc, #180]	; (8006614 <HAL_DMA_DeInit+0x300>)
 8006560:	428b      	cmp	r3, r1
 8006562:	d007      	beq.n	8006574 <HAL_DMA_DeInit+0x260>
 8006564:	3118      	adds	r1, #24
 8006566:	428b      	cmp	r3, r1
 8006568:	bf14      	ite	ne
 800656a:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 800656e:	f44f 3180 	moveq.w	r1, #65536	; 0x10000
 8006572:	e000      	b.n	8006576 <HAL_DMA_DeInit+0x262>
 8006574:	2140      	movs	r1, #64	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006576:	4293      	cmp	r3, r2

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006578:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800657a:	d132      	bne.n	80065e2 <HAL_DMA_DeInit+0x2ce>
 800657c:	2310      	movs	r3, #16
 800657e:	e03d      	b.n	80065fc <HAL_DMA_DeInit+0x2e8>

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006580:	4926      	ldr	r1, [pc, #152]	; (800661c <HAL_DMA_DeInit+0x308>)
 8006582:	428b      	cmp	r3, r1
 8006584:	d007      	beq.n	8006596 <HAL_DMA_DeInit+0x282>
 8006586:	3118      	adds	r1, #24
 8006588:	428b      	cmp	r3, r1
 800658a:	bf14      	ite	ne
 800658c:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 8006590:	f44f 3180 	moveq.w	r1, #65536	; 0x10000
 8006594:	e000      	b.n	8006598 <HAL_DMA_DeInit+0x284>
 8006596:	2140      	movs	r1, #64	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006598:	4293      	cmp	r3, r2

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800659a:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800659c:	d148      	bne.n	8006630 <HAL_DMA_DeInit+0x31c>
 800659e:	2310      	movs	r3, #16
 80065a0:	e053      	b.n	800664a <HAL_DMA_DeInit+0x336>

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80065a2:	4921      	ldr	r1, [pc, #132]	; (8006628 <HAL_DMA_DeInit+0x314>)
 80065a4:	428b      	cmp	r3, r1
 80065a6:	d007      	beq.n	80065b8 <HAL_DMA_DeInit+0x2a4>
 80065a8:	3118      	adds	r1, #24
 80065aa:	428b      	cmp	r3, r1
 80065ac:	bf14      	ite	ne
 80065ae:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 80065b2:	f44f 3180 	moveq.w	r1, #65536	; 0x10000
 80065b6:	e000      	b.n	80065ba <HAL_DMA_DeInit+0x2a6>
 80065b8:	2140      	movs	r1, #64	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80065ba:	4293      	cmp	r3, r2

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80065bc:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80065be:	d147      	bne.n	8006650 <HAL_DMA_DeInit+0x33c>
 80065c0:	2310      	movs	r3, #16
 80065c2:	e052      	b.n	800666a <HAL_DMA_DeInit+0x356>
 80065c4:	4a0f      	ldr	r2, [pc, #60]	; (8006604 <HAL_DMA_DeInit+0x2f0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <HAL_DMA_DeInit+0x2c6>
 80065ca:	3218      	adds	r2, #24
 80065cc:	4293      	cmp	r3, r2
 80065ce:	bf0c      	ite	eq
 80065d0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80065d4:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80065d8:	e001      	b.n	80065de <HAL_DMA_DeInit+0x2ca>
 80065da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065de:	4a0b      	ldr	r2, [pc, #44]	; (800660c <HAL_DMA_DeInit+0x2f8>)
 80065e0:	e034      	b.n	800664c <HAL_DMA_DeInit+0x338>
 80065e2:	4a0c      	ldr	r2, [pc, #48]	; (8006614 <HAL_DMA_DeInit+0x300>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d007      	beq.n	80065f8 <HAL_DMA_DeInit+0x2e4>
 80065e8:	3218      	adds	r2, #24
 80065ea:	4293      	cmp	r3, r2
 80065ec:	bf0c      	ite	eq
 80065ee:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80065f2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80065f6:	e001      	b.n	80065fc <HAL_DMA_DeInit+0x2e8>
 80065f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065fc:	4a03      	ldr	r2, [pc, #12]	; (800660c <HAL_DMA_DeInit+0x2f8>)
 80065fe:	e035      	b.n	800666c <HAL_DMA_DeInit+0x358>
 8006600:	40026458 	.word	0x40026458
 8006604:	40026488 	.word	0x40026488
 8006608:	00800004 	.word	0x00800004
 800660c:	40026400 	.word	0x40026400
 8006610:	400260b8 	.word	0x400260b8
 8006614:	40026428 	.word	0x40026428
 8006618:	40026058 	.word	0x40026058
 800661c:	40026088 	.word	0x40026088
 8006620:	40026000 	.word	0x40026000
 8006624:	40026010 	.word	0x40026010
 8006628:	40026028 	.word	0x40026028
 800662c:	00800001 	.word	0x00800001
 8006630:	4a14      	ldr	r2, [pc, #80]	; (8006684 <HAL_DMA_DeInit+0x370>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <HAL_DMA_DeInit+0x332>
 8006636:	3218      	adds	r2, #24
 8006638:	4293      	cmp	r3, r2
 800663a:	bf0c      	ite	eq
 800663c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006640:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8006644:	e001      	b.n	800664a <HAL_DMA_DeInit+0x336>
 8006646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664a:	4a0f      	ldr	r2, [pc, #60]	; (8006688 <HAL_DMA_DeInit+0x374>)
 800664c:	60d3      	str	r3, [r2, #12]
 800664e:	e00e      	b.n	800666e <HAL_DMA_DeInit+0x35a>
 8006650:	4a0e      	ldr	r2, [pc, #56]	; (800668c <HAL_DMA_DeInit+0x378>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <HAL_DMA_DeInit+0x352>
 8006656:	3218      	adds	r2, #24
 8006658:	4293      	cmp	r3, r2
 800665a:	bf0c      	ite	eq
 800665c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006660:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8006664:	e001      	b.n	800666a <HAL_DMA_DeInit+0x356>
 8006666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800666a:	4a07      	ldr	r2, [pc, #28]	; (8006688 <HAL_DMA_DeInit+0x374>)
 800666c:	6093      	str	r3, [r2, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800666e:	2300      	movs	r3, #0
 8006670:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006672:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006676:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 800667a:	4618      	mov	r0, r3
 800667c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800667e:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8006680:	bd10      	pop	{r4, pc}
 8006682:	bf00      	nop
 8006684:	40026088 	.word	0x40026088
 8006688:	40026000 	.word	0x40026000
 800668c:	40026028 	.word	0x40026028

08006690 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006690:	4770      	bx	lr

08006692 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006692:	4770      	bx	lr

08006694 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006694:	6a03      	ldr	r3, [r0, #32]
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800669e:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a0:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a2:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a4:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066a6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066aa:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ac:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066b0:	688b      	ldr	r3, [r1, #8]
 80066b2:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80066b4:	4c0c      	ldr	r4, [pc, #48]	; (80066e8 <TIM_OC1_SetConfig+0x54>)
 80066b6:	42a0      	cmp	r0, r4
 80066b8:	d009      	beq.n	80066ce <TIM_OC1_SetConfig+0x3a>
 80066ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80066be:	42a0      	cmp	r0, r4
 80066c0:	d005      	beq.n	80066ce <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066c4:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c6:	6185      	str	r5, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066c8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80066ca:	6203      	str	r3, [r0, #32]
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ce:	68cc      	ldr	r4, [r1, #12]
 80066d0:	698e      	ldr	r6, [r1, #24]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066d2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066d6:	4323      	orrs	r3, r4
 80066d8:	694c      	ldr	r4, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80066de:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066e0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066e4:	4322      	orrs	r2, r4
 80066e6:	e7ec      	b.n	80066c2 <TIM_OC1_SetConfig+0x2e>
 80066e8:	40010000 	.word	0x40010000

080066ec <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ec:	6a03      	ldr	r3, [r0, #32]
 80066ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066f6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f8:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80066fa:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fc:	69c5      	ldr	r5, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80066fe:	f025 0373 	bic.w	r3, r5, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006702:	680d      	ldr	r5, [r1, #0]
 8006704:	431d      	orrs	r5, r3
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006706:	4b23      	ldr	r3, [pc, #140]	; (8006794 <TIM_OC3_SetConfig+0xa8>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006708:	f424 7200 	bic.w	r2, r4, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800670c:	688c      	ldr	r4, [r1, #8]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800670e:	4298      	cmp	r0, r3
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	4606      	mov	r6, r0
 8006712:	4688      	mov	r8, r1
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8006714:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006718:	d003      	beq.n	8006722 <TIM_OC3_SetConfig+0x36>
 800671a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671e:	4298      	cmp	r0, r3
 8006720:	d12f      	bne.n	8006782 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006722:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006726:	f033 0308 	bics.w	r3, r3, #8
 800672a:	d004      	beq.n	8006736 <TIM_OC3_SetConfig+0x4a>
 800672c:	481a      	ldr	r0, [pc, #104]	; (8006798 <TIM_OC3_SetConfig+0xac>)
 800672e:	f241 21cd 	movw	r1, #4813	; 0x12cd
 8006732:	f7fb f8bd 	bl	80018b0 <assert_failed>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006736:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800673a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800673e:	d004      	beq.n	800674a <TIM_OC3_SetConfig+0x5e>
 8006740:	4815      	ldr	r0, [pc, #84]	; (8006798 <TIM_OC3_SetConfig+0xac>)
 8006742:	f241 21ce 	movw	r1, #4814	; 0x12ce
 8006746:	f7fb f8b3 	bl	80018b0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800674a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800674e:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8006752:	d004      	beq.n	800675e <TIM_OC3_SetConfig+0x72>
 8006754:	4810      	ldr	r0, [pc, #64]	; (8006798 <TIM_OC3_SetConfig+0xac>)
 8006756:	f241 21cf 	movw	r1, #4815	; 0x12cf
 800675a:	f7fb f8a9 	bl	80018b0 <assert_failed>
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800675e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8006762:	f8d8 2014 	ldr.w	r2, [r8, #20]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006766:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800676a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800676e:	f427 5340 	bic.w	r3, r7, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8006772:	f8d8 7018 	ldr.w	r7, [r8, #24]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8006776:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800677a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800677e:	ea43 1707 	orr.w	r7, r3, r7, lsl #4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006782:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006786:	6077      	str	r7, [r6, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006788:	61f5      	str	r5, [r6, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800678a:	63f3      	str	r3, [r6, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678c:	6234      	str	r4, [r6, #32]
 800678e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006792:	bf00      	nop
 8006794:	40010000 	.word	0x40010000
 8006798:	08024912 	.word	0x08024912

0800679c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800679c:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800679e:	680a      	ldr	r2, [r1, #0]
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	6a06      	ldr	r6, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80067ac:	6845      	ldr	r5, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ae:	69c3      	ldr	r3, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b0:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80067b4:	ea43 2802 	orr.w	r8, r3, r2, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067b8:	f426 5300 	bic.w	r3, r6, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80067bc:	688e      	ldr	r6, [r1, #8]
 80067be:	ea43 3606 	orr.w	r6, r3, r6, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80067c2:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <TIM_OC4_SetConfig+0x64>)
 80067c4:	4298      	cmp	r0, r3
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067c6:	4604      	mov	r4, r0
 80067c8:	460f      	mov	r7, r1
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80067ca:	d003      	beq.n	80067d4 <TIM_OC4_SetConfig+0x38>
 80067cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d0:	4298      	cmp	r0, r3
 80067d2:	d10d      	bne.n	80067f0 <TIM_OC4_SetConfig+0x54>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	f432 7380 	bics.w	r3, r2, #256	; 0x100
 80067da:	d004      	beq.n	80067e6 <TIM_OC4_SetConfig+0x4a>
 80067dc:	4809      	ldr	r0, [pc, #36]	; (8006804 <TIM_OC4_SetConfig+0x68>)
 80067de:	f241 3113 	movw	r1, #4883	; 0x1313
 80067e2:	f7fb f865 	bl	80018b0 <assert_failed>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80067e6:	697b      	ldr	r3, [r7, #20]
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067e8:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80067ec:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f0:	687b      	ldr	r3, [r7, #4]
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f2:	6065      	str	r5, [r4, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80067f4:	f8c4 801c 	str.w	r8, [r4, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f8:	6423      	str	r3, [r4, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	6226      	str	r6, [r4, #32]
 80067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006800:	40010000 	.word	0x40010000
 8006804:	08024912 	.word	0x08024912

08006808 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006808:	6803      	ldr	r3, [r0, #0]
 800680a:	4a24      	ldr	r2, [pc, #144]	; (800689c <HAL_TIM_Base_Start_IT+0x94>)
 800680c:	4293      	cmp	r3, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800680e:	b510      	push	{r4, lr}
 8006810:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006812:	d037      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d034      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 800681a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800681e:	4293      	cmp	r3, r2
 8006820:	d030      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 8006822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006826:	4293      	cmp	r3, r2
 8006828:	d02c      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 800682a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800682e:	4293      	cmp	r3, r2
 8006830:	d028      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 8006832:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006836:	4293      	cmp	r3, r2
 8006838:	d024      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 800683a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800683e:	4293      	cmp	r3, r2
 8006840:	d020      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 8006842:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8006846:	4293      	cmp	r3, r2
 8006848:	d01c      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 800684a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 8006852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006856:	4293      	cmp	r3, r2
 8006858:	d014      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 800685a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800685e:	4293      	cmp	r3, r2
 8006860:	d010      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 8006862:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006866:	4293      	cmp	r3, r2
 8006868:	d00c      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 800686a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800686e:	4293      	cmp	r3, r2
 8006870:	d008      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 8006872:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x7c>
 800687a:	4809      	ldr	r0, [pc, #36]	; (80068a0 <HAL_TIM_Base_Start_IT+0x98>)
 800687c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006880:	f7fb f816 	bl	80018b0 <assert_failed>
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	f042 0201 	orr.w	r2, r2, #1
 800688c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	f042 0201 	orr.w	r2, r2, #1
 8006894:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8006896:	2000      	movs	r0, #0
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000
 80068a0:	08024912 	.word	0x08024912

080068a4 <HAL_TIM_Base_Stop_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068a4:	6803      	ldr	r3, [r0, #0]
 80068a6:	4a29      	ldr	r2, [pc, #164]	; (800694c <HAL_TIM_Base_Stop_IT+0xa8>)
 80068a8:	4293      	cmp	r3, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80068aa:	b510      	push	{r4, lr}
 80068ac:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068ae:	d037      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b4:	d034      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d030      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d02c      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d028      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d024      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068da:	4293      	cmp	r3, r2
 80068dc:	d020      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068de:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01c      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068e6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d014      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d010      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 80068fe:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006902:	4293      	cmp	r3, r2
 8006904:	d00c      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 8006906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800690a:	4293      	cmp	r3, r2
 800690c:	d008      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 800690e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_TIM_Base_Stop_IT+0x7c>
 8006916:	480e      	ldr	r0, [pc, #56]	; (8006950 <HAL_TIM_Base_Stop_IT+0xac>)
 8006918:	f240 1173 	movw	r1, #371	; 0x173
 800691c:	f7fa ffc8 	bl	80018b0 <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800692a:	6a19      	ldr	r1, [r3, #32]
 800692c:	f241 1211 	movw	r2, #4369	; 0x1111
 8006930:	400a      	ands	r2, r1
 8006932:	b942      	cbnz	r2, 8006946 <HAL_TIM_Base_Stop_IT+0xa2>
 8006934:	6a19      	ldr	r1, [r3, #32]
 8006936:	f240 4244 	movw	r2, #1092	; 0x444
 800693a:	400a      	ands	r2, r1
 800693c:	b91a      	cbnz	r2, 8006946 <HAL_TIM_Base_Stop_IT+0xa2>
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	f022 0201 	bic.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8006946:	2000      	movs	r0, #0
 8006948:	bd10      	pop	{r4, pc}
 800694a:	bf00      	nop
 800694c:	40010000 	.word	0x40010000
 8006950:	08024912 	.word	0x08024912

08006954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006958:	4770      	bx	lr

0800695a <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800695a:	4770      	bx	lr

0800695c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800695c:	6803      	ldr	r3, [r0, #0]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006962:	b510      	push	{r4, lr}
 8006964:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006966:	d514      	bpl.n	8006992 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	0792      	lsls	r2, r2, #30
 800696c:	d511      	bpl.n	8006992 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800696e:	f06f 0202 	mvn.w	r2, #2
 8006972:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8006974:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006976:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8006978:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800697a:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800697c:	d002      	beq.n	8006984 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800697e:	f7ff ffea 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 8006982:	e004      	b.n	800698e <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006984:	f7ff ffe6 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006988:	4620      	mov	r0, r4
 800698a:	f7ff ffe5 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698e:	2300      	movs	r3, #0
 8006990:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	0750      	lsls	r0, r2, #29
 8006998:	d516      	bpl.n	80069c8 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	0751      	lsls	r1, r2, #29
 800699e:	d513      	bpl.n	80069c8 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069a0:	f06f 0204 	mvn.w	r2, #4
 80069a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80069a6:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a8:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80069aa:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ae:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80069b0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80069b2:	d002      	beq.n	80069ba <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80069b4:	f7ff ffcf 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e004      	b.n	80069c4 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	f7ff ffcb 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069be:	4620      	mov	r0, r4
 80069c0:	f7ff ffca 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c4:	2300      	movs	r3, #0
 80069c6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	0712      	lsls	r2, r2, #28
 80069ce:	d515      	bpl.n	80069fc <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	0710      	lsls	r0, r2, #28
 80069d4:	d512      	bpl.n	80069fc <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069d6:	f06f 0208 	mvn.w	r2, #8
 80069da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80069dc:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069de:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80069e0:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069e2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80069e4:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80069e6:	d002      	beq.n	80069ee <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80069e8:	f7ff ffb5 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 80069ec:	e004      	b.n	80069f8 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ee:	f7ff ffb1 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80069f2:	4620      	mov	r0, r4
 80069f4:	f7ff ffb0 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f8:	2300      	movs	r3, #0
 80069fa:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	06d2      	lsls	r2, r2, #27
 8006a02:	d516      	bpl.n	8006a32 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	06d0      	lsls	r0, r2, #27
 8006a08:	d513      	bpl.n	8006a32 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a0a:	f06f 0210 	mvn.w	r2, #16
 8006a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006a10:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a12:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006a14:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a18:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006a1c:	d002      	beq.n	8006a24 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	f7ff ff9a 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 8006a22:	e004      	b.n	8006a2e <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a24:	f7ff ff96 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f7ff ff95 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	07d1      	lsls	r1, r2, #31
 8006a38:	d508      	bpl.n	8006a4c <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	07d2      	lsls	r2, r2, #31
 8006a3e:	d505      	bpl.n	8006a4c <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a40:	f06f 0201 	mvn.w	r2, #1
 8006a44:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7fc fa3e 	bl	8002ec8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	0610      	lsls	r0, r2, #24
 8006a52:	d508      	bpl.n	8006a66 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	0611      	lsls	r1, r2, #24
 8006a58:	d505      	bpl.n	8006a66 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006a60:	4620      	mov	r0, r4
 8006a62:	f7ff fe16 	bl	8006692 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	0652      	lsls	r2, r2, #25
 8006a6c:	d508      	bpl.n	8006a80 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	0650      	lsls	r0, r2, #25
 8006a72:	d505      	bpl.n	8006a80 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a78:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7ff ff6d 	bl	800695a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	0691      	lsls	r1, r2, #26
 8006a86:	d50a      	bpl.n	8006a9e <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	0692      	lsls	r2, r2, #26
 8006a8c:	d507      	bpl.n	8006a9e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a8e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8006a92:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8006a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8006a9a:	f7ff bdf9 	b.w	8006690 <HAL_TIMEx_CommutationCallback>
 8006a9e:	bd10      	pop	{r4, pc}

08006aa0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006aa0:	4a2e      	ldr	r2, [pc, #184]	; (8006b5c <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8006aa2:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006aa4:	4290      	cmp	r0, r2
 8006aa6:	d012      	beq.n	8006ace <TIM_Base_SetConfig+0x2e>
 8006aa8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006aac:	d00f      	beq.n	8006ace <TIM_Base_SetConfig+0x2e>
 8006aae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006ab2:	4290      	cmp	r0, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_Base_SetConfig+0x2e>
 8006ab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aba:	4290      	cmp	r0, r2
 8006abc:	d007      	beq.n	8006ace <TIM_Base_SetConfig+0x2e>
 8006abe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ac2:	4290      	cmp	r0, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_Base_SetConfig+0x2e>
 8006ac6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006aca:	4290      	cmp	r0, r2
 8006acc:	d118      	bne.n	8006b00 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006ace:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ad4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006ad6:	4a21      	ldr	r2, [pc, #132]	; (8006b5c <TIM_Base_SetConfig+0xbc>)
 8006ad8:	4290      	cmp	r0, r2
 8006ada:	d037      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006adc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ae0:	d034      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006ae2:	4a1f      	ldr	r2, [pc, #124]	; (8006b60 <TIM_Base_SetConfig+0xc0>)
 8006ae4:	4290      	cmp	r0, r2
 8006ae6:	d031      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aec:	4290      	cmp	r0, r2
 8006aee:	d02d      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006af0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006af4:	4290      	cmp	r0, r2
 8006af6:	d029      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006af8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006afc:	4290      	cmp	r0, r2
 8006afe:	d025      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006b00:	4a18      	ldr	r2, [pc, #96]	; (8006b64 <TIM_Base_SetConfig+0xc4>)
 8006b02:	4290      	cmp	r0, r2
 8006b04:	d022      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b0a:	4290      	cmp	r0, r2
 8006b0c:	d01e      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b12:	4290      	cmp	r0, r2
 8006b14:	d01a      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006b16:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006b1a:	4290      	cmp	r0, r2
 8006b1c:	d016      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b22:	4290      	cmp	r0, r2
 8006b24:	d012      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
 8006b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b2a:	4290      	cmp	r0, r2
 8006b2c:	d00e      	beq.n	8006b4c <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8006b2e:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b30:	688b      	ldr	r3, [r1, #8]
 8006b32:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006b34:	680b      	ldr	r3, [r1, #0]
 8006b36:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <TIM_Base_SetConfig+0xbc>)
 8006b3a:	4298      	cmp	r0, r3
 8006b3c:	d00b      	beq.n	8006b56 <TIM_Base_SetConfig+0xb6>
 8006b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b42:	4298      	cmp	r0, r3
 8006b44:	d007      	beq.n	8006b56 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b46:	2301      	movs	r3, #1
 8006b48:	6143      	str	r3, [r0, #20]
 8006b4a:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4c:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b52:	4313      	orrs	r3, r2
 8006b54:	e7eb      	b.n	8006b2e <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b56:	690b      	ldr	r3, [r1, #16]
 8006b58:	6303      	str	r3, [r0, #48]	; 0x30
 8006b5a:	e7f4      	b.n	8006b46 <TIM_Base_SetConfig+0xa6>
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40014000 	.word	0x40014000

08006b68 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8006b68:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d065      	beq.n	8006c3c <HAL_TIM_Base_Init+0xd4>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8006b70:	6803      	ldr	r3, [r0, #0]
 8006b72:	4a33      	ldr	r2, [pc, #204]	; (8006c40 <HAL_TIM_Base_Init+0xd8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d036      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7c:	d033      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006b7e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d02f      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d02b      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006b8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d027      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d023      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01f      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006ba6:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01b      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006bae:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d017      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00f      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006bc6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00b      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d007      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d003      	beq.n	8006be6 <HAL_TIM_Base_Init+0x7e>
 8006bde:	4819      	ldr	r0, [pc, #100]	; (8006c44 <HAL_TIM_Base_Init+0xdc>)
 8006be0:	21d9      	movs	r1, #217	; 0xd9
 8006be2:	f7fa fe65 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006be6:	68a3      	ldr	r3, [r4, #8]
 8006be8:	f033 0210 	bics.w	r2, r3, #16
 8006bec:	d009      	beq.n	8006c02 <HAL_TIM_Base_Init+0x9a>
 8006bee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006bf2:	2a20      	cmp	r2, #32
 8006bf4:	d005      	beq.n	8006c02 <HAL_TIM_Base_Init+0x9a>
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d003      	beq.n	8006c02 <HAL_TIM_Base_Init+0x9a>
 8006bfa:	4812      	ldr	r0, [pc, #72]	; (8006c44 <HAL_TIM_Base_Init+0xdc>)
 8006bfc:	21da      	movs	r1, #218	; 0xda
 8006bfe:	f7fa fe57 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8006c08:	d006      	beq.n	8006c18 <HAL_TIM_Base_Init+0xb0>
 8006c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0e:	d003      	beq.n	8006c18 <HAL_TIM_Base_Init+0xb0>
 8006c10:	480c      	ldr	r0, [pc, #48]	; (8006c44 <HAL_TIM_Base_Init+0xdc>)
 8006c12:	21db      	movs	r1, #219	; 0xdb
 8006c14:	f7fa fe4c 	bl	80018b0 <assert_failed>
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8006c18:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8006c1c:	b913      	cbnz	r3, 8006c24 <HAL_TIM_Base_Init+0xbc>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7fa ff54 	bl	8001acc <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006c24:	2302      	movs	r3, #2
 8006c26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006c2a:	6820      	ldr	r0, [r4, #0]
 8006c2c:	1d21      	adds	r1, r4, #4
 8006c2e:	f7ff ff37 	bl	8006aa0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8006c38:	2000      	movs	r0, #0
 8006c3a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8006c3c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8006c3e:	bd10      	pop	{r4, pc}
 8006c40:	40010000 	.word	0x40010000
 8006c44:	08024912 	.word	0x08024912

08006c48 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c48:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d068      	beq.n	8006d22 <HAL_TIM_PWM_Init+0xda>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006c50:	6803      	ldr	r3, [r0, #0]
 8006c52:	4a35      	ldr	r2, [pc, #212]	; (8006d28 <HAL_TIM_PWM_Init+0xe0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d037      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d034      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c5e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d030      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d02c      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d028      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d024      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d020      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c86:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d01c      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c8e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d014      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d010      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006ca6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00c      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d008      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_TIM_PWM_Init+0x80>
 8006cbe:	481b      	ldr	r0, [pc, #108]	; (8006d2c <HAL_TIM_PWM_Init+0xe4>)
 8006cc0:	f240 31e7 	movw	r1, #999	; 0x3e7
 8006cc4:	f7fa fdf4 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	f033 0210 	bics.w	r2, r3, #16
 8006cce:	d00a      	beq.n	8006ce6 <HAL_TIM_PWM_Init+0x9e>
 8006cd0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006cd4:	2a20      	cmp	r2, #32
 8006cd6:	d006      	beq.n	8006ce6 <HAL_TIM_PWM_Init+0x9e>
 8006cd8:	2b40      	cmp	r3, #64	; 0x40
 8006cda:	d004      	beq.n	8006ce6 <HAL_TIM_PWM_Init+0x9e>
 8006cdc:	4813      	ldr	r0, [pc, #76]	; (8006d2c <HAL_TIM_PWM_Init+0xe4>)
 8006cde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ce2:	f7fa fde5 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8006cec:	d007      	beq.n	8006cfe <HAL_TIM_PWM_Init+0xb6>
 8006cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIM_PWM_Init+0xb6>
 8006cf4:	480d      	ldr	r0, [pc, #52]	; (8006d2c <HAL_TIM_PWM_Init+0xe4>)
 8006cf6:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8006cfa:	f7fa fdd9 	bl	80018b0 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8006cfe:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8006d02:	b913      	cbnz	r3, 8006d0a <HAL_TIM_PWM_Init+0xc2>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7fa feff 	bl	8001b08 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	1d21      	adds	r1, r4, #4
 8006d14:	f7ff fec4 	bl	8006aa0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8006d1e:	2000      	movs	r0, #0
 8006d20:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8006d22:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	bf00      	nop
 8006d28:	40010000 	.word	0x40010000
 8006d2c:	08024912 	.word	0x08024912

08006d30 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d30:	6a03      	ldr	r3, [r0, #32]
 8006d32:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d3a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8006d3c:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006d3e:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d40:	6985      	ldr	r5, [r0, #24]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d42:	f425 43e6 	bic.w	r3, r5, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8006d46:	680d      	ldr	r5, [r1, #0]
 8006d48:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006d4c:	4b22      	ldr	r3, [pc, #136]	; (8006dd8 <TIM_OC2_SetConfig+0xa8>)
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d4e:	f024 0220 	bic.w	r2, r4, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8006d52:	688c      	ldr	r4, [r1, #8]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006d54:	4298      	cmp	r0, r3
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d56:	4606      	mov	r6, r0
 8006d58:	4688      	mov	r8, r1
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8006d5a:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006d5e:	d003      	beq.n	8006d68 <TIM_OC2_SetConfig+0x38>
 8006d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d64:	4298      	cmp	r0, r3
 8006d66:	d12f      	bne.n	8006dc8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006d68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d6c:	f033 0308 	bics.w	r3, r3, #8
 8006d70:	d004      	beq.n	8006d7c <TIM_OC2_SetConfig+0x4c>
 8006d72:	481a      	ldr	r0, [pc, #104]	; (8006ddc <TIM_OC2_SetConfig+0xac>)
 8006d74:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006d78:	f7fa fd9a 	bl	80018b0 <assert_failed>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006d7c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006d80:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006d84:	d004      	beq.n	8006d90 <TIM_OC2_SetConfig+0x60>
 8006d86:	4815      	ldr	r0, [pc, #84]	; (8006ddc <TIM_OC2_SetConfig+0xac>)
 8006d88:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006d8c:	f7fa fd90 	bl	80018b0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006d90:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006d94:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8006d98:	d004      	beq.n	8006da4 <TIM_OC2_SetConfig+0x74>
 8006d9a:	4810      	ldr	r0, [pc, #64]	; (8006ddc <TIM_OC2_SetConfig+0xac>)
 8006d9c:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8006da0:	f7fa fd86 	bl	80018b0 <assert_failed>
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8006da4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8006da8:	f8d8 2014 	ldr.w	r2, [r8, #20]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dac:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8006db0:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006db4:	f427 6340 	bic.w	r3, r7, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8006db8:	f8d8 7018 	ldr.w	r7, [r8, #24]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8006dbc:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dc0:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8006dc4:	ea43 0787 	orr.w	r7, r3, r7, lsl #2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dcc:	6077      	str	r7, [r6, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dce:	61b5      	str	r5, [r6, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dd0:	63b3      	str	r3, [r6, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd2:	6234      	str	r4, [r6, #32]
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	08024912 	.word	0x08024912

08006de0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 8006de0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006de4:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	4604      	mov	r4, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 8006dee:	f000 8137 	beq.w	8007060 <HAL_TIM_PWM_ConfigChannel+0x280>
 8006df2:	2301      	movs	r3, #1
 8006df4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Check the parameters */ 
  assert_param(IS_TIM_CHANNELS(Channel)); 
 8006df8:	f032 030c 	bics.w	r3, r2, #12
 8006dfc:	d006      	beq.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x2c>
 8006dfe:	2a18      	cmp	r2, #24
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x2c>
 8006e02:	4898      	ldr	r0, [pc, #608]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006e04:	f640 411d 	movw	r1, #3101	; 0xc1d
 8006e08:	f7fa fd52 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	f023 0310 	bic.w	r3, r3, #16
 8006e12:	2b60      	cmp	r3, #96	; 0x60
 8006e14:	d004      	beq.n	8006e20 <HAL_TIM_PWM_ConfigChannel+0x40>
 8006e16:	4893      	ldr	r0, [pc, #588]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006e18:	f640 411e 	movw	r1, #3102	; 0xc1e
 8006e1c:	f7fa fd48 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006e20:	68ab      	ldr	r3, [r5, #8]
 8006e22:	f033 0302 	bics.w	r3, r3, #2
 8006e26:	d004      	beq.n	8006e32 <HAL_TIM_PWM_ConfigChannel+0x52>
 8006e28:	488e      	ldr	r0, [pc, #568]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006e2a:	f640 411f 	movw	r1, #3103	; 0xc1f
 8006e2e:	f7fa fd3f 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_OCN_POLARITY(sConfig->OCNPolarity));
 8006e32:	68eb      	ldr	r3, [r5, #12]
 8006e34:	f033 0308 	bics.w	r3, r3, #8
 8006e38:	d004      	beq.n	8006e44 <HAL_TIM_PWM_ConfigChannel+0x64>
 8006e3a:	488a      	ldr	r0, [pc, #552]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006e3c:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8006e40:	f7fa fd36 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_OCNIDLE_STATE(sConfig->OCNIdleState));
 8006e44:	69ab      	ldr	r3, [r5, #24]
 8006e46:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006e4a:	d004      	beq.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x76>
 8006e4c:	4885      	ldr	r0, [pc, #532]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006e4e:	f640 4121 	movw	r1, #3105	; 0xc21
 8006e52:	f7fa fd2d 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_OCIDLE_STATE(sConfig->OCIdleState));
 8006e56:	696b      	ldr	r3, [r5, #20]
 8006e58:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8006e5c:	d004      	beq.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x88>
 8006e5e:	4881      	ldr	r0, [pc, #516]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006e60:	f640 4122 	movw	r1, #3106	; 0xc22
 8006e64:	f7fa fd24 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006e68:	692b      	ldr	r3, [r5, #16]
 8006e6a:	f033 0304 	bics.w	r3, r3, #4
 8006e6e:	d004      	beq.n	8006e7a <HAL_TIM_PWM_ConfigChannel+0x9a>
 8006e70:	487c      	ldr	r0, [pc, #496]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006e72:	f640 4123 	movw	r1, #3107	; 0xc23
 8006e76:	f7fa fd1b 	bl	80018b0 <assert_failed>

  htim->State = HAL_TIM_STATE_BUSY;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  switch (Channel)
 8006e80:	2e0c      	cmp	r6, #12
 8006e82:	f200 80e6 	bhi.w	8007052 <HAL_TIM_PWM_ConfigChannel+0x272>
 8006e86:	e8df f016 	tbh	[pc, r6, lsl #1]
 8006e8a:	000d      	.short	0x000d
 8006e8c:	00e400e4 	.word	0x00e400e4
 8006e90:	005200e4 	.word	0x005200e4
 8006e94:	00e400e4 	.word	0x00e400e4
 8006e98:	008900e4 	.word	0x008900e4
 8006e9c:	00e400e4 	.word	0x00e400e4
 8006ea0:	00b600e4 	.word	0x00b600e4
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	4a70      	ldr	r2, [pc, #448]	; (8007068 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d02f      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb0:	d02c      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006eb2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d028      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006eba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d024      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d020      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006eca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d01c      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006ed2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d018      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006eda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d014      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d010      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006eea:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00c      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d008      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006f02:	4858      	ldr	r0, [pc, #352]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006f04:	f640 412b 	movw	r1, #3115	; 0xc2b
 8006f08:	f7fa fcd2 	bl	80018b0 <assert_failed>
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	f7ff fbc0 	bl	8006694 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	f042 0208 	orr.w	r2, r2, #8
 8006f1c:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f1e:	699a      	ldr	r2, [r3, #24]
 8006f20:	f022 0204 	bic.w	r2, r2, #4
 8006f24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f26:	6999      	ldr	r1, [r3, #24]
 8006f28:	692a      	ldr	r2, [r5, #16]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	e034      	b.n	8006f98 <HAL_TIM_PWM_ConfigChannel+0x1b8>
    }
    break;
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	4a4d      	ldr	r2, [pc, #308]	; (8007068 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01f      	beq.n	8006f76 <HAL_TIM_PWM_ConfigChannel+0x196>
 8006f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3a:	d01c      	beq.n	8006f76 <HAL_TIM_PWM_ConfigChannel+0x196>
 8006f3c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d018      	beq.n	8006f76 <HAL_TIM_PWM_ConfigChannel+0x196>
 8006f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d014      	beq.n	8006f76 <HAL_TIM_PWM_ConfigChannel+0x196>
 8006f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d010      	beq.n	8006f76 <HAL_TIM_PWM_ConfigChannel+0x196>
 8006f54:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00c      	beq.n	8006f76 <HAL_TIM_PWM_ConfigChannel+0x196>
 8006f5c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d008      	beq.n	8006f76 <HAL_TIM_PWM_ConfigChannel+0x196>
 8006f64:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_TIM_PWM_ConfigChannel+0x196>
 8006f6c:	483d      	ldr	r0, [pc, #244]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006f6e:	f640 413a 	movw	r1, #3130	; 0xc3a
 8006f72:	f7fa fc9d 	bl	80018b0 <assert_failed>
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f76:	4629      	mov	r1, r5
 8006f78:	6820      	ldr	r0, [r4, #0]
 8006f7a:	f7ff fed9 	bl	8006d30 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f7e:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8006f80:	6929      	ldr	r1, [r5, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f82:	699a      	ldr	r2, [r3, #24]
 8006f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f88:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f8a:	699a      	ldr	r2, [r3, #24]
 8006f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006f98:	619a      	str	r2, [r3, #24]
    }
    break;
 8006f9a:	e05a      	b.n	8007052 <HAL_TIM_PWM_ConfigChannel+0x272>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	4a32      	ldr	r2, [pc, #200]	; (8007068 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d017      	beq.n	8006fd4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa8:	d014      	beq.n	8006fd4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8006faa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d010      	beq.n	8006fd4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8006fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8006fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d008      	beq.n	8006fd4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8006fc2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d004      	beq.n	8006fd4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8006fca:	4826      	ldr	r0, [pc, #152]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006fcc:	f640 4149 	movw	r1, #3145	; 0xc49
 8006fd0:	f7fa fc6e 	bl	80018b0 <assert_failed>
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	f7ff fb88 	bl	80066ec <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	69da      	ldr	r2, [r3, #28]
 8006fe0:	f042 0208 	orr.w	r2, r2, #8
 8006fe4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fe6:	69da      	ldr	r2, [r3, #28]
 8006fe8:	f022 0204 	bic.w	r2, r2, #4
 8006fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8006fee:	69d9      	ldr	r1, [r3, #28]
 8006ff0:	692a      	ldr	r2, [r5, #16]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	e02c      	b.n	8007050 <HAL_TIM_PWM_ConfigChannel+0x270>
    }
    break;
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	4a1b      	ldr	r2, [pc, #108]	; (8007068 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d017      	beq.n	800702e <HAL_TIM_PWM_ConfigChannel+0x24e>
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007002:	d014      	beq.n	800702e <HAL_TIM_PWM_ConfigChannel+0x24e>
 8007004:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007008:	4293      	cmp	r3, r2
 800700a:	d010      	beq.n	800702e <HAL_TIM_PWM_ConfigChannel+0x24e>
 800700c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007010:	4293      	cmp	r3, r2
 8007012:	d00c      	beq.n	800702e <HAL_TIM_PWM_ConfigChannel+0x24e>
 8007014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007018:	4293      	cmp	r3, r2
 800701a:	d008      	beq.n	800702e <HAL_TIM_PWM_ConfigChannel+0x24e>
 800701c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <HAL_TIM_PWM_ConfigChannel+0x24e>
 8007024:	480f      	ldr	r0, [pc, #60]	; (8007064 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007026:	f640 4158 	movw	r1, #3160	; 0xc58
 800702a:	f7fa fc41 	bl	80018b0 <assert_failed>
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800702e:	4629      	mov	r1, r5
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	f7ff fbb3 	bl	800679c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007036:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8007038:	6929      	ldr	r1, [r5, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800703a:	69da      	ldr	r2, [r3, #28]
 800703c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007040:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800704a:	69da      	ldr	r2, [r3, #28]
 800704c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007050:	61da      	str	r2, [r3, #28]
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8007052:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8007054:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8007056:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800705a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
 800705e:	bd70      	pop	{r4, r5, r6, pc}
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 8007060:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;
    
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	08024912 	.word	0x08024912
 8007068:	40010000 	.word	0x40010000

0800706c <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 800706c:	4b26      	ldr	r3, [pc, #152]	; (8007108 <TIM_CCxChannelCmd+0x9c>)
 800706e:	4298      	cmp	r0, r3
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4604      	mov	r4, r0
 8007074:	460d      	mov	r5, r1
 8007076:	4616      	mov	r6, r2
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8007078:	d02f      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 800707a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800707e:	d02c      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 8007080:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007084:	4298      	cmp	r0, r3
 8007086:	d028      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 8007088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800708c:	4298      	cmp	r0, r3
 800708e:	d024      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 8007090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007094:	4298      	cmp	r0, r3
 8007096:	d020      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 8007098:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800709c:	4298      	cmp	r0, r3
 800709e:	d01c      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 80070a0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80070a4:	4298      	cmp	r0, r3
 80070a6:	d018      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 80070a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ac:	4298      	cmp	r0, r3
 80070ae:	d014      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 80070b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b4:	4298      	cmp	r0, r3
 80070b6:	d010      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 80070b8:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80070bc:	4298      	cmp	r0, r3
 80070be:	d00c      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 80070c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c4:	4298      	cmp	r0, r3
 80070c6:	d008      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 80070c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070cc:	4298      	cmp	r0, r3
 80070ce:	d004      	beq.n	80070da <TIM_CCxChannelCmd+0x6e>
 80070d0:	480e      	ldr	r0, [pc, #56]	; (800710c <TIM_CCxChannelCmd+0xa0>)
 80070d2:	f241 213e 	movw	r1, #4670	; 0x123e
 80070d6:	f7fa fbeb 	bl	80018b0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80070da:	f035 030c 	bics.w	r3, r5, #12
 80070de:	d006      	beq.n	80070ee <TIM_CCxChannelCmd+0x82>
 80070e0:	2d18      	cmp	r5, #24
 80070e2:	d004      	beq.n	80070ee <TIM_CCxChannelCmd+0x82>
 80070e4:	4809      	ldr	r0, [pc, #36]	; (800710c <TIM_CCxChannelCmd+0xa0>)
 80070e6:	f241 213f 	movw	r1, #4671	; 0x123f
 80070ea:	f7fa fbe1 	bl	80018b0 <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ee:	6a22      	ldr	r2, [r4, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80070f0:	2301      	movs	r3, #1
 80070f2:	40ab      	lsls	r3, r5

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070f4:	ea22 0303 	bic.w	r3, r2, r3
 80070f8:	6223      	str	r3, [r4, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80070fa:	6a23      	ldr	r3, [r4, #32]
 80070fc:	40ae      	lsls	r6, r5
 80070fe:	ea46 0203 	orr.w	r2, r6, r3
 8007102:	6222      	str	r2, [r4, #32]
 8007104:	bd70      	pop	{r4, r5, r6, pc}
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000
 800710c:	08024912 	.word	0x08024912

08007110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007110:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007112:	4a29      	ldr	r2, [pc, #164]	; (80071b8 <HAL_TIM_PWM_Start+0xa8>)
 8007114:	6803      	ldr	r3, [r0, #0]
 8007116:	4293      	cmp	r3, r2
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007118:	4605      	mov	r5, r0
 800711a:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800711c:	d012      	beq.n	8007144 <HAL_TIM_PWM_Start+0x34>
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007122:	d00f      	beq.n	8007144 <HAL_TIM_PWM_Start+0x34>
 8007124:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007128:	4293      	cmp	r3, r2
 800712a:	d00b      	beq.n	8007144 <HAL_TIM_PWM_Start+0x34>
 800712c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <HAL_TIM_PWM_Start+0x34>
 8007134:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <HAL_TIM_PWM_Start+0x34>
 800713c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007140:	4293      	cmp	r3, r2
 8007142:	d102      	bne.n	800714a <HAL_TIM_PWM_Start+0x3a>
 8007144:	f034 020c 	bics.w	r2, r4, #12
 8007148:	d01f      	beq.n	800718a <HAL_TIM_PWM_Start+0x7a>
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <HAL_TIM_PWM_Start+0xac>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d103      	bne.n	8007158 <HAL_TIM_PWM_Start+0x48>
 8007150:	f034 0304 	bics.w	r3, r4, #4
 8007154:	d114      	bne.n	8007180 <HAL_TIM_PWM_Start+0x70>
 8007156:	e018      	b.n	800718a <HAL_TIM_PWM_Start+0x7a>
 8007158:	4a19      	ldr	r2, [pc, #100]	; (80071c0 <HAL_TIM_PWM_Start+0xb0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d101      	bne.n	8007162 <HAL_TIM_PWM_Start+0x52>
 800715e:	b97c      	cbnz	r4, 8007180 <HAL_TIM_PWM_Start+0x70>
 8007160:	e013      	b.n	800718a <HAL_TIM_PWM_Start+0x7a>
 8007162:	4a18      	ldr	r2, [pc, #96]	; (80071c4 <HAL_TIM_PWM_Start+0xb4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d0fa      	beq.n	800715e <HAL_TIM_PWM_Start+0x4e>
 8007168:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800716c:	4293      	cmp	r3, r2
 800716e:	d0ef      	beq.n	8007150 <HAL_TIM_PWM_Start+0x40>
 8007170:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007174:	4293      	cmp	r3, r2
 8007176:	d0f2      	beq.n	800715e <HAL_TIM_PWM_Start+0x4e>
 8007178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800717c:	4293      	cmp	r3, r2
 800717e:	d0ee      	beq.n	800715e <HAL_TIM_PWM_Start+0x4e>
 8007180:	4811      	ldr	r0, [pc, #68]	; (80071c8 <HAL_TIM_PWM_Start+0xb8>)
 8007182:	f240 4142 	movw	r1, #1090	; 0x442
 8007186:	f7fa fb93 	bl	80018b0 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800718a:	2201      	movs	r2, #1
 800718c:	6828      	ldr	r0, [r5, #0]
 800718e:	4621      	mov	r1, r4
 8007190:	f7ff ff6c 	bl	800706c <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	4a08      	ldr	r2, [pc, #32]	; (80071b8 <HAL_TIM_PWM_Start+0xa8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d003      	beq.n	80071a4 <HAL_TIM_PWM_Start+0x94>
 800719c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d103      	bne.n	80071ac <HAL_TIM_PWM_Start+0x9c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80071b4:	2000      	movs	r0, #0
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400
 80071c4:	40014800 	.word	0x40014800
 80071c8:	08024912 	.word	0x08024912

080071cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 80071cc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80071ce:	4a35      	ldr	r2, [pc, #212]	; (80072a4 <HAL_TIM_PWM_Stop+0xd8>)
 80071d0:	6803      	ldr	r3, [r0, #0]
 80071d2:	4293      	cmp	r3, r2
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 80071d4:	4604      	mov	r4, r0
 80071d6:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80071d8:	d012      	beq.n	8007200 <HAL_TIM_PWM_Stop+0x34>
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d00f      	beq.n	8007200 <HAL_TIM_PWM_Stop+0x34>
 80071e0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00b      	beq.n	8007200 <HAL_TIM_PWM_Stop+0x34>
 80071e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d007      	beq.n	8007200 <HAL_TIM_PWM_Stop+0x34>
 80071f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <HAL_TIM_PWM_Stop+0x34>
 80071f8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d102      	bne.n	8007206 <HAL_TIM_PWM_Stop+0x3a>
 8007200:	f035 020c 	bics.w	r2, r5, #12
 8007204:	d01f      	beq.n	8007246 <HAL_TIM_PWM_Stop+0x7a>
 8007206:	4a28      	ldr	r2, [pc, #160]	; (80072a8 <HAL_TIM_PWM_Stop+0xdc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d103      	bne.n	8007214 <HAL_TIM_PWM_Stop+0x48>
 800720c:	f035 0304 	bics.w	r3, r5, #4
 8007210:	d114      	bne.n	800723c <HAL_TIM_PWM_Stop+0x70>
 8007212:	e018      	b.n	8007246 <HAL_TIM_PWM_Stop+0x7a>
 8007214:	4a25      	ldr	r2, [pc, #148]	; (80072ac <HAL_TIM_PWM_Stop+0xe0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d101      	bne.n	800721e <HAL_TIM_PWM_Stop+0x52>
 800721a:	b97d      	cbnz	r5, 800723c <HAL_TIM_PWM_Stop+0x70>
 800721c:	e013      	b.n	8007246 <HAL_TIM_PWM_Stop+0x7a>
 800721e:	4a24      	ldr	r2, [pc, #144]	; (80072b0 <HAL_TIM_PWM_Stop+0xe4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d0fa      	beq.n	800721a <HAL_TIM_PWM_Stop+0x4e>
 8007224:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007228:	4293      	cmp	r3, r2
 800722a:	d0ef      	beq.n	800720c <HAL_TIM_PWM_Stop+0x40>
 800722c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007230:	4293      	cmp	r3, r2
 8007232:	d0f2      	beq.n	800721a <HAL_TIM_PWM_Stop+0x4e>
 8007234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007238:	4293      	cmp	r3, r2
 800723a:	d0ee      	beq.n	800721a <HAL_TIM_PWM_Stop+0x4e>
 800723c:	481d      	ldr	r0, [pc, #116]	; (80072b4 <HAL_TIM_PWM_Stop+0xe8>)
 800723e:	f240 4163 	movw	r1, #1123	; 0x463
 8007242:	f7fa fb35 	bl	80018b0 <assert_failed>
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007246:	2200      	movs	r2, #0
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	4629      	mov	r1, r5
 800724c:	f7ff ff0e 	bl	800706c <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	4a14      	ldr	r2, [pc, #80]	; (80072a4 <HAL_TIM_PWM_Stop+0xd8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <HAL_TIM_PWM_Stop+0x94>
 8007258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800725c:	4293      	cmp	r3, r2
 800725e:	d10d      	bne.n	800727c <HAL_TIM_PWM_Stop+0xb0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007260:	6a19      	ldr	r1, [r3, #32]
 8007262:	f241 1211 	movw	r2, #4369	; 0x1111
 8007266:	400a      	ands	r2, r1
 8007268:	b942      	cbnz	r2, 800727c <HAL_TIM_PWM_Stop+0xb0>
 800726a:	6a19      	ldr	r1, [r3, #32]
 800726c:	f240 4244 	movw	r2, #1092	; 0x444
 8007270:	400a      	ands	r2, r1
 8007272:	b91a      	cbnz	r2, 800727c <HAL_TIM_PWM_Stop+0xb0>
 8007274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800727a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800727c:	6a19      	ldr	r1, [r3, #32]
 800727e:	f241 1211 	movw	r2, #4369	; 0x1111
 8007282:	400a      	ands	r2, r1
 8007284:	b942      	cbnz	r2, 8007298 <HAL_TIM_PWM_Stop+0xcc>
 8007286:	6a19      	ldr	r1, [r3, #32]
 8007288:	f240 4244 	movw	r2, #1092	; 0x444
 800728c:	400a      	ands	r2, r1
 800728e:	b91a      	cbnz	r2, 8007298 <HAL_TIM_PWM_Stop+0xcc>
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007298:	2301      	movs	r3, #1
 800729a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
} 
 800729e:	2000      	movs	r0, #0
 80072a0:	bd38      	pop	{r3, r4, r5, pc}
 80072a2:	bf00      	nop
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40014400 	.word	0x40014400
 80072b0:	40014800 	.word	0x40014800
 80072b4:	08024912 	.word	0x08024912

080072b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80072bc:	4b98      	ldr	r3, [pc, #608]	; (8007520 <HAL_GPIO_Init+0x268>)
 80072be:	4298      	cmp	r0, r3
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072c0:	4604      	mov	r4, r0
 80072c2:	460d      	mov	r5, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80072c4:	d02b      	beq.n	800731e <HAL_GPIO_Init+0x66>
 80072c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ca:	4298      	cmp	r0, r3
 80072cc:	d027      	beq.n	800731e <HAL_GPIO_Init+0x66>
 80072ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d2:	4298      	cmp	r0, r3
 80072d4:	d023      	beq.n	800731e <HAL_GPIO_Init+0x66>
 80072d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072da:	4298      	cmp	r0, r3
 80072dc:	d01f      	beq.n	800731e <HAL_GPIO_Init+0x66>
 80072de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072e2:	4298      	cmp	r0, r3
 80072e4:	d01b      	beq.n	800731e <HAL_GPIO_Init+0x66>
 80072e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ea:	4298      	cmp	r0, r3
 80072ec:	d017      	beq.n	800731e <HAL_GPIO_Init+0x66>
 80072ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f2:	4298      	cmp	r0, r3
 80072f4:	d013      	beq.n	800731e <HAL_GPIO_Init+0x66>
 80072f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072fa:	4298      	cmp	r0, r3
 80072fc:	d00f      	beq.n	800731e <HAL_GPIO_Init+0x66>
 80072fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007302:	4298      	cmp	r0, r3
 8007304:	d00b      	beq.n	800731e <HAL_GPIO_Init+0x66>
 8007306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800730a:	4298      	cmp	r0, r3
 800730c:	d007      	beq.n	800731e <HAL_GPIO_Init+0x66>
 800730e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007312:	4298      	cmp	r0, r3
 8007314:	d003      	beq.n	800731e <HAL_GPIO_Init+0x66>
 8007316:	4883      	ldr	r0, [pc, #524]	; (8007524 <HAL_GPIO_Init+0x26c>)
 8007318:	21c5      	movs	r1, #197	; 0xc5
 800731a:	f7fa fac9 	bl	80018b0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800731e:	882b      	ldrh	r3, [r5, #0]
 8007320:	b91b      	cbnz	r3, 800732a <HAL_GPIO_Init+0x72>
 8007322:	4880      	ldr	r0, [pc, #512]	; (8007524 <HAL_GPIO_Init+0x26c>)
 8007324:	21c6      	movs	r1, #198	; 0xc6
 8007326:	f7fa fac3 	bl	80018b0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800732a:	686b      	ldr	r3, [r5, #4]
 800732c:	2b03      	cmp	r3, #3
 800732e:	d917      	bls.n	8007360 <HAL_GPIO_Init+0xa8>
 8007330:	f1a3 0211 	sub.w	r2, r3, #17
 8007334:	2a01      	cmp	r2, #1
 8007336:	d913      	bls.n	8007360 <HAL_GPIO_Init+0xa8>
 8007338:	497b      	ldr	r1, [pc, #492]	; (8007528 <HAL_GPIO_Init+0x270>)
 800733a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800733e:	428a      	cmp	r2, r1
 8007340:	d00e      	beq.n	8007360 <HAL_GPIO_Init+0xa8>
 8007342:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8007346:	428b      	cmp	r3, r1
 8007348:	d00a      	beq.n	8007360 <HAL_GPIO_Init+0xa8>
 800734a:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 800734e:	428a      	cmp	r2, r1
 8007350:	d006      	beq.n	8007360 <HAL_GPIO_Init+0xa8>
 8007352:	4a76      	ldr	r2, [pc, #472]	; (800752c <HAL_GPIO_Init+0x274>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d003      	beq.n	8007360 <HAL_GPIO_Init+0xa8>
 8007358:	4872      	ldr	r0, [pc, #456]	; (8007524 <HAL_GPIO_Init+0x26c>)
 800735a:	21c7      	movs	r1, #199	; 0xc7
 800735c:	f7fa faa8 	bl	80018b0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007360:	68ab      	ldr	r3, [r5, #8]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d903      	bls.n	800736e <HAL_GPIO_Init+0xb6>
 8007366:	486f      	ldr	r0, [pc, #444]	; (8007524 <HAL_GPIO_Init+0x26c>)
 8007368:	21c8      	movs	r1, #200	; 0xc8
 800736a:	f7fa faa1 	bl	80018b0 <assert_failed>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800736e:	2600      	movs	r6, #0

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007370:	2301      	movs	r3, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007372:	682f      	ldr	r7, [r5, #0]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007374:	40b3      	lsls	r3, r6
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007376:	401f      	ands	r7, r3

    if(iocurrent == ioposition)
 8007378:	429f      	cmp	r7, r3
 800737a:	f040 80cb 	bne.w	8007514 <HAL_GPIO_Init+0x25c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800737e:	686b      	ldr	r3, [r5, #4]
 8007380:	f023 0310 	bic.w	r3, r3, #16
 8007384:	2b02      	cmp	r3, #2
 8007386:	d117      	bne.n	80073b8 <HAL_GPIO_Init+0x100>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007388:	692b      	ldr	r3, [r5, #16]
 800738a:	2b0d      	cmp	r3, #13
 800738c:	d905      	bls.n	800739a <HAL_GPIO_Init+0xe2>
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d003      	beq.n	800739a <HAL_GPIO_Init+0xe2>
 8007392:	4864      	ldr	r0, [pc, #400]	; (8007524 <HAL_GPIO_Init+0x26c>)
 8007394:	21d9      	movs	r1, #217	; 0xd9
 8007396:	f7fa fa8b 	bl	80018b0 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800739a:	08f2      	lsrs	r2, r6, #3
 800739c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073a0:	f006 0107 	and.w	r1, r6, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80073a4:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073a6:	0089      	lsls	r1, r1, #2
 80073a8:	230f      	movs	r3, #15
 80073aa:	408b      	lsls	r3, r1
 80073ac:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80073b0:	692b      	ldr	r3, [r5, #16]
 80073b2:	408b      	lsls	r3, r1
 80073b4:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 80073b6:	6213      	str	r3, [r2, #32]
 80073b8:	ea4f 0946 	mov.w	r9, r6, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80073bc:	f04f 0803 	mov.w	r8, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073c0:	6822      	ldr	r2, [r4, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80073c2:	686b      	ldr	r3, [r5, #4]
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80073c4:	fa08 f809 	lsl.w	r8, r8, r9
 80073c8:	ea6f 0808 	mvn.w	r8, r8
 80073cc:	ea08 0102 	and.w	r1, r8, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80073d0:	f003 0203 	and.w	r2, r3, #3
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073d4:	f023 0310 	bic.w	r3, r3, #16
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80073d8:	fa02 f209 	lsl.w	r2, r2, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073dc:	3b01      	subs	r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80073de:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073e0:	2b01      	cmp	r3, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80073e2:	6022      	str	r2, [r4, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073e4:	d817      	bhi.n	8007416 <HAL_GPIO_Init+0x15e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80073e6:	68eb      	ldr	r3, [r5, #12]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d903      	bls.n	80073f4 <HAL_GPIO_Init+0x13c>
 80073ec:	484d      	ldr	r0, [pc, #308]	; (8007524 <HAL_GPIO_Init+0x26c>)
 80073ee:	21ec      	movs	r1, #236	; 0xec
 80073f0:	f7fa fa5e 	bl	80018b0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80073f4:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80073f6:	ea08 0203 	and.w	r2, r8, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 80073fa:	68eb      	ldr	r3, [r5, #12]
 80073fc:	fa03 f309 	lsl.w	r3, r3, r9
 8007400:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8007402:	60a3      	str	r3, [r4, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007404:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007406:	ea23 0207 	bic.w	r2, r3, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800740a:	686b      	ldr	r3, [r5, #4]
 800740c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007410:	40b3      	lsls	r3, r6
 8007412:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8007414:	6063      	str	r3, [r4, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007416:	68e3      	ldr	r3, [r4, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007418:	6869      	ldr	r1, [r5, #4]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800741a:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800741e:	68ab      	ldr	r3, [r5, #8]
 8007420:	fa03 f309 	lsl.w	r3, r3, r9
 8007424:	ea48 0303 	orr.w	r3, r8, r3
      GPIOx->PUPDR = temp;
 8007428:	60e3      	str	r3, [r4, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800742a:	00cb      	lsls	r3, r1, #3
 800742c:	d572      	bpl.n	8007514 <HAL_GPIO_Init+0x25c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800742e:	4a40      	ldr	r2, [pc, #256]	; (8007530 <HAL_GPIO_Init+0x278>)
 8007430:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007436:	6453      	str	r3, [r2, #68]	; 0x44
 8007438:	f026 0203 	bic.w	r2, r6, #3
 800743c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007440:	f502 329c 	add.w	r2, r2, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007444:	f006 0e03 	and.w	lr, r6, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8007448:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800744a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800744e:	230f      	movs	r3, #15
 8007450:	fa03 f30e 	lsl.w	r3, r3, lr
 8007454:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007458:	4b31      	ldr	r3, [pc, #196]	; (8007520 <HAL_GPIO_Init+0x268>)
 800745a:	429c      	cmp	r4, r3
 800745c:	d026      	beq.n	80074ac <HAL_GPIO_Init+0x1f4>
 800745e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007462:	429c      	cmp	r4, r3
 8007464:	d024      	beq.n	80074b0 <HAL_GPIO_Init+0x1f8>
 8007466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800746a:	429c      	cmp	r4, r3
 800746c:	d022      	beq.n	80074b4 <HAL_GPIO_Init+0x1fc>
 800746e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007472:	429c      	cmp	r4, r3
 8007474:	d020      	beq.n	80074b8 <HAL_GPIO_Init+0x200>
 8007476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800747a:	429c      	cmp	r4, r3
 800747c:	d01e      	beq.n	80074bc <HAL_GPIO_Init+0x204>
 800747e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007482:	429c      	cmp	r4, r3
 8007484:	d01c      	beq.n	80074c0 <HAL_GPIO_Init+0x208>
 8007486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800748a:	429c      	cmp	r4, r3
 800748c:	d01a      	beq.n	80074c4 <HAL_GPIO_Init+0x20c>
 800748e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007492:	429c      	cmp	r4, r3
 8007494:	d018      	beq.n	80074c8 <HAL_GPIO_Init+0x210>
 8007496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800749a:	429c      	cmp	r4, r3
 800749c:	d016      	beq.n	80074cc <HAL_GPIO_Init+0x214>
 800749e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074a2:	429c      	cmp	r4, r3
 80074a4:	bf0c      	ite	eq
 80074a6:	2309      	moveq	r3, #9
 80074a8:	230a      	movne	r3, #10
 80074aa:	e010      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074ac:	2300      	movs	r3, #0
 80074ae:	e00e      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e00c      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e00a      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074b8:	2303      	movs	r3, #3
 80074ba:	e008      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074bc:	2304      	movs	r3, #4
 80074be:	e006      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074c0:	2305      	movs	r3, #5
 80074c2:	e004      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074c4:	2306      	movs	r3, #6
 80074c6:	e002      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074c8:	2307      	movs	r3, #7
 80074ca:	e000      	b.n	80074ce <HAL_GPIO_Init+0x216>
 80074cc:	2308      	movs	r3, #8
 80074ce:	fa03 f30e 	lsl.w	r3, r3, lr
 80074d2:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074d4:	4817      	ldr	r0, [pc, #92]	; (8007534 <HAL_GPIO_Init+0x27c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 80074d6:	6093      	str	r3, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074d8:	6803      	ldr	r3, [r0, #0]
        temp &= ~((uint32_t)iocurrent);
 80074da:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074dc:	f411 3f80 	tst.w	r1, #65536	; 0x10000
        {
          temp |= iocurrent;
 80074e0:	bf14      	ite	ne
 80074e2:	433b      	orrne	r3, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80074e4:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80074e6:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 80074e8:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074ea:	0388      	lsls	r0, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80074ec:	4811      	ldr	r0, [pc, #68]	; (8007534 <HAL_GPIO_Init+0x27c>)

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80074ee:	bf4c      	ite	mi
 80074f0:	433b      	orrmi	r3, r7
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80074f2:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80074f4:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074f6:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
        {
          temp |= iocurrent;
 80074fc:	bf14      	ite	ne
 80074fe:	433b      	orrne	r3, r7
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8007500:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8007502:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 8007504:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007506:	0289      	lsls	r1, r1, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8007508:	bf54      	ite	pl
 800750a:	ea02 0703 	andpl.w	r7, r2, r3
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800750e:	431f      	orrmi	r7, r3
        }
        EXTI->FTSR = temp;
 8007510:	4b08      	ldr	r3, [pc, #32]	; (8007534 <HAL_GPIO_Init+0x27c>)
 8007512:	60df      	str	r7, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007514:	3601      	adds	r6, #1
 8007516:	2e10      	cmp	r6, #16
 8007518:	f47f af2a 	bne.w	8007370 <HAL_GPIO_Init+0xb8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800751c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007520:	40020000 	.word	0x40020000
 8007524:	08024961 	.word	0x08024961
 8007528:	10110000 	.word	0x10110000
 800752c:	10220000 	.word	0x10220000
 8007530:	40023800 	.word	0x40023800
 8007534:	40013c00 	.word	0x40013c00

08007538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	4605      	mov	r5, r0
 800753c:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800753e:	460c      	mov	r4, r1
 8007540:	b921      	cbnz	r1, 800754c <HAL_GPIO_WritePin+0x14>
 8007542:	4808      	ldr	r0, [pc, #32]	; (8007564 <HAL_GPIO_WritePin+0x2c>)
 8007544:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8007548:	f7fa f9b2 	bl	80018b0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800754c:	2e01      	cmp	r6, #1
 800754e:	d905      	bls.n	800755c <HAL_GPIO_WritePin+0x24>
 8007550:	4804      	ldr	r0, [pc, #16]	; (8007564 <HAL_GPIO_WritePin+0x2c>)
 8007552:	f240 11ad 	movw	r1, #429	; 0x1ad
 8007556:	f7fa f9ab 	bl	80018b0 <assert_failed>
 800755a:	e001      	b.n	8007560 <HAL_GPIO_WritePin+0x28>

  if(PinState != GPIO_PIN_RESET)
 800755c:	b906      	cbnz	r6, 8007560 <HAL_GPIO_WritePin+0x28>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800755e:	0424      	lsls	r4, r4, #16
 8007560:	61ac      	str	r4, [r5, #24]
 8007562:	bd70      	pop	{r4, r5, r6, pc}
 8007564:	08024961 	.word	0x08024961

08007568 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800756c:	460d      	mov	r5, r1
 800756e:	b921      	cbnz	r1, 800757a <HAL_GPIO_TogglePin+0x12>
 8007570:	4804      	ldr	r0, [pc, #16]	; (8007584 <HAL_GPIO_TogglePin+0x1c>)
 8007572:	f240 11c3 	movw	r1, #451	; 0x1c3
 8007576:	f7fa f99b 	bl	80018b0 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 800757a:	6961      	ldr	r1, [r4, #20]
 800757c:	4069      	eors	r1, r5
 800757e:	6161      	str	r1, [r4, #20]
 8007580:	bd38      	pop	{r3, r4, r5, pc}
 8007582:	bf00      	nop
 8007584:	08024961 	.word	0x08024961

08007588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007588:	b510      	push	{r4, lr}
 800758a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800758c:	f7fc ff2c 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8007590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007594:	fbb0 f0f3 	udiv	r0, r0, r3
 8007598:	f7fe fa9c 	bl	8005ad4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	4621      	mov	r1, r4
 80075a2:	2200      	movs	r2, #0
 80075a4:	f7fe fa40 	bl	8005a28 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80075a8:	2000      	movs	r0, #0
 80075aa:	bd10      	pop	{r4, pc}

080075ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075ac:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80075ae:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <HAL_Init+0x28>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075c0:	2003      	movs	r0, #3
 80075c2:	f7fe fa15 	bl	80059f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80075c6:	200f      	movs	r0, #15
 80075c8:	f7ff ffde 	bl	8007588 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80075cc:	f7fa fbaa 	bl	8001d24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80075d0:	2000      	movs	r0, #0
 80075d2:	bd08      	pop	{r3, pc}
 80075d4:	40023c00 	.word	0x40023c00

080075d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80075d8:	4a02      	ldr	r2, [pc, #8]	; (80075e4 <HAL_IncTick+0xc>)
 80075da:	6813      	ldr	r3, [r2, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20016db8 	.word	0x20016db8

080075e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80075e8:	4b01      	ldr	r3, [pc, #4]	; (80075f0 <HAL_GetTick+0x8>)
 80075ea:	6818      	ldr	r0, [r3, #0]
}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20016db8 	.word	0x20016db8

080075f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80075f4:	b513      	push	{r0, r1, r4, lr}
 80075f6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80075f8:	f7ff fff6 	bl	80075e8 <HAL_GetTick>
 80075fc:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80075fe:	f7ff fff3 	bl	80075e8 <HAL_GetTick>
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	1b00      	subs	r0, r0, r4
 8007606:	4298      	cmp	r0, r3
 8007608:	d3f9      	bcc.n	80075fe <HAL_Delay+0xa>
  {
  }
}
 800760a:	b002      	add	sp, #8
 800760c:	bd10      	pop	{r4, pc}
	...

08007610 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8007610:	4b01      	ldr	r3, [pc, #4]	; (8007618 <HAL_GetREVID+0x8>)
 8007612:	6818      	ldr	r0, [r3, #0]
}
 8007614:	0c00      	lsrs	r0, r0, #16
 8007616:	4770      	bx	lr
 8007618:	e0042000 	.word	0xe0042000

0800761c <disk_initialize>:
  */
DSTATUS disk_initialize(BYTE pdrv)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <disk_initialize+0x18>)
 800761e:	5c1a      	ldrb	r2, [r3, r0]
 8007620:	b932      	cbnz	r2, 8007630 <disk_initialize+0x14>
  { 
    disk.is_initialized[pdrv] = 1;
 8007622:	2201      	movs	r2, #1
 8007624:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize();
 8007626:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4718      	bx	r3
  }
  return stat;
}
 8007630:	2000      	movs	r0, #0
 8007632:	4770      	bx	lr
 8007634:	20016dbc 	.word	0x20016dbc

08007638 <disk_status>:
  */
DSTATUS disk_status(BYTE pdrv)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status();
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <disk_status+0xc>)
 800763a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800763e:	6843      	ldr	r3, [r0, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	4718      	bx	r3
 8007644:	20016dbc 	.word	0x20016dbc

08007648 <disk_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8007648:	b510      	push	{r4, lr}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(buff, sector, count);
 800764a:	4c06      	ldr	r4, [pc, #24]	; (8007664 <disk_read+0x1c>)
 800764c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007650:	6840      	ldr	r0, [r0, #4]
 8007652:	6884      	ldr	r4, [r0, #8]
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	461a      	mov	r2, r3
 800765a:	4623      	mov	r3, r4
  return res;
}
 800765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(buff, sector, count);
 8007660:	4718      	bx	r3
 8007662:	bf00      	nop
 8007664:	20016dbc 	.word	0x20016dbc

08007668 <disk_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8007668:	b510      	push	{r4, lr}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(buff, sector, count);
 800766a:	4c06      	ldr	r4, [pc, #24]	; (8007684 <disk_write+0x1c>)
 800766c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007670:	6840      	ldr	r0, [r0, #4]
 8007672:	68c4      	ldr	r4, [r0, #12]
 8007674:	4608      	mov	r0, r1
 8007676:	4611      	mov	r1, r2
 8007678:	461a      	mov	r2, r3
 800767a:	4623      	mov	r3, r4
  return res;
}
 800767c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if _USE_WRITE == 1
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(buff, sector, count);
 8007680:	4718      	bx	r3
 8007682:	bf00      	nop
 8007684:	20016dbc 	.word	0x20016dbc

08007688 <disk_ioctl>:
#if _USE_IOCTL == 1
DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(cmd, buff);
 8007688:	4b03      	ldr	r3, [pc, #12]	; (8007698 <disk_ioctl+0x10>)
 800768a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800768e:	6843      	ldr	r3, [r0, #4]
 8007690:	4608      	mov	r0, r1
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	4611      	mov	r1, r2
 8007696:	4718      	bx	r3
 8007698:	20016dbc 	.word	0x20016dbc

0800769c <get_fattime>:
  * @retval Time in DWORD
  */
DWORD get_fattime (void)
{
  return 0;
}
 800769c:	2000      	movs	r0, #0
 800769e:	4770      	bx	lr

080076a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80076a0:	b510      	push	{r4, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80076a2:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <FATFS_LinkDriver+0x3c>)
 80076a4:	7a1a      	ldrb	r2, [r3, #8]
 80076a6:	2a01      	cmp	r2, #1
 80076a8:	d815      	bhi.n	80076d6 <FATFS_LinkDriver+0x36>
  {
    disk.is_initialized[disk.nbr] = 0;
 80076aa:	7a1c      	ldrb	r4, [r3, #8]
 80076ac:	b2e4      	uxtb	r4, r4
 80076ae:	2200      	movs	r2, #0
 80076b0:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;  
 80076b2:	7a1c      	ldrb	r4, [r3, #8]
 80076b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076b8:	6060      	str	r0, [r4, #4]
    DiskNum = disk.nbr++;
 80076ba:	7a18      	ldrb	r0, [r3, #8]
 80076bc:	b2c0      	uxtb	r0, r0
 80076be:	1c44      	adds	r4, r0, #1
 80076c0:	b2e4      	uxtb	r4, r4
 80076c2:	721c      	strb	r4, [r3, #8]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80076c4:	233a      	movs	r3, #58	; 0x3a
  if(disk.nbr <= _VOLUMES)
  {
    disk.is_initialized[disk.nbr] = 0;
    disk.drv[disk.nbr] = drv;  
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
 80076c6:	3030      	adds	r0, #48	; 0x30
    path[1] = ':';
 80076c8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80076ca:	232f      	movs	r3, #47	; 0x2f
  if(disk.nbr <= _VOLUMES)
  {
    disk.is_initialized[disk.nbr] = 0;
    disk.drv[disk.nbr] = drv;  
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
 80076cc:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
    path[2] = '/';
 80076ce:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80076d0:	70ca      	strb	r2, [r1, #3]
    ret = 0;
 80076d2:	4610      	mov	r0, r2
 80076d4:	bd10      	pop	{r4, pc}
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  uint8_t ret = 1;
 80076d6:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }
  
  return ret;
}
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	20016dbc 	.word	0x20016dbc

080076e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static 
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076e0:	3801      	subs	r0, #1
 80076e2:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80076e4:	4291      	cmp	r1, r2
 80076e6:	d004      	beq.n	80076f2 <mem_cpy+0x12>
		*d++ = *s++;
 80076e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ec:	f800 3f01 	strb.w	r3, [r0, #1]!
 80076f0:	e7f8      	b.n	80076e4 <mem_cpy+0x4>
}
 80076f2:	4770      	bx	lr

080076f4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80076f4:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80076f6:	4290      	cmp	r0, r2
 80076f8:	d002      	beq.n	8007700 <mem_set+0xc>
		*d++ = (BYTE)val;
 80076fa:	f800 1b01 	strb.w	r1, [r0], #1
 80076fe:	e7fa      	b.n	80076f6 <mem_set+0x2>
}
 8007700:	4770      	bx	lr

08007702 <get_ldnumber>:
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
 8007702:	6803      	ldr	r3, [r0, #0]

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007704:	b510      	push	{r4, lr}
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
 8007706:	b193      	cbz	r3, 800772e <get_ldnumber+0x2c>
 8007708:	461a      	mov	r2, r3
 800770a:	4614      	mov	r4, r2
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800770c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007710:	2920      	cmp	r1, #32
 8007712:	d90a      	bls.n	800772a <get_ldnumber+0x28>
 8007714:	293a      	cmp	r1, #58	; 0x3a
 8007716:	d1f8      	bne.n	800770a <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8007718:	461a      	mov	r2, r3
 800771a:	f812 1b01 	ldrb.w	r1, [r2], #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800771e:	4294      	cmp	r4, r2
 8007720:	d105      	bne.n	800772e <get_ldnumber+0x2c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007722:	2930      	cmp	r1, #48	; 0x30
 8007724:	d103      	bne.n	800772e <get_ldnumber+0x2c>
					vol = (int)i;
					*path = ++tt;
 8007726:	3302      	adds	r3, #2
 8007728:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800772a:	2000      	movs	r0, #0
 800772c:	bd10      	pop	{r4, pc}
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800772e:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8007732:	bd10      	pop	{r4, pc}

08007734 <sync_window.part.2>:
/*-----------------------------------------------------------------------*/
/* Move/Flush disk access window in the file system object               */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT sync_window (
 8007734:	b570      	push	{r4, r5, r6, lr}
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
 8007736:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
/*-----------------------------------------------------------------------*/
/* Move/Flush disk access window in the file system object               */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT sync_window (
 800773a:	4604      	mov	r4, r0
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
 800773c:	4621      	mov	r1, r4
 800773e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8007742:	462a      	mov	r2, r5
 8007744:	2301      	movs	r3, #1
 8007746:	f7ff ff8f 	bl	8007668 <disk_write>
 800774a:	b9d0      	cbnz	r0, 8007782 <sync_window.part.2+0x4e>
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800774c:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8007750:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218

	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
 8007754:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007758:	1aeb      	subs	r3, r5, r3
 800775a:	4293      	cmp	r3, r2
 800775c:	d301      	bcc.n	8007762 <sync_window.part.2+0x2e>
				wsect += fs->fsize;
				disk_write(fs->drv, fs->win.d8, wsect, 1);
			}
		}
	}
	return FR_OK;
 800775e:	2000      	movs	r0, #0
 8007760:	bd70      	pop	{r4, r5, r6, pc}
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007762:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8007766:	2e01      	cmp	r6, #1
 8007768:	d9f9      	bls.n	800775e <sync_window.part.2+0x2a>
				wsect += fs->fsize;
 800776a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
				disk_write(fs->drv, fs->win.d8, wsect, 1);
 800776e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
				wsect += fs->fsize;
 8007772:	441d      	add	r5, r3
				disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007774:	4621      	mov	r1, r4
 8007776:	462a      	mov	r2, r5
 8007778:	2301      	movs	r3, #1
 800777a:	f7ff ff75 	bl	8007668 <disk_write>
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800777e:	3e01      	subs	r6, #1
 8007780:	e7f1      	b.n	8007766 <sync_window.part.2+0x32>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
 8007782:	2001      	movs	r0, #1
				disk_write(fs->drv, fs->win.d8, wsect, 1);
			}
		}
	}
	return FR_OK;
}
 8007784:	bd70      	pop	{r4, r5, r6, pc}

08007786 <sync_window>:
{
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007786:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 800778a:	b10b      	cbz	r3, 8007790 <sync_window+0xa>
 800778c:	f7ff bfd2 	b.w	8007734 <sync_window.part.2>
				disk_write(fs->drv, fs->win.d8, wsect, 1);
			}
		}
	}
	return FR_OK;
}
 8007790:	4618      	mov	r0, r3
 8007792:	4770      	bx	lr

08007794 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4604      	mov	r4, r0
	FRESULT res;


	res = sync_window(fs);
 8007798:	f7ff fff5 	bl	8007786 <sync_window>
 800779c:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800779e:	2d00      	cmp	r5, #0
 80077a0:	d155      	bne.n	800784e <sync_fs+0xba>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80077a2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d148      	bne.n	800783c <sync_fs+0xa8>
 80077aa:	f894 6205 	ldrb.w	r6, [r4, #517]	; 0x205
 80077ae:	2e01      	cmp	r6, #1
 80077b0:	d144      	bne.n	800783c <sync_fs+0xa8>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80077b2:	4620      	mov	r0, r4
 80077b4:	4629      	mov	r1, r5
 80077b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ba:	f7ff ff9b 	bl	80076f4 <mem_set>
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
 80077be:	2355      	movs	r3, #85	; 0x55
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
 80077c0:	2241      	movs	r2, #65	; 0x41
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
 80077c2:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
 80077c6:	23aa      	movs	r3, #170	; 0xaa
 80077c8:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
 80077cc:	70e2      	strb	r2, [r4, #3]
 80077ce:	2352      	movs	r3, #82	; 0x52
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 80077d0:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
 80077d4:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
 80077d8:	7023      	strb	r3, [r4, #0]
 80077da:	7063      	strb	r3, [r4, #1]
 80077dc:	2361      	movs	r3, #97	; 0x61
 80077de:	70a3      	strb	r3, [r4, #2]
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 80077e0:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
 80077e4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80077e8:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
 80077ec:	f884 31e9 	strb.w	r3, [r4, #489]	; 0x1e9
 80077f0:	0c13      	lsrs	r3, r2, #16
 80077f2:	0e12      	lsrs	r2, r2, #24
 80077f4:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
 80077f8:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
 80077fc:	f884 31ea 	strb.w	r3, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
 8007800:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8007804:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8007808:	f884 31ed 	strb.w	r3, [r4, #493]	; 0x1ed
 800780c:	0c13      	lsrs	r3, r2, #16
 800780e:	0e12      	lsrs	r2, r2, #24
 8007810:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007814:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
 8007818:	f884 31ee 	strb.w	r3, [r4, #494]	; 0x1ee
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 800781c:	2172      	movs	r1, #114	; 0x72
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800781e:	3201      	adds	r2, #1
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 8007820:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
 8007824:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007828:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800782c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007830:	4621      	mov	r1, r4
 8007832:	4633      	mov	r3, r6
 8007834:	f7ff ff18 	bl	8007668 <disk_write>
			fs->fsi_flag = 0;
 8007838:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800783c:	2100      	movs	r1, #0
 800783e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007842:	460a      	mov	r2, r1
 8007844:	f7ff ff20 	bl	8007688 <disk_ioctl>
 8007848:	3000      	adds	r0, #0
 800784a:	bf18      	it	ne
 800784c:	2001      	movne	r0, #1
			res = FR_DISK_ERR;
	}

	return res;
}
 800784e:	bd70      	pop	{r4, r5, r6, pc}

08007850 <move_window>:
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
	if (sector != fs->winsect) {	/* Changed current window */
 8007850:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8007854:	4299      	cmp	r1, r3
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007856:	b570      	push	{r4, r5, r6, lr}
 8007858:	4605      	mov	r5, r0
 800785a:	460e      	mov	r6, r1
	if (sector != fs->winsect) {	/* Changed current window */
 800785c:	d011      	beq.n	8007882 <move_window+0x32>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 800785e:	f7ff ff92 	bl	8007786 <sync_window>
 8007862:	4604      	mov	r4, r0
 8007864:	b108      	cbz	r0, 800786a <move_window+0x1a>
			return FR_DISK_ERR;
 8007866:	2401      	movs	r4, #1
 8007868:	e00c      	b.n	8007884 <move_window+0x34>
#endif
		if (disk_read(fs->drv, fs->win.d8, sector, 1))
 800786a:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 800786e:	4629      	mov	r1, r5
 8007870:	4632      	mov	r2, r6
 8007872:	2301      	movs	r3, #1
 8007874:	f7ff fee8 	bl	8007648 <disk_read>
 8007878:	2800      	cmp	r0, #0
 800787a:	d1f4      	bne.n	8007866 <move_window+0x16>
			return FR_DISK_ERR;
		fs->winsect = sector;
 800787c:	f8c5 622c 	str.w	r6, [r5, #556]	; 0x22c
 8007880:	e000      	b.n	8007884 <move_window+0x34>
	}

	return FR_OK;
 8007882:	2400      	movs	r4, #0
}
 8007884:	4620      	mov	r0, r4
 8007886:	bd70      	pop	{r4, r5, r6, pc}

08007888 <check_fs>:
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007888:	2300      	movs	r3, #0
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800788a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800788c:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8007890:	f04f 33ff 	mov.w	r3, #4294967295
 8007894:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007898:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800789a:	f7ff ffd9 	bl	8007850 <move_window>
 800789e:	bb80      	cbnz	r0, 8007902 <check_fs+0x7a>
		return 3;

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80078a0:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80078a4:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80078a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80078ac:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d128      	bne.n	8007906 <check_fs+0x7e>
		return 2;

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80078b4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80078b8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80078bc:	041b      	lsls	r3, r3, #16
 80078be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80078c2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80078cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80078d0:	4a0e      	ldr	r2, [pc, #56]	; (800790c <check_fs+0x84>)
 80078d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d016      	beq.n	8007908 <check_fs+0x80>
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80078da:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80078de:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
 80078e2:	041b      	lsls	r3, r3, #16
 80078e4:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80078e8:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80078ec:	4303      	orrs	r3, r0
 80078ee:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 80078f2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80078f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
 80078fa:	1a80      	subs	r0, r0, r2
 80078fc:	bf18      	it	ne
 80078fe:	2001      	movne	r0, #1
 8007900:	bd10      	pop	{r4, pc}
 8007902:	2003      	movs	r0, #3
 8007904:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
 8007906:	2002      	movs	r0, #2
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
 8007908:	bd10      	pop	{r4, pc}
 800790a:	bf00      	nop
 800790c:	00544146 	.word	0x00544146

08007910 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007912:	2300      	movs	r3, #0
 8007914:	6003      	str	r3, [r0, #0]
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007916:	b085      	sub	sp, #20
 8007918:	4607      	mov	r7, r0
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
 800791a:	4608      	mov	r0, r1
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800791c:	4615      	mov	r5, r2
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
 800791e:	f7ff fef0 	bl	8007702 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007922:	1e06      	subs	r6, r0, #0
 8007924:	f2c0 8177 	blt.w	8007c16 <find_volume+0x306>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007928:	4bc0      	ldr	r3, [pc, #768]	; (8007c2c <find_volume+0x31c>)
 800792a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800792e:	2c00      	cmp	r4, #0
 8007930:	f000 8173 	beq.w	8007c1a <find_volume+0x30a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007934:	603c      	str	r4, [r7, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007936:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800793a:	b18b      	cbz	r3, 8007960 <find_volume+0x50>
		stat = disk_status(fs->drv);
 800793c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007940:	f7ff fe7a 	bl	8007638 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007944:	07c7      	lsls	r7, r0, #31
 8007946:	d40b      	bmi.n	8007960 <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007948:	2d00      	cmp	r5, #0
 800794a:	f000 8168 	beq.w	8007c1e <find_volume+0x30e>
 800794e:	f000 0304 	and.w	r3, r0, #4
 8007952:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8166 	beq.w	8007c28 <find_volume+0x318>
				return FR_WRITE_PROTECTED;
 800795c:	200a      	movs	r0, #10
 800795e:	e163      	b.n	8007c28 <find_volume+0x318>

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007960:	b2f0      	uxtb	r0, r6
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007962:	2300      	movs	r3, #0
 8007964:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007968:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800796c:	f7ff fe56 	bl	800761c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007970:	07c6      	lsls	r6, r0, #31
 8007972:	f100 8156 	bmi.w	8007c22 <find_volume+0x312>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007976:	b10d      	cbz	r5, 800797c <find_volume+0x6c>
 8007978:	0741      	lsls	r1, r0, #29
 800797a:	d4ef      	bmi.n	800795c <find_volume+0x4c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800797c:	4620      	mov	r0, r4
 800797e:	2100      	movs	r1, #0
 8007980:	f7ff ff82 	bl	8007888 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007984:	2801      	cmp	r0, #1
 8007986:	d128      	bne.n	80079da <find_volume+0xca>
 8007988:	4621      	mov	r1, r4
 800798a:	2000      	movs	r0, #0
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win.d8+MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800798c:	f891 31c2 	ldrb.w	r3, [r1, #450]	; 0x1c2
 8007990:	b16b      	cbz	r3, 80079ae <find_volume+0x9e>
 8007992:	f891 31c8 	ldrb.w	r3, [r1, #456]	; 0x1c8
 8007996:	f891 21c9 	ldrb.w	r2, [r1, #457]	; 0x1c9
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80079a0:	f891 21c6 	ldrb.w	r2, [r1, #454]	; 0x1c6
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f891 21c7 	ldrb.w	r2, [r1, #455]	; 0x1c7
 80079aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80079ae:	f84d 3020 	str.w	r3, [sp, r0, lsl #2]
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80079b2:	3001      	adds	r0, #1
 80079b4:	2804      	cmp	r0, #4
 80079b6:	f101 0110 	add.w	r1, r1, #16
 80079ba:	d1e7      	bne.n	800798c <find_volume+0x7c>
 80079bc:	2600      	movs	r6, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
 80079be:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80079c2:	b12d      	cbz	r5, 80079d0 <find_volume+0xc0>
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7ff ff5e 	bl	8007888 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80079cc:	b908      	cbnz	r0, 80079d2 <find_volume+0xc2>
 80079ce:	e00b      	b.n	80079e8 <find_volume+0xd8>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80079d0:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80079d2:	3601      	adds	r6, #1
 80079d4:	2e04      	cmp	r6, #4
 80079d6:	d1f2      	bne.n	80079be <find_volume+0xae>
 80079d8:	e000      	b.n	80079dc <find_volume+0xcc>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80079da:	2500      	movs	r5, #0
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80079dc:	2803      	cmp	r0, #3
 80079de:	f000 8122 	beq.w	8007c26 <find_volume+0x316>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80079e2:	b108      	cbz	r0, 80079e8 <find_volume+0xd8>
 80079e4:	200d      	movs	r0, #13
 80079e6:	e11f      	b.n	8007c28 <find_volume+0x318>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80079e8:	7b22      	ldrb	r2, [r4, #12]
 80079ea:	7ae3      	ldrb	r3, [r4, #11]
 80079ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80079f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f4:	d1f6      	bne.n	80079e4 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win.d8+BPB_FATSz16);				/* Number of sectors per FAT */
 80079f6:	7de0      	ldrb	r0, [r4, #23]
 80079f8:	7da3      	ldrb	r3, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8+BPB_FATSz32);
 80079fa:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
 80079fe:	d10d      	bne.n	8007a1c <find_volume+0x10c>
 8007a00:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8007a04:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007a0e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8007a12:	4303      	orrs	r3, r0
 8007a14:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8007a18:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	fs->fsize = fasize;

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007a1c:	7c26      	ldrb	r6, [r4, #16]
	if (LD_WORD(fs->win.d8+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win.d8+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win.d8+BPB_FATSz32);
	fs->fsize = fasize;
 8007a1e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007a22:	1e73      	subs	r3, r6, #1
 8007a24:	2b01      	cmp	r3, #1

	fasize = LD_WORD(fs->win.d8+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win.d8+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007a26:	f884 6203 	strb.w	r6, [r4, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007a2a:	d8db      	bhi.n	80079e4 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007a2c:	7b63      	ldrb	r3, [r4, #13]
 8007a2e:	f884 3202 	strb.w	r3, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0d6      	beq.n	80079e4 <find_volume+0xd4>
 8007a36:	1e5a      	subs	r2, r3, #1
 8007a38:	421a      	tst	r2, r3
 8007a3a:	d1d3      	bne.n	80079e4 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win.d8+BPB_RootEntCnt);	/* Number of root directory entries */
 8007a3c:	7c62      	ldrb	r2, [r4, #17]
 8007a3e:	7ca7      	ldrb	r7, [r4, #18]
 8007a40:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 8007a44:	073a      	lsls	r2, r7, #28

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win.d8+BPB_RootEntCnt);	/* Number of root directory entries */
 8007a46:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 8007a4a:	d1cb      	bne.n	80079e4 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win.d8+BPB_TotSec16);				/* Number of sectors on the volume */
 8007a4c:	7d21      	ldrb	r1, [r4, #20]
 8007a4e:	7ce2      	ldrb	r2, [r4, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8+BPB_TotSec32);
 8007a50:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8007a54:	d10d      	bne.n	8007a72 <find_volume+0x162>
 8007a56:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8007a5a:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8007a5e:	0412      	lsls	r2, r2, #16
 8007a60:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a64:	f894 1020 	ldrb.w	r1, [r4, #32]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8007a6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

	nrsv = LD_WORD(fs->win.d8+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8007a72:	f894 e00f 	ldrb.w	lr, [r4, #15]
 8007a76:	7ba1      	ldrb	r1, [r4, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007a78:	ea51 210e 	orrs.w	r1, r1, lr, lsl #8
 8007a7c:	d0b2      	beq.n	80079e4 <find_volume+0xd4>
	fs->fsize = fasize;

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007a7e:	fb06 fe00 	mul.w	lr, r6, r0
 8007a82:	eb01 1c17 	add.w	ip, r1, r7, lsr #4

	nrsv = LD_WORD(fs->win.d8+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8007a86:	44f4      	add	ip, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a88:	4562      	cmp	r2, ip
 8007a8a:	d3ab      	bcc.n	80079e4 <find_volume+0xd4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007a8c:	ebcc 0202 	rsb	r2, ip, r2
 8007a90:	fbb2 f3f3 	udiv	r3, r2, r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0a5      	beq.n	80079e4 <find_volume+0xd4>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007a98:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d906      	bls.n	8007aae <find_volume+0x19e>
 8007aa0:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8007aa4:	42b3      	cmp	r3, r6
 8007aa6:	bf8c      	ite	hi
 8007aa8:	2603      	movhi	r6, #3
 8007aaa:	2602      	movls	r6, #2
 8007aac:	e000      	b.n	8007ab0 <find_volume+0x1a0>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
 8007aae:	2601      	movs	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007ab0:	186a      	adds	r2, r5, r1
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007ab2:	3302      	adds	r3, #2
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
 8007ab4:	eb0c 0105 	add.w	r1, ip, r5
	if (fmt == FS_FAT32) {
 8007ab8:	2e03      	cmp	r6, #3
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007aba:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8007abe:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007ac2:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007ac6:	f8c4 1228 	str.w	r1, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8007aca:	d113      	bne.n	8007af4 <find_volume+0x1e4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007acc:	2f00      	cmp	r7, #0
 8007ace:	d189      	bne.n	80079e4 <find_volume+0xd4>
		fs->dirbase = LD_DWORD(fs->win.d8+BPB_RootClus);	/* Root directory start cluster */
 8007ad0:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8007ad4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8007ad8:	0412      	lsls	r2, r2, #16
 8007ada:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007ade:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8007ae8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007aec:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	e00f      	b.n	8007b14 <find_volume+0x204>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007af4:	2f00      	cmp	r7, #0
 8007af6:	f43f af75 	beq.w	80079e4 <find_volume+0xd4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007afa:	4472      	add	r2, lr
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007afc:	2e02      	cmp	r6, #2
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win.d8+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007afe:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8007b02:	ea4f 0243 	mov.w	r2, r3, lsl #1
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b06:	bf1b      	ittet	ne
 8007b08:	18d2      	addne	r2, r2, r3
 8007b0a:	f003 0301 	andne.w	r3, r3, #1
 8007b0e:	4613      	moveq	r3, r2
 8007b10:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 8007b14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007b18:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
 8007b1c:	f4ff af62 	bcc.w	80079e4 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295
 8007b24:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8007b28:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007b2c:	2e03      	cmp	r6, #3
#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007b2e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007b32:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007b36:	d157      	bne.n	8007be8 <find_volume+0x2d8>
		&& LD_WORD(fs->win.d8+BPB_FSInfo) == 1
 8007b38:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8007b3c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007b40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d14f      	bne.n	8007be8 <find_volume+0x2d8>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007b48:	4620      	mov	r0, r4
 8007b4a:	1c69      	adds	r1, r5, #1
 8007b4c:	f7ff fe80 	bl	8007850 <move_window>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d149      	bne.n	8007be8 <find_volume+0x2d8>
	{
		fs->fsi_flag = 0;
		if (LD_WORD(fs->win.d8+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007b54:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8007b58:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win.d8+BPB_FSInfo) == 1
		&& move_window(fs, bsect + 1) == FR_OK)
	{
		fs->fsi_flag = 0;
 8007b5c:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007b60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b64:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d13d      	bne.n	8007be8 <find_volume+0x2d8>
			&& LD_DWORD(fs->win.d8+FSI_LeadSig) == 0x41615252
 8007b6c:	78a3      	ldrb	r3, [r4, #2]
 8007b6e:	78e2      	ldrb	r2, [r4, #3]
 8007b70:	041b      	lsls	r3, r3, #16
 8007b72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007b76:	7822      	ldrb	r2, [r4, #0]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	7862      	ldrb	r2, [r4, #1]
 8007b7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b80:	4a2b      	ldr	r2, [pc, #172]	; (8007c30 <find_volume+0x320>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d130      	bne.n	8007be8 <find_volume+0x2d8>
			&& LD_DWORD(fs->win.d8+FSI_StrucSig) == 0x61417272)
 8007b86:	f894 31e6 	ldrb.w	r3, [r4, #486]	; 0x1e6
 8007b8a:	f894 21e7 	ldrb.w	r2, [r4, #487]	; 0x1e7
 8007b8e:	041b      	lsls	r3, r3, #16
 8007b90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007b94:	f894 21e4 	ldrb.w	r2, [r4, #484]	; 0x1e4
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f894 21e5 	ldrb.w	r2, [r4, #485]	; 0x1e5
 8007b9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ba2:	4a24      	ldr	r2, [pc, #144]	; (8007c34 <find_volume+0x324>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d11f      	bne.n	8007be8 <find_volume+0x2d8>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8+FSI_Free_Count);
 8007ba8:	f894 31ea 	ldrb.w	r3, [r4, #490]	; 0x1ea
 8007bac:	f894 21eb 	ldrb.w	r2, [r4, #491]	; 0x1eb
 8007bb0:	041b      	lsls	r3, r3, #16
 8007bb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007bb6:	f894 21e8 	ldrb.w	r2, [r4, #488]	; 0x1e8
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f894 21e9 	ldrb.w	r2, [r4, #489]	; 0x1e9
 8007bc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007bc4:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8+FSI_Nxt_Free);
 8007bc8:	f894 31ee 	ldrb.w	r3, [r4, #494]	; 0x1ee
 8007bcc:	f894 21ef 	ldrb.w	r2, [r4, #495]	; 0x1ef
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007bd6:	f894 21ec 	ldrb.w	r2, [r4, #492]	; 0x1ec
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f894 21ed 	ldrb.w	r2, [r4, #493]	; 0x1ed
 8007be0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007be4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
	fs->id = ++Fsid;	/* File system mount ID */
 8007be8:	4a13      	ldr	r2, [pc, #76]	; (8007c38 <find_volume+0x328>)
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007bea:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8007bee:	8813      	ldrh	r3, [r2, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8013      	strh	r3, [r2, #0]
 8007bf6:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <find_volume+0x32c>)
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	42a2      	cmp	r2, r4
 8007c00:	bf04      	itt	eq
 8007c02:	2200      	moveq	r2, #0
 8007c04:	601a      	streq	r2, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	f04f 0000 	mov.w	r0, #0
 8007c0e:	d10b      	bne.n	8007c28 <find_volume+0x318>
 8007c10:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <find_volume+0x32c>)
 8007c12:	60d8      	str	r0, [r3, #12]
 8007c14:	e008      	b.n	8007c28 <find_volume+0x318>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c16:	200b      	movs	r0, #11
 8007c18:	e006      	b.n	8007c28 <find_volume+0x318>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c1a:	200c      	movs	r0, #12
 8007c1c:	e004      	b.n	8007c28 <find_volume+0x318>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
 8007c1e:	4628      	mov	r0, r5
 8007c20:	e002      	b.n	8007c28 <find_volume+0x318>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c22:	2003      	movs	r0, #3
 8007c24:	e000      	b.n	8007c28 <find_volume+0x318>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c26:	2001      	movs	r0, #1
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8007c28:	b005      	add	sp, #20
 8007c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2c:	20016de4 	.word	0x20016de4
 8007c30:	41615252 	.word	0x41615252
 8007c34:	61417272 	.word	0x61417272
 8007c38:	20016dc8 	.word	0x20016dc8
 8007c3c:	20016dcc 	.word	0x20016dcc

08007c40 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8007c40:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8007c44:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8007c46:	3b02      	subs	r3, #2
 8007c48:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8007c4a:	bf3d      	ittte	cc
 8007c4c:	f890 2202 	ldrbcc.w	r2, [r0, #514]	; 0x202
 8007c50:	f8d0 3228 	ldrcc.w	r3, [r0, #552]	; 0x228
 8007c54:	fb02 3001 	mlacc	r0, r2, r1, r3
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8007c58:	2000      	movcs	r0, #0
	return clst * fs->csize + fs->database;
}
 8007c5a:	4770      	bx	lr

08007c5c <get_fat>:
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8007c5c:	2901      	cmp	r1, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8007c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c60:	4606      	mov	r6, r0
 8007c62:	460c      	mov	r4, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8007c64:	d959      	bls.n	8007d1a <get_fat+0xbe>
 8007c66:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007c6a:	4299      	cmp	r1, r3
 8007c6c:	d255      	bcs.n	8007d1a <get_fat+0xbe>
		return 1;

	switch (fs->fs_type) {
 8007c6e:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d027      	beq.n	8007cc6 <get_fat+0x6a>
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d036      	beq.n	8007ce8 <get_fat+0x8c>
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d14d      	bne.n	8007d1a <get_fat+0xbe>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8007c7e:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8007c82:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007c86:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8007c8a:	f7ff fde1 	bl	8007850 <move_window>
 8007c8e:	b110      	cbz	r0, 8007c96 <get_fat+0x3a>

	default:
		return 1;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win.d8[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8007c96:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win.d8[bc % SS(fs)]; bc++;
 8007c9a:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8007c9e:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	eb01 2157 	add.w	r1, r1, r7, lsr #9

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win.d8[bc % SS(fs)]; bc++;
 8007ca6:	5cf5      	ldrb	r5, [r6, r3]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8007ca8:	f7ff fdd2 	bl	8007850 <move_window>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1ef      	bne.n	8007c90 <get_fat+0x34>
		wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007cb0:	f3c7 0708 	ubfx	r7, r7, #0, #9
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007cb4:	07e3      	lsls	r3, r4, #31
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win.d8[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007cb6:	5df0      	ldrb	r0, [r6, r7]
 8007cb8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007cbc:	bf4c      	ite	mi
 8007cbe:	0900      	lsrmi	r0, r0, #4
 8007cc0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8007cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8007cc6:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007cca:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007cce:	f7ff fdbf 	bl	8007850 <move_window>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d1dc      	bne.n	8007c90 <get_fat+0x34>
		p = &fs->win.d8[clst * 2 % SS(fs)];
 8007cd6:	0064      	lsls	r4, r4, #1
 8007cd8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
		return LD_WORD(p);
 8007cdc:	5d33      	ldrb	r3, [r6, r4]
 8007cde:	4434      	add	r4, r6
 8007ce0:	7860      	ldrb	r0, [r4, #1]
 8007ce2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8007ce8:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007cec:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007cf0:	f7ff fdae 	bl	8007850 <move_window>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d1cb      	bne.n	8007c90 <get_fat+0x34>
		p = &fs->win.d8[clst * 4 % SS(fs)];
 8007cf8:	00a4      	lsls	r4, r4, #2
 8007cfa:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007cfe:	1933      	adds	r3, r6, r4
		return LD_DWORD(p) & 0x0FFFFFFF;
 8007d00:	78d8      	ldrb	r0, [r3, #3]
 8007d02:	789a      	ldrb	r2, [r3, #2]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	0600      	lsls	r0, r0, #24
 8007d08:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007d0c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007d10:	5d33      	ldrb	r3, [r6, r4]
 8007d12:	4318      	orrs	r0, r3
 8007d14:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8007d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	default:
		return 1;
 8007d1a:	2001      	movs	r0, #1
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
 8007d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d1e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007d20:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007d24:	4605      	mov	r5, r0
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007d26:	2c01      	cmp	r4, #1
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007d28:	460e      	mov	r6, r1
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007d2a:	f8a5 1206 	strh.w	r1, [r5, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007d2e:	d101      	bne.n	8007d34 <dir_sdi+0x16>
		return FR_INT_ERR;
 8007d30:	2002      	movs	r0, #2
 8007d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007d34:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8007d38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007d3c:	4294      	cmp	r4, r2
 8007d3e:	d2f7      	bcs.n	8007d30 <dir_sdi+0x12>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007d40:	b974      	cbnz	r4, 8007d60 <dir_sdi+0x42>
 8007d42:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8007d46:	2a03      	cmp	r2, #3
 8007d48:	d102      	bne.n	8007d50 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8007d4a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007d4e:	b932      	cbnz	r2, 8007d5e <dir_sdi+0x40>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007d50:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 8007d54:	4296      	cmp	r6, r2
 8007d56:	d2eb      	bcs.n	8007d30 <dir_sdi+0x12>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
 8007d58:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8007d5c:	e01c      	b.n	8007d98 <dir_sdi+0x7a>
 8007d5e:	4614      	mov	r4, r2
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
 8007d60:	f893 7202 	ldrb.w	r7, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8007d64:	4621      	mov	r1, r4
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
 8007d66:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8007d68:	42be      	cmp	r6, r7
 8007d6a:	d310      	bcc.n	8007d8e <dir_sdi+0x70>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007d6c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8007d70:	f7ff ff74 	bl	8007c5c <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d74:	1c43      	adds	r3, r0, #1
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007d76:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d78:	d020      	beq.n	8007dbc <dir_sdi+0x9e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007d7a:	2801      	cmp	r0, #1
 8007d7c:	d9d8      	bls.n	8007d30 <dir_sdi+0x12>
 8007d7e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8007d82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d86:	4298      	cmp	r0, r3
 8007d88:	d2d2      	bcs.n	8007d30 <dir_sdi+0x12>
				return FR_INT_ERR;
			idx -= ic;
 8007d8a:	1bf6      	subs	r6, r6, r7
 8007d8c:	e7ec      	b.n	8007d68 <dir_sdi+0x4a>
		}
		sect = clust2sect(dp->fs, clst);
 8007d8e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8007d92:	460c      	mov	r4, r1
 8007d94:	f7ff ff54 	bl	8007c40 <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
 8007d98:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d0c7      	beq.n	8007d30 <dir_sdi+0x12>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8007da0:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
 8007da4:	eb00 1016 	add.w	r0, r0, r6, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8007da8:	f006 060f 	and.w	r6, r6, #15
 8007dac:	eb03 1646 	add.w	r6, r3, r6, lsl #5
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
 8007db0:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8007db4:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214

	return FR_OK;
 8007db8:	2000      	movs	r0, #0
 8007dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007dbc:	2001      	movs	r0, #1
	if (!sect) return FR_INT_ERR;
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;
}
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007dc0 <put_fat>:
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007dc0:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8007dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007dca:	d96b      	bls.n	8007ea4 <put_fat+0xe4>
 8007dcc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	d267      	bcs.n	8007ea4 <put_fat+0xe4>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
 8007dd4:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d035      	beq.n	8007e48 <put_fat+0x88>
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d043      	beq.n	8007e68 <put_fat+0xa8>
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d15a      	bne.n	8007e9a <put_fat+0xda>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007de4:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007de8:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007dec:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8007df0:	f7ff fd2e 	bl	8007850 <move_window>
			if (res != FR_OK) break;
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d151      	bne.n	8007e9c <put_fat+0xdc>
			p = &fs->win.d8[bc % SS(fs)];
 8007df8:	f3c5 0108 	ubfx	r1, r5, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007dfc:	f014 0401 	ands.w	r4, r4, #1
 8007e00:	bf18      	it	ne
 8007e02:	5c7a      	ldrbne	r2, [r7, r1]
 8007e04:	b2f3      	uxtb	r3, r6
 8007e06:	bf1e      	ittt	ne
 8007e08:	f002 020f 	andne.w	r2, r2, #15
 8007e0c:	ea42 1303 	orrne.w	r3, r2, r3, lsl #4
 8007e10:	b2db      	uxtbne	r3, r3
 8007e12:	547b      	strb	r3, [r7, r1]
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e14:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win.d8[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
 8007e18:	3501      	adds	r5, #1
			fs->wflag = 1;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e20:	4638      	mov	r0, r7
 8007e22:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8007e26:	f7ff fd13 	bl	8007850 <move_window>
			if (res != FR_OK) break;
 8007e2a:	bbb8      	cbnz	r0, 8007e9c <put_fat+0xdc>
			p = &fs->win.d8[bc % SS(fs)];
 8007e2c:	f3c5 0508 	ubfx	r5, r5, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e30:	b114      	cbz	r4, 8007e38 <put_fat+0x78>
 8007e32:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8007e36:	e005      	b.n	8007e44 <put_fat+0x84>
 8007e38:	5d7a      	ldrb	r2, [r7, r5]
 8007e3a:	f022 030f 	bic.w	r3, r2, #15
 8007e3e:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8007e42:	431a      	orrs	r2, r3
 8007e44:	557a      	strb	r2, [r7, r5]
 8007e46:	e029      	b.n	8007e9c <put_fat+0xdc>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007e48:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007e4c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007e50:	f7ff fcfe 	bl	8007850 <move_window>
			if (res != FR_OK) break;
 8007e54:	bb10      	cbnz	r0, 8007e9c <put_fat+0xdc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007e56:	0064      	lsls	r4, r4, #1
 8007e58:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8007e5c:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8007e60:	553e      	strb	r6, [r7, r4]
 8007e62:	443c      	add	r4, r7
 8007e64:	7062      	strb	r2, [r4, #1]
 8007e66:	e019      	b.n	8007e9c <put_fat+0xdc>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e68:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007e6c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007e70:	f7ff fcee 	bl	8007850 <move_window>
			if (res != FR_OK) break;
 8007e74:	b990      	cbnz	r0, 8007e9c <put_fat+0xdc>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007e76:	00a4      	lsls	r4, r4, #2
 8007e78:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007e7c:	193b      	adds	r3, r7, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8007e7e:	78da      	ldrb	r2, [r3, #3]
 8007e80:	0612      	lsls	r2, r2, #24
 8007e82:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007e86:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
 8007e88:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007e8c:	553a      	strb	r2, [r7, r4]
 8007e8e:	7059      	strb	r1, [r3, #1]
 8007e90:	0c11      	lsrs	r1, r2, #16
 8007e92:	0e12      	lsrs	r2, r2, #24
 8007e94:	7099      	strb	r1, [r3, #2]
 8007e96:	70da      	strb	r2, [r3, #3]
 8007e98:	e000      	b.n	8007e9c <put_fat+0xdc>
			break;

		default :
			res = FR_INT_ERR;
 8007e9a:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8007ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 8007ea4:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 8007ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ea8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8007eac:	460f      	mov	r7, r1
 8007eae:	b941      	cbnz	r1, 8007ec2 <create_chain+0x1a>
		scl = fs->last_clust;			/* Get suggested start point */
 8007eb0:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007eb4:	b1a6      	cbz	r6, 8007ee0 <create_chain+0x38>
 8007eb6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007eba:	429e      	cmp	r6, r3
 8007ebc:	bf28      	it	cs
 8007ebe:	2601      	movcs	r6, #1
 8007ec0:	e00f      	b.n	8007ee2 <create_chain+0x3a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007ec2:	f7ff fecb 	bl	8007c5c <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8007ec6:	2801      	cmp	r0, #1
 8007ec8:	d946      	bls.n	8007f58 <create_chain+0xb0>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007eca:	1c44      	adds	r4, r0, #1
 8007ecc:	d102      	bne.n	8007ed4 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007ed4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007ed8:	4298      	cmp	r0, r3
 8007eda:	d33e      	bcc.n	8007f5a <create_chain+0xb2>
 8007edc:	463e      	mov	r6, r7
 8007ede:	e000      	b.n	8007ee2 <create_chain+0x3a>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007ee0:	2601      	movs	r6, #1
 8007ee2:	4634      	mov	r4, r6
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007ee4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 8007ee8:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007eea:	429c      	cmp	r4, r3
 8007eec:	d304      	bcc.n	8007ef8 <create_chain+0x50>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
 8007eee:	2e01      	cmp	r6, #1
 8007ef0:	d801      	bhi.n	8007ef6 <create_chain+0x4e>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
 8007ef6:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007ef8:	4628      	mov	r0, r5
 8007efa:	4621      	mov	r1, r4
 8007efc:	f7ff feae 	bl	8007c5c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8007f00:	b130      	cbz	r0, 8007f10 <create_chain+0x68>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007f02:	1c41      	adds	r1, r0, #1
 8007f04:	d029      	beq.n	8007f5a <create_chain+0xb2>
 8007f06:	2801      	cmp	r0, #1
 8007f08:	d027      	beq.n	8007f5a <create_chain+0xb2>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8007f0a:	42b4      	cmp	r4, r6
 8007f0c:	d1ea      	bne.n	8007ee4 <create_chain+0x3c>
 8007f0e:	e7f0      	b.n	8007ef2 <create_chain+0x4a>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007f10:	4628      	mov	r0, r5
 8007f12:	4621      	mov	r1, r4
 8007f14:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007f18:	f7ff ff52 	bl	8007dc0 <put_fat>
	if (res == FR_OK && clst != 0) {
 8007f1c:	b9d0      	cbnz	r0, 8007f54 <create_chain+0xac>
 8007f1e:	b97f      	cbnz	r7, 8007f40 <create_chain+0x98>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
 8007f20:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
 8007f24:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	d011      	beq.n	8007f50 <create_chain+0xa8>
			fs->free_clust--;
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007f32:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8007f3e:	e007      	b.n	8007f50 <create_chain+0xa8>
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007f40:	4628      	mov	r0, r5
 8007f42:	4639      	mov	r1, r7
 8007f44:	4622      	mov	r2, r4
 8007f46:	f7ff ff3b 	bl	8007dc0 <put_fat>
	}
	if (res == FR_OK) {
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d0e8      	beq.n	8007f20 <create_chain+0x78>
 8007f4e:	e001      	b.n	8007f54 <create_chain+0xac>
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag |= 1;
 8007f50:	4620      	mov	r0, r4
 8007f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007f54:	2801      	cmp	r0, #1
 8007f56:	d0ba      	beq.n	8007ece <create_chain+0x26>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
 8007f58:	2001      	movs	r0, #1
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
 8007f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f5c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD clst;
	UINT i;


	i = dp->index + 1;
 8007f60:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8007f64:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007f66:	b2b3      	uxth	r3, r6
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007f68:	4604      	mov	r4, r0
 8007f6a:	460f      	mov	r7, r1
	DWORD clst;
	UINT i;


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007f6c:	b913      	cbnz	r3, 8007f74 <dir_next+0x18>
		return FR_NO_FILE;
 8007f6e:	2004      	movs	r0, #4
 8007f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DWORD clst;
	UINT i;


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007f74:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0f8      	beq.n	8007f6e <dir_next+0x12>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
 8007f7c:	f016 080f 	ands.w	r8, r6, #15
 8007f80:	d16e      	bne.n	8008060 <dir_next+0x104>
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
 8007f82:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */
 8007f86:	3301      	adds	r3, #1
 8007f88:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8007f8c:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200

		if (!dp->clust) {		/* Static table */
 8007f90:	b921      	cbnz	r1, 8007f9c <dir_next+0x40>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007f92:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8007f96:	429e      	cmp	r6, r3
 8007f98:	d2e9      	bcs.n	8007f6e <dir_next+0x12>
 8007f9a:	e061      	b.n	8008060 <dir_next+0x104>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007f9c:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	ea13 1316 	ands.w	r3, r3, r6, lsr #4
 8007fa6:	d15b      	bne.n	8008060 <dir_next+0x104>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007fa8:	f7ff fe58 	bl	8007c5c <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8007fac:	2801      	cmp	r0, #1
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007fae:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8007fb0:	d802      	bhi.n	8007fb8 <dir_next+0x5c>
 8007fb2:	2002      	movs	r0, #2
 8007fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007fb8:	1c42      	adds	r2, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <dir_next+0x66>
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007fc2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8007fc6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007fca:	429d      	cmp	r5, r3
 8007fcc:	d33f      	bcc.n	800804e <dir_next+0xf2>
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	d0cd      	beq.n	8007f6e <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007fd2:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8007fd6:	f7ff ff67 	bl	8007ea8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007fda:	4605      	mov	r5, r0
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d04a      	beq.n	8008076 <dir_next+0x11a>
					if (clst == 1) return FR_INT_ERR;
 8007fe0:	2801      	cmp	r0, #1
 8007fe2:	d0e6      	beq.n	8007fb2 <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d0e9      	beq.n	8007fbc <dir_next+0x60>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007fe8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8007fec:	f7ff fbcb 	bl	8007786 <sync_window>
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d1e2      	bne.n	8007fbc <dir_next+0x60>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007ff6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008000:	f7ff fb78 	bl	80076f4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008004:	f8d4 9200 	ldr.w	r9, [r4, #512]	; 0x200
 8008008:	4629      	mov	r1, r5
 800800a:	4648      	mov	r0, r9
 800800c:	f7ff fe18 	bl	8007c40 <clust2sect>
 8008010:	f8c9 022c 	str.w	r0, [r9, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008014:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8008018:	f893 2202 	ldrb.w	r2, [r3, #514]	; 0x202
 800801c:	4297      	cmp	r7, r2
 800801e:	d211      	bcs.n	8008044 <dir_next+0xe8>
						dp->fs->wflag = 1;
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008026:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800802a:	f7ff fbac 	bl	8007786 <sync_window>
 800802e:	2800      	cmp	r0, #0
 8008030:	d1c4      	bne.n	8007fbc <dir_next+0x60>
						dp->fs->winsect++;
 8008032:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8008036:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 800803a:	3301      	adds	r3, #1
 800803c:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008040:	3701      	adds	r7, #1
 8008042:	e7e7      	b.n	8008014 <dir_next+0xb8>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008044:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8008048:	1bd7      	subs	r7, r2, r7
 800804a:	f8c3 722c 	str.w	r7, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800804e:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8008052:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8008056:	4629      	mov	r1, r5
 8008058:	f7ff fdf2 	bl	8007c40 <clust2sect>
 800805c:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
 8008060:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
				dp->sect = clust2sect(dp->fs, clst);
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008064:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
 8008068:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800806c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214

	return FR_OK;
 8008070:	2000      	movs	r0, #0
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008076:	2007      	movs	r0, #7

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */

	return FR_OK;
}
 8008078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800807c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4604      	mov	r4, r0
 8008080:	460d      	mov	r5, r1
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8008082:	2004      	movs	r0, #4
	while (dp->sect) {
 8008084:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8008088:	b311      	cbz	r1, 80080d0 <dir_read+0x54>
		res = move_window(dp->fs, dp->sect);
 800808a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800808e:	f7ff fbdf 	bl	8007850 <move_window>
		if (res != FR_OK) break;
 8008092:	b9f8      	cbnz	r0, 80080d4 <dir_read+0x58>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008094:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 8008098:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800809a:	b1fa      	cbz	r2, 80080dc <dir_read+0x60>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800809c:	2ae5      	cmp	r2, #229	; 0xe5
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
 800809e:	7adb      	ldrb	r3, [r3, #11]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80080a0:	d00f      	beq.n	80080c2 <dir_read+0x46>
 80080a2:	2a2e      	cmp	r2, #46	; 0x2e
 80080a4:	d00d      	beq.n	80080c2 <dir_read+0x46>
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
 80080a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	d009      	beq.n	80080c2 <dir_read+0x46>
 80080ae:	f023 0320 	bic.w	r3, r3, #32
 80080b2:	f1a3 0208 	sub.w	r2, r3, #8
 80080b6:	4253      	negs	r3, r2
 80080b8:	4153      	adcs	r3, r2
 80080ba:	42ab      	cmp	r3, r5
 80080bc:	d101      	bne.n	80080c2 <dir_read+0x46>
 80080be:	2000      	movs	r0, #0
 80080c0:	bd38      	pop	{r3, r4, r5, pc}
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80080c2:	4620      	mov	r0, r4
 80080c4:	2100      	movs	r1, #0
 80080c6:	f7ff ff49 	bl	8007f5c <dir_next>
		if (res != FR_OK) break;
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0da      	beq.n	8008084 <dir_read+0x8>
 80080ce:	e001      	b.n	80080d4 <dir_read+0x58>
	}

	if (res != FR_OK) dp->sect = 0;
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d0f4      	beq.n	80080be <dir_read+0x42>
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 80080da:	bd38      	pop	{r3, r4, r5, pc}
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080dc:	2004      	movs	r0, #4
 80080de:	e7f9      	b.n	80080d4 <dir_read+0x58>

080080e0 <dir_alloc.constprop.12>:
/* Directory handling - Reserve directory entry                          */
/*-----------------------------------------------------------------------*/

#if !_FS_READONLY
static
FRESULT dir_alloc (
 80080e0:	b510      	push	{r4, lr}
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80080e2:	2100      	movs	r1, #0
/* Directory handling - Reserve directory entry                          */
/*-----------------------------------------------------------------------*/

#if !_FS_READONLY
static
FRESULT dir_alloc (
 80080e4:	4604      	mov	r4, r0
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80080e6:	f7ff fe1a 	bl	8007d1e <dir_sdi>
	if (res == FR_OK) {
 80080ea:	b988      	cbnz	r0, 8008110 <dir_alloc.constprop.12+0x30>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
 80080ec:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80080f0:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80080f4:	f7ff fbac 	bl	8007850 <move_window>
			if (res != FR_OK) break;
 80080f8:	b950      	cbnz	r0, 8008110 <dir_alloc.constprop.12+0x30>
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
 80080fa:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2be5      	cmp	r3, #229	; 0xe5
 8008102:	d008      	beq.n	8008116 <dir_alloc.constprop.12+0x36>
 8008104:	b13b      	cbz	r3, 8008116 <dir_alloc.constprop.12+0x36>
				if (++n == nent) break;	/* A block of contiguous entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008106:	4620      	mov	r0, r4
 8008108:	2101      	movs	r1, #1
 800810a:	f7ff ff27 	bl	8007f5c <dir_next>
 800810e:	e7ec      	b.n	80080ea <dir_alloc.constprop.12+0xa>
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008110:	2804      	cmp	r0, #4
 8008112:	bf08      	it	eq
 8008114:	2007      	moveq	r0, #7
	return res;
}
 8008116:	bd10      	pop	{r4, pc}

08008118 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800811a:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800811c:	a804      	add	r0, sp, #16
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800811e:	9100      	str	r1, [sp, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008120:	f840 1d04 	str.w	r1, [r0, #-4]!
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008124:	4616      	mov	r6, r2
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8008126:	f7ff faec 	bl	8007702 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800812a:	1e05      	subs	r5, r0, #0
 800812c:	db24      	blt.n	8008178 <f_mount+0x60>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800812e:	4b15      	ldr	r3, [pc, #84]	; (8008184 <f_mount+0x6c>)
 8008130:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 8008134:	4619      	mov	r1, r3

	if (cfs) {
 8008136:	b17c      	cbz	r4, 8008158 <f_mount+0x40>
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008138:	4b13      	ldr	r3, [pc, #76]	; (8008188 <f_mount+0x70>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	42a2      	cmp	r2, r4
 800813e:	bf04      	itt	eq
 8008140:	2200      	moveq	r2, #0
 8008142:	601a      	streq	r2, [r3, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	42a3      	cmp	r3, r4
 8008148:	bf08      	it	eq
 800814a:	4a0f      	ldreq	r2, [pc, #60]	; (8008188 <f_mount+0x70>)
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	bf08      	it	eq
 8008152:	60d3      	streq	r3, [r2, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008154:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	}

	if (fs) {
 8008158:	9801      	ldr	r0, [sp, #4]
 800815a:	b110      	cbz	r0, 8008162 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800815c:	2300      	movs	r3, #0
 800815e:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008162:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008166:	b150      	cbz	r0, 800817e <f_mount+0x66>
 8008168:	2e01      	cmp	r6, #1
 800816a:	d107      	bne.n	800817c <f_mount+0x64>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800816c:	a801      	add	r0, sp, #4
 800816e:	4669      	mov	r1, sp
 8008170:	2200      	movs	r2, #0
 8008172:	f7ff fbcd 	bl	8007910 <find_volume>
	LEAVE_FF(fs, res);
 8008176:	e002      	b.n	800817e <f_mount+0x66>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8008178:	200b      	movs	r0, #11
 800817a:	e000      	b.n	800817e <f_mount+0x66>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800817c:	2000      	movs	r0, #0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800817e:	b004      	add	sp, #16
 8008180:	bd70      	pop	{r4, r5, r6, pc}
 8008182:	bf00      	nop
 8008184:	20016de4 	.word	0x20016de4
 8008188:	20016dcc 	.word	0x20016dcc

0800818c <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Path name of the logical drive number */
	TCHAR* label,		/* Pointer to a buffer to return the volume label */
	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
)
{
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8008192:	460e      	mov	r6, r1
 8008194:	9001      	str	r0, [sp, #4]
 8008196:	4615      	mov	r5, r2
	DIR dj;
	UINT i, j;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8008198:	a882      	add	r0, sp, #520	; 0x208
 800819a:	a901      	add	r1, sp, #4
 800819c:	2200      	movs	r2, #0
 800819e:	f7ff fbb7 	bl	8007910 <find_volume>

	/* Get volume label */
	if (res == FR_OK && label) {
 80081a2:	4604      	mov	r4, r0
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d13e      	bne.n	8008226 <f_getlabel+0x9a>
 80081a8:	b1f6      	cbz	r6, 80081e8 <f_getlabel+0x5c>
		dj.sclust = 0;					/* Open root directory */
 80081aa:	9084      	str	r0, [sp, #528]	; 0x210
		res = dir_sdi(&dj, 0);
 80081ac:	4621      	mov	r1, r4
 80081ae:	a802      	add	r0, sp, #8
 80081b0:	f7ff fdb5 	bl	8007d1e <dir_sdi>
		if (res == FR_OK) {
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d135      	bne.n	8008224 <f_getlabel+0x98>
			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
 80081b8:	a802      	add	r0, sp, #8
 80081ba:	2101      	movs	r1, #1
 80081bc:	f7ff ff5e 	bl	800807c <dir_read>
			if (res == FR_OK) {			/* A volume label is exist */
 80081c0:	b978      	cbnz	r0, 80081e2 <f_getlabel+0x56>
					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
						w = w << 8 | dj.dir[i++];
					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
				} while (j < 11);
#else
				mem_cpy(label, dj.dir, 11);
 80081c2:	4630      	mov	r0, r6
 80081c4:	9987      	ldr	r1, [sp, #540]	; 0x21c
 80081c6:	220b      	movs	r2, #11
 80081c8:	f7ff fa8a 	bl	80076e0 <mem_cpy>
 80081cc:	f106 030b 	add.w	r3, r6, #11
#endif
				j = 11;
				do {
					label[j] = 0;
 80081d0:	2200      	movs	r2, #0
					if (!j) break;
 80081d2:	42b3      	cmp	r3, r6
#else
				mem_cpy(label, dj.dir, 11);
#endif
				j = 11;
				do {
					label[j] = 0;
 80081d4:	701a      	strb	r2, [r3, #0]
					if (!j) break;
 80081d6:	d007      	beq.n	80081e8 <f_getlabel+0x5c>
				} while (label[--j] == ' ');
 80081d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081dc:	2a20      	cmp	r2, #32
 80081de:	d0f7      	beq.n	80081d0 <f_getlabel+0x44>
 80081e0:	e002      	b.n	80081e8 <f_getlabel+0x5c>
			}
			if (res == FR_NO_FILE) {	/* No label, return nul string */
 80081e2:	2804      	cmp	r0, #4
 80081e4:	d11e      	bne.n	8008224 <f_getlabel+0x98>
				label[0] = 0;
 80081e6:	7034      	strb	r4, [r6, #0]
			}
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
 80081e8:	b1ed      	cbz	r5, 8008226 <f_getlabel+0x9a>
		res = move_window(dj.fs, dj.fs->volbase);
 80081ea:	9b82      	ldr	r3, [sp, #520]	; 0x208
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80081f4:	f7ff fb2c 	bl	8007850 <move_window>
		if (res == FR_OK) {
 80081f8:	4604      	mov	r4, r0
 80081fa:	b9a0      	cbnz	r0, 8008226 <f_getlabel+0x9a>
			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
 80081fc:	9a82      	ldr	r2, [sp, #520]	; 0x208
 80081fe:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 8008202:	2b03      	cmp	r3, #3
 8008204:	bf0c      	ite	eq
 8008206:	2043      	moveq	r0, #67	; 0x43
 8008208:	2027      	movne	r0, #39	; 0x27
			*vsn = LD_DWORD(&dj.fs->win.d8[i]);
 800820a:	1811      	adds	r1, r2, r0
 800820c:	5c12      	ldrb	r2, [r2, r0]
 800820e:	788b      	ldrb	r3, [r1, #2]
 8008210:	78ce      	ldrb	r6, [r1, #3]
 8008212:	041b      	lsls	r3, r3, #16
 8008214:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8008218:	4313      	orrs	r3, r2
 800821a:	784a      	ldrb	r2, [r1, #1]
 800821c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008220:	602b      	str	r3, [r5, #0]
 8008222:	e000      	b.n	8008226 <f_getlabel+0x9a>
 8008224:	4604      	mov	r4, r0
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8008226:	4620      	mov	r0, r4
 8008228:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
 800822c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008230 <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
	WCHAR w;
	DWORD tm;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &label, 1);
 8008236:	a901      	add	r1, sp, #4
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 8008238:	9001      	str	r0, [sp, #4]
	WCHAR w;
	DWORD tm;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &label, 1);
 800823a:	2201      	movs	r2, #1
 800823c:	a886      	add	r0, sp, #536	; 0x218
 800823e:	f7ff fb67 	bl	8007910 <find_volume>
	if (res) LEAVE_FF(dj.fs, res);
 8008242:	2800      	cmp	r0, #0
 8008244:	f040 8082 	bne.w	800834c <f_setlabel+0x11c>

	/* Create a volume label in directory form */
	vn[0] = 0;
 8008248:	ac03      	add	r4, sp, #12
	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
 800824a:	9901      	ldr	r1, [sp, #4]
	/* Get logical drive number */
	res = find_volume(&dj.fs, &label, 1);
	if (res) LEAVE_FF(dj.fs, res);

	/* Create a volume label in directory form */
	vn[0] = 0;
 800824c:	7020      	strb	r0, [r4, #0]
	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
 800824e:	460a      	mov	r2, r1
 8008250:	1a53      	subs	r3, r2, r1
 8008252:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008256:	2800      	cmp	r0, #0
 8008258:	d1fa      	bne.n	8008250 <f_setlabel+0x20>
 800825a:	440b      	add	r3, r1
	for ( ; sl && label[sl-1] == ' '; sl--) ;	/* Remove trailing spaces */
 800825c:	428b      	cmp	r3, r1
 800825e:	eba3 0601 	sub.w	r6, r3, r1
 8008262:	d107      	bne.n	8008274 <f_setlabel+0x44>
		} while (i < sl);
		while (j < 11) vn[j++] = ' ';
	}

	/* Set volume label */
	dj.sclust = 0;					/* Open root directory */
 8008264:	2100      	movs	r1, #0
	res = dir_sdi(&dj, 0);
 8008266:	a806      	add	r0, sp, #24
		} while (i < sl);
		while (j < 11) vn[j++] = ' ';
	}

	/* Set volume label */
	dj.sclust = 0;					/* Open root directory */
 8008268:	9188      	str	r1, [sp, #544]	; 0x220
	res = dir_sdi(&dj, 0);
 800826a:	f7ff fd58 	bl	8007d1e <dir_sdi>
	if (res == FR_OK) {
 800826e:	2800      	cmp	r0, #0
 8008270:	d16c      	bne.n	800834c <f_setlabel+0x11c>
 8008272:	e01d      	b.n	80082b0 <f_setlabel+0x80>
	if (res) LEAVE_FF(dj.fs, res);

	/* Create a volume label in directory form */
	vn[0] = 0;
	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
	for ( ; sl && label[sl-1] == ' '; sl--) ;	/* Remove trailing spaces */
 8008274:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008278:	2a20      	cmp	r2, #32
 800827a:	d0ef      	beq.n	800825c <f_setlabel+0x2c>
 800827c:	2200      	movs	r2, #0
		i = j = 0;
		do {
#if _USE_LFN && _LFN_UNICODE
			w = ff_convert(ff_wtoupper(label[i++]), 0);
#else
			w = (BYTE)label[i++];
 800827e:	5c88      	ldrb	r0, [r1, r2]
 8008280:	b283      	uxth	r3, r0
			if (IsDBCS1(w))
				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
#if _USE_LFN
			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
#else
			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
 8008282:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
 8008286:	2d19      	cmp	r5, #25
 8008288:	d802      	bhi.n	8008290 <f_setlabel+0x60>
 800828a:	3b20      	subs	r3, #32
 800828c:	b29b      	uxth	r3, r3
 800828e:	e007      	b.n	80082a0 <f_setlabel+0x70>
#ifdef _EXCVT
			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
 8008290:	2b7f      	cmp	r3, #127	; 0x7f
 8008292:	bf82      	ittt	hi
 8008294:	4b2f      	ldrhi	r3, [pc, #188]	; (8008354 <f_setlabel+0x124>)
 8008296:	18c0      	addhi	r0, r0, r3
 8008298:	f810 3c80 	ldrbhi.w	r3, [r0, #-128]
#else
			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
 800829c:	2b00      	cmp	r3, #0
 800829e:	d045      	beq.n	800832c <f_setlabel+0xfc>
 80082a0:	4d2d      	ldr	r5, [pc, #180]	; (8008358 <f_setlabel+0x128>)
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 80082a2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d03e      	beq.n	8008328 <f_setlabel+0xf8>
 80082aa:	4298      	cmp	r0, r3
 80082ac:	d1f9      	bne.n	80082a2 <f_setlabel+0x72>
 80082ae:	e03d      	b.n	800832c <f_setlabel+0xfc>

	/* Set volume label */
	dj.sclust = 0;					/* Open root directory */
	res = dir_sdi(&dj, 0);
	if (res == FR_OK) {
		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
 80082b0:	a806      	add	r0, sp, #24
 80082b2:	2101      	movs	r1, #1
 80082b4:	f7ff fee2 	bl	800807c <dir_read>
		if (res == FR_OK) {			/* A volume label is found */
 80082b8:	b958      	cbnz	r0, 80082d2 <f_setlabel+0xa2>
			if (vn[0]) {
 80082ba:	7823      	ldrb	r3, [r4, #0]
 80082bc:	b12b      	cbz	r3, 80082ca <f_setlabel+0x9a>
				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
 80082be:	988b      	ldr	r0, [sp, #556]	; 0x22c
 80082c0:	4621      	mov	r1, r4
 80082c2:	220b      	movs	r2, #11
 80082c4:	f7ff fa0c 	bl	80076e0 <mem_cpy>
 80082c8:	e019      	b.n	80082fe <f_setlabel+0xce>
				tm = get_fattime();
				ST_DWORD(dj.dir+DIR_WrtTime, tm);
			} else {
				dj.dir[0] = DDE;			/* Remove the volume label */
 80082ca:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 80082cc:	22e5      	movs	r2, #229	; 0xe5
 80082ce:	701a      	strb	r2, [r3, #0]
 80082d0:	e023      	b.n	800831a <f_setlabel+0xea>
			}
			dj.fs->wflag = 1;
			res = sync_fs(dj.fs);
		} else {					/* No volume label is found or error */
			if (res == FR_NO_FILE) {
 80082d2:	2804      	cmp	r0, #4
 80082d4:	d13a      	bne.n	800834c <f_setlabel+0x11c>
				res = FR_OK;
				if (vn[0]) {				/* Create volume label as new */
 80082d6:	7820      	ldrb	r0, [r4, #0]
 80082d8:	2800      	cmp	r0, #0
 80082da:	d037      	beq.n	800834c <f_setlabel+0x11c>
					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
 80082dc:	a806      	add	r0, sp, #24
 80082de:	f7ff feff 	bl	80080e0 <dir_alloc.constprop.12>
					if (res == FR_OK) {
 80082e2:	4601      	mov	r1, r0
 80082e4:	bb90      	cbnz	r0, 800834c <f_setlabel+0x11c>
						mem_set(dj.dir, 0, SZ_DIR);	/* Set volume label */
 80082e6:	988b      	ldr	r0, [sp, #556]	; 0x22c
 80082e8:	2220      	movs	r2, #32
 80082ea:	f7ff fa03 	bl	80076f4 <mem_set>
						mem_cpy(dj.dir, vn, 11);
 80082ee:	220b      	movs	r2, #11
 80082f0:	988b      	ldr	r0, [sp, #556]	; 0x22c
 80082f2:	4621      	mov	r1, r4
 80082f4:	f7ff f9f4 	bl	80076e0 <mem_cpy>
						dj.dir[DIR_Attr] = AM_VOL;
 80082f8:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 80082fa:	2208      	movs	r2, #8
 80082fc:	72da      	strb	r2, [r3, #11]
						tm = get_fattime();
 80082fe:	f7ff f9cd 	bl	800769c <get_fattime>
						ST_DWORD(dj.dir+DIR_WrtTime, tm);
 8008302:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8008304:	7598      	strb	r0, [r3, #22]
 8008306:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8008308:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800830c:	75da      	strb	r2, [r3, #23]
 800830e:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8008310:	0c02      	lsrs	r2, r0, #16
 8008312:	761a      	strb	r2, [r3, #24]
 8008314:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8008316:	0e00      	lsrs	r0, r0, #24
 8008318:	7658      	strb	r0, [r3, #25]
						dj.fs->wflag = 1;
 800831a:	9886      	ldr	r0, [sp, #536]	; 0x218
 800831c:	2301      	movs	r3, #1
 800831e:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
						res = sync_fs(dj.fs);
 8008322:	f7ff fa37 	bl	8007794 <sync_fs>
 8008326:	e011      	b.n	800834c <f_setlabel+0x11c>
#else
			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
 8008328:	2a0b      	cmp	r2, #11
 800832a:	d101      	bne.n	8008330 <f_setlabel+0x100>
				LEAVE_FF(dj.fs, FR_INVALID_NAME);
 800832c:	2006      	movs	r0, #6
 800832e:	e00d      	b.n	800834c <f_setlabel+0x11c>
			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
			vn[j++] = (BYTE)w;
 8008330:	3201      	adds	r2, #1
 8008332:	18a0      	adds	r0, r4, r2
		} while (i < sl);
 8008334:	42b2      	cmp	r2, r6
#endif
#endif
			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
				LEAVE_FF(dj.fs, FR_INVALID_NAME);
			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
			vn[j++] = (BYTE)w;
 8008336:	f800 3c01 	strb.w	r3, [r0, #-1]
		} while (i < sl);
 800833a:	d3a0      	bcc.n	800827e <f_setlabel+0x4e>
 800833c:	4603      	mov	r3, r0
 800833e:	1b1a      	subs	r2, r3, r4
		while (j < 11) vn[j++] = ' ';
 8008340:	2a0a      	cmp	r2, #10
 8008342:	d88f      	bhi.n	8008264 <f_setlabel+0x34>
 8008344:	2220      	movs	r2, #32
 8008346:	f803 2b01 	strb.w	r2, [r3], #1
 800834a:	e7f8      	b.n	800833e <f_setlabel+0x10e>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800834c:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	bf00      	nop
 8008354:	08024a04 	.word	0x08024a04
 8008358:	080249bf 	.word	0x080249bf

0800835c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  None
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(void)
{
 800835c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800835e:	4c06      	ldr	r4, [pc, #24]	; (8008378 <SD_initialize+0x1c>)
 8008360:	2301      	movs	r3, #1
 8008362:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008364:	f7f9 faae 	bl	80018c4 <BSP_SD_Init>
 8008368:	4623      	mov	r3, r4
 800836a:	b918      	cbnz	r0, 8008374 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 800836c:	7822      	ldrb	r2, [r4, #0]
 800836e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008372:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8008374:	7818      	ldrb	r0, [r3, #0]
}
 8008376:	bd10      	pop	{r4, pc}
 8008378:	2000001c 	.word	0x2000001c

0800837c <SD_status>:
  * @brief  Gets Disk Status
  * @param  None
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(void)
{
 800837c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800837e:	4c06      	ldr	r4, [pc, #24]	; (8008398 <SD_status+0x1c>)
 8008380:	2301      	movs	r3, #1
 8008382:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8008384:	f7f9 fb96 	bl	8001ab4 <BSP_SD_GetStatus>
 8008388:	4623      	mov	r3, r4
 800838a:	b918      	cbnz	r0, 8008394 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 800838c:	7822      	ldrb	r2, [r4, #0]
 800838e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008392:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 8008394:	7818      	ldrb	r0, [r3, #0]
}
 8008396:	bd10      	pop	{r4, pc}
 8008398:	2000001c 	.word	0x2000001c

0800839c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE *buff, DWORD sector, UINT count)
{
 800839c:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800839e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	9201      	str	r2, [sp, #4]
 80083a6:	2300      	movs	r3, #0
 80083a8:	024a      	lsls	r2, r1, #9
 80083aa:	f7f9 fb5f 	bl	8001a6c <BSP_SD_ReadBlocks>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 80083ae:	3000      	adds	r0, #0
 80083b0:	bf18      	it	ne
 80083b2:	2001      	movne	r0, #1
 80083b4:	b003      	add	sp, #12
 80083b6:	f85d fb04 	ldr.w	pc, [sp], #4

080083ba <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(const BYTE *buff, DWORD sector, UINT count)
{
 80083ba:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80083bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	9201      	str	r2, [sp, #4]
 80083c4:	2300      	movs	r3, #0
 80083c6:	024a      	lsls	r2, r1, #9
 80083c8:	f7f9 fb62 	bl	8001a90 <BSP_SD_WriteBlocks>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 80083cc:	3000      	adds	r0, #0
 80083ce:	bf18      	it	ne
 80083d0:	2001      	movne	r0, #1
 80083d2:	b003      	add	sp, #12
 80083d4:	f85d fb04 	ldr.w	pc, [sp], #4

080083d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
 80083d8:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80083da:	4b13      	ldr	r3, [pc, #76]	; (8008428 <SD_ioctl+0x50>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	07db      	lsls	r3, r3, #31
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
 80083e0:	b096      	sub	sp, #88	; 0x58
 80083e2:	460c      	mov	r4, r1
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80083e4:	d41c      	bmi.n	8008420 <SD_ioctl+0x48>
  
  switch (cmd)
 80083e6:	2803      	cmp	r0, #3
 80083e8:	d803      	bhi.n	80083f2 <SD_ioctl+0x1a>
 80083ea:	e8df f000 	tbb	[pc, r0]
 80083ee:	0417      	.short	0x0417
 80083f0:	120e      	.short	0x120e
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 80083f2:	2004      	movs	r0, #4
 80083f4:	e015      	b.n	8008422 <SD_ioctl+0x4a>
    res = RES_OK;
    break;
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80083f6:	4668      	mov	r0, sp
 80083f8:	f7f9 fb62 	bl	8001ac0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 80083fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008400:	0a5b      	lsrs	r3, r3, #9
 8008402:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	e008      	b.n	800841c <SD_ioctl+0x44>
    res = RES_OK;
    break;
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BLOCK_SIZE;
 800840a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800840e:	800b      	strh	r3, [r1, #0]
 8008410:	e004      	b.n	800841c <SD_ioctl+0x44>
    res = RES_OK;
    break;
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
 8008412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008416:	600b      	str	r3, [r1, #0]
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
 8008418:	2001      	movs	r0, #1
 800841a:	e002      	b.n	8008422 <SD_ioctl+0x4a>
  
  switch (cmd)
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800841c:	2000      	movs	r0, #0
 800841e:	e000      	b.n	8008422 <SD_ioctl+0x4a>
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008420:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 8008422:	b016      	add	sp, #88	; 0x58
 8008424:	bd10      	pop	{r4, pc}
 8008426:	bf00      	nop
 8008428:	2000001c 	.word	0x2000001c

0800842c <tft_delay>:
	*/


}

void tft_delay (volatile uint32_t count){
 800842c:	b082      	sub	sp, #8
 800842e:	9001      	str	r0, [sp, #4]
	while (count--) {
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	1e5a      	subs	r2, r3, #1
 8008434:	9201      	str	r2, [sp, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1fa      	bne.n	8008430 <tft_delay+0x4>
	}
}
 800843a:	b002      	add	sp, #8
 800843c:	4770      	bx	lr
	...

08008440 <init_ili9341>:
	LCD_REG = MEMORY_WRITE;
	LCD_DATA = color;
}*/


void init_ili9341(void) {
 8008440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LCD_REG		= EXIT_SLEEP_MODE;
 8008444:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8008448:	2511      	movs	r5, #17
 800844a:	8025      	strh	r5, [r4, #0]
	tft_delay(50000);
 800844c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008450:	f7ff ffec 	bl	800842c <tft_delay>

 	LCD_REG		= POWER_CONTROL_B;
 8008454:	23cf      	movs	r3, #207	; 0xcf
 8008456:	8023      	strh	r3, [r4, #0]
	LCD_DATA = 0x00;
 8008458:	4b59      	ldr	r3, [pc, #356]	; (80085c0 <init_ili9341+0x180>)
 800845a:	2200      	movs	r2, #0
	LCD_DATA = 0xc3;
 800845c:	21c3      	movs	r1, #195	; 0xc3

	LCD_REG		= EXIT_SLEEP_MODE;
	tft_delay(50000);

 	LCD_REG		= POWER_CONTROL_B;
	LCD_DATA = 0x00;
 800845e:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0xc3;
	LCD_DATA = 0X30;
 8008460:	f04f 0e30 	mov.w	lr, #48	; 0x30
	LCD_REG		= EXIT_SLEEP_MODE;
	tft_delay(50000);

 	LCD_REG		= POWER_CONTROL_B;
	LCD_DATA = 0x00;
	LCD_DATA = 0xc3;
 8008464:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0X30;

 	LCD_REG  = 0xED;
 8008466:	21ed      	movs	r1, #237	; 0xed
	tft_delay(50000);

 	LCD_REG		= POWER_CONTROL_B;
	LCD_DATA = 0x00;
	LCD_DATA = 0xc3;
	LCD_DATA = 0X30;
 8008468:	f8a3 e000 	strh.w	lr, [r3]

 	LCD_REG  = 0xED;
 800846c:	8021      	strh	r1, [r4, #0]
	LCD_DATA = 0x64;
 800846e:	2164      	movs	r1, #100	; 0x64
 8008470:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0x03;
	LCD_DATA = 0X12;
 8008472:	2012      	movs	r0, #18
	LCD_DATA = 0xc3;
	LCD_DATA = 0X30;

 	LCD_REG  = 0xED;
	LCD_DATA = 0x64;
	LCD_DATA = 0x03;
 8008474:	2103      	movs	r1, #3
 8008476:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0X12;
 8008478:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0X81;
 800847a:	2081      	movs	r0, #129	; 0x81
 800847c:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xE8;
 800847e:	20e8      	movs	r0, #232	; 0xe8
 8008480:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x85;
 8008482:	2085      	movs	r0, #133	; 0x85
 8008484:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x10;
 8008486:	2610      	movs	r6, #16
	LCD_DATA = 0x79;
 8008488:	2079      	movs	r0, #121	; 0x79
	LCD_DATA = 0X12;
	LCD_DATA = 0X81;

 	LCD_REG  = 0xE8;
	LCD_DATA = 0x85;
	LCD_DATA = 0x10;
 800848a:	801e      	strh	r6, [r3, #0]
	LCD_DATA = 0x79;
 800848c:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xCB;
 800848e:	20cb      	movs	r0, #203	; 0xcb
 8008490:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x39;
 8008492:	2039      	movs	r0, #57	; 0x39
 8008494:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x2C;
 8008496:	f04f 092c 	mov.w	r9, #44	; 0x2c
	LCD_DATA = 0x00;
	LCD_DATA = 0x34;
 800849a:	2034      	movs	r0, #52	; 0x34
	LCD_DATA = 0x10;
	LCD_DATA = 0x79;

 	LCD_REG  = 0xCB;
	LCD_DATA = 0x39;
	LCD_DATA = 0x2C;
 800849c:	f8a3 9000 	strh.w	r9, [r3]
	LCD_DATA = 0x00;
 80084a0:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x34;
 80084a2:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x02;
 80084a4:	2002      	movs	r0, #2
 80084a6:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xF7;
 80084a8:	20f7      	movs	r0, #247	; 0xf7
 80084aa:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x20;

 	LCD_REG  = 0xEA;
 80084ac:	27ea      	movs	r7, #234	; 0xea
	LCD_DATA = 0x00;
	LCD_DATA = 0x34;
	LCD_DATA = 0x02;

 	LCD_REG  = 0xF7;
	LCD_DATA = 0x20;
 80084ae:	2020      	movs	r0, #32
 80084b0:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xEA;
 80084b2:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x00;
	LCD_DATA = 0x00;

 	LCD_REG  = 0xC0;    //Power control
 80084b4:	27c0      	movs	r7, #192	; 0xc0

 	LCD_REG  = 0xF7;
	LCD_DATA = 0x20;

 	LCD_REG  = 0xEA;
	LCD_DATA = 0x00;
 80084b6:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x00;
 80084b8:	801a      	strh	r2, [r3, #0]

 	LCD_REG  = 0xC0;    //Power control
 80084ba:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x22;   	//VRH[5:0]
 80084bc:	2722      	movs	r7, #34	; 0x22
 80084be:	801f      	strh	r7, [r3, #0]

 	LCD_REG  = 0xC1;    //Power control
 80084c0:	27c1      	movs	r7, #193	; 0xc1
 80084c2:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x11;   	//SAP[2:0];BT[3:0]

 	LCD_REG  = 0xC5;    //VCM control
 80084c4:	27c5      	movs	r7, #197	; 0xc5

 	LCD_REG  = 0xC0;    //Power control
	LCD_DATA = 0x22;   	//VRH[5:0]

 	LCD_REG  = 0xC1;    //Power control
	LCD_DATA = 0x11;   	//SAP[2:0];BT[3:0]
 80084c6:	801d      	strh	r5, [r3, #0]

 	LCD_REG  = 0xC5;    //VCM control
 80084c8:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x3d;
 80084ca:	273d      	movs	r7, #61	; 0x3d
 80084cc:	801f      	strh	r7, [r3, #0]
						//LCD_DataWrite_ILI9341(0x30);
	LCD_DATA = 0x20;
 80084ce:	8018      	strh	r0, [r3, #0]

 	LCD_REG = 0xC7;    	//VCM control2
 80084d0:	20c7      	movs	r0, #199	; 0xc7
 80084d2:	8020      	strh	r0, [r4, #0]
						//LCD_DataWrite_ILI9341(0xBD);
	LCD_DATA = 0xAA; 	//0xB0
 80084d4:	20aa      	movs	r0, #170	; 0xaa
 80084d6:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0x36;    // Memory Access Control
 80084d8:	2036      	movs	r0, #54	; 0x36
 80084da:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x88;
 80084dc:	2088      	movs	r0, #136	; 0x88
 80084de:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0x3A;
 80084e0:	203a      	movs	r0, #58	; 0x3a
 80084e2:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x55;
 80084e4:	2055      	movs	r0, #85	; 0x55
 80084e6:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xB1;
 80084e8:	20b1      	movs	r0, #177	; 0xb1
 80084ea:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x00;
	LCD_DATA = 0x13;
 80084ec:	f04f 0a13 	mov.w	sl, #19

 	LCD_REG  = 0xB6;    // Display Function Control
 80084f0:	20b6      	movs	r0, #182	; 0xb6

 	LCD_REG  = 0x3A;
	LCD_DATA = 0x55;

 	LCD_REG  = 0xB1;
	LCD_DATA = 0x00;
 80084f2:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x13;

 	LCD_REG  = 0xB6;    // Display Function Control
	LCD_DATA = 0x0A;
 80084f4:	270a      	movs	r7, #10
 	LCD_REG  = 0x3A;
	LCD_DATA = 0x55;

 	LCD_REG  = 0xB1;
	LCD_DATA = 0x00;
	LCD_DATA = 0x13;
 80084f6:	f8a3 a000 	strh.w	sl, [r3]

 	LCD_REG  = 0xB6;    // Display Function Control
	LCD_DATA = 0x0A;
	LCD_DATA = 0xA2;
 80084fa:	f04f 08a2 	mov.w	r8, #162	; 0xa2

 	LCD_REG  = 0xB1;
	LCD_DATA = 0x00;
	LCD_DATA = 0x13;

 	LCD_REG  = 0xB6;    // Display Function Control
 80084fe:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x0A;
	LCD_DATA = 0xA2;

 	LCD_REG  = 0xF6;
 8008500:	20f6      	movs	r0, #246	; 0xf6
 	LCD_REG  = 0xB1;
	LCD_DATA = 0x00;
	LCD_DATA = 0x13;

 	LCD_REG  = 0xB6;    // Display Function Control
	LCD_DATA = 0x0A;
 8008502:	801f      	strh	r7, [r3, #0]
	LCD_DATA = 0xA2;
 8008504:	f8a3 8000 	strh.w	r8, [r3]

 	LCD_REG  = 0xF6;
 8008508:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x01;
 800850a:	2001      	movs	r0, #1
 800850c:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x30;
 800850e:	f8a3 e000 	strh.w	lr, [r3]

 	LCD_REG  = 0xF2;    // 3Gamma Function Disable
 8008512:	f04f 0ef2 	mov.w	lr, #242	; 0xf2
 8008516:	f8a4 e000 	strh.w	lr, [r4]
	LCD_DATA = 0x00;

 	LCD_REG  = 0x26;    //Gamma curve selected
 800851a:	f04f 0e26 	mov.w	lr, #38	; 0x26
 	LCD_REG  = 0xF6;
	LCD_DATA = 0x01;
	LCD_DATA = 0x30;

 	LCD_REG  = 0xF2;    // 3Gamma Function Disable
	LCD_DATA = 0x00;
 800851e:	801a      	strh	r2, [r3, #0]

 	LCD_REG  = 0x26;    //Gamma curve selected
 8008520:	f8a4 e000 	strh.w	lr, [r4]
	LCD_DATA = 0x01;
 8008524:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xE0;    //Set Gamma
 8008526:	20e0      	movs	r0, #224	; 0xe0
 8008528:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x0F;
	LCD_DATA = 0x3F;
 800852a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f

 	LCD_REG  = 0x26;    //Gamma curve selected
	LCD_DATA = 0x01;

 	LCD_REG  = 0xE0;    //Set Gamma
	LCD_DATA = 0x0F;
 800852e:	200f      	movs	r0, #15
	LCD_DATA = 0x3F;
	LCD_DATA = 0x2F;
 8008530:	f04f 0e2f 	mov.w	lr, #47	; 0x2f

 	LCD_REG  = 0x26;    //Gamma curve selected
	LCD_DATA = 0x01;

 	LCD_REG  = 0xE0;    //Set Gamma
	LCD_DATA = 0x0F;
 8008534:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x3F;
	LCD_DATA = 0x2F;
	LCD_DATA = 0x0C;
	LCD_DATA = 0x10;
	LCD_DATA = 0x0A;
	LCD_DATA = 0x53;
 8008536:	f04f 0b53 	mov.w	fp, #83	; 0x53
 	LCD_REG  = 0x26;    //Gamma curve selected
	LCD_DATA = 0x01;

 	LCD_REG  = 0xE0;    //Set Gamma
	LCD_DATA = 0x0F;
	LCD_DATA = 0x3F;
 800853a:	f8a3 c000 	strh.w	ip, [r3]
	LCD_DATA = 0x2F;
 800853e:	f8a3 e000 	strh.w	lr, [r3]
	LCD_DATA = 0x0C;
 8008542:	f04f 0e0c 	mov.w	lr, #12
 8008546:	f8a3 e000 	strh.w	lr, [r3]
	LCD_DATA = 0x10;
 800854a:	801e      	strh	r6, [r3, #0]
	LCD_DATA = 0x0A;
 800854c:	801f      	strh	r7, [r3, #0]
	LCD_DATA = 0x53;
 800854e:	f8a3 b000 	strh.w	fp, [r3]
	LCD_DATA = 0XD5;
 8008552:	f04f 0bd5 	mov.w	fp, #213	; 0xd5
 8008556:	f8a3 b000 	strh.w	fp, [r3]
	LCD_DATA = 0x40;
 800855a:	f04f 0b40 	mov.w	fp, #64	; 0x40
 800855e:	f8a3 b000 	strh.w	fp, [r3]
	LCD_DATA = 0x0A;
 8008562:	801f      	strh	r7, [r3, #0]
	LCD_DATA = 0x13;
	LCD_DATA = 0x03;
	LCD_DATA = 0x08;
 8008564:	2708      	movs	r7, #8
	LCD_DATA = 0x0A;
	LCD_DATA = 0x53;
	LCD_DATA = 0XD5;
	LCD_DATA = 0x40;
	LCD_DATA = 0x0A;
	LCD_DATA = 0x13;
 8008566:	f8a3 a000 	strh.w	sl, [r3]
	LCD_DATA = 0x03;
 800856a:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0x08;
 800856c:	801f      	strh	r7, [r3, #0]
	LCD_DATA = 0x03;
	LCD_DATA = 0x00;

 	LCD_REG  = 0XE1;    //Set Gamma
 800856e:	27e1      	movs	r7, #225	; 0xe1
	LCD_DATA = 0x40;
	LCD_DATA = 0x0A;
	LCD_DATA = 0x13;
	LCD_DATA = 0x03;
	LCD_DATA = 0x08;
	LCD_DATA = 0x03;
 8008570:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0x00;
 8008572:	801a      	strh	r2, [r3, #0]

 	LCD_REG  = 0XE1;    //Set Gamma
 8008574:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x00;
 8008576:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x00;
 8008578:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x10;
	LCD_DATA = 0x03;
	LCD_DATA = 0x0F;
	LCD_DATA = 0x05;
 800857a:	2205      	movs	r2, #5
	LCD_DATA = 0x00;

 	LCD_REG  = 0XE1;    //Set Gamma
	LCD_DATA = 0x00;
	LCD_DATA = 0x00;
	LCD_DATA = 0x10;
 800857c:	801e      	strh	r6, [r3, #0]
	LCD_DATA = 0x03;
 800857e:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0x0F;
 8008580:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x05;
 8008582:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x2C;
 8008584:	f8a3 9000 	strh.w	r9, [r3]
	LCD_DATA = 0xA2;
 8008588:	f8a3 8000 	strh.w	r8, [r3]
	LCD_DATA = 0x3F;
 800858c:	f8a3 c000 	strh.w	ip, [r3]
	LCD_DATA = 0x05;
 8008590:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x0E;
 8008592:	220e      	movs	r2, #14
 8008594:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x0C;
	LCD_DATA = 0x37;
 8008596:	2237      	movs	r2, #55	; 0x37
	LCD_DATA = 0x2C;
	LCD_DATA = 0xA2;
	LCD_DATA = 0x3F;
	LCD_DATA = 0x05;
	LCD_DATA = 0x0E;
	LCD_DATA = 0x0C;
 8008598:	f8a3 e000 	strh.w	lr, [r3]
	LCD_DATA = 0x37;
 800859c:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x3C;
 800859e:	223c      	movs	r2, #60	; 0x3c
 80085a0:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x0F;
 80085a2:	8018      	strh	r0, [r3, #0]

	LCD_REG  = EXIT_SLEEP_MODE;    //Exit Sleep
 80085a4:	8025      	strh	r5, [r4, #0]
	tft_delay(50000);
 80085a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80085aa:	f7ff ff3f 	bl	800842c <tft_delay>
 	LCD_REG  = 0x29;    //Display on
 80085ae:	2329      	movs	r3, #41	; 0x29
 80085b0:	8023      	strh	r3, [r4, #0]
	tft_delay(50000);
 80085b2:	f24c 3050 	movw	r0, #50000	; 0xc350

	LCD_REG = MEMORY_WRITE;
	*/


}
 80085b6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LCD_DATA = 0x0F;

	LCD_REG  = EXIT_SLEEP_MODE;    //Exit Sleep
	tft_delay(50000);
 	LCD_REG  = 0x29;    //Display on
	tft_delay(50000);
 80085ba:	f7ff bf37 	b.w	800842c <tft_delay>
 80085be:	bf00      	nop
 80085c0:	60100000 	.word	0x60100000

080085c4 <FT6206_write_register>:

static uint8_t FT6206_write_register(uint8_t reg, uint8_t data){
	uint8_t return_val = 0;
	
	
	aTxBuffer_I2C[0] = reg;
 80085c4:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <FT6206_write_register+0x34>)
	return_val = aRxBuffer_I2C[0];
	
	return return_val;
}

static uint8_t FT6206_write_register(uint8_t reg, uint8_t data){
 80085c6:	b507      	push	{r0, r1, r2, lr}
	uint8_t return_val = 0;
	
	
	aTxBuffer_I2C[0] = reg;
 80085c8:	7018      	strb	r0, [r3, #0]
	aTxBuffer_I2C[1] = data;
 80085ca:	7059      	strb	r1, [r3, #1]
	/*	REady to transmit?	*/
	while(HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY);
 80085cc:	480b      	ldr	r0, [pc, #44]	; (80085fc <FT6206_write_register+0x38>)
 80085ce:	f7fd fa0b 	bl	80059e8 <HAL_I2C_GetState>
 80085d2:	2801      	cmp	r0, #1
 80085d4:	d1fa      	bne.n	80085cc <FT6206_write_register+0x8>
	/* transmit data through "aTxBuffer" buffer */
	if(HAL_I2C_Master_Transmit(&I2cHandle, (uint8_t)FT6206_ADDR<<1, (uint8_t*)aTxBuffer_I2C, TXBUFFERSIZEI2C, 1000)!= HAL_OK){
 80085d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	4807      	ldr	r0, [pc, #28]	; (80085fc <FT6206_write_register+0x38>)
 80085de:	4a06      	ldr	r2, [pc, #24]	; (80085f8 <FT6206_write_register+0x34>)
 80085e0:	2170      	movs	r1, #112	; 0x70
 80085e2:	2302      	movs	r3, #2
 80085e4:	f7fd f8bc 	bl	8005760 <HAL_I2C_Master_Transmit>
 80085e8:	b110      	cbz	r0, 80085f0 <FT6206_write_register+0x2c>
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge it's address)
		Master restarts communication */
		printf("Error I2C transmit write\n");
 80085ea:	4805      	ldr	r0, [pc, #20]	; (8008600 <FT6206_write_register+0x3c>)
 80085ec:	f00d fcf6 	bl	8015fdc <puts>
	}
	
	return return_val;
}
 80085f0:	2000      	movs	r0, #0
 80085f2:	b003      	add	sp, #12
 80085f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80085f8:	20017986 	.word	0x20017986
 80085fc:	200178bc 	.word	0x200178bc
 8008600:	08024a84 	.word	0x08024a84

08008604 <FT6206_read_register>:


static uint8_t FT6206_read_register(uint8_t reg){
	uint8_t return_val = 0;
	
	aTxBuffer_I2C[0] = reg;
 8008604:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <FT6206_read_register+0x6c>)
static uint8_t FT6206_read_register(uint8_t reg);
static uint8_t FT6206_write_register(uint8_t reg, uint8_t data);



static uint8_t FT6206_read_register(uint8_t reg){
 8008606:	b507      	push	{r0, r1, r2, lr}
	uint8_t return_val = 0;
	
	aTxBuffer_I2C[0] = reg;
 8008608:	7018      	strb	r0, [r3, #0]
	/*	REady to transmit?	*/
	while(HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY);
 800860a:	481a      	ldr	r0, [pc, #104]	; (8008674 <FT6206_read_register+0x70>)
 800860c:	f7fd f9ec 	bl	80059e8 <HAL_I2C_GetState>
 8008610:	2801      	cmp	r0, #1
 8008612:	4603      	mov	r3, r0
 8008614:	d1f9      	bne.n	800860a <FT6206_read_register+0x6>
	/* transmit data through "aTxBuffer" buffer */
	if(HAL_I2C_Master_Transmit(&I2cHandle, (uint8_t)FT6206_ADDR<<1, (uint8_t*)aTxBuffer_I2C, (TXBUFFERSIZEI2C -1), 1000)!= HAL_OK){
 8008616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800861a:	9200      	str	r2, [sp, #0]
 800861c:	4815      	ldr	r0, [pc, #84]	; (8008674 <FT6206_read_register+0x70>)
 800861e:	4a14      	ldr	r2, [pc, #80]	; (8008670 <FT6206_read_register+0x6c>)
 8008620:	2170      	movs	r1, #112	; 0x70
 8008622:	f7fd f89d 	bl	8005760 <HAL_I2C_Master_Transmit>
 8008626:	b138      	cbz	r0, 8008638 <FT6206_read_register+0x34>
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge it's address)
		Master restarts communication */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8008628:	4813      	ldr	r0, [pc, #76]	; (8008678 <FT6206_read_register+0x74>)
 800862a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800862e:	f7fe ff9b 	bl	8007568 <HAL_GPIO_TogglePin>
		printf("Error I2C transmit read\n");
 8008632:	4812      	ldr	r0, [pc, #72]	; (800867c <FT6206_read_register+0x78>)
 8008634:	f00d fcd2 	bl	8015fdc <puts>
	}
	
	/*	Wait till end of transmit	*/
	while(HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY);
 8008638:	480e      	ldr	r0, [pc, #56]	; (8008674 <FT6206_read_register+0x70>)
 800863a:	f7fd f9d5 	bl	80059e8 <HAL_I2C_GetState>
 800863e:	2801      	cmp	r0, #1
 8008640:	4603      	mov	r3, r0
 8008642:	d1f9      	bne.n	8008638 <FT6206_read_register+0x34>
	/* recept data through "aRxBuffer" buffer */
	if(HAL_I2C_Master_Receive(&I2cHandle, (uint8_t)FT6206_ADDR<<1, (uint8_t *)aRxBuffer_I2C, (RXBUFFERSIZEI2C -1), 1000) != HAL_OK){
 8008644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008648:	9200      	str	r2, [sp, #0]
 800864a:	480a      	ldr	r0, [pc, #40]	; (8008674 <FT6206_read_register+0x70>)
 800864c:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <FT6206_read_register+0x7c>)
 800864e:	2170      	movs	r1, #112	; 0x70
 8008650:	f7fd f8f8 	bl	8005844 <HAL_I2C_Master_Receive>
 8008654:	b138      	cbz	r0, 8008666 <FT6206_read_register+0x62>
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge it's address)
		Master restarts communication */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8008656:	4808      	ldr	r0, [pc, #32]	; (8008678 <FT6206_read_register+0x74>)
 8008658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800865c:	f7fe ff84 	bl	8007568 <HAL_GPIO_TogglePin>
		printf("Error I2C receive\n");
 8008660:	4808      	ldr	r0, [pc, #32]	; (8008684 <FT6206_read_register+0x80>)
 8008662:	f00d fcbb 	bl	8015fdc <puts>
	}
	
	return_val = aRxBuffer_I2C[0];
	
	return return_val;
}
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <FT6206_read_register+0x7c>)
 8008668:	7818      	ldrb	r0, [r3, #0]
 800866a:	b003      	add	sp, #12
 800866c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008670:	20017986 	.word	0x20017986
 8008674:	200178bc 	.word	0x200178bc
 8008678:	40020c00 	.word	0x40020c00
 800867c:	08024a9d 	.word	0x08024a9d
 8008680:	20017968 	.word	0x20017968
 8008684:	08024ab5 	.word	0x08024ab5

08008688 <FT6206_begin>:
	
	return return_val;
}


uint8_t FT6206_begin(uint8_t threshold){
 8008688:	b538      	push	{r3, r4, r5, lr}
	//  0...255 last byte value read
	uint8_t x = 0;
	
	/*Reset pin 5 msec. low */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800868a:	4c20      	ldr	r4, [pc, #128]	; (800870c <FT6206_begin+0x84>)
	
	return return_val;
}


uint8_t FT6206_begin(uint8_t threshold){
 800868c:	4605      	mov	r5, r0
	//  0...255 last byte value read
	uint8_t x = 0;
	
	/*Reset pin 5 msec. low */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800868e:	2108      	movs	r1, #8
 8008690:	4620      	mov	r0, r4
 8008692:	f7fe ff69 	bl	8007568 <HAL_GPIO_TogglePin>
	delay_msec(5);
 8008696:	2005      	movs	r0, #5
 8008698:	f7f8 fd9e 	bl	80011d8 <delay_msec>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800869c:	4620      	mov	r0, r4
 800869e:	2108      	movs	r1, #8
 80086a0:	f7fe ff62 	bl	8007568 <HAL_GPIO_TogglePin>
	
	// change threshold to be higher/lower
	FT6206_write_register((uint8_t)FT6206_REG_THRESHOLD, threshold);
 80086a4:	4629      	mov	r1, r5
 80086a6:	2080      	movs	r0, #128	; 0x80
 80086a8:	f7ff ff8c 	bl	80085c4 <FT6206_write_register>
	
	FT6206_write_register((uint8_t)FT6206_REG_G_MODE, FT6206_INT_POLLING_MODE);
 80086ac:	2100      	movs	r1, #0
 80086ae:	20a4      	movs	r0, #164	; 0xa4
 80086b0:	f7ff ff88 	bl	80085c4 <FT6206_write_register>
	
	// fill structure
	FT6206.vendor_id = FT6206_read_register((uint8_t)FT6206_REG_VENDID);
 80086b4:	20a8      	movs	r0, #168	; 0xa8
 80086b6:	f7ff ffa5 	bl	8008604 <FT6206_read_register>
 80086ba:	4c15      	ldr	r4, [pc, #84]	; (8008710 <FT6206_begin+0x88>)
 80086bc:	75a0      	strb	r0, [r4, #22]
	FT6206.chip_id = FT6206_read_register((uint8_t)FT6206_REG_CHIPID);
 80086be:	20a3      	movs	r0, #163	; 0xa3
 80086c0:	f7ff ffa0 	bl	8008604 <FT6206_read_register>
 80086c4:	75e0      	strb	r0, [r4, #23]
	FT6206.firmware_version = FT6206_read_register((uint8_t)FT6206_REG_FIRMVERS);
 80086c6:	20a6      	movs	r0, #166	; 0xa6
 80086c8:	f7ff ff9c 	bl	8008604 <FT6206_read_register>
 80086cc:	7620      	strb	r0, [r4, #24]
	FT6206.pointrate = FT6206_read_register((uint8_t)FT6206_REG_POINTRATE);
 80086ce:	2088      	movs	r0, #136	; 0x88
 80086d0:	f7ff ff98 	bl	8008604 <FT6206_read_register>
 80086d4:	7660      	strb	r0, [r4, #25]
	FT6206.threshold = FT6206_read_register((uint8_t)FT6206_REG_THRESHOLD);
 80086d6:	2080      	movs	r0, #128	; 0x80
 80086d8:	f7ff ff94 	bl	8008604 <FT6206_read_register>

	  printf("Vendor ID       : %6d\n", FT6206.vendor_id);
 80086dc:	7da1      	ldrb	r1, [r4, #22]
	// fill structure
	FT6206.vendor_id = FT6206_read_register((uint8_t)FT6206_REG_VENDID);
	FT6206.chip_id = FT6206_read_register((uint8_t)FT6206_REG_CHIPID);
	FT6206.firmware_version = FT6206_read_register((uint8_t)FT6206_REG_FIRMVERS);
	FT6206.pointrate = FT6206_read_register((uint8_t)FT6206_REG_POINTRATE);
	FT6206.threshold = FT6206_read_register((uint8_t)FT6206_REG_THRESHOLD);
 80086de:	76a0      	strb	r0, [r4, #26]

	  printf("Vendor ID       : %6d\n", FT6206.vendor_id);
 80086e0:	480c      	ldr	r0, [pc, #48]	; (8008714 <FT6206_begin+0x8c>)
 80086e2:	f00d fc39 	bl	8015f58 <printf>
	  printf("Chip ID         : %6d\n", FT6206.chip_id);
 80086e6:	7de1      	ldrb	r1, [r4, #23]
 80086e8:	480b      	ldr	r0, [pc, #44]	; (8008718 <FT6206_begin+0x90>)
 80086ea:	f00d fc35 	bl	8015f58 <printf>
	  printf("Firmware version: %6d\n", FT6206.firmware_version);
 80086ee:	7e21      	ldrb	r1, [r4, #24]
 80086f0:	480a      	ldr	r0, [pc, #40]	; (800871c <FT6206_begin+0x94>)
 80086f2:	f00d fc31 	bl	8015f58 <printf>
	  printf("Pointrate       : %6d\n", FT6206.pointrate);
 80086f6:	7e61      	ldrb	r1, [r4, #25]
 80086f8:	4809      	ldr	r0, [pc, #36]	; (8008720 <FT6206_begin+0x98>)
 80086fa:	f00d fc2d 	bl	8015f58 <printf>
	  printf("Threshold       : %6d\n", FT6206.threshold);
 80086fe:	7ea1      	ldrb	r1, [r4, #26]
 8008700:	4808      	ldr	r0, [pc, #32]	; (8008724 <FT6206_begin+0x9c>)
 8008702:	f00d fc29 	bl	8015f58 <printf>

  return x;
}
 8008706:	2000      	movs	r0, #0
 8008708:	bd38      	pop	{r3, r4, r5, pc}
 800870a:	bf00      	nop
 800870c:	40020800 	.word	0x40020800
 8008710:	2001796a 	.word	0x2001796a
 8008714:	08024ac7 	.word	0x08024ac7
 8008718:	08024ade 	.word	0x08024ade
 800871c:	08024af5 	.word	0x08024af5
 8008720:	08024b0c 	.word	0x08024b0c
 8008724:	08024b23 	.word	0x08024b23

08008728 <TEXT_SetTextColor>:
 8008728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	4605      	mov	r5, r0
 800872e:	b160      	cbz	r0, 800874a <TEXT_SetTextColor+0x22>
 8008730:	f009 f8d4 	bl	80118dc <GUI_ALLOC_LockH>
 8008734:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008736:	9001      	str	r0, [sp, #4]
 8008738:	42a2      	cmp	r2, r4
 800873a:	d003      	beq.n	8008744 <TEXT_SetTextColor+0x1c>
 800873c:	6384      	str	r4, [r0, #56]	; 0x38
 800873e:	4628      	mov	r0, r5
 8008740:	f003 fe10 	bl	800c364 <WM_InvalidateWindow>
 8008744:	a801      	add	r0, sp, #4
 8008746:	f009 f8d7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800874a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800874c <TEXT_SetTextAlign>:
 800874c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800874e:	460d      	mov	r5, r1
 8008750:	4604      	mov	r4, r0
 8008752:	b160      	cbz	r0, 800876e <TEXT_SetTextAlign+0x22>
 8008754:	f009 f8c2 	bl	80118dc <GUI_ALLOC_LockH>
 8008758:	4602      	mov	r2, r0
 800875a:	a802      	add	r0, sp, #8
 800875c:	f8a2 5048 	strh.w	r5, [r2, #72]	; 0x48
 8008760:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008764:	f009 f8c8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008768:	4620      	mov	r0, r4
 800876a:	f003 fdfb 	bl	800c364 <WM_InvalidateWindow>
 800876e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08008770 <TEXT_SetText>:
 8008770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008772:	460c      	mov	r4, r1
 8008774:	4605      	mov	r5, r0
 8008776:	b300      	cbz	r0, 80087ba <TEXT_SetText+0x4a>
 8008778:	f009 f8b0 	bl	80118dc <GUI_ALLOC_LockH>
 800877c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800877e:	9000      	str	r0, [sp, #0]
 8008780:	4668      	mov	r0, sp
 8008782:	9301      	str	r3, [sp, #4]
 8008784:	f009 f8b8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008788:	4621      	mov	r1, r4
 800878a:	a801      	add	r0, sp, #4
 800878c:	f007 f82e 	bl	800f7ec <GUI__SetText>
 8008790:	f1d0 0401 	rsbs	r4, r0, #1
 8008794:	bf38      	it	cc
 8008796:	2400      	movcc	r4, #0
 8008798:	b984      	cbnz	r4, 80087bc <TEXT_SetText+0x4c>
 800879a:	4628      	mov	r0, r5
 800879c:	f009 f89e 	bl	80118dc <GUI_ALLOC_LockH>
 80087a0:	9a01      	ldr	r2, [sp, #4]
 80087a2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80087a4:	9000      	str	r0, [sp, #0]
 80087a6:	4291      	cmp	r1, r2
 80087a8:	bf18      	it	ne
 80087aa:	6442      	strne	r2, [r0, #68]	; 0x44
 80087ac:	4668      	mov	r0, sp
 80087ae:	f009 f8a3 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80087b2:	4628      	mov	r0, r5
 80087b4:	f003 fdd6 	bl	800c364 <WM_InvalidateWindow>
 80087b8:	e000      	b.n	80087bc <TEXT_SetText+0x4c>
 80087ba:	2401      	movs	r4, #1
 80087bc:	4620      	mov	r0, r4
 80087be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080087c0 <TEXT_SetFont>:
 80087c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087c2:	460c      	mov	r4, r1
 80087c4:	4605      	mov	r5, r0
 80087c6:	b160      	cbz	r0, 80087e2 <TEXT_SetFont+0x22>
 80087c8:	f009 f888 	bl	80118dc <GUI_ALLOC_LockH>
 80087cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80087ce:	9001      	str	r0, [sp, #4]
 80087d0:	42a2      	cmp	r2, r4
 80087d2:	d003      	beq.n	80087dc <TEXT_SetFont+0x1c>
 80087d4:	6344      	str	r4, [r0, #52]	; 0x34
 80087d6:	4628      	mov	r0, r5
 80087d8:	f003 fdc4 	bl	800c364 <WM_InvalidateWindow>
 80087dc:	a801      	add	r0, sp, #4
 80087de:	f009 f88b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80087e2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080087e4 <TEXT_CreateIndirect>:
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	b087      	sub	sp, #28
 80087e8:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 80087ec:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 80087f0:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 80087f4:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 80087f8:	9100      	str	r1, [sp, #0]
 80087fa:	2102      	movs	r1, #2
 80087fc:	9101      	str	r1, [sp, #4]
 80087fe:	8a44      	ldrh	r4, [r0, #18]
 8008800:	9402      	str	r4, [sp, #8]
 8008802:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8008806:	9103      	str	r1, [sp, #12]
 8008808:	6844      	ldr	r4, [r0, #4]
 800880a:	9404      	str	r4, [sp, #16]
 800880c:	6984      	ldr	r4, [r0, #24]
 800880e:	18f9      	adds	r1, r7, r3
 8008810:	eb0e 0002 	add.w	r0, lr, r2
 8008814:	9405      	str	r4, [sp, #20]
 8008816:	4632      	mov	r2, r6
 8008818:	462b      	mov	r3, r5
 800881a:	f000 f865 	bl	80088e8 <TEXT_CreateUser>
 800881e:	b007      	add	sp, #28
 8008820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008822 <TEXT_Callback>:
 8008822:	b530      	push	{r4, r5, lr}
 8008824:	6845      	ldr	r5, [r0, #4]
 8008826:	4604      	mov	r4, r0
 8008828:	b085      	sub	sp, #20
 800882a:	4628      	mov	r0, r5
 800882c:	4621      	mov	r1, r4
 800882e:	f009 fc95 	bl	801215c <WIDGET_HandleActive>
 8008832:	2800      	cmp	r0, #0
 8008834:	d056      	beq.n	80088e4 <TEXT_Callback+0xc2>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	2b0f      	cmp	r3, #15
 800883a:	d01e      	beq.n	800887a <TEXT_Callback+0x58>
 800883c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008840:	d00e      	beq.n	8008860 <TEXT_Callback+0x3e>
 8008842:	2b0b      	cmp	r3, #11
 8008844:	d14b      	bne.n	80088de <TEXT_Callback+0xbc>
 8008846:	4628      	mov	r0, r5
 8008848:	f009 f848 	bl	80118dc <GUI_ALLOC_LockH>
 800884c:	ad04      	add	r5, sp, #16
 800884e:	f845 0d0c 	str.w	r0, [r5, #-12]!
 8008852:	3044      	adds	r0, #68	; 0x44
 8008854:	f009 fa94 	bl	8011d80 <GUI_ALLOC_FreePtr>
 8008858:	4628      	mov	r0, r5
 800885a:	f009 f84d 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800885e:	e03e      	b.n	80088de <TEXT_Callback+0xbc>
 8008860:	68e0      	ldr	r0, [r4, #12]
 8008862:	b128      	cbz	r0, 8008870 <TEXT_Callback+0x4e>
 8008864:	7a01      	ldrb	r1, [r0, #8]
 8008866:	2900      	cmp	r1, #0
 8008868:	bf0c      	ite	eq
 800886a:	2102      	moveq	r1, #2
 800886c:	2101      	movne	r1, #1
 800886e:	e000      	b.n	8008872 <TEXT_Callback+0x50>
 8008870:	2103      	movs	r1, #3
 8008872:	4628      	mov	r0, r5
 8008874:	f002 feb9 	bl	800b5ea <WM_NotifyParent>
 8008878:	e031      	b.n	80088de <TEXT_Callback+0xbc>
 800887a:	4628      	mov	r0, r5
 800887c:	f009 f82e 	bl	80118dc <GUI_ALLOC_LockH>
 8008880:	9000      	str	r0, [sp, #0]
 8008882:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008884:	f006 ff4a 	bl	800f71c <LCD_SetColor>
 8008888:	9a00      	ldr	r2, [sp, #0]
 800888a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800888c:	f007 fcce 	bl	801022c <GUI_SetFont>
 8008890:	4628      	mov	r0, r5
 8008892:	f002 fc8d 	bl	800b1b0 <WM_GetHasTrans>
 8008896:	b928      	cbnz	r0, 80088a4 <TEXT_Callback+0x82>
 8008898:	9b00      	ldr	r3, [sp, #0]
 800889a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800889c:	f006 ff36 	bl	800f70c <LCD_SetBkColor>
 80088a0:	f008 fc0a 	bl	80110b8 <GUI_Clear>
 80088a4:	9800      	ldr	r0, [sp, #0]
 80088a6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80088a8:	b1a9      	cbz	r1, 80088d6 <TEXT_Callback+0xb4>
 80088aa:	2002      	movs	r0, #2
 80088ac:	f007 fcb4 	bl	8010218 <GUI_SetTextMode>
 80088b0:	a802      	add	r0, sp, #8
 80088b2:	f003 f867 	bl	800b984 <WM_GetClientRect>
 80088b6:	9a00      	ldr	r2, [sp, #0]
 80088b8:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80088ba:	f009 f80f 	bl	80118dc <GUI_ALLOC_LockH>
 80088be:	9b00      	ldr	r3, [sp, #0]
 80088c0:	9001      	str	r0, [sp, #4]
 80088c2:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80088c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ca:	a902      	add	r1, sp, #8
 80088cc:	f008 f89a 	bl	8010a04 <GUI_DispStringInRectWrap>
 80088d0:	a801      	add	r0, sp, #4
 80088d2:	f009 f811 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80088d6:	4668      	mov	r0, sp
 80088d8:	f009 f80e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80088dc:	e002      	b.n	80088e4 <TEXT_Callback+0xc2>
 80088de:	4620      	mov	r0, r4
 80088e0:	f004 f96a 	bl	800cbb8 <WM_DefaultProc>
 80088e4:	b005      	add	sp, #20
 80088e6:	bd30      	pop	{r4, r5, pc}

080088e8 <TEXT_CreateUser>:
 80088e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ea:	b087      	sub	sp, #28
 80088ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80088f0:	9500      	str	r5, [sp, #0]
 80088f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80088f4:	f045 0501 	orr.w	r5, r5, #1
 80088f8:	9501      	str	r5, [sp, #4]
 80088fa:	4d1d      	ldr	r5, [pc, #116]	; (8008970 <TEXT_CreateUser+0x88>)
 80088fc:	9502      	str	r5, [sp, #8]
 80088fe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008900:	3520      	adds	r5, #32
 8008902:	9503      	str	r5, [sp, #12]
 8008904:	f003 fdea 	bl	800c4dc <WM_CreateWindowAsChild>
 8008908:	4605      	mov	r5, r0
 800890a:	b368      	cbz	r0, 8008968 <TEXT_CreateUser+0x80>
 800890c:	b90c      	cbnz	r4, 8008912 <TEXT_CreateUser+0x2a>
 800890e:	2700      	movs	r7, #0
 8008910:	e013      	b.n	800893a <TEXT_CreateUser+0x52>
 8008912:	4620      	mov	r0, r4
 8008914:	f00d fbc8 	bl	80160a8 <strlen>
 8008918:	3001      	adds	r0, #1
 800891a:	f009 fa53 	bl	8011dc4 <GUI_ALLOC_AllocZero>
 800891e:	4607      	mov	r7, r0
 8008920:	2800      	cmp	r0, #0
 8008922:	d0f4      	beq.n	800890e <TEXT_CreateUser+0x26>
 8008924:	f008 ffda 	bl	80118dc <GUI_ALLOC_LockH>
 8008928:	ae06      	add	r6, sp, #24
 800892a:	4621      	mov	r1, r4
 800892c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008930:	f00d fb5c 	bl	8015fec <strcpy>
 8008934:	4630      	mov	r0, r6
 8008936:	f008 ffdf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800893a:	4628      	mov	r0, r5
 800893c:	f008 ffce 	bl	80118dc <GUI_ALLOC_LockH>
 8008940:	ae06      	add	r6, sp, #24
 8008942:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008944:	9005      	str	r0, [sp, #20]
 8008946:	2200      	movs	r2, #0
 8008948:	f009 fc00 	bl	801214c <WIDGET__Init>
 800894c:	f856 4d04 	ldr.w	r4, [r6, #-4]!
 8008950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008952:	4808      	ldr	r0, [pc, #32]	; (8008974 <TEXT_CreateUser+0x8c>)
 8008954:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8008958:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800895a:	6467      	str	r7, [r4, #68]	; 0x44
 800895c:	3434      	adds	r4, #52	; 0x34
 800895e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008962:	4630      	mov	r0, r6
 8008964:	f008 ffc8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008968:	4628      	mov	r0, r5
 800896a:	b007      	add	sp, #28
 800896c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800896e:	bf00      	nop
 8008970:	08008823 	.word	0x08008823
 8008974:	20000020 	.word	0x20000020

08008978 <SLIDER_CreateIndirect>:
 8008978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800897a:	b087      	sub	sp, #28
 800897c:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8008980:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8008984:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8008988:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800898c:	9100      	str	r1, [sp, #0]
 800898e:	2100      	movs	r1, #0
 8008990:	9101      	str	r1, [sp, #4]
 8008992:	8a44      	ldrh	r4, [r0, #18]
 8008994:	9402      	str	r4, [sp, #8]
 8008996:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800899a:	9103      	str	r1, [sp, #12]
 800899c:	6984      	ldr	r4, [r0, #24]
 800899e:	18f9      	adds	r1, r7, r3
 80089a0:	eb0e 0002 	add.w	r0, lr, r2
 80089a4:	9404      	str	r4, [sp, #16]
 80089a6:	4632      	mov	r2, r6
 80089a8:	462b      	mov	r3, r5
 80089aa:	f000 f803 	bl	80089b4 <SLIDER_CreateUser>
 80089ae:	b007      	add	sp, #28
 80089b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080089b4 <SLIDER_CreateUser>:
 80089b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80089bc:	9400      	str	r4, [sp, #0]
 80089be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80089c0:	f044 0401 	orr.w	r4, r4, #1
 80089c4:	9401      	str	r4, [sp, #4]
 80089c6:	4c1c      	ldr	r4, [pc, #112]	; (8008a38 <SLIDER_CreateUser+0x84>)
 80089c8:	9402      	str	r4, [sp, #8]
 80089ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80089cc:	3438      	adds	r4, #56	; 0x38
 80089ce:	9403      	str	r4, [sp, #12]
 80089d0:	f003 fd84 	bl	800c4dc <WM_CreateWindowAsChild>
 80089d4:	4680      	mov	r8, r0
 80089d6:	b358      	cbz	r0, 8008a30 <SLIDER_CreateUser+0x7c>
 80089d8:	f008 ff80 	bl	80118dc <GUI_ALLOC_LockH>
 80089dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089de:	4d17      	ldr	r5, [pc, #92]	; (8008a3c <SLIDER_CreateUser+0x88>)
 80089e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089e2:	9005      	str	r0, [sp, #20]
 80089e4:	f013 0f08 	tst.w	r3, #8
 80089e8:	bf14      	ite	ne
 80089ea:	2218      	movne	r2, #24
 80089ec:	2210      	moveq	r2, #16
 80089ee:	f009 fbad 	bl	801214c <WIDGET__Init>
 80089f2:	af06      	add	r7, sp, #24
 80089f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089f6:	f857 6d04 	ldr.w	r6, [r7, #-4]!
 80089fa:	f106 0434 	add.w	r4, r6, #52	; 0x34
 80089fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a04:	e884 0003 	stmia.w	r4, {r0, r1}
 8008a08:	4c0d      	ldr	r4, [pc, #52]	; (8008a40 <SLIDER_CreateUser+0x8c>)
 8008a0a:	6820      	ldr	r0, [r4, #0]
 8008a0c:	2108      	movs	r1, #8
 8008a0e:	2264      	movs	r2, #100	; 0x64
 8008a10:	64f0      	str	r0, [r6, #76]	; 0x4c
 8008a12:	2300      	movs	r3, #0
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	f8a6 1060 	strh.w	r1, [r6, #96]	; 0x60
 8008a1c:	6572      	str	r2, [r6, #84]	; 0x54
 8008a1e:	6530      	str	r0, [r6, #80]	; 0x50
 8008a20:	65b3      	str	r3, [r6, #88]	; 0x58
 8008a22:	4638      	mov	r0, r7
 8008a24:	f008 ff68 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008a28:	6821      	ldr	r1, [r4, #0]
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	684a      	ldr	r2, [r1, #4]
 8008a2e:	4790      	blx	r2
 8008a30:	4640      	mov	r0, r8
 8008a32:	b006      	add	sp, #24
 8008a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a38:	08008b23 	.word	0x08008b23
 8008a3c:	20000034 	.word	0x20000034
 8008a40:	20000030 	.word	0x20000030

08008a44 <SLIDER_CreateEx>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	9c08      	ldr	r4, [sp, #32]
 8008a4a:	9400      	str	r4, [sp, #0]
 8008a4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008a4e:	9401      	str	r4, [sp, #4]
 8008a50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a52:	9402      	str	r4, [sp, #8]
 8008a54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008a56:	9403      	str	r4, [sp, #12]
 8008a58:	2400      	movs	r4, #0
 8008a5a:	9404      	str	r4, [sp, #16]
 8008a5c:	f7ff ffaa 	bl	80089b4 <SLIDER_CreateUser>
 8008a60:	b006      	add	sp, #24
 8008a62:	bd10      	pop	{r4, pc}

08008a64 <SLIDER_Dec>:
 8008a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a66:	4605      	mov	r5, r0
 8008a68:	b1c0      	cbz	r0, 8008a9c <SLIDER_Dec+0x38>
 8008a6a:	f008 ff37 	bl	80118dc <GUI_ALLOC_LockH>
 8008a6e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008a70:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8008a72:	ac02      	add	r4, sp, #8
 8008a74:	428a      	cmp	r2, r1
 8008a76:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008a7a:	dd0c      	ble.n	8008a96 <SLIDER_Dec+0x32>
 8008a7c:	1e53      	subs	r3, r2, #1
 8008a7e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8008a80:	4628      	mov	r0, r5
 8008a82:	f003 fc6f 	bl	800c364 <WM_InvalidateWindow>
 8008a86:	4620      	mov	r0, r4
 8008a88:	f008 ff36 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	2105      	movs	r1, #5
 8008a90:	f002 fdab 	bl	800b5ea <WM_NotifyParent>
 8008a94:	e002      	b.n	8008a9c <SLIDER_Dec+0x38>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f008 ff2e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008a9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08008a9e <SLIDER_Inc>:
 8008a9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	b1c0      	cbz	r0, 8008ad6 <SLIDER_Inc+0x38>
 8008aa4:	f008 ff1a 	bl	80118dc <GUI_ALLOC_LockH>
 8008aa8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008aaa:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8008aac:	ac02      	add	r4, sp, #8
 8008aae:	428a      	cmp	r2, r1
 8008ab0:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008ab4:	da0c      	bge.n	8008ad0 <SLIDER_Inc+0x32>
 8008ab6:	1c53      	adds	r3, r2, #1
 8008ab8:	65c3      	str	r3, [r0, #92]	; 0x5c
 8008aba:	4628      	mov	r0, r5
 8008abc:	f003 fc52 	bl	800c364 <WM_InvalidateWindow>
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f008 ff19 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	2105      	movs	r1, #5
 8008aca:	f002 fd8e 	bl	800b5ea <WM_NotifyParent>
 8008ace:	e002      	b.n	8008ad6 <SLIDER_Inc+0x38>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f008 ff11 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008ad6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08008ad8 <SLIDER_SetValue>:
 8008ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ada:	460e      	mov	r6, r1
 8008adc:	4605      	mov	r5, r0
 8008ade:	b1f8      	cbz	r0, 8008b20 <SLIDER_SetValue+0x48>
 8008ae0:	f008 fefc 	bl	80118dc <GUI_ALLOC_LockH>
 8008ae4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008ae6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008ae8:	4296      	cmp	r6, r2
 8008aea:	bfac      	ite	ge
 8008aec:	4631      	movge	r1, r6
 8008aee:	4611      	movlt	r1, r2
 8008af0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008af2:	ac02      	add	r4, sp, #8
 8008af4:	4299      	cmp	r1, r3
 8008af6:	bfa8      	it	ge
 8008af8:	4619      	movge	r1, r3
 8008afa:	428a      	cmp	r2, r1
 8008afc:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008b00:	d00b      	beq.n	8008b1a <SLIDER_SetValue+0x42>
 8008b02:	65c1      	str	r1, [r0, #92]	; 0x5c
 8008b04:	4628      	mov	r0, r5
 8008b06:	f003 fc2d 	bl	800c364 <WM_InvalidateWindow>
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f008 fef4 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008b10:	4628      	mov	r0, r5
 8008b12:	2105      	movs	r1, #5
 8008b14:	f002 fd69 	bl	800b5ea <WM_NotifyParent>
 8008b18:	e002      	b.n	8008b20 <SLIDER_SetValue+0x48>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f008 feec 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008b20:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08008b22 <SLIDER_Callback>:
 8008b22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b26:	6844      	ldr	r4, [r0, #4]
 8008b28:	4605      	mov	r5, r0
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f009 fb15 	bl	801215c <WIDGET_HandleActive>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	f000 80a4 	beq.w	8008c80 <SLIDER_Callback+0x15e>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	2b0f      	cmp	r3, #15
 8008b3c:	d006      	beq.n	8008b4c <SLIDER_Callback+0x2a>
 8008b3e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008b42:	d014      	beq.n	8008b6e <SLIDER_Callback+0x4c>
 8008b44:	2b0e      	cmp	r3, #14
 8008b46:	f040 8098 	bne.w	8008c7a <SLIDER_Callback+0x158>
 8008b4a:	e086      	b.n	8008c5a <SLIDER_Callback+0x138>
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f008 fec5 	bl	80118dc <GUI_ALLOC_LockH>
 8008b52:	a902      	add	r1, sp, #8
 8008b54:	f841 0d04 	str.w	r0, [r1, #-4]!
 8008b58:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8008b5a:	682d      	ldr	r5, [r5, #0]
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	f008 fecb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008b62:	2d00      	cmp	r5, #0
 8008b64:	f000 808c 	beq.w	8008c80 <SLIDER_Callback+0x15e>
 8008b68:	4620      	mov	r0, r4
 8008b6a:	47a8      	blx	r5
 8008b6c:	e088      	b.n	8008c80 <SLIDER_Callback+0x15e>
 8008b6e:	68ef      	ldr	r7, [r5, #12]
 8008b70:	2f00      	cmp	r7, #0
 8008b72:	f000 8082 	beq.w	8008c7a <SLIDER_Callback+0x158>
 8008b76:	4620      	mov	r0, r4
 8008b78:	f008 feb0 	bl	80118dc <GUI_ALLOC_LockH>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	a802      	add	r0, sp, #8
 8008b80:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8008b82:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008b86:	f8d3 9054 	ldr.w	r9, [r3, #84]	; 0x54
 8008b8a:	f8b3 b060 	ldrh.w	fp, [r3, #96]	; 0x60
 8008b8e:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 8008b92:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
 8008b96:	f008 feaf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008b9a:	7a3a      	ldrb	r2, [r7, #8]
 8008b9c:	2a00      	cmp	r2, #0
 8008b9e:	d048      	beq.n	8008c32 <SLIDER_Callback+0x110>
 8008ba0:	fa0f fb8b 	sxth.w	fp, fp
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	f008 0008 	and.w	r0, r8, #8
 8008baa:	fb9b f2f3 	sdiv	r2, fp, r3
 8008bae:	b281      	uxth	r1, r0
 8008bb0:	f102 0b01 	add.w	fp, r2, #1
 8008bb4:	b109      	cbz	r1, 8008bba <SLIDER_Callback+0x98>
 8008bb6:	687f      	ldr	r7, [r7, #4]
 8008bb8:	e000      	b.n	8008bbc <SLIDER_Callback+0x9a>
 8008bba:	683f      	ldr	r7, [r7, #0]
 8008bbc:	ebcb 0707 	rsb	r7, fp, r7
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f009 fa73 	bl	80120ac <WIDGET__GetWindowSizeX>
 8008bc6:	2f00      	cmp	r7, #0
 8008bc8:	dd12      	ble.n	8008bf0 <SLIDER_Callback+0xce>
 8008bca:	eba0 024b 	sub.w	r2, r0, fp, lsl #1
 8008bce:	4297      	cmp	r7, r2
 8008bd0:	da0d      	bge.n	8008bee <SLIDER_Callback+0xcc>
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	bf08      	it	eq
 8008bd6:	2201      	moveq	r2, #1
 8008bd8:	2302      	movs	r3, #2
 8008bda:	ebc6 0909 	rsb	r9, r6, r9
 8008bde:	fb92 f0f3 	sdiv	r0, r2, r3
 8008be2:	fb09 0707 	mla	r7, r9, r7, r0
 8008be6:	fbb7 f1f2 	udiv	r1, r7, r2
 8008bea:	198e      	adds	r6, r1, r6
 8008bec:	e000      	b.n	8008bf0 <SLIDER_Callback+0xce>
 8008bee:	464e      	mov	r6, r9
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f002 fdc5 	bl	800b780 <WM_IsFocussable>
 8008bf6:	b110      	cbz	r0, 8008bfe <SLIDER_Callback+0xdc>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f002 fb77 	bl	800b2ec <WM_SetFocus>
 8008bfe:	4620      	mov	r0, r4
 8008c00:	2101      	movs	r1, #1
 8008c02:	f002 fc47 	bl	800b494 <WM_SetCapture>
 8008c06:	f408 7880 	and.w	r8, r8, #256	; 0x100
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	f7ff ff63 	bl	8008ad8 <SLIDER_SetValue>
 8008c12:	fa1f f288 	uxth.w	r2, r8
 8008c16:	bb82      	cbnz	r2, 8008c7a <SLIDER_Callback+0x158>
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c1e:	f00a 0a02 	and.w	sl, sl, #2
 8008c22:	f009 fa6a 	bl	80120fa <WIDGET_OrState>
 8008c26:	fa1f f38a 	uxth.w	r3, sl
 8008c2a:	b333      	cbz	r3, 8008c7a <SLIDER_Callback+0x158>
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	2101      	movs	r1, #1
 8008c30:	e010      	b.n	8008c54 <SLIDER_Callback+0x132>
 8008c32:	f408 7880 	and.w	r8, r8, #256	; 0x100
 8008c36:	fa1f f088 	uxth.w	r0, r8
 8008c3a:	b1f0      	cbz	r0, 8008c7a <SLIDER_Callback+0x158>
 8008c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c40:	4620      	mov	r0, r4
 8008c42:	f00a 0a02 	and.w	sl, sl, #2
 8008c46:	f009 fa6d 	bl	8012124 <WIDGET_AndState>
 8008c4a:	fa1f f18a 	uxth.w	r1, sl
 8008c4e:	b1a1      	cbz	r1, 8008c7a <SLIDER_Callback+0x158>
 8008c50:	4620      	mov	r0, r4
 8008c52:	2102      	movs	r1, #2
 8008c54:	f002 fcc9 	bl	800b5ea <WM_NotifyParent>
 8008c58:	e00f      	b.n	8008c7a <SLIDER_Callback+0x158>
 8008c5a:	68ea      	ldr	r2, [r5, #12]
 8008c5c:	6851      	ldr	r1, [r2, #4]
 8008c5e:	6810      	ldr	r0, [r2, #0]
 8008c60:	2900      	cmp	r1, #0
 8008c62:	dd0a      	ble.n	8008c7a <SLIDER_Callback+0x158>
 8008c64:	2810      	cmp	r0, #16
 8008c66:	d005      	beq.n	8008c74 <SLIDER_Callback+0x152>
 8008c68:	2812      	cmp	r0, #18
 8008c6a:	d106      	bne.n	8008c7a <SLIDER_Callback+0x158>
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f7ff ff16 	bl	8008a9e <SLIDER_Inc>
 8008c72:	e002      	b.n	8008c7a <SLIDER_Callback+0x158>
 8008c74:	4620      	mov	r0, r4
 8008c76:	f7ff fef5 	bl	8008a64 <SLIDER_Dec>
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f003 ff9c 	bl	800cbb8 <WM_DefaultProc>
 8008c80:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c84 <SLIDER_SetRange>:
 8008c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c86:	460c      	mov	r4, r1
 8008c88:	4616      	mov	r6, r2
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	b1b0      	cbz	r0, 8008cbc <SLIDER_SetRange+0x38>
 8008c8e:	f008 fe25 	bl	80118dc <GUI_ALLOC_LockH>
 8008c92:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8008c94:	9001      	str	r0, [sp, #4]
 8008c96:	42a6      	cmp	r6, r4
 8008c98:	bfac      	ite	ge
 8008c9a:	4632      	movge	r2, r6
 8008c9c:	4622      	movlt	r2, r4
 8008c9e:	42a1      	cmp	r1, r4
 8008ca0:	bfb8      	it	lt
 8008ca2:	65c4      	strlt	r4, [r0, #92]	; 0x5c
 8008ca4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8008ca6:	6584      	str	r4, [r0, #88]	; 0x58
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	6542      	str	r2, [r0, #84]	; 0x54
 8008cac:	bfc8      	it	gt
 8008cae:	65c2      	strgt	r2, [r0, #92]	; 0x5c
 8008cb0:	a801      	add	r0, sp, #4
 8008cb2:	f008 fe21 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f003 fb54 	bl	800c364 <WM_InvalidateWindow>
 8008cbc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08008cbe <SLIDER_GetValue>:
 8008cbe:	b513      	push	{r0, r1, r4, lr}
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	b140      	cbz	r0, 8008cd6 <SLIDER_GetValue+0x18>
 8008cc4:	f008 fe0a 	bl	80118dc <GUI_ALLOC_LockH>
 8008cc8:	ab02      	add	r3, sp, #8
 8008cca:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8008ccc:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f008 fe11 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	bd1c      	pop	{r2, r3, r4, pc}

08008cda <RADIO_SetText>:
 8008cda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008cde:	460c      	mov	r4, r1
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	b1e0      	cbz	r0, 8008d20 <RADIO_SetText+0x46>
 8008ce6:	f008 fdf9 	bl	80118dc <GUI_ALLOC_LockH>
 8008cea:	4605      	mov	r5, r0
 8008cec:	a802      	add	r0, sp, #8
 8008cee:	f8d5 805c 	ldr.w	r8, [r5, #92]	; 0x5c
 8008cf2:	f840 5d04 	str.w	r5, [r0, #-4]!
 8008cf6:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
 8008cfa:	f008 fdfd 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008cfe:	42ae      	cmp	r6, r5
 8008d00:	d20e      	bcs.n	8008d20 <RADIO_SetText+0x46>
 8008d02:	b124      	cbz	r4, 8008d0e <RADIO_SetText+0x34>
 8008d04:	4620      	mov	r0, r4
 8008d06:	f006 fd11 	bl	800f72c <GUI__strlen>
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	e000      	b.n	8008d10 <RADIO_SetText+0x36>
 8008d0e:	4623      	mov	r3, r4
 8008d10:	4640      	mov	r0, r8
 8008d12:	4631      	mov	r1, r6
 8008d14:	4622      	mov	r2, r4
 8008d16:	f000 fdc2 	bl	800989e <GUI_ARRAY_SetItem>
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f003 fb22 	bl	800c364 <WM_InvalidateWindow>
 8008d20:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

08008d24 <RADIO_SetFont>:
 8008d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d26:	460c      	mov	r4, r1
 8008d28:	4605      	mov	r5, r0
 8008d2a:	b180      	cbz	r0, 8008d4e <RADIO_SetFont+0x2a>
 8008d2c:	f008 fdd6 	bl	80118dc <GUI_ALLOC_LockH>
 8008d30:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008d32:	9001      	str	r0, [sp, #4]
 8008d34:	4294      	cmp	r4, r2
 8008d36:	d007      	beq.n	8008d48 <RADIO_SetFont+0x24>
 8008d38:	6404      	str	r4, [r0, #64]	; 0x40
 8008d3a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8008d3c:	f000 fd30 	bl	80097a0 <GUI_ARRAY_GetNumItems>
 8008d40:	b110      	cbz	r0, 8008d48 <RADIO_SetFont+0x24>
 8008d42:	4628      	mov	r0, r5
 8008d44:	f003 fb0e 	bl	800c364 <WM_InvalidateWindow>
 8008d48:	a801      	add	r0, sp, #4
 8008d4a:	f008 fdd5 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008d4e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08008d50 <RADIO_CreateIndirect>:
 8008d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d52:	b089      	sub	sp, #36	; 0x24
 8008d54:	6944      	ldr	r4, [r0, #20]
 8008d56:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8008d5a:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8008d5e:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8008d62:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8008d66:	9100      	str	r1, [sp, #0]
 8008d68:	8a41      	ldrh	r1, [r0, #18]
 8008d6a:	9101      	str	r1, [sp, #4]
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	9102      	str	r1, [sp, #8]
 8008d70:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8008d74:	9103      	str	r1, [sp, #12]
 8008d76:	b2e1      	uxtb	r1, r4
 8008d78:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008d7c:	9104      	str	r1, [sp, #16]
 8008d7e:	9405      	str	r4, [sp, #20]
 8008d80:	6984      	ldr	r4, [r0, #24]
 8008d82:	18f9      	adds	r1, r7, r3
 8008d84:	eb0e 0002 	add.w	r0, lr, r2
 8008d88:	9406      	str	r4, [sp, #24]
 8008d8a:	4632      	mov	r2, r6
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	f000 f837 	bl	8008e00 <RADIO_CreateUser>
 8008d92:	b009      	add	sp, #36	; 0x24
 8008d94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d96 <RADIO__GetButtonSize>:
 8008d96:	b530      	push	{r4, r5, lr}
 8008d98:	b08b      	sub	sp, #44	; 0x2c
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	f008 fd9e 	bl	80118dc <GUI_ALLOC_LockH>
 8008da0:	ab0a      	add	r3, sp, #40	; 0x28
 8008da2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008da4:	f843 0d28 	str.w	r0, [r3, #-40]!
 8008da8:	6894      	ldr	r4, [r2, #8]
 8008daa:	4668      	mov	r0, sp
 8008dac:	f008 fda4 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008db0:	2019      	movs	r0, #25
 8008db2:	9002      	str	r0, [sp, #8]
 8008db4:	9501      	str	r5, [sp, #4]
 8008db6:	6861      	ldr	r1, [r4, #4]
 8008db8:	a801      	add	r0, sp, #4
 8008dba:	4788      	blx	r1
 8008dbc:	b00b      	add	sp, #44	; 0x2c
 8008dbe:	bd30      	pop	{r4, r5, pc}

08008dc0 <RADIO__SetValue>:
 8008dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	f008 fd89 	bl	80118dc <GUI_ALLOC_LockH>
 8008dca:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8008dce:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
 8008dd2:	9001      	str	r0, [sp, #4]
 8008dd4:	4294      	cmp	r4, r2
 8008dd6:	bfa8      	it	ge
 8008dd8:	1e54      	subge	r4, r2, #1
 8008dda:	428c      	cmp	r4, r1
 8008ddc:	d00c      	beq.n	8008df8 <RADIO__SetValue+0x38>
 8008dde:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
 8008de2:	4628      	mov	r0, r5
 8008de4:	f003 fabe 	bl	800c364 <WM_InvalidateWindow>
 8008de8:	a801      	add	r0, sp, #4
 8008dea:	f008 fd85 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008dee:	4628      	mov	r0, r5
 8008df0:	2105      	movs	r1, #5
 8008df2:	f002 fbfa 	bl	800b5ea <WM_NotifyParent>
 8008df6:	e002      	b.n	8008dfe <RADIO__SetValue+0x3e>
 8008df8:	a801      	add	r0, sp, #4
 8008dfa:	f008 fd7d 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008dfe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08008e00 <RADIO_CreateUser>:
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	4c35      	ldr	r4, [pc, #212]	; (8008edc <RADIO_CreateUser+0xdc>)
 8008e06:	b087      	sub	sp, #28
 8008e08:	6924      	ldr	r4, [r4, #16]
 8008e0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008e0c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008e0e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8008e12:	8866      	ldrh	r6, [r4, #2]
 8008e14:	2d00      	cmp	r5, #0
 8008e16:	bfcc      	ite	gt
 8008e18:	46a9      	movgt	r9, r5
 8008e1a:	f04f 0914 	movle.w	r9, #20
 8008e1e:	2f00      	cmp	r7, #0
 8008e20:	bfd8      	it	le
 8008e22:	2702      	movle	r7, #2
 8008e24:	b91b      	cbnz	r3, 8008e2e <RADIO_CreateUser+0x2e>
 8008e26:	3604      	adds	r6, #4
 8008e28:	1e7b      	subs	r3, r7, #1
 8008e2a:	fb09 6303 	mla	r3, r9, r3, r6
 8008e2e:	b90a      	cbnz	r2, 8008e34 <RADIO_CreateUser+0x34>
 8008e30:	8822      	ldrh	r2, [r4, #0]
 8008e32:	3204      	adds	r2, #4
 8008e34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008e36:	f8cd a000 	str.w	sl, [sp]
 8008e3a:	f044 0601 	orr.w	r6, r4, #1
 8008e3e:	4c28      	ldr	r4, [pc, #160]	; (8008ee0 <RADIO_CreateUser+0xe0>)
 8008e40:	9601      	str	r6, [sp, #4]
 8008e42:	9402      	str	r4, [sp, #8]
 8008e44:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8008e46:	343c      	adds	r4, #60	; 0x3c
 8008e48:	9403      	str	r4, [sp, #12]
 8008e4a:	f003 fb47 	bl	800c4dc <WM_CreateWindowAsChild>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d03f      	beq.n	8008ed4 <RADIO_CreateUser+0xd4>
 8008e54:	f000 fd87 	bl	8009966 <GUI_ARRAY_Create>
 8008e58:	2400      	movs	r4, #0
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	4628      	mov	r0, r5
 8008e60:	460a      	mov	r2, r1
 8008e62:	3401      	adds	r4, #1
 8008e64:	f000 fcaa 	bl	80097bc <GUI_ARRAY_AddItem>
 8008e68:	42bc      	cmp	r4, r7
 8008e6a:	dbf7      	blt.n	8008e5c <RADIO_CreateUser+0x5c>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f008 fd35 	bl	80118dc <GUI_ALLOC_LockH>
 8008e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e74:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8008ee4 <RADIO_CreateUser+0xe4>
 8008e78:	65c5      	str	r5, [r0, #92]	; 0x5c
 8008e7a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008e7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008e80:	9005      	str	r0, [sp, #20]
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	bf14      	ite	ne
 8008e86:	f44f 7288 	movne.w	r2, #272	; 0x110
 8008e8a:	2210      	moveq	r2, #16
 8008e8c:	f009 f95e 	bl	801214c <WIDGET__Init>
 8008e90:	4d12      	ldr	r5, [pc, #72]	; (8008edc <RADIO_CreateUser+0xdc>)
 8008e92:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008e96:	f8db 0000 	ldr.w	r0, [fp]
 8008e9a:	f8c8 0058 	str.w	r0, [r8, #88]	; 0x58
 8008e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ea0:	f108 0434 	add.w	r4, r8, #52	; 0x34
 8008ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008eaa:	6829      	ldr	r1, [r5, #0]
 8008eac:	4650      	mov	r0, sl
 8008eae:	6021      	str	r1, [r4, #0]
 8008eb0:	f002 fd76 	bl	800b9a0 <WM_GetBkColor>
 8008eb4:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 8008eb8:	a806      	add	r0, sp, #24
 8008eba:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008ebe:	f8a3 7064 	strh.w	r7, [r3, #100]	; 0x64
 8008ec2:	f8a3 9062 	strh.w	r9, [r3, #98]	; 0x62
 8008ec6:	f008 fd17 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008eca:	f8db 2000 	ldr.w	r2, [fp]
 8008ece:	4630      	mov	r0, r6
 8008ed0:	6851      	ldr	r1, [r2, #4]
 8008ed2:	4788      	blx	r1
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	b007      	add	sp, #28
 8008ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008edc:	2000004c 	.word	0x2000004c
 8008ee0:	08008f59 	.word	0x08008f59
 8008ee4:	20000070 	.word	0x20000070

08008ee8 <RADIO_SetValue>:
 8008ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	4605      	mov	r5, r0
 8008eee:	b1a8      	cbz	r0, 8008f1c <RADIO_SetValue+0x34>
 8008ef0:	f008 fcf4 	bl	80118dc <GUI_ALLOC_LockH>
 8008ef4:	ab02      	add	r3, sp, #8
 8008ef6:	f890 6066 	ldrb.w	r6, [r0, #102]	; 0x66
 8008efa:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008efe:	4618      	mov	r0, r3
 8008f00:	f008 fcfa 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008f04:	4628      	mov	r0, r5
 8008f06:	b12e      	cbz	r6, 8008f14 <RADIO_SetValue+0x2c>
 8008f08:	4905      	ldr	r1, [pc, #20]	; (8008f20 <RADIO_SetValue+0x38>)
 8008f0a:	680a      	ldr	r2, [r1, #0]
 8008f0c:	b112      	cbz	r2, 8008f14 <RADIO_SetValue+0x2c>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4790      	blx	r2
 8008f12:	e003      	b.n	8008f1c <RADIO_SetValue+0x34>
 8008f14:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 8008f18:	f7ff ff52 	bl	8008dc0 <RADIO__SetValue>
 8008f1c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8008f1e:	bf00      	nop
 8008f20:	20017988 	.word	0x20017988

08008f24 <RADIO_AddValue>:
 8008f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f26:	460c      	mov	r4, r1
 8008f28:	4606      	mov	r6, r0
 8008f2a:	b168      	cbz	r0, 8008f48 <RADIO_AddValue+0x24>
 8008f2c:	f008 fcd6 	bl	80118dc <GUI_ALLOC_LockH>
 8008f30:	4602      	mov	r2, r0
 8008f32:	a802      	add	r0, sp, #8
 8008f34:	f9b2 5060 	ldrsh.w	r5, [r2, #96]	; 0x60
 8008f38:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008f3c:	f008 fcdc 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008f40:	4630      	mov	r0, r6
 8008f42:	1929      	adds	r1, r5, r4
 8008f44:	f7ff ffd0 	bl	8008ee8 <RADIO_SetValue>
 8008f48:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08008f4a <RADIO_Inc>:
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	f7ff bfea 	b.w	8008f24 <RADIO_AddValue>

08008f50 <RADIO_Dec>:
 8008f50:	f04f 31ff 	mov.w	r1, #4294967295
 8008f54:	f7ff bfe6 	b.w	8008f24 <RADIO_AddValue>

08008f58 <RADIO_Callback>:
 8008f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	6844      	ldr	r4, [r0, #4]
 8008f5e:	4605      	mov	r5, r0
 8008f60:	4629      	mov	r1, r5
 8008f62:	4620      	mov	r0, r4
 8008f64:	f009 f8fa 	bl	801215c <WIDGET_HandleActive>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	f000 809c 	beq.w	80090a6 <RADIO_Callback+0x14e>
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	2b0f      	cmp	r3, #15
 8008f72:	d00e      	beq.n	8008f92 <RADIO_Callback+0x3a>
 8008f74:	dc06      	bgt.n	8008f84 <RADIO_Callback+0x2c>
 8008f76:	2b0b      	cmp	r3, #11
 8008f78:	f000 8086 	beq.w	8009088 <RADIO_Callback+0x130>
 8008f7c:	2b0e      	cmp	r3, #14
 8008f7e:	f040 808f 	bne.w	80090a0 <RADIO_Callback+0x148>
 8008f82:	e06d      	b.n	8009060 <RADIO_Callback+0x108>
 8008f84:	2b2b      	cmp	r3, #43	; 0x2b
 8008f86:	d014      	beq.n	8008fb2 <RADIO_Callback+0x5a>
 8008f88:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008f8c:	f040 8088 	bne.w	80090a0 <RADIO_Callback+0x148>
 8008f90:	e01c      	b.n	8008fcc <RADIO_Callback+0x74>
 8008f92:	4620      	mov	r0, r4
 8008f94:	f008 fca2 	bl	80118dc <GUI_ALLOC_LockH>
 8008f98:	ab02      	add	r3, sp, #8
 8008f9a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008f9e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8008fa0:	682d      	ldr	r5, [r5, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f008 fca8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	d07c      	beq.n	80090a6 <RADIO_Callback+0x14e>
 8008fac:	4620      	mov	r0, r4
 8008fae:	47a8      	blx	r5
 8008fb0:	e079      	b.n	80090a6 <RADIO_Callback+0x14e>
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f008 fc92 	bl	80118dc <GUI_ALLOC_LockH>
 8008fb8:	a902      	add	r1, sp, #8
 8008fba:	f841 0d04 	str.w	r0, [r1, #-4]!
 8008fbe:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
 8008fc2:	60e8      	str	r0, [r5, #12]
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	f008 fc97 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8008fca:	e06c      	b.n	80090a6 <RADIO_Callback+0x14e>
 8008fcc:	4620      	mov	r0, r4
 8008fce:	68ee      	ldr	r6, [r5, #12]
 8008fd0:	f008 fc84 	bl	80118dc <GUI_ALLOC_LockH>
 8008fd4:	9001      	str	r0, [sp, #4]
 8008fd6:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8008fda:	f8b0 7062 	ldrh.w	r7, [r0, #98]	; 0x62
 8008fde:	b143      	cbz	r3, 8008ff2 <RADIO_Callback+0x9a>
 8008fe0:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8008fe4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008fe8:	ebc3 0009 	rsb	r0, r3, r9
 8008fec:	f100 0901 	add.w	r9, r0, #1
 8008ff0:	e006      	b.n	8009000 <RADIO_Callback+0xa8>
 8008ff2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8008ff4:	6882      	ldr	r2, [r0, #8]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	6811      	ldr	r1, [r2, #0]
 8008ffa:	4788      	blx	r1
 8008ffc:	f100 0904 	add.w	r9, r0, #4
 8009000:	a802      	add	r0, sp, #8
 8009002:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8009006:	f8b2 8030 	ldrh.w	r8, [r2, #48]	; 0x30
 800900a:	f008 fc75 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800900e:	68e9      	ldr	r1, [r5, #12]
 8009010:	b1a1      	cbz	r1, 800903c <RADIO_Callback+0xe4>
 8009012:	7a33      	ldrb	r3, [r6, #8]
 8009014:	b1ab      	cbz	r3, 8009042 <RADIO_Callback+0xea>
 8009016:	6876      	ldr	r6, [r6, #4]
 8009018:	fb96 f1f7 	sdiv	r1, r6, r7
 800901c:	fb07 6711 	mls	r7, r7, r1, r6
 8009020:	454f      	cmp	r7, r9
 8009022:	dc02      	bgt.n	800902a <RADIO_Callback+0xd2>
 8009024:	4620      	mov	r0, r4
 8009026:	f7ff ff5f 	bl	8008ee8 <RADIO_SetValue>
 800902a:	4620      	mov	r0, r4
 800902c:	f002 fba8 	bl	800b780 <WM_IsFocussable>
 8009030:	b150      	cbz	r0, 8009048 <RADIO_Callback+0xf0>
 8009032:	4620      	mov	r0, r4
 8009034:	f002 f95a 	bl	800b2ec <WM_SetFocus>
 8009038:	2600      	movs	r6, #0
 800903a:	e006      	b.n	800904a <RADIO_Callback+0xf2>
 800903c:	460e      	mov	r6, r1
 800903e:	2103      	movs	r1, #3
 8009040:	e004      	b.n	800904c <RADIO_Callback+0xf4>
 8009042:	2601      	movs	r6, #1
 8009044:	2102      	movs	r1, #2
 8009046:	e001      	b.n	800904c <RADIO_Callback+0xf4>
 8009048:	4606      	mov	r6, r0
 800904a:	2101      	movs	r1, #1
 800904c:	4620      	mov	r0, r4
 800904e:	f002 facc 	bl	800b5ea <WM_NotifyParent>
 8009052:	2e01      	cmp	r6, #1
 8009054:	d124      	bne.n	80090a0 <RADIO_Callback+0x148>
 8009056:	fa0f f088 	sxth.w	r0, r8
 800905a:	f007 f9a9 	bl	80103b0 <GUI_StoreKey>
 800905e:	e01f      	b.n	80090a0 <RADIO_Callback+0x148>
 8009060:	68e8      	ldr	r0, [r5, #12]
 8009062:	6842      	ldr	r2, [r0, #4]
 8009064:	2a00      	cmp	r2, #0
 8009066:	dd1b      	ble.n	80090a0 <RADIO_Callback+0x148>
 8009068:	6801      	ldr	r1, [r0, #0]
 800906a:	3910      	subs	r1, #16
 800906c:	2903      	cmp	r1, #3
 800906e:	d817      	bhi.n	80090a0 <RADIO_Callback+0x148>
 8009070:	e8df f001 	tbb	[pc, r1]
 8009074:	02020606 	.word	0x02020606
 8009078:	4620      	mov	r0, r4
 800907a:	f7ff ff66 	bl	8008f4a <RADIO_Inc>
 800907e:	e00f      	b.n	80090a0 <RADIO_Callback+0x148>
 8009080:	4620      	mov	r0, r4
 8009082:	f7ff ff65 	bl	8008f50 <RADIO_Dec>
 8009086:	e00b      	b.n	80090a0 <RADIO_Callback+0x148>
 8009088:	4620      	mov	r0, r4
 800908a:	f008 fc27 	bl	80118dc <GUI_ALLOC_LockH>
 800908e:	ac02      	add	r4, sp, #8
 8009090:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009094:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8009096:	f000 fbda 	bl	800984e <GUI_ARRAY_Delete>
 800909a:	4620      	mov	r0, r4
 800909c:	f008 fc2c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80090a0:	4628      	mov	r0, r5
 80090a2:	f003 fd89 	bl	800cbb8 <WM_DefaultProc>
 80090a6:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

080090aa <RADIO_GetValue>:
 80090aa:	b513      	push	{r0, r1, r4, lr}
 80090ac:	4604      	mov	r4, r0
 80090ae:	b148      	cbz	r0, 80090c4 <RADIO_GetValue+0x1a>
 80090b0:	f008 fc14 	bl	80118dc <GUI_ALLOC_LockH>
 80090b4:	ab02      	add	r3, sp, #8
 80090b6:	f9b0 4060 	ldrsh.w	r4, [r0, #96]	; 0x60
 80090ba:	f843 0d04 	str.w	r0, [r3, #-4]!
 80090be:	4618      	mov	r0, r3
 80090c0:	f008 fc1a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80090c4:	4620      	mov	r0, r4
 80090c6:	bd1c      	pop	{r2, r3, r4, pc}

080090c8 <PROGBAR_DrawSkinFlex>:
 80090c8:	6843      	ldr	r3, [r0, #4]
 80090ca:	2b0b      	cmp	r3, #11
 80090cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ce:	4604      	mov	r4, r0
 80090d0:	6a05      	ldr	r5, [r0, #32]
 80090d2:	d006      	beq.n	80090e2 <PROGBAR_DrawSkinFlex+0x1a>
 80090d4:	2b12      	cmp	r3, #18
 80090d6:	f000 808f 	beq.w	80091f8 <PROGBAR_DrawSkinFlex+0x130>
 80090da:	2b05      	cmp	r3, #5
 80090dc:	f040 809b 	bne.w	8009216 <PROGBAR_DrawSkinFlex+0x14e>
 80090e0:	e01c      	b.n	800911c <PROGBAR_DrawSkinFlex+0x54>
 80090e2:	484e      	ldr	r0, [pc, #312]	; (800921c <PROGBAR_DrawSkinFlex+0x154>)
 80090e4:	6a00      	ldr	r0, [r0, #32]
 80090e6:	f007 f8cf 	bl	8010288 <GUI_SetColor>
 80090ea:	6960      	ldr	r0, [r4, #20]
 80090ec:	6921      	ldr	r1, [r4, #16]
 80090ee:	69a2      	ldr	r2, [r4, #24]
 80090f0:	f007 fa78 	bl	80105e4 <GUI_DrawHLine>
 80090f4:	69e0      	ldr	r0, [r4, #28]
 80090f6:	6921      	ldr	r1, [r4, #16]
 80090f8:	69a2      	ldr	r2, [r4, #24]
 80090fa:	f007 fa73 	bl	80105e4 <GUI_DrawHLine>
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	69e2      	ldr	r2, [r4, #28]
 8009102:	6920      	ldr	r0, [r4, #16]
 8009104:	1c59      	adds	r1, r3, #1
 8009106:	3a01      	subs	r2, #1
 8009108:	f007 fa2a 	bl	8010560 <GUI_DrawVLine>
 800910c:	6961      	ldr	r1, [r4, #20]
 800910e:	69e3      	ldr	r3, [r4, #28]
 8009110:	69a0      	ldr	r0, [r4, #24]
 8009112:	3101      	adds	r1, #1
 8009114:	1e5a      	subs	r2, r3, #1
 8009116:	f007 fa23 	bl	8010560 <GUI_DrawVLine>
 800911a:	e07c      	b.n	8009216 <PROGBAR_DrawSkinFlex+0x14e>
 800911c:	6828      	ldr	r0, [r5, #0]
 800911e:	2800      	cmp	r0, #0
 8009120:	d034      	beq.n	800918c <PROGBAR_DrawSkinFlex+0xc4>
 8009122:	6922      	ldr	r2, [r4, #16]
 8009124:	69a7      	ldr	r7, [r4, #24]
 8009126:	686b      	ldr	r3, [r5, #4]
 8009128:	493c      	ldr	r1, [pc, #240]	; (800921c <PROGBAR_DrawSkinFlex+0x154>)
 800912a:	1abe      	subs	r6, r7, r2
 800912c:	1c70      	adds	r0, r6, #1
 800912e:	1046      	asrs	r6, r0, #1
 8009130:	b923      	cbnz	r3, 800913c <PROGBAR_DrawSkinFlex+0x74>
 8009132:	690f      	ldr	r7, [r1, #16]
 8009134:	6948      	ldr	r0, [r1, #20]
 8009136:	f04f 0c01 	mov.w	ip, #1
 800913a:	e004      	b.n	8009146 <PROGBAR_DrawSkinFlex+0x7e>
 800913c:	680f      	ldr	r7, [r1, #0]
 800913e:	6848      	ldr	r0, [r1, #4]
 8009140:	2301      	movs	r3, #1
 8009142:	f04f 0c00 	mov.w	ip, #0
 8009146:	9001      	str	r0, [sp, #4]
 8009148:	9700      	str	r7, [sp, #0]
 800914a:	6961      	ldr	r1, [r4, #20]
 800914c:	69e7      	ldr	r7, [r4, #28]
 800914e:	1c50      	adds	r0, r2, #1
 8009150:	1afb      	subs	r3, r7, r3
 8009152:	4461      	add	r1, ip
 8009154:	1992      	adds	r2, r2, r6
 8009156:	f007 fb87 	bl	8010868 <GUI_DrawGradientH>
 800915a:	686b      	ldr	r3, [r5, #4]
 800915c:	4d2f      	ldr	r5, [pc, #188]	; (800921c <PROGBAR_DrawSkinFlex+0x154>)
 800915e:	b91b      	cbnz	r3, 8009168 <PROGBAR_DrawSkinFlex+0xa0>
 8009160:	69af      	ldr	r7, [r5, #24]
 8009162:	69ed      	ldr	r5, [r5, #28]
 8009164:	2101      	movs	r1, #1
 8009166:	e003      	b.n	8009170 <PROGBAR_DrawSkinFlex+0xa8>
 8009168:	68af      	ldr	r7, [r5, #8]
 800916a:	68ed      	ldr	r5, [r5, #12]
 800916c:	2301      	movs	r3, #1
 800916e:	2100      	movs	r1, #0
 8009170:	6922      	ldr	r2, [r4, #16]
 8009172:	18b0      	adds	r0, r6, r2
 8009174:	6966      	ldr	r6, [r4, #20]
 8009176:	69a2      	ldr	r2, [r4, #24]
 8009178:	69e4      	ldr	r4, [r4, #28]
 800917a:	9700      	str	r7, [sp, #0]
 800917c:	9501      	str	r5, [sp, #4]
 800917e:	3001      	adds	r0, #1
 8009180:	1989      	adds	r1, r1, r6
 8009182:	3a01      	subs	r2, #1
 8009184:	1ae3      	subs	r3, r4, r3
 8009186:	f007 fb6f 	bl	8010868 <GUI_DrawGradientH>
 800918a:	e044      	b.n	8009216 <PROGBAR_DrawSkinFlex+0x14e>
 800918c:	69e7      	ldr	r7, [r4, #28]
 800918e:	6963      	ldr	r3, [r4, #20]
 8009190:	4e22      	ldr	r6, [pc, #136]	; (800921c <PROGBAR_DrawSkinFlex+0x154>)
 8009192:	1af9      	subs	r1, r7, r3
 8009194:	1c4a      	adds	r2, r1, #1
 8009196:	1057      	asrs	r7, r2, #1
 8009198:	686a      	ldr	r2, [r5, #4]
 800919a:	b922      	cbnz	r2, 80091a6 <PROGBAR_DrawSkinFlex+0xde>
 800919c:	f8d6 c000 	ldr.w	ip, [r6]
 80091a0:	6871      	ldr	r1, [r6, #4]
 80091a2:	2001      	movs	r0, #1
 80091a4:	e003      	b.n	80091ae <PROGBAR_DrawSkinFlex+0xe6>
 80091a6:	f8d6 c010 	ldr.w	ip, [r6, #16]
 80091aa:	6971      	ldr	r1, [r6, #20]
 80091ac:	2201      	movs	r2, #1
 80091ae:	69a6      	ldr	r6, [r4, #24]
 80091b0:	f8cd c000 	str.w	ip, [sp]
 80091b4:	9101      	str	r1, [sp, #4]
 80091b6:	6921      	ldr	r1, [r4, #16]
 80091b8:	1ab2      	subs	r2, r6, r2
 80091ba:	1840      	adds	r0, r0, r1
 80091bc:	1c59      	adds	r1, r3, #1
 80091be:	19db      	adds	r3, r3, r7
 80091c0:	f007 fb20 	bl	8010804 <GUI_DrawGradientV>
 80091c4:	686a      	ldr	r2, [r5, #4]
 80091c6:	4d15      	ldr	r5, [pc, #84]	; (800921c <PROGBAR_DrawSkinFlex+0x154>)
 80091c8:	b91a      	cbnz	r2, 80091d2 <PROGBAR_DrawSkinFlex+0x10a>
 80091ca:	68ae      	ldr	r6, [r5, #8]
 80091cc:	68ed      	ldr	r5, [r5, #12]
 80091ce:	2001      	movs	r0, #1
 80091d0:	e003      	b.n	80091da <PROGBAR_DrawSkinFlex+0x112>
 80091d2:	69ae      	ldr	r6, [r5, #24]
 80091d4:	69ed      	ldr	r5, [r5, #28]
 80091d6:	2201      	movs	r2, #1
 80091d8:	2000      	movs	r0, #0
 80091da:	6963      	ldr	r3, [r4, #20]
 80091dc:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80091e0:	18f9      	adds	r1, r7, r3
 80091e2:	69a7      	ldr	r7, [r4, #24]
 80091e4:	69e3      	ldr	r3, [r4, #28]
 80091e6:	9600      	str	r6, [sp, #0]
 80091e8:	9501      	str	r5, [sp, #4]
 80091ea:	4470      	add	r0, lr
 80091ec:	3101      	adds	r1, #1
 80091ee:	1aba      	subs	r2, r7, r2
 80091f0:	3b01      	subs	r3, #1
 80091f2:	f007 fb07 	bl	8010804 <GUI_DrawGradientV>
 80091f6:	e00e      	b.n	8009216 <PROGBAR_DrawSkinFlex+0x14e>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	b963      	cbnz	r3, 8009216 <PROGBAR_DrawSkinFlex+0x14e>
 80091fc:	4907      	ldr	r1, [pc, #28]	; (800921c <PROGBAR_DrawSkinFlex+0x154>)
 80091fe:	68ad      	ldr	r5, [r5, #8]
 8009200:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8009202:	f007 f841 	bl	8010288 <GUI_SetColor>
 8009206:	2002      	movs	r0, #2
 8009208:	f007 f806 	bl	8010218 <GUI_SetTextMode>
 800920c:	4628      	mov	r0, r5
 800920e:	6921      	ldr	r1, [r4, #16]
 8009210:	6962      	ldr	r2, [r4, #20]
 8009212:	f007 fd81 	bl	8010d18 <GUI_DispStringAt>
 8009216:	2000      	movs	r0, #0
 8009218:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800921a:	bf00      	nop
 800921c:	20000074 	.word	0x20000074

08009220 <_Create>:
 8009220:	b530      	push	{r4, r5, lr}
 8009222:	b08b      	sub	sp, #44	; 0x2c
 8009224:	4605      	mov	r5, r0
 8009226:	f008 fb59 	bl	80118dc <GUI_ALLOC_LockH>
 800922a:	ab0a      	add	r3, sp, #40	; 0x28
 800922c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800922e:	f843 0d28 	str.w	r0, [r3, #-40]!
 8009232:	4668      	mov	r0, sp
 8009234:	6894      	ldr	r4, [r2, #8]
 8009236:	f008 fb5f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800923a:	2000      	movs	r0, #0
 800923c:	9002      	str	r0, [sp, #8]
 800923e:	a80a      	add	r0, sp, #40	; 0x28
 8009240:	6821      	ldr	r1, [r4, #0]
 8009242:	f840 5d24 	str.w	r5, [r0, #-36]!
 8009246:	4788      	blx	r1
 8009248:	b00b      	add	sp, #44	; 0x2c
 800924a:	bd30      	pop	{r4, r5, pc}

0800924c <_Paint>:
 800924c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009250:	b093      	sub	sp, #76	; 0x4c
 8009252:	4604      	mov	r4, r0
 8009254:	f008 fb42 	bl	80118dc <GUI_ALLOC_LockH>
 8009258:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 800925c:	6e06      	ldr	r6, [r0, #96]	; 0x60
 800925e:	9000      	str	r0, [sp, #0]
 8009260:	f002 0101 	and.w	r1, r2, #1
 8009264:	9106      	str	r1, [sp, #24]
 8009266:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009268:	f8d0 904c 	ldr.w	r9, [r0, #76]	; 0x4c
 800926c:	f000 f939 	bl	80094e2 <PROGBAR__Value2Pos>
 8009270:	4607      	mov	r7, r0
 8009272:	4668      	mov	r0, sp
 8009274:	f008 fb40 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009278:	f10d 0808 	add.w	r8, sp, #8
 800927c:	a806      	add	r0, sp, #24
 800927e:	9011      	str	r0, [sp, #68]	; 0x44
 8009280:	4641      	mov	r1, r8
 8009282:	4620      	mov	r0, r4
 8009284:	f002 fb7b 	bl	800b97e <WM_GetClientRectEx>
 8009288:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800928c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8009290:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8009294:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8009298:	930d      	str	r3, [sp, #52]	; 0x34
 800929a:	250b      	movs	r5, #11
 800929c:	950a      	str	r5, [sp, #40]	; 0x28
 800929e:	920e      	str	r2, [sp, #56]	; 0x38
 80092a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80092a2:	9010      	str	r0, [sp, #64]	; 0x40
 80092a4:	9409      	str	r4, [sp, #36]	; 0x24
 80092a6:	a809      	add	r0, sp, #36	; 0x24
 80092a8:	47b0      	blx	r6
 80092aa:	e898 0003 	ldmia.w	r8, {r0, r1}
 80092ae:	ad04      	add	r5, sp, #16
 80092b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80092b4:	2201      	movs	r2, #1
 80092b6:	4629      	mov	r1, r5
 80092b8:	4628      	mov	r0, r5
 80092ba:	f006 fad1 	bl	800f860 <GUI__ReduceRect>
 80092be:	4628      	mov	r0, r5
 80092c0:	f001 ff4c 	bl	800b15c <WM_SetUserClipRect>
 80092c4:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80092c8:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80092cc:	9906      	ldr	r1, [sp, #24]
 80092ce:	9409      	str	r4, [sp, #36]	; 0x24
 80092d0:	2305      	movs	r3, #5
 80092d2:	930a      	str	r3, [sp, #40]	; 0x28
 80092d4:	900d      	str	r0, [sp, #52]	; 0x34
 80092d6:	920e      	str	r2, [sp, #56]	; 0x38
 80092d8:	b129      	cbz	r1, 80092e6 <_Paint+0x9a>
 80092da:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80092de:	19d2      	adds	r2, r2, r7
 80092e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80092e2:	9210      	str	r2, [sp, #64]	; 0x40
 80092e4:	e004      	b.n	80092f0 <_Paint+0xa4>
 80092e6:	19c3      	adds	r3, r0, r7
 80092e8:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 80092ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80092ee:	9010      	str	r0, [sp, #64]	; 0x40
 80092f0:	2300      	movs	r3, #0
 80092f2:	9307      	str	r3, [sp, #28]
 80092f4:	a809      	add	r0, sp, #36	; 0x24
 80092f6:	47b0      	blx	r6
 80092f8:	9906      	ldr	r1, [sp, #24]
 80092fa:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80092fe:	b131      	cbz	r1, 800930e <_Paint+0xc2>
 8009300:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8009304:	900d      	str	r0, [sp, #52]	; 0x34
 8009306:	19cf      	adds	r7, r1, r7
 8009308:	3701      	adds	r7, #1
 800930a:	970e      	str	r7, [sp, #56]	; 0x38
 800930c:	e005      	b.n	800931a <_Paint+0xce>
 800930e:	19c2      	adds	r2, r0, r7
 8009310:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8009314:	1c53      	adds	r3, r2, #1
 8009316:	930d      	str	r3, [sp, #52]	; 0x34
 8009318:	900e      	str	r0, [sp, #56]	; 0x38
 800931a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800931e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8009322:	920f      	str	r2, [sp, #60]	; 0x3c
 8009324:	2001      	movs	r0, #1
 8009326:	9310      	str	r3, [sp, #64]	; 0x40
 8009328:	9007      	str	r0, [sp, #28]
 800932a:	a809      	add	r0, sp, #36	; 0x24
 800932c:	47b0      	blx	r6
 800932e:	4620      	mov	r0, r4
 8009330:	f008 fad4 	bl	80118dc <GUI_ALLOC_LockH>
 8009334:	9000      	str	r0, [sp, #0]
 8009336:	f000 f88e 	bl	8009456 <PROGBAR__GetTextLocked>
 800933a:	9001      	str	r0, [sp, #4]
 800933c:	b1f8      	cbz	r0, 800937e <_Paint+0x132>
 800933e:	4648      	mov	r0, r9
 8009340:	f006 ff74 	bl	801022c <GUI_SetFont>
 8009344:	a902      	add	r1, sp, #8
 8009346:	9a01      	ldr	r2, [sp, #4]
 8009348:	9800      	ldr	r0, [sp, #0]
 800934a:	f000 f887 	bl	800945c <PROGBAR__GetTextRect>
 800934e:	4668      	mov	r0, sp
 8009350:	f008 fad2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009354:	9901      	ldr	r1, [sp, #4]
 8009356:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 800935a:	9108      	str	r1, [sp, #32]
 800935c:	2212      	movs	r2, #18
 800935e:	920a      	str	r2, [sp, #40]	; 0x28
 8009360:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8009364:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8009368:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800936c:	900e      	str	r0, [sp, #56]	; 0x38
 800936e:	9409      	str	r4, [sp, #36]	; 0x24
 8009370:	930d      	str	r3, [sp, #52]	; 0x34
 8009372:	910f      	str	r1, [sp, #60]	; 0x3c
 8009374:	9210      	str	r2, [sp, #64]	; 0x40
 8009376:	a809      	add	r0, sp, #36	; 0x24
 8009378:	47b0      	blx	r6
 800937a:	a801      	add	r0, sp, #4
 800937c:	e000      	b.n	8009380 <_Paint+0x134>
 800937e:	4668      	mov	r0, sp
 8009380:	f008 faba 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009384:	2000      	movs	r0, #0
 8009386:	f001 fee9 	bl	800b15c <WM_SetUserClipRect>
 800938a:	b013      	add	sp, #76	; 0x4c
 800938c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009390 <PROGBAR_SetSkin>:
 8009390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009392:	460d      	mov	r5, r1
 8009394:	4604      	mov	r4, r0
 8009396:	f008 faa1 	bl	80118dc <GUI_ALLOC_LockH>
 800939a:	4906      	ldr	r1, [pc, #24]	; (80093b4 <PROGBAR_SetSkin+0x24>)
 800939c:	4602      	mov	r2, r0
 800939e:	a802      	add	r0, sp, #8
 80093a0:	6651      	str	r1, [r2, #100]	; 0x64
 80093a2:	f840 2d04 	str.w	r2, [r0, #-4]!
 80093a6:	6615      	str	r5, [r2, #96]	; 0x60
 80093a8:	f008 faa6 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80093ac:	4620      	mov	r0, r4
 80093ae:	f002 ffd9 	bl	800c364 <WM_InvalidateWindow>
 80093b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80093b4:	2000009c 	.word	0x2000009c

080093b8 <PROGBAR_CreateAsChild>:
 80093b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ba:	9c06      	ldr	r4, [sp, #24]
 80093bc:	9400      	str	r4, [sp, #0]
 80093be:	9c08      	ldr	r4, [sp, #32]
 80093c0:	9401      	str	r4, [sp, #4]
 80093c2:	2400      	movs	r4, #0
 80093c4:	9402      	str	r4, [sp, #8]
 80093c6:	9c07      	ldr	r4, [sp, #28]
 80093c8:	9403      	str	r4, [sp, #12]
 80093ca:	f000 f90f 	bl	80095ec <PROGBAR_CreateEx>
 80093ce:	b004      	add	sp, #16
 80093d0:	bd10      	pop	{r4, pc}

080093d2 <_SetValue>:
 80093d2:	b513      	push	{r0, r1, r4, lr}
 80093d4:	ab02      	add	r3, sp, #8
 80093d6:	6342      	str	r2, [r0, #52]	; 0x34
 80093d8:	f843 1d04 	str.w	r1, [r3, #-4]!
 80093dc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80093de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80093e0:	1a52      	subs	r2, r2, r1
 80093e2:	2464      	movs	r4, #100	; 0x64
 80093e4:	4362      	muls	r2, r4
 80093e6:	1a41      	subs	r1, r0, r1
 80093e8:	fb92 f0f1 	sdiv	r0, r2, r1
 80093ec:	4619      	mov	r1, r3
 80093ee:	f008 fcdc 	bl	8011daa <GUI_AddDecMin>
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	2225      	movs	r2, #37	; 0x25
 80093f6:	2000      	movs	r0, #0
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	7058      	strb	r0, [r3, #1]
 80093fc:	bd1c      	pop	{r2, r3, r4, pc}

080093fe <PROGBAR_Callback>:
 80093fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009400:	6845      	ldr	r5, [r0, #4]
 8009402:	4604      	mov	r4, r0
 8009404:	4621      	mov	r1, r4
 8009406:	4628      	mov	r0, r5
 8009408:	f008 fea8 	bl	801215c <WIDGET_HandleActive>
 800940c:	b310      	cbz	r0, 8009454 <PROGBAR_Callback+0x56>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	2b0b      	cmp	r3, #11
 8009412:	d010      	beq.n	8009436 <PROGBAR_Callback+0x38>
 8009414:	2b0f      	cmp	r3, #15
 8009416:	d11a      	bne.n	800944e <PROGBAR_Callback+0x50>
 8009418:	4628      	mov	r0, r5
 800941a:	f008 fa5f 	bl	80118dc <GUI_ALLOC_LockH>
 800941e:	a902      	add	r1, sp, #8
 8009420:	f841 0d04 	str.w	r0, [r1, #-4]!
 8009424:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8009426:	6814      	ldr	r4, [r2, #0]
 8009428:	4608      	mov	r0, r1
 800942a:	f008 fa65 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800942e:	b18c      	cbz	r4, 8009454 <PROGBAR_Callback+0x56>
 8009430:	4628      	mov	r0, r5
 8009432:	47a0      	blx	r4
 8009434:	e00e      	b.n	8009454 <PROGBAR_Callback+0x56>
 8009436:	4628      	mov	r0, r5
 8009438:	f008 fa50 	bl	80118dc <GUI_ALLOC_LockH>
 800943c:	ad02      	add	r5, sp, #8
 800943e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009442:	3038      	adds	r0, #56	; 0x38
 8009444:	f008 fc9c 	bl	8011d80 <GUI_ALLOC_FreePtr>
 8009448:	4628      	mov	r0, r5
 800944a:	f008 fa55 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800944e:	4620      	mov	r0, r4
 8009450:	f003 fbb2 	bl	800cbb8 <WM_DefaultProc>
 8009454:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08009456 <PROGBAR__GetTextLocked>:
 8009456:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009458:	f008 ba40 	b.w	80118dc <GUI_ALLOC_LockH>

0800945c <PROGBAR__GetTextRect>:
 800945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009460:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009464:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8009468:	4604      	mov	r4, r0
 800946a:	460d      	mov	r5, r1
 800946c:	1af8      	subs	r0, r7, r3
 800946e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009472:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
 8009476:	1c47      	adds	r7, r0, #1
 8009478:	4610      	mov	r0, r2
 800947a:	ebc1 0608 	rsb	r6, r1, r8
 800947e:	f007 f805 	bl	801048c <GUI_GetStringDistX>
 8009482:	f106 0801 	add.w	r8, r6, #1
 8009486:	4606      	mov	r6, r0
 8009488:	f007 f818 	bl	80104bc <GUI_GetFontSizeY>
 800948c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800948e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8009492:	6811      	ldr	r1, [r2, #0]
 8009494:	f003 0203 	and.w	r2, r3, #3
 8009498:	2a01      	cmp	r2, #1
 800949a:	d006      	beq.n	80094aa <PROGBAR__GetTextRect+0x4e>
 800949c:	2a02      	cmp	r2, #2
 800949e:	d109      	bne.n	80094b4 <PROGBAR__GetTextRect+0x58>
 80094a0:	1bbf      	subs	r7, r7, r6
 80094a2:	fb97 f1f2 	sdiv	r1, r7, r2
 80094a6:	8029      	strh	r1, [r5, #0]
 80094a8:	e005      	b.n	80094b6 <PROGBAR__GetTextRect+0x5a>
 80094aa:	43cb      	mvns	r3, r1
 80094ac:	19df      	adds	r7, r3, r7
 80094ae:	1bbf      	subs	r7, r7, r6
 80094b0:	802f      	strh	r7, [r5, #0]
 80094b2:	e000      	b.n	80094b6 <PROGBAR__GetTextRect+0x5a>
 80094b4:	8029      	strh	r1, [r5, #0]
 80094b6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80094b8:	8829      	ldrh	r1, [r5, #0]
 80094ba:	ebc0 0808 	rsb	r8, r0, r8
 80094be:	1853      	adds	r3, r2, r1
 80094c0:	2102      	movs	r1, #2
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	fb98 f3f1 	sdiv	r3, r8, r1
 80094c8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80094ca:	802a      	strh	r2, [r5, #0]
 80094cc:	185b      	adds	r3, r3, r1
 80094ce:	b299      	uxth	r1, r3
 80094d0:	3a01      	subs	r2, #1
 80094d2:	3801      	subs	r0, #1
 80094d4:	1996      	adds	r6, r2, r6
 80094d6:	180b      	adds	r3, r1, r0
 80094d8:	8069      	strh	r1, [r5, #2]
 80094da:	80ae      	strh	r6, [r5, #4]
 80094dc:	80eb      	strh	r3, [r5, #6]
 80094de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080094e2 <PROGBAR__Value2Pos>:
 80094e2:	b570      	push	{r4, r5, r6, lr}
 80094e4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80094e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80094ea:	f013 0601 	ands.w	r6, r3, #1
 80094ee:	bf15      	itete	ne
 80094f0:	f9b0 3002 	ldrshne.w	r3, [r0, #2]
 80094f4:	f9b0 3000 	ldrsheq.w	r3, [r0]
 80094f8:	f9b0 5006 	ldrshne.w	r5, [r0, #6]
 80094fc:	f9b0 5004 	ldrsheq.w	r5, [r0, #4]
 8009500:	6814      	ldr	r4, [r2, #0]
 8009502:	1aed      	subs	r5, r5, r3
 8009504:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009506:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8009508:	3501      	adds	r5, #1
 800950a:	4299      	cmp	r1, r3
 800950c:	bfb8      	it	lt
 800950e:	4619      	movlt	r1, r3
 8009510:	4281      	cmp	r1, r0
 8009512:	bfa8      	it	ge
 8009514:	4601      	movge	r1, r0
 8009516:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800951a:	b10e      	cbz	r6, 8009520 <PROGBAR__Value2Pos+0x3e>
 800951c:	1a41      	subs	r1, r0, r1
 800951e:	e000      	b.n	8009522 <PROGBAR__Value2Pos+0x40>
 8009520:	1ac9      	subs	r1, r1, r3
 8009522:	1ac2      	subs	r2, r0, r3
 8009524:	4369      	muls	r1, r5
 8009526:	fb91 f3f2 	sdiv	r3, r1, r2
 800952a:	18e0      	adds	r0, r4, r3
 800952c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009530 <PROGBAR_CreateUser>:
 8009530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009534:	b087      	sub	sp, #28
 8009536:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009538:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800953a:	9400      	str	r4, [sp, #0]
 800953c:	4c27      	ldr	r4, [pc, #156]	; (80095dc <PROGBAR_CreateUser+0xac>)
 800953e:	9701      	str	r7, [sp, #4]
 8009540:	9402      	str	r4, [sp, #8]
 8009542:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009544:	3440      	adds	r4, #64	; 0x40
 8009546:	9403      	str	r4, [sp, #12]
 8009548:	f002 ffc8 	bl	800c4dc <WM_CreateWindowAsChild>
 800954c:	4607      	mov	r7, r0
 800954e:	2800      	cmp	r0, #0
 8009550:	d040      	beq.n	80095d4 <PROGBAR_CreateUser+0xa4>
 8009552:	2005      	movs	r0, #5
 8009554:	f008 fc36 	bl	8011dc4 <GUI_ALLOC_AllocZero>
 8009558:	4680      	mov	r8, r0
 800955a:	2800      	cmp	r0, #0
 800955c:	d03a      	beq.n	80095d4 <PROGBAR_CreateUser+0xa4>
 800955e:	4638      	mov	r0, r7
 8009560:	f008 f9bc 	bl	80118dc <GUI_ALLOC_LockH>
 8009564:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80095e8 <PROGBAR_CreateUser+0xb8>
 8009568:	9911      	ldr	r1, [sp, #68]	; 0x44
 800956a:	9004      	str	r0, [sp, #16]
 800956c:	2200      	movs	r2, #0
 800956e:	f008 fded 	bl	801214c <WIDGET__Init>
 8009572:	4638      	mov	r0, r7
 8009574:	491a      	ldr	r1, [pc, #104]	; (80095e0 <PROGBAR_CreateUser+0xb0>)
 8009576:	4d1b      	ldr	r5, [pc, #108]	; (80095e4 <PROGBAR_CreateUser+0xb4>)
 8009578:	f008 fd10 	bl	8011f9c <WIDGET_SetEffect>
 800957c:	9e04      	ldr	r6, [sp, #16]
 800957e:	f8d9 3000 	ldr.w	r3, [r9]
 8009582:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
 8009586:	6673      	str	r3, [r6, #100]	; 0x64
 8009588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800958a:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 800958e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009590:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009596:	e884 0003 	stmia.w	r4, {r0, r1}
 800959a:	2164      	movs	r1, #100	; 0x64
 800959c:	2002      	movs	r0, #2
 800959e:	2400      	movs	r4, #0
 80095a0:	f8a6 0040 	strh.w	r0, [r6, #64]	; 0x40
 80095a4:	64b1      	str	r1, [r6, #72]	; 0x48
 80095a6:	f886 2068 	strb.w	r2, [r6, #104]	; 0x68
 80095aa:	6474      	str	r4, [r6, #68]	; 0x44
 80095ac:	4640      	mov	r0, r8
 80095ae:	f008 f995 	bl	80118dc <GUI_ALLOC_LockH>
 80095b2:	4622      	mov	r2, r4
 80095b4:	4601      	mov	r1, r0
 80095b6:	9005      	str	r0, [sp, #20]
 80095b8:	9804      	ldr	r0, [sp, #16]
 80095ba:	f7ff ff0a 	bl	80093d2 <_SetValue>
 80095be:	a805      	add	r0, sp, #20
 80095c0:	f008 f99a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80095c4:	a804      	add	r0, sp, #16
 80095c6:	f008 f997 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80095ca:	f8d9 3000 	ldr.w	r3, [r9]
 80095ce:	4638      	mov	r0, r7
 80095d0:	6859      	ldr	r1, [r3, #4]
 80095d2:	4788      	blx	r1
 80095d4:	4638      	mov	r0, r7
 80095d6:	b007      	add	sp, #28
 80095d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095dc:	080093ff 	.word	0x080093ff
 80095e0:	0802f77c 	.word	0x0802f77c
 80095e4:	200000ac 	.word	0x200000ac
 80095e8:	200000a8 	.word	0x200000a8

080095ec <PROGBAR_CreateEx>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	9c08      	ldr	r4, [sp, #32]
 80095f2:	9400      	str	r4, [sp, #0]
 80095f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80095f6:	9401      	str	r4, [sp, #4]
 80095f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095fa:	9402      	str	r4, [sp, #8]
 80095fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80095fe:	9403      	str	r4, [sp, #12]
 8009600:	2400      	movs	r4, #0
 8009602:	9404      	str	r4, [sp, #16]
 8009604:	f7ff ff94 	bl	8009530 <PROGBAR_CreateUser>
 8009608:	b006      	add	sp, #24
 800960a:	bd10      	pop	{r4, pc}

0800960c <PROGBAR_SetValue>:
 800960c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009610:	460d      	mov	r5, r1
 8009612:	b086      	sub	sp, #24
 8009614:	4607      	mov	r7, r0
 8009616:	2800      	cmp	r0, #0
 8009618:	f000 809f 	beq.w	800975a <PROGBAR_SetValue+0x14e>
 800961c:	f008 f95e 	bl	80118dc <GUI_ALLOC_LockH>
 8009620:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009622:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8009624:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8009626:	9000      	str	r0, [sp, #0]
 8009628:	429d      	cmp	r5, r3
 800962a:	bfb8      	it	lt
 800962c:	461d      	movlt	r5, r3
 800962e:	428d      	cmp	r5, r1
 8009630:	bfa8      	it	ge
 8009632:	460d      	movge	r5, r1
 8009634:	42ae      	cmp	r6, r5
 8009636:	4604      	mov	r4, r0
 8009638:	f000 808c 	beq.w	8009754 <PROGBAR_SetValue+0x148>
 800963c:	f890 8068 	ldrb.w	r8, [r0, #104]	; 0x68
 8009640:	f018 0f01 	tst.w	r8, #1
 8009644:	d01c      	beq.n	8009680 <PROGBAR_SetValue+0x74>
 8009646:	42b5      	cmp	r5, r6
 8009648:	da07      	bge.n	800965a <PROGBAR_SetValue+0x4e>
 800964a:	4629      	mov	r1, r5
 800964c:	f7ff ff49 	bl	80094e2 <PROGBAR__Value2Pos>
 8009650:	4631      	mov	r1, r6
 8009652:	f8ad 000e 	strh.w	r0, [sp, #14]
 8009656:	4620      	mov	r0, r4
 8009658:	e006      	b.n	8009668 <PROGBAR_SetValue+0x5c>
 800965a:	4631      	mov	r1, r6
 800965c:	f7ff ff41 	bl	80094e2 <PROGBAR__Value2Pos>
 8009660:	4629      	mov	r1, r5
 8009662:	f8ad 000e 	strh.w	r0, [sp, #14]
 8009666:	4620      	mov	r0, r4
 8009668:	f7ff ff3b 	bl	80094e2 <PROGBAR__Value2Pos>
 800966c:	2200      	movs	r2, #0
 800966e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009672:	f8ad 000a 	strh.w	r0, [sp, #10]
 8009676:	f8ad 2008 	strh.w	r2, [sp, #8]
 800967a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800967e:	e064      	b.n	800974a <PROGBAR_SetValue+0x13e>
 8009680:	42b5      	cmp	r5, r6
 8009682:	da07      	bge.n	8009694 <PROGBAR_SetValue+0x88>
 8009684:	4629      	mov	r1, r5
 8009686:	f7ff ff2c 	bl	80094e2 <PROGBAR__Value2Pos>
 800968a:	4631      	mov	r1, r6
 800968c:	f8ad 0008 	strh.w	r0, [sp, #8]
 8009690:	4620      	mov	r0, r4
 8009692:	e006      	b.n	80096a2 <PROGBAR_SetValue+0x96>
 8009694:	4631      	mov	r1, r6
 8009696:	f7ff ff24 	bl	80094e2 <PROGBAR__Value2Pos>
 800969a:	4629      	mov	r1, r5
 800969c:	f8ad 0008 	strh.w	r0, [sp, #8]
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7ff ff1e 	bl	80094e2 <PROGBAR__Value2Pos>
 80096a6:	f008 0302 	and.w	r3, r8, #2
 80096aa:	f8ad 000c 	strh.w	r0, [sp, #12]
 80096ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 80096b2:	2000      	movs	r0, #0
 80096b4:	b2d9      	uxtb	r1, r3
 80096b6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80096ba:	f8ad 200e 	strh.w	r2, [sp, #14]
 80096be:	2900      	cmp	r1, #0
 80096c0:	d143      	bne.n	800974a <PROGBAR_SetValue+0x13e>
 80096c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80096c4:	9104      	str	r1, [sp, #16]
 80096c6:	9105      	str	r1, [sp, #20]
 80096c8:	f008 f936 	bl	8011938 <GUI_ALLOC_GetSize>
 80096cc:	2804      	cmp	r0, #4
 80096ce:	dc10      	bgt.n	80096f2 <PROGBAR_SetValue+0xe6>
 80096d0:	ac06      	add	r4, sp, #24
 80096d2:	f854 0d18 	ldr.w	r0, [r4, #-24]!
 80096d6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80096d8:	4668      	mov	r0, sp
 80096da:	f008 f90d 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80096de:	4620      	mov	r0, r4
 80096e0:	2105      	movs	r1, #5
 80096e2:	f006 fe32 	bl	801034a <GUI_ALLOC_Realloc>
 80096e6:	4604      	mov	r4, r0
 80096e8:	4638      	mov	r0, r7
 80096ea:	f008 f8f7 	bl	80118dc <GUI_ALLOC_LockH>
 80096ee:	9000      	str	r0, [sp, #0]
 80096f0:	6384      	str	r4, [r0, #56]	; 0x38
 80096f2:	9800      	ldr	r0, [sp, #0]
 80096f4:	f7ff feaf 	bl	8009456 <PROGBAR__GetTextLocked>
 80096f8:	9001      	str	r0, [sp, #4]
 80096fa:	b338      	cbz	r0, 800974c <PROGBAR_SetValue+0x140>
 80096fc:	9e00      	ldr	r6, [sp, #0]
 80096fe:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8009700:	f006 fd94 	bl	801022c <GUI_SetFont>
 8009704:	a904      	add	r1, sp, #16
 8009706:	4606      	mov	r6, r0
 8009708:	9a01      	ldr	r2, [sp, #4]
 800970a:	9800      	ldr	r0, [sp, #0]
 800970c:	f7ff fea6 	bl	800945c <PROGBAR__GetTextRect>
 8009710:	a802      	add	r0, sp, #8
 8009712:	aa04      	add	r2, sp, #16
 8009714:	ac06      	add	r4, sp, #24
 8009716:	4601      	mov	r1, r0
 8009718:	f006 fe80 	bl	801041c <GUI_MergeRect>
 800971c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8009720:	462a      	mov	r2, r5
 8009722:	f7ff fe56 	bl	80093d2 <_SetValue>
 8009726:	f854 2d14 	ldr.w	r2, [r4, #-20]!
 800972a:	9800      	ldr	r0, [sp, #0]
 800972c:	a904      	add	r1, sp, #16
 800972e:	f7ff fe95 	bl	800945c <PROGBAR__GetTextRect>
 8009732:	a802      	add	r0, sp, #8
 8009734:	4601      	mov	r1, r0
 8009736:	aa04      	add	r2, sp, #16
 8009738:	f006 fe70 	bl	801041c <GUI_MergeRect>
 800973c:	4630      	mov	r0, r6
 800973e:	f006 fd75 	bl	801022c <GUI_SetFont>
 8009742:	4620      	mov	r0, r4
 8009744:	f008 f8d8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009748:	e000      	b.n	800974c <PROGBAR_SetValue+0x140>
 800974a:	6365      	str	r5, [r4, #52]	; 0x34
 800974c:	4638      	mov	r0, r7
 800974e:	a902      	add	r1, sp, #8
 8009750:	f002 fdcc 	bl	800c2ec <WM_InvalidateRect>
 8009754:	4668      	mov	r0, sp
 8009756:	f008 f8cf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800975a:	b006      	add	sp, #24
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009760 <GUI_ARRAY__GethItem>:
 8009760:	8803      	ldrh	r3, [r0, #0]
 8009762:	4299      	cmp	r1, r3
 8009764:	b513      	push	{r0, r1, r4, lr}
 8009766:	460c      	mov	r4, r1
 8009768:	d20e      	bcs.n	8009788 <GUI_ARRAY__GethItem+0x28>
 800976a:	6840      	ldr	r0, [r0, #4]
 800976c:	b150      	cbz	r0, 8009784 <GUI_ARRAY__GethItem+0x24>
 800976e:	f008 f8b5 	bl	80118dc <GUI_ALLOC_LockH>
 8009772:	a902      	add	r1, sp, #8
 8009774:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8009778:	f841 0d04 	str.w	r0, [r1, #-4]!
 800977c:	4608      	mov	r0, r1
 800977e:	f008 f8bb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009782:	e002      	b.n	800978a <GUI_ARRAY__GethItem+0x2a>
 8009784:	4604      	mov	r4, r0
 8009786:	e000      	b.n	800978a <GUI_ARRAY__GethItem+0x2a>
 8009788:	2400      	movs	r4, #0
 800978a:	4620      	mov	r0, r4
 800978c:	bd1c      	pop	{r2, r3, r4, pc}

0800978e <GUI_ARRAY__GetpItemLocked>:
 800978e:	b508      	push	{r3, lr}
 8009790:	f7ff ffe6 	bl	8009760 <GUI_ARRAY__GethItem>
 8009794:	b118      	cbz	r0, 800979e <GUI_ARRAY__GetpItemLocked+0x10>
 8009796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800979a:	f008 b89f 	b.w	80118dc <GUI_ALLOC_LockH>
 800979e:	bd08      	pop	{r3, pc}

080097a0 <GUI_ARRAY_GetNumItems>:
 80097a0:	b513      	push	{r0, r1, r4, lr}
 80097a2:	4604      	mov	r4, r0
 80097a4:	b140      	cbz	r0, 80097b8 <GUI_ARRAY_GetNumItems+0x18>
 80097a6:	f008 f899 	bl	80118dc <GUI_ALLOC_LockH>
 80097aa:	ab02      	add	r3, sp, #8
 80097ac:	8804      	ldrh	r4, [r0, #0]
 80097ae:	f843 0d04 	str.w	r0, [r3, #-4]!
 80097b2:	4618      	mov	r0, r3
 80097b4:	f008 f8a0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80097b8:	4620      	mov	r0, r4
 80097ba:	bd1c      	pop	{r2, r3, r4, pc}

080097bc <GUI_ARRAY_AddItem>:
 80097bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097c0:	4605      	mov	r5, r0
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d03d      	beq.n	8009842 <GUI_ARRAY_AddItem+0x86>
 80097c6:	b14a      	cbz	r2, 80097dc <GUI_ARRAY_AddItem+0x20>
 80097c8:	4608      	mov	r0, r1
 80097ca:	4611      	mov	r1, r2
 80097cc:	f008 fb0e 	bl	8011dec <GUI_ALLOC_AllocInit>
 80097d0:	f1d0 0401 	rsbs	r4, r0, #1
 80097d4:	4607      	mov	r7, r0
 80097d6:	bf38      	it	cc
 80097d8:	2400      	movcc	r4, #0
 80097da:	e001      	b.n	80097e0 <GUI_ARRAY_AddItem+0x24>
 80097dc:	4614      	mov	r4, r2
 80097de:	4617      	mov	r7, r2
 80097e0:	4628      	mov	r0, r5
 80097e2:	f008 f87b 	bl	80118dc <GUI_ALLOC_LockH>
 80097e6:	ae02      	add	r6, sp, #8
 80097e8:	f8b0 8000 	ldrh.w	r8, [r0]
 80097ec:	f846 0d08 	str.w	r0, [r6, #-8]!
 80097f0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80097f4:	4668      	mov	r0, sp
 80097f6:	f008 f87f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80097fa:	bb24      	cbnz	r4, 8009846 <GUI_ARRAY_AddItem+0x8a>
 80097fc:	f108 0101 	add.w	r1, r8, #1
 8009800:	4648      	mov	r0, r9
 8009802:	0089      	lsls	r1, r1, #2
 8009804:	f006 fda1 	bl	801034a <GUI_ALLOC_Realloc>
 8009808:	4681      	mov	r9, r0
 800980a:	b918      	cbnz	r0, 8009814 <GUI_ARRAY_AddItem+0x58>
 800980c:	4638      	mov	r0, r7
 800980e:	f008 f89f 	bl	8011950 <GUI_ALLOC_Free>
 8009812:	e018      	b.n	8009846 <GUI_ARRAY_AddItem+0x8a>
 8009814:	f008 f862 	bl	80118dc <GUI_ALLOC_LockH>
 8009818:	ab02      	add	r3, sp, #8
 800981a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800981e:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
 8009822:	4618      	mov	r0, r3
 8009824:	f008 f868 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009828:	4628      	mov	r0, r5
 800982a:	f008 f857 	bl	80118dc <GUI_ALLOC_LockH>
 800982e:	8802      	ldrh	r2, [r0, #0]
 8009830:	9000      	str	r0, [sp, #0]
 8009832:	1c51      	adds	r1, r2, #1
 8009834:	f8c0 9004 	str.w	r9, [r0, #4]
 8009838:	8001      	strh	r1, [r0, #0]
 800983a:	4668      	mov	r0, sp
 800983c:	f008 f85c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009840:	e002      	b.n	8009848 <GUI_ARRAY_AddItem+0x8c>
 8009842:	4604      	mov	r4, r0
 8009844:	e000      	b.n	8009848 <GUI_ARRAY_AddItem+0x8c>
 8009846:	2401      	movs	r4, #1
 8009848:	4620      	mov	r0, r4
 800984a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800984e <GUI_ARRAY_Delete>:
 800984e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009850:	4605      	mov	r5, r0
 8009852:	b318      	cbz	r0, 800989c <GUI_ARRAY_Delete+0x4e>
 8009854:	f008 f842 	bl	80118dc <GUI_ALLOC_LockH>
 8009858:	9000      	str	r0, [sp, #0]
 800985a:	6840      	ldr	r0, [r0, #4]
 800985c:	b1c0      	cbz	r0, 8009890 <GUI_ARRAY_Delete+0x42>
 800985e:	f008 f83d 	bl	80118dc <GUI_ALLOC_LockH>
 8009862:	2400      	movs	r4, #0
 8009864:	9001      	str	r0, [sp, #4]
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	8818      	ldrh	r0, [r3, #0]
 800986a:	4284      	cmp	r4, r0
 800986c:	da06      	bge.n	800987c <GUI_ARRAY_Delete+0x2e>
 800986e:	9801      	ldr	r0, [sp, #4]
 8009870:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8009874:	f008 fa84 	bl	8011d80 <GUI_ALLOC_FreePtr>
 8009878:	3401      	adds	r4, #1
 800987a:	e7f4      	b.n	8009866 <GUI_ARRAY_Delete+0x18>
 800987c:	a801      	add	r0, sp, #4
 800987e:	f008 f83b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009882:	9900      	ldr	r1, [sp, #0]
 8009884:	1d08      	adds	r0, r1, #4
 8009886:	f008 fa7b 	bl	8011d80 <GUI_ALLOC_FreePtr>
 800988a:	9b00      	ldr	r3, [sp, #0]
 800988c:	2200      	movs	r2, #0
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	4668      	mov	r0, sp
 8009892:	f008 f831 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009896:	4628      	mov	r0, r5
 8009898:	f008 f85a 	bl	8011950 <GUI_ALLOC_Free>
 800989c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800989e <GUI_ARRAY_SetItem>:
 800989e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098a2:	460d      	mov	r5, r1
 80098a4:	4691      	mov	r9, r2
 80098a6:	461e      	mov	r6, r3
 80098a8:	b908      	cbnz	r0, 80098ae <GUI_ARRAY_SetItem+0x10>
 80098aa:	2400      	movs	r4, #0
 80098ac:	e045      	b.n	800993a <GUI_ARRAY_SetItem+0x9c>
 80098ae:	f008 f815 	bl	80118dc <GUI_ALLOC_LockH>
 80098b2:	ab04      	add	r3, sp, #16
 80098b4:	8804      	ldrh	r4, [r0, #0]
 80098b6:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80098ba:	6847      	ldr	r7, [r0, #4]
 80098bc:	4618      	mov	r0, r3
 80098be:	f008 f81b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80098c2:	42a5      	cmp	r5, r4
 80098c4:	d2f1      	bcs.n	80098aa <GUI_ARRAY_SetItem+0xc>
 80098c6:	2f00      	cmp	r7, #0
 80098c8:	d0ef      	beq.n	80098aa <GUI_ARRAY_SetItem+0xc>
 80098ca:	4638      	mov	r0, r7
 80098cc:	f008 f806 	bl	80118dc <GUI_ALLOC_LockH>
 80098d0:	a904      	add	r1, sp, #16
 80098d2:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 80098d6:	f841 0d08 	str.w	r0, [r1, #-8]!
 80098da:	4608      	mov	r0, r1
 80098dc:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 80098e0:	f008 f80a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80098e4:	b124      	cbz	r4, 80098f0 <GUI_ARRAY_SetItem+0x52>
 80098e6:	4620      	mov	r0, r4
 80098e8:	f008 f826 	bl	8011938 <GUI_ALLOC_GetSize>
 80098ec:	42b0      	cmp	r0, r6
 80098ee:	d014      	beq.n	800991a <GUI_ARRAY_SetItem+0x7c>
 80098f0:	4630      	mov	r0, r6
 80098f2:	f008 fa67 	bl	8011dc4 <GUI_ALLOC_AllocZero>
 80098f6:	4604      	mov	r4, r0
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0d6      	beq.n	80098aa <GUI_ARRAY_SetItem+0xc>
 80098fc:	4638      	mov	r0, r7
 80098fe:	f007 ffed 	bl	80118dc <GUI_ALLOC_LockH>
 8009902:	af04      	add	r7, sp, #16
 8009904:	4680      	mov	r8, r0
 8009906:	f847 0d08 	str.w	r0, [r7, #-8]!
 800990a:	4450      	add	r0, sl
 800990c:	f008 fa38 	bl	8011d80 <GUI_ALLOC_FreePtr>
 8009910:	f848 4025 	str.w	r4, [r8, r5, lsl #2]
 8009914:	4638      	mov	r0, r7
 8009916:	f007 ffef 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800991a:	f1b9 0f00 	cmp.w	r9, #0
 800991e:	d00c      	beq.n	800993a <GUI_ARRAY_SetItem+0x9c>
 8009920:	4620      	mov	r0, r4
 8009922:	f007 ffdb 	bl	80118dc <GUI_ALLOC_LockH>
 8009926:	ad04      	add	r5, sp, #16
 8009928:	4649      	mov	r1, r9
 800992a:	f845 0d04 	str.w	r0, [r5, #-4]!
 800992e:	4632      	mov	r2, r6
 8009930:	f7f6 fc2a 	bl	8000188 <memcpy>
 8009934:	4628      	mov	r0, r5
 8009936:	f007 ffdf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800993a:	4620      	mov	r0, r4
 800993c:	b004      	add	sp, #16
 800993e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009942 <GUI_ARRAY_GetpItemLocked>:
 8009942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009944:	460e      	mov	r6, r1
 8009946:	4605      	mov	r5, r0
 8009948:	b158      	cbz	r0, 8009962 <GUI_ARRAY_GetpItemLocked+0x20>
 800994a:	f007 ffc7 	bl	80118dc <GUI_ALLOC_LockH>
 800994e:	ac02      	add	r4, sp, #8
 8009950:	4631      	mov	r1, r6
 8009952:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009956:	f7ff ff1a 	bl	800978e <GUI_ARRAY__GetpItemLocked>
 800995a:	4605      	mov	r5, r0
 800995c:	4620      	mov	r0, r4
 800995e:	f007 ffcb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009962:	4628      	mov	r0, r5
 8009964:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08009966 <GUI_ARRAY_Create>:
 8009966:	2008      	movs	r0, #8
 8009968:	f008 ba2c 	b.w	8011dc4 <GUI_ALLOC_AllocZero>

0800996c <FRAMEWIN_DrawSkinFlex>:
 800996c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009970:	4604      	mov	r4, r0
 8009972:	b092      	sub	sp, #72	; 0x48
 8009974:	6800      	ldr	r0, [r0, #0]
 8009976:	4d9b      	ldr	r5, [pc, #620]	; (8009be4 <FRAMEWIN_DrawSkinFlex+0x278>)
 8009978:	f000 faba 	bl	8009ef0 <FRAMEWIN_GetActive>
 800997c:	4b9a      	ldr	r3, [pc, #616]	; (8009be8 <FRAMEWIN_DrawSkinFlex+0x27c>)
 800997e:	2800      	cmp	r0, #0
 8009980:	bf18      	it	ne
 8009982:	461d      	movne	r5, r3
 8009984:	6860      	ldr	r0, [r4, #4]
 8009986:	281c      	cmp	r0, #28
 8009988:	f200 81a5 	bhi.w	8009cd6 <FRAMEWIN_DrawSkinFlex+0x36a>
 800998c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009990:	01a30191 	.word	0x01a30191
 8009994:	01a301a3 	.word	0x01a301a3
 8009998:	012e01a3 	.word	0x012e01a3
 800999c:	01a301a3 	.word	0x01a301a3
 80099a0:	01a301a3 	.word	0x01a301a3
 80099a4:	002701a3 	.word	0x002701a3
 80099a8:	01a301a3 	.word	0x01a301a3
 80099ac:	01a3017e 	.word	0x01a3017e
 80099b0:	01a301a3 	.word	0x01a301a3
 80099b4:	01a30145 	.word	0x01a30145
 80099b8:	002301a3 	.word	0x002301a3
 80099bc:	001f001d 	.word	0x001f001d
 80099c0:	01a30021 	.word	0x01a30021
 80099c4:	01a301a3 	.word	0x01a301a3
 80099c8:	0025      	.short	0x0025
 80099ca:	69e8      	ldr	r0, [r5, #28]
 80099cc:	e188      	b.n	8009ce0 <FRAMEWIN_DrawSkinFlex+0x374>
 80099ce:	6a28      	ldr	r0, [r5, #32]
 80099d0:	e186      	b.n	8009ce0 <FRAMEWIN_DrawSkinFlex+0x374>
 80099d2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80099d4:	e184      	b.n	8009ce0 <FRAMEWIN_DrawSkinFlex+0x374>
 80099d6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80099d8:	e182      	b.n	8009ce0 <FRAMEWIN_DrawSkinFlex+0x374>
 80099da:	6968      	ldr	r0, [r5, #20]
 80099dc:	e180      	b.n	8009ce0 <FRAMEWIN_DrawSkinFlex+0x374>
 80099de:	6820      	ldr	r0, [r4, #0]
 80099e0:	261c      	movs	r6, #28
 80099e2:	960a      	str	r6, [sp, #40]	; 0x28
 80099e4:	9009      	str	r0, [sp, #36]	; 0x24
 80099e6:	f007 ff79 	bl	80118dc <GUI_ALLOC_LockH>
 80099ea:	9005      	str	r0, [sp, #20]
 80099ec:	6d07      	ldr	r7, [r0, #80]	; 0x50
 80099ee:	a809      	add	r0, sp, #36	; 0x24
 80099f0:	47b8      	blx	r7
 80099f2:	4606      	mov	r6, r0
 80099f4:	a805      	add	r0, sp, #20
 80099f6:	f007 ff7f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80099fa:	2e01      	cmp	r6, #1
 80099fc:	dd11      	ble.n	8009a22 <FRAMEWIN_DrawSkinFlex+0xb6>
 80099fe:	6828      	ldr	r0, [r5, #0]
 8009a00:	9000      	str	r0, [sp, #0]
 8009a02:	686a      	ldr	r2, [r5, #4]
 8009a04:	9201      	str	r2, [sp, #4]
 8009a06:	68a9      	ldr	r1, [r5, #8]
 8009a08:	9102      	str	r1, [sp, #8]
 8009a0a:	4633      	mov	r3, r6
 8009a0c:	6920      	ldr	r0, [r4, #16]
 8009a0e:	69a1      	ldr	r1, [r4, #24]
 8009a10:	6962      	ldr	r2, [r4, #20]
 8009a12:	f006 f823 	bl	800fa5c <GUI__DrawTwinArc2>
 8009a16:	6923      	ldr	r3, [r4, #16]
 8009a18:	69a7      	ldr	r7, [r4, #24]
 8009a1a:	eb06 0803 	add.w	r8, r6, r3
 8009a1e:	1bbf      	subs	r7, r7, r6
 8009a20:	e02c      	b.n	8009a7c <FRAMEWIN_DrawSkinFlex+0x110>
 8009a22:	6828      	ldr	r0, [r5, #0]
 8009a24:	f006 fc30 	bl	8010288 <GUI_SetColor>
 8009a28:	6921      	ldr	r1, [r4, #16]
 8009a2a:	69e8      	ldr	r0, [r5, #28]
 8009a2c:	180a      	adds	r2, r1, r0
 8009a2e:	3a01      	subs	r2, #1
 8009a30:	6960      	ldr	r0, [r4, #20]
 8009a32:	f006 fdd7 	bl	80105e4 <GUI_DrawHLine>
 8009a36:	69a2      	ldr	r2, [r4, #24]
 8009a38:	69e9      	ldr	r1, [r5, #28]
 8009a3a:	6960      	ldr	r0, [r4, #20]
 8009a3c:	1a53      	subs	r3, r2, r1
 8009a3e:	1c59      	adds	r1, r3, #1
 8009a40:	f006 fdd0 	bl	80105e4 <GUI_DrawHLine>
 8009a44:	6967      	ldr	r7, [r4, #20]
 8009a46:	6920      	ldr	r0, [r4, #16]
 8009a48:	3701      	adds	r7, #1
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	f006 fda8 	bl	80105a0 <GUI_DrawPixel>
 8009a50:	4639      	mov	r1, r7
 8009a52:	69a0      	ldr	r0, [r4, #24]
 8009a54:	f006 fda4 	bl	80105a0 <GUI_DrawPixel>
 8009a58:	6868      	ldr	r0, [r5, #4]
 8009a5a:	f006 fc15 	bl	8010288 <GUI_SetColor>
 8009a5e:	6920      	ldr	r0, [r4, #16]
 8009a60:	4639      	mov	r1, r7
 8009a62:	3001      	adds	r0, #1
 8009a64:	f006 fd9c 	bl	80105a0 <GUI_DrawPixel>
 8009a68:	69a2      	ldr	r2, [r4, #24]
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	1e50      	subs	r0, r2, #1
 8009a6e:	f006 fd97 	bl	80105a0 <GUI_DrawPixel>
 8009a72:	6921      	ldr	r1, [r4, #16]
 8009a74:	69a3      	ldr	r3, [r4, #24]
 8009a76:	f101 0802 	add.w	r8, r1, #2
 8009a7a:	1e9f      	subs	r7, r3, #2
 8009a7c:	6828      	ldr	r0, [r5, #0]
 8009a7e:	f006 fc03 	bl	8010288 <GUI_SetColor>
 8009a82:	4641      	mov	r1, r8
 8009a84:	463a      	mov	r2, r7
 8009a86:	6960      	ldr	r0, [r4, #20]
 8009a88:	f006 fdac 	bl	80105e4 <GUI_DrawHLine>
 8009a8c:	6868      	ldr	r0, [r5, #4]
 8009a8e:	f006 fbfb 	bl	8010288 <GUI_SetColor>
 8009a92:	6960      	ldr	r0, [r4, #20]
 8009a94:	463a      	mov	r2, r7
 8009a96:	3001      	adds	r0, #1
 8009a98:	4641      	mov	r1, r8
 8009a9a:	f006 fda3 	bl	80105e4 <GUI_DrawHLine>
 8009a9e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009aa0:	2a02      	cmp	r2, #2
 8009aa2:	dd0a      	ble.n	8009aba <FRAMEWIN_DrawSkinFlex+0x14e>
 8009aa4:	68a8      	ldr	r0, [r5, #8]
 8009aa6:	f006 fbef 	bl	8010288 <GUI_SetColor>
 8009aaa:	6962      	ldr	r2, [r4, #20]
 8009aac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009aae:	1853      	adds	r3, r2, r1
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	1c91      	adds	r1, r2, #2
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	463a      	mov	r2, r7
 8009ab8:	e01d      	b.n	8009af6 <FRAMEWIN_DrawSkinFlex+0x18a>
 8009aba:	6a29      	ldr	r1, [r5, #32]
 8009abc:	42b1      	cmp	r1, r6
 8009abe:	dd1c      	ble.n	8009afa <FRAMEWIN_DrawSkinFlex+0x18e>
 8009ac0:	6967      	ldr	r7, [r4, #20]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	2e01      	cmp	r6, #1
 8009ac6:	f107 0802 	add.w	r8, r7, #2
 8009aca:	f340 8106 	ble.w	8009cda <FRAMEWIN_DrawSkinFlex+0x36e>
 8009ace:	19bf      	adds	r7, r7, r6
 8009ad0:	18f0      	adds	r0, r6, r3
 8009ad2:	18ca      	adds	r2, r1, r3
 8009ad4:	3a01      	subs	r2, #1
 8009ad6:	4641      	mov	r1, r8
 8009ad8:	463b      	mov	r3, r7
 8009ada:	f006 fd01 	bl	80104e0 <GUI_FillRect>
 8009ade:	69a1      	ldr	r1, [r4, #24]
 8009ae0:	69e8      	ldr	r0, [r5, #28]
 8009ae2:	2e01      	cmp	r6, #1
 8009ae4:	ebc0 0301 	rsb	r3, r0, r1
 8009ae8:	bfcc      	ite	gt
 8009aea:	ebc6 0201 	rsbgt	r2, r6, r1
 8009aee:	1e8a      	suble	r2, r1, #2
 8009af0:	1c58      	adds	r0, r3, #1
 8009af2:	4641      	mov	r1, r8
 8009af4:	463b      	mov	r3, r7
 8009af6:	f006 fcf3 	bl	80104e0 <GUI_FillRect>
 8009afa:	6967      	ldr	r7, [r4, #20]
 8009afc:	69e0      	ldr	r0, [r4, #28]
 8009afe:	2e01      	cmp	r6, #1
 8009b00:	bfcc      	ite	gt
 8009b02:	19f6      	addgt	r6, r6, r7
 8009b04:	1cbe      	addle	r6, r7, #2
 8009b06:	1e47      	subs	r7, r0, #1
 8009b08:	6828      	ldr	r0, [r5, #0]
 8009b0a:	f006 fbbd 	bl	8010288 <GUI_SetColor>
 8009b0e:	463a      	mov	r2, r7
 8009b10:	6920      	ldr	r0, [r4, #16]
 8009b12:	4631      	mov	r1, r6
 8009b14:	f006 fd24 	bl	8010560 <GUI_DrawVLine>
 8009b18:	4631      	mov	r1, r6
 8009b1a:	463a      	mov	r2, r7
 8009b1c:	69a0      	ldr	r0, [r4, #24]
 8009b1e:	f006 fd1f 	bl	8010560 <GUI_DrawVLine>
 8009b22:	69e2      	ldr	r2, [r4, #28]
 8009b24:	6868      	ldr	r0, [r5, #4]
 8009b26:	1e97      	subs	r7, r2, #2
 8009b28:	f006 fbae 	bl	8010288 <GUI_SetColor>
 8009b2c:	6921      	ldr	r1, [r4, #16]
 8009b2e:	463a      	mov	r2, r7
 8009b30:	1c48      	adds	r0, r1, #1
 8009b32:	4631      	mov	r1, r6
 8009b34:	f006 fd14 	bl	8010560 <GUI_DrawVLine>
 8009b38:	69a3      	ldr	r3, [r4, #24]
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	1e58      	subs	r0, r3, #1
 8009b3e:	463a      	mov	r2, r7
 8009b40:	f006 fd0e 	bl	8010560 <GUI_DrawVLine>
 8009b44:	69e8      	ldr	r0, [r5, #28]
 8009b46:	2802      	cmp	r0, #2
 8009b48:	dc02      	bgt.n	8009b50 <FRAMEWIN_DrawSkinFlex+0x1e4>
 8009b4a:	6a2a      	ldr	r2, [r5, #32]
 8009b4c:	2a02      	cmp	r2, #2
 8009b4e:	dd20      	ble.n	8009b92 <FRAMEWIN_DrawSkinFlex+0x226>
 8009b50:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8009b52:	69e7      	ldr	r7, [r4, #28]
 8009b54:	68a8      	ldr	r0, [r5, #8]
 8009b56:	2902      	cmp	r1, #2
 8009b58:	bfcc      	ite	gt
 8009b5a:	ebc1 0707 	rsbgt	r7, r1, r7
 8009b5e:	3f02      	suble	r7, #2
 8009b60:	f006 fb92 	bl	8010288 <GUI_SetColor>
 8009b64:	69eb      	ldr	r3, [r5, #28]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	dd07      	ble.n	8009b7a <FRAMEWIN_DrawSkinFlex+0x20e>
 8009b6a:	6920      	ldr	r0, [r4, #16]
 8009b6c:	18c2      	adds	r2, r0, r3
 8009b6e:	4631      	mov	r1, r6
 8009b70:	3002      	adds	r0, #2
 8009b72:	3a01      	subs	r2, #1
 8009b74:	463b      	mov	r3, r7
 8009b76:	f006 fcb3 	bl	80104e0 <GUI_FillRect>
 8009b7a:	6a29      	ldr	r1, [r5, #32]
 8009b7c:	2902      	cmp	r1, #2
 8009b7e:	dd08      	ble.n	8009b92 <FRAMEWIN_DrawSkinFlex+0x226>
 8009b80:	69a3      	ldr	r3, [r4, #24]
 8009b82:	69e8      	ldr	r0, [r5, #28]
 8009b84:	1a1a      	subs	r2, r3, r0
 8009b86:	1c50      	adds	r0, r2, #1
 8009b88:	4631      	mov	r1, r6
 8009b8a:	1e9a      	subs	r2, r3, #2
 8009b8c:	463b      	mov	r3, r7
 8009b8e:	f006 fca7 	bl	80104e0 <GUI_FillRect>
 8009b92:	6828      	ldr	r0, [r5, #0]
 8009b94:	f006 fb78 	bl	8010288 <GUI_SetColor>
 8009b98:	6921      	ldr	r1, [r4, #16]
 8009b9a:	69a2      	ldr	r2, [r4, #24]
 8009b9c:	69e0      	ldr	r0, [r4, #28]
 8009b9e:	f006 fd21 	bl	80105e4 <GUI_DrawHLine>
 8009ba2:	6868      	ldr	r0, [r5, #4]
 8009ba4:	f006 fb70 	bl	8010288 <GUI_SetColor>
 8009ba8:	69e6      	ldr	r6, [r4, #28]
 8009baa:	6921      	ldr	r1, [r4, #16]
 8009bac:	69a3      	ldr	r3, [r4, #24]
 8009bae:	1e70      	subs	r0, r6, #1
 8009bb0:	3101      	adds	r1, #1
 8009bb2:	1e5a      	subs	r2, r3, #1
 8009bb4:	f006 fd16 	bl	80105e4 <GUI_DrawHLine>
 8009bb8:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8009bba:	2e02      	cmp	r6, #2
 8009bbc:	f340 808b 	ble.w	8009cd6 <FRAMEWIN_DrawSkinFlex+0x36a>
 8009bc0:	6927      	ldr	r7, [r4, #16]
 8009bc2:	69a0      	ldr	r0, [r4, #24]
 8009bc4:	69e4      	ldr	r4, [r4, #28]
 8009bc6:	f107 0802 	add.w	r8, r7, #2
 8009bca:	1e87      	subs	r7, r0, #2
 8009bcc:	68a8      	ldr	r0, [r5, #8]
 8009bce:	f006 fb5b 	bl	8010288 <GUI_SetColor>
 8009bd2:	1ba2      	subs	r2, r4, r6
 8009bd4:	1c51      	adds	r1, r2, #1
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	463a      	mov	r2, r7
 8009bda:	1ea3      	subs	r3, r4, #2
 8009bdc:	f006 fc80 	bl	80104e0 <GUI_FillRect>
 8009be0:	e079      	b.n	8009cd6 <FRAMEWIN_DrawSkinFlex+0x36a>
 8009be2:	bf00      	nop
 8009be4:	200000f0 	.word	0x200000f0
 8009be8:	200000c4 	.word	0x200000c4
 8009bec:	8a20      	ldrh	r0, [r4, #16]
 8009bee:	8aa1      	ldrh	r1, [r4, #20]
 8009bf0:	8b22      	ldrh	r2, [r4, #24]
 8009bf2:	8ba3      	ldrh	r3, [r4, #28]
 8009bf4:	68ec      	ldr	r4, [r5, #12]
 8009bf6:	f8ad 001c 	strh.w	r0, [sp, #28]
 8009bfa:	9400      	str	r4, [sp, #0]
 8009bfc:	692c      	ldr	r4, [r5, #16]
 8009bfe:	f8ad 101e 	strh.w	r1, [sp, #30]
 8009c02:	f8ad 2020 	strh.w	r2, [sp, #32]
 8009c06:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8009c0a:	9401      	str	r4, [sp, #4]
 8009c0c:	b200      	sxth	r0, r0
 8009c0e:	b209      	sxth	r1, r1
 8009c10:	b212      	sxth	r2, r2
 8009c12:	b21b      	sxth	r3, r3
 8009c14:	f006 fdf6 	bl	8010804 <GUI_DrawGradientV>
 8009c18:	e05d      	b.n	8009cd6 <FRAMEWIN_DrawSkinFlex+0x36a>
 8009c1a:	8b29      	ldrh	r1, [r5, #24]
 8009c1c:	6922      	ldr	r2, [r4, #16]
 8009c1e:	6960      	ldr	r0, [r4, #20]
 8009c20:	188b      	adds	r3, r1, r2
 8009c22:	69a2      	ldr	r2, [r4, #24]
 8009c24:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009c28:	69e3      	ldr	r3, [r4, #28]
 8009c2a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8009c2e:	1a51      	subs	r1, r2, r1
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	f8ad 1020 	strh.w	r1, [sp, #32]
 8009c36:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8009c3a:	f007 fe4f 	bl	80118dc <GUI_ALLOC_LockH>
 8009c3e:	9005      	str	r0, [sp, #20]
 8009c40:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8009c42:	b1f8      	cbz	r0, 8009c84 <FRAMEWIN_DrawSkinFlex+0x318>
 8009c44:	2002      	movs	r0, #2
 8009c46:	f006 fae7 	bl	8010218 <GUI_SetTextMode>
 8009c4a:	9905      	ldr	r1, [sp, #20]
 8009c4c:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
 8009c50:	f3c2 03c0 	ubfx	r3, r2, #3, #1
 8009c54:	330e      	adds	r3, #14
 8009c56:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009c5a:	6880      	ldr	r0, [r0, #8]
 8009c5c:	f006 fb14 	bl	8010288 <GUI_SetColor>
 8009c60:	9905      	ldr	r1, [sp, #20]
 8009c62:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8009c64:	f006 fae2 	bl	801022c <GUI_SetFont>
 8009c68:	9a05      	ldr	r2, [sp, #20]
 8009c6a:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8009c6c:	f007 fe36 	bl	80118dc <GUI_ALLOC_LockH>
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	9006      	str	r0, [sp, #24]
 8009c74:	a907      	add	r1, sp, #28
 8009c76:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8009c7a:	f007 f826 	bl	8010cca <GUI_DispStringInRect>
 8009c7e:	a806      	add	r0, sp, #24
 8009c80:	f007 fe3a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009c84:	a805      	add	r0, sp, #20
 8009c86:	f007 fe37 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009c8a:	e024      	b.n	8009cd6 <FRAMEWIN_DrawSkinFlex+0x36a>
 8009c8c:	6920      	ldr	r0, [r4, #16]
 8009c8e:	6961      	ldr	r1, [r4, #20]
 8009c90:	69a2      	ldr	r2, [r4, #24]
 8009c92:	69e3      	ldr	r3, [r4, #28]
 8009c94:	f8ad 001c 	strh.w	r0, [sp, #28]
 8009c98:	68a8      	ldr	r0, [r5, #8]
 8009c9a:	f8ad 101e 	strh.w	r1, [sp, #30]
 8009c9e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8009ca2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8009ca6:	f006 faef 	bl	8010288 <GUI_SetColor>
 8009caa:	a807      	add	r0, sp, #28
 8009cac:	f006 fc0c 	bl	80104c8 <GUI_FillRectEx>
 8009cb0:	e011      	b.n	8009cd6 <FRAMEWIN_DrawSkinFlex+0x36a>
 8009cb2:	6820      	ldr	r0, [r4, #0]
 8009cb4:	f007 fe12 	bl	80118dc <GUI_ALLOC_LockH>
 8009cb8:	a912      	add	r1, sp, #72	; 0x48
 8009cba:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8009cbe:	f841 0d34 	str.w	r0, [r1, #-52]!
 8009cc2:	f042 030c 	orr.w	r3, r2, #12
 8009cc6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8009cca:	4608      	mov	r0, r1
 8009ccc:	f007 fe14 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009cd0:	6820      	ldr	r0, [r4, #0]
 8009cd2:	f001 fa4f 	bl	800b174 <WM_SetHasTrans>
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	e002      	b.n	8009ce0 <FRAMEWIN_DrawSkinFlex+0x374>
 8009cda:	1c98      	adds	r0, r3, #2
 8009cdc:	4647      	mov	r7, r8
 8009cde:	e6f8      	b.n	8009ad2 <FRAMEWIN_DrawSkinFlex+0x166>
 8009ce0:	b012      	add	sp, #72	; 0x48
 8009ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce6:	bf00      	nop

08009ce8 <_GetBorderSize>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	b08a      	sub	sp, #40	; 0x28
 8009cec:	4605      	mov	r5, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	f007 fdf4 	bl	80118dc <GUI_ALLOC_LockH>
 8009cf4:	ab0a      	add	r3, sp, #40	; 0x28
 8009cf6:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8009cf8:	f843 0d28 	str.w	r0, [r3, #-40]!
 8009cfc:	4668      	mov	r0, sp
 8009cfe:	f007 fdfb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009d02:	9501      	str	r5, [sp, #4]
 8009d04:	2c03      	cmp	r4, #3
 8009d06:	d80b      	bhi.n	8009d20 <_GetBorderSize+0x38>
 8009d08:	e8df f004 	tbb	[pc, r4]
 8009d0c:	08060402 	.word	0x08060402
 8009d10:	2018      	movs	r0, #24
 8009d12:	e004      	b.n	8009d1e <_GetBorderSize+0x36>
 8009d14:	2016      	movs	r0, #22
 8009d16:	e002      	b.n	8009d1e <_GetBorderSize+0x36>
 8009d18:	2015      	movs	r0, #21
 8009d1a:	e000      	b.n	8009d1e <_GetBorderSize+0x36>
 8009d1c:	2017      	movs	r0, #23
 8009d1e:	9002      	str	r0, [sp, #8]
 8009d20:	a801      	add	r0, sp, #4
 8009d22:	47b0      	blx	r6
 8009d24:	b00a      	add	sp, #40	; 0x28
 8009d26:	bd70      	pop	{r4, r5, r6, pc}

08009d28 <_Create>:
 8009d28:	b530      	push	{r4, r5, lr}
 8009d2a:	b08b      	sub	sp, #44	; 0x2c
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	f007 fdd5 	bl	80118dc <GUI_ALLOC_LockH>
 8009d32:	ab0a      	add	r3, sp, #40	; 0x28
 8009d34:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009d36:	f843 0d28 	str.w	r0, [r3, #-40]!
 8009d3a:	4668      	mov	r0, sp
 8009d3c:	6894      	ldr	r4, [r2, #8]
 8009d3e:	f007 fddb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009d42:	2000      	movs	r0, #0
 8009d44:	9002      	str	r0, [sp, #8]
 8009d46:	a80a      	add	r0, sp, #40	; 0x28
 8009d48:	6861      	ldr	r1, [r4, #4]
 8009d4a:	f840 5d24 	str.w	r5, [r0, #-36]!
 8009d4e:	4788      	blx	r1
 8009d50:	b00b      	add	sp, #44	; 0x2c
 8009d52:	bd30      	pop	{r4, r5, pc}

08009d54 <_Paint>:
 8009d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	b08f      	sub	sp, #60	; 0x3c
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	f007 fdbe 	bl	80118dc <GUI_ALLOC_LockH>
 8009d60:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009d62:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8009d64:	9202      	str	r2, [sp, #8]
 8009d66:	688e      	ldr	r6, [r1, #8]
 8009d68:	9004      	str	r0, [sp, #16]
 8009d6a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8009d6c:	f000 f9a6 	bl	800a0bc <FRAMEWIN__CalcTitleHeight>
 8009d70:	4682      	mov	sl, r0
 8009d72:	a80e      	add	r0, sp, #56	; 0x38
 8009d74:	f850 7d28 	ldr.w	r7, [r0, #-40]!
 8009d78:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009d7c:	9303      	str	r3, [sp, #12]
 8009d7e:	f007 fdbb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009d82:	4620      	mov	r0, r4
 8009d84:	f001 fd4a 	bl	800b81c <WM_GetWindowSizeX>
 8009d88:	4680      	mov	r8, r0
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f001 fd5a 	bl	800b844 <WM_GetWindowSizeY>
 8009d90:	6832      	ldr	r2, [r6, #0]
 8009d92:	2101      	movs	r1, #1
 8009d94:	4683      	mov	fp, r0
 8009d96:	4620      	mov	r0, r4
 8009d98:	4790      	blx	r2
 8009d9a:	6833      	ldr	r3, [r6, #0]
 8009d9c:	2103      	movs	r1, #3
 8009d9e:	4607      	mov	r7, r0
 8009da0:	4620      	mov	r0, r4
 8009da2:	4798      	blx	r3
 8009da4:	6836      	ldr	r6, [r6, #0]
 8009da6:	4681      	mov	r9, r0
 8009da8:	2100      	movs	r1, #0
 8009daa:	4620      	mov	r0, r4
 8009dac:	47b0      	blx	r6
 8009dae:	4606      	mov	r6, r0
 8009db0:	2000      	movs	r0, #0
 8009db2:	9405      	str	r4, [sp, #20]
 8009db4:	f002 fd16 	bl	800c7e4 <WM__InitIVRSearch>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d03c      	beq.n	8009e36 <_Paint+0xe2>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	f108 31ff 	add.w	r1, r8, #4294967295
 8009dc2:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009dc6:	230b      	movs	r3, #11
 8009dc8:	900a      	str	r0, [sp, #40]	; 0x28
 8009dca:	9009      	str	r0, [sp, #36]	; 0x24
 8009dcc:	910b      	str	r1, [sp, #44]	; 0x2c
 8009dce:	920c      	str	r2, [sp, #48]	; 0x30
 8009dd0:	9306      	str	r3, [sp, #24]
 8009dd2:	a805      	add	r0, sp, #20
 8009dd4:	47a8      	blx	r5
 8009dd6:	9903      	ldr	r1, [sp, #12]
 8009dd8:	9709      	str	r7, [sp, #36]	; 0x24
 8009dda:	eb06 030a 	add.w	r3, r6, sl
 8009dde:	ebc9 0008 	rsb	r0, r9, r8
 8009de2:	1e42      	subs	r2, r0, #1
 8009de4:	fa03 f081 	sxtah	r0, r3, r1
 8009de8:	1e41      	subs	r1, r0, #1
 8009dea:	200e      	movs	r0, #14
 8009dec:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009df0:	930a      	str	r3, [sp, #40]	; 0x28
 8009df2:	920b      	str	r2, [sp, #44]	; 0x2c
 8009df4:	910c      	str	r1, [sp, #48]	; 0x30
 8009df6:	9006      	str	r0, [sp, #24]
 8009df8:	a805      	add	r0, sp, #20
 8009dfa:	47a8      	blx	r5
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	9a00      	ldr	r2, [sp, #0]
 8009e00:	9709      	str	r7, [sp, #36]	; 0x24
 8009e02:	1e59      	subs	r1, r3, #1
 8009e04:	2005      	movs	r0, #5
 8009e06:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e08:	910c      	str	r1, [sp, #48]	; 0x30
 8009e0a:	9006      	str	r0, [sp, #24]
 8009e0c:	960a      	str	r6, [sp, #40]	; 0x28
 8009e0e:	a805      	add	r0, sp, #20
 8009e10:	47a8      	blx	r5
 8009e12:	a909      	add	r1, sp, #36	; 0x24
 8009e14:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e16:	4620      	mov	r0, r4
 8009e18:	f000 f95f 	bl	800a0da <FRAMEWIN__GetTitleLimits>
 8009e1c:	2002      	movs	r0, #2
 8009e1e:	f006 f9fb 	bl	8010218 <GUI_SetTextMode>
 8009e22:	9802      	ldr	r0, [sp, #8]
 8009e24:	f006 fa02 	bl	801022c <GUI_SetFont>
 8009e28:	2212      	movs	r2, #18
 8009e2a:	9206      	str	r2, [sp, #24]
 8009e2c:	a805      	add	r0, sp, #20
 8009e2e:	47a8      	blx	r5
 8009e30:	f002 fc18 	bl	800c664 <WM__GetNextIVR>
 8009e34:	e7c0      	b.n	8009db8 <_Paint+0x64>
 8009e36:	b00f      	add	sp, #60	; 0x3c
 8009e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e3c <FRAMEWIN_SetDefaultSkin>:
 8009e3c:	4a06      	ldr	r2, [pc, #24]	; (8009e58 <FRAMEWIN_SetDefaultSkin+0x1c>)
 8009e3e:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <FRAMEWIN_SetDefaultSkin+0x20>)
 8009e40:	4907      	ldr	r1, [pc, #28]	; (8009e60 <FRAMEWIN_SetDefaultSkin+0x24>)
 8009e42:	b510      	push	{r4, lr}
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	6048      	str	r0, [r1, #4]
 8009e48:	4a06      	ldr	r2, [pc, #24]	; (8009e64 <FRAMEWIN_SetDefaultSkin+0x28>)
 8009e4a:	c903      	ldmia	r1, {r0, r1}
 8009e4c:	69d4      	ldr	r4, [r2, #28]
 8009e4e:	3218      	adds	r2, #24
 8009e50:	e882 0003 	stmia.w	r2, {r0, r1}
 8009e54:	4620      	mov	r0, r4
 8009e56:	bd10      	pop	{r4, pc}
 8009e58:	20000124 	.word	0x20000124
 8009e5c:	20000158 	.word	0x20000158
 8009e60:	2000011c 	.word	0x2000011c
 8009e64:	20000130 	.word	0x20000130

08009e68 <FRAMEWIN_SetFont>:
 8009e68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009e6c:	460e      	mov	r6, r1
 8009e6e:	4604      	mov	r4, r0
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d029      	beq.n	8009ec8 <FRAMEWIN_SetFont+0x60>
 8009e74:	f007 fd32 	bl	80118dc <GUI_ALLOC_LockH>
 8009e78:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8009e7a:	9003      	str	r0, [sp, #12]
 8009e7c:	688d      	ldr	r5, [r1, #8]
 8009e7e:	f000 f91d 	bl	800a0bc <FRAMEWIN__CalcTitleHeight>
 8009e82:	4680      	mov	r8, r0
 8009e84:	a804      	add	r0, sp, #16
 8009e86:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8009e8a:	6356      	str	r6, [r2, #52]	; 0x34
 8009e8c:	f007 fd34 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009e90:	682e      	ldr	r6, [r5, #0]
 8009e92:	2101      	movs	r1, #1
 8009e94:	4620      	mov	r0, r4
 8009e96:	47b0      	blx	r6
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	2103      	movs	r1, #3
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4798      	blx	r3
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	682d      	ldr	r5, [r5, #0]
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	47a8      	blx	r5
 8009eac:	4605      	mov	r5, r0
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f000 f9ca 	bl	800a248 <FRAMEWIN__UpdatePositions>
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	9500      	str	r5, [sp, #0]
 8009eb8:	4641      	mov	r1, r8
 8009eba:	463a      	mov	r2, r7
 8009ebc:	4633      	mov	r3, r6
 8009ebe:	f008 fcda 	bl	8012876 <FRAMEWIN__UpdateButtons>
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f002 fa4e 	bl	800c364 <WM_InvalidateWindow>
 8009ec8:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

08009ecc <FRAMEWIN_SetTextColor>:
 8009ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ece:	460c      	mov	r4, r1
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	b160      	cbz	r0, 8009eee <FRAMEWIN_SetTextColor+0x22>
 8009ed4:	f007 fd02 	bl	80118dc <GUI_ALLOC_LockH>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	a802      	add	r0, sp, #8
 8009edc:	6414      	str	r4, [r2, #64]	; 0x40
 8009ede:	f840 2d04 	str.w	r2, [r0, #-4]!
 8009ee2:	6454      	str	r4, [r2, #68]	; 0x44
 8009ee4:	f007 fd08 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f002 fa3b 	bl	800c364 <WM_InvalidateWindow>
 8009eee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08009ef0 <FRAMEWIN_GetActive>:
 8009ef0:	b513      	push	{r0, r1, r4, lr}
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	b158      	cbz	r0, 8009f0e <FRAMEWIN_GetActive+0x1e>
 8009ef6:	f007 fcf1 	bl	80118dc <GUI_ALLOC_LockH>
 8009efa:	ab02      	add	r3, sp, #8
 8009efc:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 8009f00:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009f04:	4618      	mov	r0, r3
 8009f06:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8009f0a:	f007 fcf5 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009f0e:	4620      	mov	r0, r4
 8009f10:	bd1c      	pop	{r2, r3, r4, pc}

08009f12 <FRAMEWIN_CreateIndirect>:
 8009f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f14:	b089      	sub	sp, #36	; 0x24
 8009f16:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8009f1a:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8009f1e:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8009f22:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8009f26:	9100      	str	r1, [sp, #0]
 8009f28:	2100      	movs	r1, #0
 8009f2a:	9101      	str	r1, [sp, #4]
 8009f2c:	8a44      	ldrh	r4, [r0, #18]
 8009f2e:	9402      	str	r4, [sp, #8]
 8009f30:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8009f34:	9103      	str	r1, [sp, #12]
 8009f36:	6844      	ldr	r4, [r0, #4]
 8009f38:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f3a:	9404      	str	r4, [sp, #16]
 8009f3c:	9105      	str	r1, [sp, #20]
 8009f3e:	6984      	ldr	r4, [r0, #24]
 8009f40:	18f9      	adds	r1, r7, r3
 8009f42:	eb0e 0002 	add.w	r0, lr, r2
 8009f46:	9406      	str	r4, [sp, #24]
 8009f48:	4632      	mov	r2, r6
 8009f4a:	462b      	mov	r3, r5
 8009f4c:	f000 f9d2 	bl	800a2f4 <FRAMEWIN_CreateUser>
 8009f50:	b009      	add	sp, #36	; 0x24
 8009f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f54 <_SetActive>:
 8009f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f56:	460d      	mov	r5, r1
 8009f58:	4604      	mov	r4, r0
 8009f5a:	f007 fcbf 	bl	80118dc <GUI_ALLOC_LockH>
 8009f5e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009f62:	9001      	str	r0, [sp, #4]
 8009f64:	f002 0108 	and.w	r1, r2, #8
 8009f68:	b28b      	uxth	r3, r1
 8009f6a:	b11d      	cbz	r5, 8009f74 <_SetActive+0x20>
 8009f6c:	b953      	cbnz	r3, 8009f84 <_SetActive+0x30>
 8009f6e:	f042 0208 	orr.w	r2, r2, #8
 8009f72:	e002      	b.n	8009f7a <_SetActive+0x26>
 8009f74:	b133      	cbz	r3, 8009f84 <_SetActive+0x30>
 8009f76:	f022 0208 	bic.w	r2, r2, #8
 8009f7a:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f002 f9f0 	bl	800c364 <WM_InvalidateWindow>
 8009f84:	a801      	add	r0, sp, #4
 8009f86:	f007 fcb7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009f8a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08009f8c <FRAMEWIN__GetBorderSize>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	b08a      	sub	sp, #40	; 0x28
 8009f90:	4605      	mov	r5, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	f007 fca2 	bl	80118dc <GUI_ALLOC_LockH>
 8009f98:	ab0a      	add	r3, sp, #40	; 0x28
 8009f9a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009f9c:	f843 0d28 	str.w	r0, [r3, #-40]!
 8009fa0:	4668      	mov	r0, sp
 8009fa2:	6896      	ldr	r6, [r2, #8]
 8009fa4:	f007 fca8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009fa8:	9501      	str	r5, [sp, #4]
 8009faa:	2c03      	cmp	r4, #3
 8009fac:	d80b      	bhi.n	8009fc6 <FRAMEWIN__GetBorderSize+0x3a>
 8009fae:	e8df f004 	tbb	[pc, r4]
 8009fb2:	0402      	.short	0x0402
 8009fb4:	0806      	.short	0x0806
 8009fb6:	2018      	movs	r0, #24
 8009fb8:	e004      	b.n	8009fc4 <FRAMEWIN__GetBorderSize+0x38>
 8009fba:	2016      	movs	r0, #22
 8009fbc:	e002      	b.n	8009fc4 <FRAMEWIN__GetBorderSize+0x38>
 8009fbe:	2015      	movs	r0, #21
 8009fc0:	e000      	b.n	8009fc4 <FRAMEWIN__GetBorderSize+0x38>
 8009fc2:	2017      	movs	r0, #23
 8009fc4:	9002      	str	r0, [sp, #8]
 8009fc6:	6871      	ldr	r1, [r6, #4]
 8009fc8:	a801      	add	r0, sp, #4
 8009fca:	4788      	blx	r1
 8009fcc:	b00a      	add	sp, #40	; 0x28
 8009fce:	bd70      	pop	{r4, r5, r6, pc}

08009fd0 <FRAMEWIN__cbClient>:
 8009fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	6845      	ldr	r5, [r0, #4]
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	4604      	mov	r4, r0
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f001 fc51 	bl	800b882 <WM_GetParent>
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	f007 fc7b 	bl	80118dc <GUI_ALLOC_LockH>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	a806      	add	r0, sp, #24
 8009fea:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8009fec:	f840 3d14 	str.w	r3, [r0, #-20]!
 8009ff0:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8009ff4:	f8d3 9080 	ldr.w	r9, [r3, #128]	; 0x80
 8009ff8:	f007 fc7e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8009ffc:	6820      	ldr	r0, [r4, #0]
 8009ffe:	380e      	subs	r0, #14
 800a000:	2814      	cmp	r0, #20
 800a002:	d850      	bhi.n	800a0a6 <FRAMEWIN__cbClient+0xd6>
 800a004:	e8df f000 	tbb	[pc, r0]
 800a008:	4f4f0b2f 	.word	0x4f4f0b2f
 800a00c:	54544f4f 	.word	0x54544f4f
 800a010:	4f4f544f 	.word	0x4f4f544f
 800a014:	4f4f4f4f 	.word	0x4f4f4f4f
 800a018:	4f4f2a1e 	.word	0x4f4f2a1e
 800a01c:	4c          	.byte	0x4c
 800a01d:	00          	.byte	0x00
 800a01e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a022:	4590      	cmp	r8, r2
 800a024:	d004      	beq.n	800a030 <FRAMEWIN__cbClient+0x60>
 800a026:	4640      	mov	r0, r8
 800a028:	f005 fb70 	bl	800f70c <LCD_SetBkColor>
 800a02c:	f007 f844 	bl	80110b8 <GUI_Clear>
 800a030:	2f00      	cmp	r7, #0
 800a032:	d040      	beq.n	800a0b6 <FRAMEWIN__cbClient+0xe6>
 800a034:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a038:	ae02      	add	r6, sp, #8
 800a03a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800a03e:	9503      	str	r5, [sp, #12]
 800a040:	4630      	mov	r0, r6
 800a042:	e033      	b.n	800a0ac <FRAMEWIN__cbClient+0xdc>
 800a044:	68e1      	ldr	r1, [r4, #12]
 800a046:	2900      	cmp	r1, #0
 800a048:	d035      	beq.n	800a0b6 <FRAMEWIN__cbClient+0xe6>
 800a04a:	f1b9 0f00 	cmp.w	r9, #0
 800a04e:	d023      	beq.n	800a098 <FRAMEWIN__cbClient+0xc8>
 800a050:	45a9      	cmp	r9, r5
 800a052:	d021      	beq.n	800a098 <FRAMEWIN__cbClient+0xc8>
 800a054:	4648      	mov	r0, r9
 800a056:	f001 f949 	bl	800b2ec <WM_SetFocus>
 800a05a:	e02c      	b.n	800a0b6 <FRAMEWIN__cbClient+0xe6>
 800a05c:	4630      	mov	r0, r6
 800a05e:	4621      	mov	r1, r4
 800a060:	f008 f87c 	bl	801215c <WIDGET_HandleActive>
 800a064:	e027      	b.n	800a0b6 <FRAMEWIN__cbClient+0xe6>
 800a066:	68e3      	ldr	r3, [r4, #12]
 800a068:	6858      	ldr	r0, [r3, #4]
 800a06a:	2800      	cmp	r0, #0
 800a06c:	dd1b      	ble.n	800a0a6 <FRAMEWIN__cbClient+0xd6>
 800a06e:	6819      	ldr	r1, [r3, #0]
 800a070:	2909      	cmp	r1, #9
 800a072:	d011      	beq.n	800a098 <FRAMEWIN__cbClient+0xc8>
 800a074:	290a      	cmp	r1, #10
 800a076:	d116      	bne.n	800a0a6 <FRAMEWIN__cbClient+0xd6>
 800a078:	4628      	mov	r0, r5
 800a07a:	f001 f8d5 	bl	800b228 <WM_SetFocusOnPrevChild>
 800a07e:	4604      	mov	r4, r0
 800a080:	4630      	mov	r0, r6
 800a082:	f007 fc2b 	bl	80118dc <GUI_ALLOC_LockH>
 800a086:	4602      	mov	r2, r0
 800a088:	a806      	add	r0, sp, #24
 800a08a:	f840 2d14 	str.w	r2, [r0, #-20]!
 800a08e:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
 800a092:	f007 fc31 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a096:	e00e      	b.n	800a0b6 <FRAMEWIN__cbClient+0xe6>
 800a098:	4628      	mov	r0, r5
 800a09a:	f001 f8f5 	bl	800b288 <WM_SetFocusOnNextChild>
 800a09e:	e7ee      	b.n	800a07e <FRAMEWIN__cbClient+0xae>
 800a0a0:	f8c4 800c 	str.w	r8, [r4, #12]
 800a0a4:	e007      	b.n	800a0b6 <FRAMEWIN__cbClient+0xe6>
 800a0a6:	b11f      	cbz	r7, 800a0b0 <FRAMEWIN__cbClient+0xe0>
 800a0a8:	6066      	str	r6, [r4, #4]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	47b8      	blx	r7
 800a0ae:	e002      	b.n	800a0b6 <FRAMEWIN__cbClient+0xe6>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f002 fd81 	bl	800cbb8 <WM_DefaultProc>
 800a0b6:	b007      	add	sp, #28
 800a0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a0bc <FRAMEWIN__CalcTitleHeight>:
 800a0bc:	b508      	push	{r3, lr}
 800a0be:	4603      	mov	r3, r0
 800a0c0:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 800a0c2:	f000 0120 	and.w	r1, r0, #32
 800a0c6:	b288      	uxth	r0, r1
 800a0c8:	b130      	cbz	r0, 800a0d8 <FRAMEWIN__CalcTitleHeight+0x1c>
 800a0ca:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 800a0ce:	b918      	cbnz	r0, 800a0d8 <FRAMEWIN__CalcTitleHeight+0x1c>
 800a0d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a0d2:	f006 f9d7 	bl	8010484 <GUI_GetYSizeOfFont>
 800a0d6:	3002      	adds	r0, #2
 800a0d8:	bd08      	pop	{r3, pc}

0800a0da <FRAMEWIN__GetTitleLimits>:
 800a0da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	4604      	mov	r4, r0
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	4616      	mov	r6, r2
 800a0e4:	f007 fbfa 	bl	80118dc <GUI_ALLOC_LockH>
 800a0e8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a0ea:	9000      	str	r0, [sp, #0]
 800a0ec:	c803      	ldmia	r0, {r0, r1}
 800a0ee:	6897      	ldr	r7, [r2, #8]
 800a0f0:	ab04      	add	r3, sp, #16
 800a0f2:	e903 0003 	stmdb	r3, {r0, r1}
 800a0f6:	4668      	mov	r0, sp
 800a0f8:	f007 fbfe 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	4620      	mov	r0, r4
 800a100:	2100      	movs	r1, #0
 800a102:	4790      	blx	r2
 800a104:	4607      	mov	r7, r0
 800a106:	4620      	mov	r0, r4
 800a108:	f001 fbe6 	bl	800b8d8 <WM_GetFirstChild>
 800a10c:	4604      	mov	r4, r0
 800a10e:	b350      	cbz	r0, 800a166 <FRAMEWIN__GetTitleLimits+0x8c>
 800a110:	4620      	mov	r0, r4
 800a112:	f007 fbe3 	bl	80118dc <GUI_ALLOC_LockH>
 800a116:	4603      	mov	r3, r0
 800a118:	f9bd e00a 	ldrsh.w	lr, [sp, #10]
 800a11c:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 800a120:	9001      	str	r0, [sp, #4]
 800a122:	ebce 0c0c 	rsb	ip, lr, ip
 800a126:	45bc      	cmp	ip, r7
 800a128:	8800      	ldrh	r0, [r0, #0]
 800a12a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800a12e:	8899      	ldrh	r1, [r3, #4]
 800a130:	d112      	bne.n	800a158 <FRAMEWIN__GetTitleLimits+0x7e>
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	061b      	lsls	r3, r3, #24
 800a136:	b212      	sxth	r2, r2
 800a138:	d507      	bpl.n	800a14a <FRAMEWIN__GetTitleLimits+0x70>
 800a13a:	b200      	sxth	r0, r0
 800a13c:	1a81      	subs	r1, r0, r2
 800a13e:	6832      	ldr	r2, [r6, #0]
 800a140:	4291      	cmp	r1, r2
 800a142:	dc09      	bgt.n	800a158 <FRAMEWIN__GetTitleLimits+0x7e>
 800a144:	1e4b      	subs	r3, r1, #1
 800a146:	6033      	str	r3, [r6, #0]
 800a148:	e006      	b.n	800a158 <FRAMEWIN__GetTitleLimits+0x7e>
 800a14a:	b208      	sxth	r0, r1
 800a14c:	1a81      	subs	r1, r0, r2
 800a14e:	682a      	ldr	r2, [r5, #0]
 800a150:	4291      	cmp	r1, r2
 800a152:	db01      	blt.n	800a158 <FRAMEWIN__GetTitleLimits+0x7e>
 800a154:	1c4b      	adds	r3, r1, #1
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	a801      	add	r0, sp, #4
 800a15a:	f007 fbcd 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a15e:	4620      	mov	r0, r4
 800a160:	f001 fb97 	bl	800b892 <WM_GetNextSibling>
 800a164:	e7d2      	b.n	800a10c <FRAMEWIN__GetTitleLimits+0x32>
 800a166:	b005      	add	sp, #20
 800a168:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a16a <FRAMEWIN__CalcPositions>:
 800a16a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16e:	b087      	sub	sp, #28
 800a170:	4604      	mov	r4, r0
 800a172:	460f      	mov	r7, r1
 800a174:	f007 fbb2 	bl	80118dc <GUI_ALLOC_LockH>
 800a178:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a17a:	9003      	str	r0, [sp, #12]
 800a17c:	6895      	ldr	r5, [r2, #8]
 800a17e:	2101      	movs	r1, #1
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	4620      	mov	r0, r4
 800a184:	4798      	blx	r3
 800a186:	682e      	ldr	r6, [r5, #0]
 800a188:	2103      	movs	r1, #3
 800a18a:	4683      	mov	fp, r0
 800a18c:	4620      	mov	r0, r4
 800a18e:	47b0      	blx	r6
 800a190:	682a      	ldr	r2, [r5, #0]
 800a192:	2102      	movs	r1, #2
 800a194:	4681      	mov	r9, r0
 800a196:	4620      	mov	r0, r4
 800a198:	4790      	blx	r2
 800a19a:	2100      	movs	r1, #0
 800a19c:	9001      	str	r0, [sp, #4]
 800a19e:	682d      	ldr	r5, [r5, #0]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	47a8      	blx	r5
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	9803      	ldr	r0, [sp, #12]
 800a1a8:	f001 fb2a 	bl	800b800 <WM__GetWindowSizeX>
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	9803      	ldr	r0, [sp, #12]
 800a1b0:	f001 fb2d 	bl	800b80e <WM__GetWindowSizeY>
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	9803      	ldr	r0, [sp, #12]
 800a1b8:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800a1ba:	f001 0320 	and.w	r3, r1, #32
 800a1be:	b29e      	uxth	r6, r3
 800a1c0:	b10e      	cbz	r6, 800a1c6 <FRAMEWIN__CalcPositions+0x5c>
 800a1c2:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
 800a1c6:	f7ff ff79 	bl	800a0bc <FRAMEWIN__CalcTitleHeight>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	9803      	ldr	r0, [sp, #12]
 800a1ce:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800a1d0:	b118      	cbz	r0, 800a1da <FRAMEWIN__CalcPositions+0x70>
 800a1d2:	9200      	str	r2, [sp, #0]
 800a1d4:	f001 fb36 	bl	800b844 <WM_GetWindowSizeY>
 800a1d8:	9a00      	ldr	r2, [sp, #0]
 800a1da:	803a      	strh	r2, [r7, #0]
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	1993      	adds	r3, r2, r6
 800a1e0:	b2a9      	uxth	r1, r5
 800a1e2:	18ce      	adds	r6, r1, r3
 800a1e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	8078      	strh	r0, [r7, #2]
 800a1ec:	ebc9 0c0a 	rsb	ip, r9, sl
 800a1f0:	3901      	subs	r1, #1
 800a1f2:	1830      	adds	r0, r6, r0
 800a1f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1f8:	fa1f f98c 	uxth.w	r9, ip
 800a1fc:	1852      	adds	r2, r2, r1
 800a1fe:	fa1f fb8b 	uxth.w	fp, fp
 800a202:	80f8      	strh	r0, [r7, #6]
 800a204:	ebc3 0008 	rsb	r0, r3, r8
 800a208:	8178      	strh	r0, [r7, #10]
 800a20a:	827a      	strh	r2, [r7, #18]
 800a20c:	f8a7 b004 	strh.w	fp, [r7, #4]
 800a210:	f8a7 9008 	strh.w	r9, [r7, #8]
 800a214:	f8a7 b00c 	strh.w	fp, [r7, #12]
 800a218:	f8a7 9010 	strh.w	r9, [r7, #16]
 800a21c:	81fd      	strh	r5, [r7, #14]
 800a21e:	a803      	add	r0, sp, #12
 800a220:	f007 fb6a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a224:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 800a228:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a22c:	9005      	str	r0, [sp, #20]
 800a22e:	a904      	add	r1, sp, #16
 800a230:	aa05      	add	r2, sp, #20
 800a232:	4620      	mov	r0, r4
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	f7ff ff50 	bl	800a0da <FRAMEWIN__GetTitleLimits>
 800a23a:	9904      	ldr	r1, [sp, #16]
 800a23c:	9a05      	ldr	r2, [sp, #20]
 800a23e:	81b9      	strh	r1, [r7, #12]
 800a240:	823a      	strh	r2, [r7, #16]
 800a242:	b007      	add	sp, #28
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a248 <FRAMEWIN__UpdatePositions>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	4606      	mov	r6, r0
 800a24e:	f007 fb45 	bl	80118dc <GUI_ALLOC_LockH>
 800a252:	4602      	mov	r2, r0
 800a254:	a806      	add	r0, sp, #24
 800a256:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800a258:	f840 2d18 	str.w	r2, [r0, #-24]!
 800a25c:	4668      	mov	r0, sp
 800a25e:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
 800a260:	f007 fb4a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a264:	b904      	cbnz	r4, 800a268 <FRAMEWIN__UpdatePositions+0x20>
 800a266:	b32d      	cbz	r5, 800a2b4 <FRAMEWIN__UpdatePositions+0x6c>
 800a268:	4630      	mov	r0, r6
 800a26a:	a901      	add	r1, sp, #4
 800a26c:	f7ff ff7d 	bl	800a16a <FRAMEWIN__CalcPositions>
 800a270:	b1ac      	cbz	r4, 800a29e <FRAMEWIN__UpdatePositions+0x56>
 800a272:	4620      	mov	r0, r4
 800a274:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800a278:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800a27c:	f001 f9be 	bl	800b5fc <WM_MoveChildTo>
 800a280:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800a284:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800a288:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 800a28c:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800a290:	1ac9      	subs	r1, r1, r3
 800a292:	1a13      	subs	r3, r2, r0
 800a294:	3101      	adds	r1, #1
 800a296:	4620      	mov	r0, r4
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	f000 ff92 	bl	800b1c2 <WM_SetSize>
 800a29e:	b14d      	cbz	r5, 800a2b4 <FRAMEWIN__UpdatePositions+0x6c>
 800a2a0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800a2a4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800a2a8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	1ad2      	subs	r2, r2, r3
 800a2b0:	f001 f9a4 	bl	800b5fc <WM_MoveChildTo>
 800a2b4:	b006      	add	sp, #24
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}

0800a2b8 <FRAMEWIN_SetText>:
 800a2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	4604      	mov	r4, r0
 800a2be:	b1c0      	cbz	r0, 800a2f2 <FRAMEWIN_SetText+0x3a>
 800a2c0:	f007 fb0c 	bl	80118dc <GUI_ALLOC_LockH>
 800a2c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a2c6:	9000      	str	r0, [sp, #0]
 800a2c8:	4668      	mov	r0, sp
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	f007 fb14 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a2d0:	a801      	add	r0, sp, #4
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	f005 fa8a 	bl	800f7ec <GUI__SetText>
 800a2d8:	b158      	cbz	r0, 800a2f2 <FRAMEWIN_SetText+0x3a>
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f007 fafe 	bl	80118dc <GUI_ALLOC_LockH>
 800a2e0:	9901      	ldr	r1, [sp, #4]
 800a2e2:	9000      	str	r0, [sp, #0]
 800a2e4:	6701      	str	r1, [r0, #112]	; 0x70
 800a2e6:	4668      	mov	r0, sp
 800a2e8:	f007 fb06 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f002 f839 	bl	800c364 <WM_InvalidateWindow>
 800a2f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800a2f4 <FRAMEWIN_CreateUser>:
 800a2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	b08b      	sub	sp, #44	; 0x2c
 800a2fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800a2fc:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800a300:	9400      	str	r4, [sp, #0]
 800a302:	4c35      	ldr	r4, [pc, #212]	; (800a3d8 <FRAMEWIN_CreateUser+0xe4>)
 800a304:	9402      	str	r4, [sp, #8]
 800a306:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a308:	f449 5680 	orr.w	r6, r9, #4096	; 0x1000
 800a30c:	3460      	adds	r4, #96	; 0x60
 800a30e:	9601      	str	r6, [sp, #4]
 800a310:	9403      	str	r4, [sp, #12]
 800a312:	f002 f8e3 	bl	800c4dc <WM_CreateWindowAsChild>
 800a316:	4606      	mov	r6, r0
 800a318:	2800      	cmp	r0, #0
 800a31a:	d058      	beq.n	800a3ce <FRAMEWIN_CreateUser+0xda>
 800a31c:	f007 fade 	bl	80118dc <GUI_ALLOC_LockH>
 800a320:	4d2e      	ldr	r5, [pc, #184]	; (800a3dc <FRAMEWIN_CreateUser+0xe8>)
 800a322:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a324:	9004      	str	r0, [sp, #16]
 800a326:	2230      	movs	r2, #48	; 0x30
 800a328:	f007 ff10 	bl	801214c <WIDGET__Init>
 800a32c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a332:	f858 7d18 	ldr.w	r7, [r8, #-24]!
 800a336:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800a33a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a33c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a33e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a340:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a344:	4d26      	ldr	r5, [pc, #152]	; (800a3e0 <FRAMEWIN_CreateUser+0xec>)
 800a346:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a348:	e884 0003 	stmia.w	r4, {r0, r1}
 800a34c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a34e:	6829      	ldr	r1, [r5, #0]
 800a350:	667b      	str	r3, [r7, #100]	; 0x64
 800a352:	2400      	movs	r4, #0
 800a354:	f8a7 007c 	strh.w	r0, [r7, #124]	; 0x7c
 800a358:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800a35c:	66fc      	str	r4, [r7, #108]	; 0x6c
 800a35e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800a362:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a364:	4640      	mov	r0, r8
 800a366:	f007 fac7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a36a:	4630      	mov	r0, r6
 800a36c:	a905      	add	r1, sp, #20
 800a36e:	f7ff fefc 	bl	800a16a <FRAMEWIN__CalcPositions>
 800a372:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 800a376:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 800a37a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800a37e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800a382:	9403      	str	r4, [sp, #12]
 800a384:	1a7b      	subs	r3, r7, r1
 800a386:	f241 7782 	movw	r7, #6018	; 0x1782
 800a38a:	9701      	str	r7, [sp, #4]
 800a38c:	4f15      	ldr	r7, [pc, #84]	; (800a3e4 <FRAMEWIN_CreateUser+0xf0>)
 800a38e:	9600      	str	r6, [sp, #0]
 800a390:	1a12      	subs	r2, r2, r0
 800a392:	3201      	adds	r2, #1
 800a394:	3301      	adds	r3, #1
 800a396:	9702      	str	r7, [sp, #8]
 800a398:	f002 f8a0 	bl	800c4dc <WM_CreateWindowAsChild>
 800a39c:	4604      	mov	r4, r0
 800a39e:	6828      	ldr	r0, [r5, #0]
 800a3a0:	6841      	ldr	r1, [r0, #4]
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4788      	blx	r1
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f007 fa98 	bl	80118dc <GUI_ALLOC_LockH>
 800a3ac:	9004      	str	r0, [sp, #16]
 800a3ae:	6684      	str	r4, [r0, #104]	; 0x68
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	f007 faa1 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a3b6:	f242 0204 	movw	r2, #8196	; 0x2004
 800a3ba:	ea09 0302 	and.w	r3, r9, r2
 800a3be:	b913      	cbnz	r3, 800a3c6 <FRAMEWIN_CreateUser+0xd2>
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f001 f9d0 	bl	800b766 <WM_DisableMemdev>
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3ca:	f7ff ff75 	bl	800a2b8 <FRAMEWIN_SetText>
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	b00b      	add	sp, #44	; 0x2c
 800a3d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3d6:	bf00      	nop
 800a3d8:	0800a419 	.word	0x0800a419
 800a3dc:	20000130 	.word	0x20000130
 800a3e0:	20000158 	.word	0x20000158
 800a3e4:	08009fd1 	.word	0x08009fd1

0800a3e8 <FRAMEWIN_SetTextAlign>:
 800a3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	b170      	cbz	r0, 800a40e <FRAMEWIN_SetTextAlign+0x26>
 800a3f0:	f007 fa74 	bl	80118dc <GUI_ALLOC_LockH>
 800a3f4:	f9b0 205a 	ldrsh.w	r2, [r0, #90]	; 0x5a
 800a3f8:	9001      	str	r0, [sp, #4]
 800a3fa:	42a2      	cmp	r2, r4
 800a3fc:	d004      	beq.n	800a408 <FRAMEWIN_SetTextAlign+0x20>
 800a3fe:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 800a402:	4628      	mov	r0, r5
 800a404:	f001 ffae 	bl	800c364 <WM_InvalidateWindow>
 800a408:	a801      	add	r0, sp, #4
 800a40a:	f007 fa75 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a40e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800a410 <FRAMEWIN_SetActive>:
 800a410:	b108      	cbz	r0, 800a416 <FRAMEWIN_SetActive+0x6>
 800a412:	f7ff bd9f 	b.w	8009f54 <_SetActive>
 800a416:	4770      	bx	lr

0800a418 <FRAMEWIN_Callback>:
 800a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	6844      	ldr	r4, [r0, #4]
 800a41e:	b08c      	sub	sp, #48	; 0x30
 800a420:	4605      	mov	r5, r0
 800a422:	4620      	mov	r0, r4
 800a424:	f007 fa5a 	bl	80118dc <GUI_ALLOC_LockH>
 800a428:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a42a:	9001      	str	r0, [sp, #4]
 800a42c:	f8d0 7088 	ldr.w	r7, [r0, #136]	; 0x88
 800a430:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 800a434:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 800a438:	f8b0 907c 	ldrh.w	r9, [r0, #124]	; 0x7c
 800a43c:	b113      	cbz	r3, 800a444 <FRAMEWIN_Callback+0x2c>
 800a43e:	f8d3 a000 	ldr.w	sl, [r3]
 800a442:	e000      	b.n	800a446 <FRAMEWIN_Callback+0x2e>
 800a444:	469a      	mov	sl, r3
 800a446:	a801      	add	r0, sp, #4
 800a448:	f007 fa56 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a44c:	b13f      	cbz	r7, 800a45e <FRAMEWIN_Callback+0x46>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4628      	mov	r0, r5
 800a452:	4798      	blx	r3
 800a454:	2800      	cmp	r0, #0
 800a456:	f040 8118 	bne.w	800a68a <FRAMEWIN_Callback+0x272>
 800a45a:	683f      	ldr	r7, [r7, #0]
 800a45c:	e7f6      	b.n	800a44c <FRAMEWIN_Callback+0x34>
 800a45e:	6828      	ldr	r0, [r5, #0]
 800a460:	2817      	cmp	r0, #23
 800a462:	f000 808d 	beq.w	800a580 <FRAMEWIN_Callback+0x168>
 800a466:	dc18      	bgt.n	800a49a <FRAMEWIN_Callback+0x82>
 800a468:	280f      	cmp	r0, #15
 800a46a:	d044      	beq.n	800a4f6 <FRAMEWIN_Callback+0xde>
 800a46c:	dc06      	bgt.n	800a47c <FRAMEWIN_Callback+0x64>
 800a46e:	280b      	cmp	r0, #11
 800a470:	f000 80f7 	beq.w	800a662 <FRAMEWIN_Callback+0x24a>
 800a474:	280d      	cmp	r0, #13
 800a476:	f040 8100 	bne.w	800a67a <FRAMEWIN_Callback+0x262>
 800a47a:	e0c2      	b.n	800a602 <FRAMEWIN_Callback+0x1ea>
 800a47c:	2811      	cmp	r0, #17
 800a47e:	d01c      	beq.n	800a4ba <FRAMEWIN_Callback+0xa2>
 800a480:	2814      	cmp	r0, #20
 800a482:	f040 80fa 	bne.w	800a67a <FRAMEWIN_Callback+0x262>
 800a486:	4620      	mov	r0, r4
 800a488:	a907      	add	r1, sp, #28
 800a48a:	f7ff fe6e 	bl	800a16a <FRAMEWIN__CalcPositions>
 800a48e:	ab08      	add	r3, sp, #32
 800a490:	cb03      	ldmia	r3!, {r0, r1}
 800a492:	68ea      	ldr	r2, [r5, #12]
 800a494:	6010      	str	r0, [r2, #0]
 800a496:	6051      	str	r1, [r2, #4]
 800a498:	e0f7      	b.n	800a68a <FRAMEWIN_Callback+0x272>
 800a49a:	2826      	cmp	r0, #38	; 0x26
 800a49c:	d073      	beq.n	800a586 <FRAMEWIN_Callback+0x16e>
 800a49e:	dc05      	bgt.n	800a4ac <FRAMEWIN_Callback+0x94>
 800a4a0:	281e      	cmp	r0, #30
 800a4a2:	d07d      	beq.n	800a5a0 <FRAMEWIN_Callback+0x188>
 800a4a4:	2820      	cmp	r0, #32
 800a4a6:	f040 80e8 	bne.w	800a67a <FRAMEWIN_Callback+0x262>
 800a4aa:	e0ba      	b.n	800a622 <FRAMEWIN_Callback+0x20a>
 800a4ac:	282a      	cmp	r0, #42	; 0x2a
 800a4ae:	d014      	beq.n	800a4da <FRAMEWIN_Callback+0xc2>
 800a4b0:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800a4b4:	f040 80e1 	bne.w	800a67a <FRAMEWIN_Callback+0x262>
 800a4b8:	e024      	b.n	800a504 <FRAMEWIN_Callback+0xec>
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	68ee      	ldr	r6, [r5, #12]
 800a4be:	f007 fa0d 	bl	80118dc <GUI_ALLOC_LockH>
 800a4c2:	9002      	str	r0, [sp, #8]
 800a4c4:	8931      	ldrh	r1, [r6, #8]
 800a4c6:	2901      	cmp	r1, #1
 800a4c8:	d105      	bne.n	800a4d6 <FRAMEWIN_Callback+0xbe>
 800a4ca:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 800a4ce:	f442 7380 	orr.w	r3, r2, #256	; 0x100
 800a4d2:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 800a4d6:	a802      	add	r0, sp, #8
 800a4d8:	e0cd      	b.n	800a676 <FRAMEWIN_Callback+0x25e>
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f007 f9fe 	bl	80118dc <GUI_ALLOC_LockH>
 800a4e0:	68eb      	ldr	r3, [r5, #12]
 800a4e2:	9001      	str	r0, [sp, #4]
 800a4e4:	b113      	cbz	r3, 800a4ec <FRAMEWIN_Callback+0xd4>
 800a4e6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 800a4ea:	e002      	b.n	800a4f2 <FRAMEWIN_Callback+0xda>
 800a4ec:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800a4f0:	60e8      	str	r0, [r5, #12]
 800a4f2:	a801      	add	r0, sp, #4
 800a4f4:	e041      	b.n	800a57a <FRAMEWIN_Callback+0x162>
 800a4f6:	f1ba 0f00 	cmp.w	sl, #0
 800a4fa:	f000 80be 	beq.w	800a67a <FRAMEWIN_Callback+0x262>
 800a4fe:	4620      	mov	r0, r4
 800a500:	47d0      	blx	sl
 800a502:	e0ba      	b.n	800a67a <FRAMEWIN_Callback+0x262>
 800a504:	4620      	mov	r0, r4
 800a506:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800a50a:	f007 f9e7 	bl	80118dc <GUI_ALLOC_LockH>
 800a50e:	ae0c      	add	r6, sp, #48	; 0x30
 800a510:	f8b0 707c 	ldrh.w	r7, [r0, #124]	; 0x7c
 800a514:	f846 0d28 	str.w	r0, [r6, #-40]!
 800a518:	4630      	mov	r0, r6
 800a51a:	f007 f9ed 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a51e:	68e8      	ldr	r0, [r5, #12]
 800a520:	2800      	cmp	r0, #0
 800a522:	f000 80b2 	beq.w	800a68a <FRAMEWIN_Callback+0x272>
 800a526:	f898 1008 	ldrb.w	r1, [r8, #8]
 800a52a:	b1d9      	cbz	r1, 800a564 <FRAMEWIN_Callback+0x14c>
 800a52c:	f007 0008 	and.w	r0, r7, #8
 800a530:	b281      	uxth	r1, r0
 800a532:	b911      	cbnz	r1, 800a53a <FRAMEWIN_Callback+0x122>
 800a534:	4620      	mov	r0, r4
 800a536:	f000 fed9 	bl	800b2ec <WM_SetFocus>
 800a53a:	4620      	mov	r0, r4
 800a53c:	f001 fa42 	bl	800b9c4 <WM_BringToTop>
 800a540:	f407 7288 	and.w	r2, r7, #272	; 0x110
 800a544:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800a548:	f040 809f 	bne.w	800a68a <FRAMEWIN_Callback+0x272>
 800a54c:	f007 0780 	and.w	r7, r7, #128	; 0x80
 800a550:	b2bb      	uxth	r3, r7
 800a552:	2b00      	cmp	r3, #0
 800a554:	f040 8099 	bne.w	800a68a <FRAMEWIN_Callback+0x272>
 800a558:	4620      	mov	r0, r4
 800a55a:	4641      	mov	r1, r8
 800a55c:	2205      	movs	r2, #5
 800a55e:	f000 ff31 	bl	800b3c4 <WM_SetCaptureMove>
 800a562:	e092      	b.n	800a68a <FRAMEWIN_Callback+0x272>
 800a564:	4620      	mov	r0, r4
 800a566:	f007 f9b9 	bl	80118dc <GUI_ALLOC_LockH>
 800a56a:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 800a56e:	9002      	str	r0, [sp, #8]
 800a570:	f422 7380 	bic.w	r3, r2, #256	; 0x100
 800a574:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 800a578:	4630      	mov	r0, r6
 800a57a:	f007 f9bd 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a57e:	e084      	b.n	800a68a <FRAMEWIN_Callback+0x272>
 800a580:	f8c5 800c 	str.w	r8, [r5, #12]
 800a584:	e081      	b.n	800a68a <FRAMEWIN_Callback+0x272>
 800a586:	68e9      	ldr	r1, [r5, #12]
 800a588:	2902      	cmp	r1, #2
 800a58a:	d17e      	bne.n	800a68a <FRAMEWIN_Callback+0x272>
 800a58c:	9106      	str	r1, [sp, #24]
 800a58e:	a90c      	add	r1, sp, #48	; 0x30
 800a590:	2227      	movs	r2, #39	; 0x27
 800a592:	f841 2d24 	str.w	r2, [r1, #-36]!
 800a596:	68a8      	ldr	r0, [r5, #8]
 800a598:	9405      	str	r4, [sp, #20]
 800a59a:	f000 fd5b 	bl	800b054 <WM__SendMessage>
 800a59e:	e074      	b.n	800a68a <FRAMEWIN_Callback+0x272>
 800a5a0:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800a5a4:	f1b9 0f01 	cmp.w	r9, #1
 800a5a8:	d126      	bne.n	800a5f8 <FRAMEWIN_Callback+0x1e0>
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f001 f8e6 	bl	800b77c <WM_IsWindow>
 800a5b0:	b158      	cbz	r0, 800a5ca <FRAMEWIN_Callback+0x1b2>
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f000 fe9a 	bl	800b2ec <WM_SetFocus>
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f001 f905 	bl	800b7c8 <WM_HasFocus>
 800a5be:	b198      	cbz	r0, 800a5e8 <FRAMEWIN_Callback+0x1d0>
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	f007 fd99 	bl	80120fa <WIDGET_OrState>
 800a5c8:	e00e      	b.n	800a5e8 <FRAMEWIN_Callback+0x1d0>
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	f000 fe5c 	bl	800b288 <WM_SetFocusOnNextChild>
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f007 f982 	bl	80118dc <GUI_ALLOC_LockH>
 800a5d8:	ab0c      	add	r3, sp, #48	; 0x30
 800a5da:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 800a5de:	f843 0d2c 	str.w	r0, [r3, #-44]!
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f007 f988 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	f7ff ff10 	bl	800a410 <FRAMEWIN_SetActive>
 800a5f0:	2e00      	cmp	r6, #0
 800a5f2:	d14a      	bne.n	800a68a <FRAMEWIN_Callback+0x272>
 800a5f4:	60ee      	str	r6, [r5, #12]
 800a5f6:	e048      	b.n	800a68a <FRAMEWIN_Callback+0x272>
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	f7ff ff08 	bl	800a410 <FRAMEWIN_SetActive>
 800a600:	e043      	b.n	800a68a <FRAMEWIN_Callback+0x272>
 800a602:	f009 0908 	and.w	r9, r9, #8
 800a606:	fa1f f189 	uxth.w	r1, r9
 800a60a:	2900      	cmp	r1, #0
 800a60c:	d135      	bne.n	800a67a <FRAMEWIN_Callback+0x262>
 800a60e:	68ea      	ldr	r2, [r5, #12]
 800a610:	68d3      	ldr	r3, [r2, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d031      	beq.n	800a67a <FRAMEWIN_Callback+0x262>
 800a616:	7a18      	ldrb	r0, [r3, #8]
 800a618:	b378      	cbz	r0, 800a67a <FRAMEWIN_Callback+0x262>
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fe66 	bl	800b2ec <WM_SetFocus>
 800a620:	e02b      	b.n	800a67a <FRAMEWIN_Callback+0x262>
 800a622:	68ee      	ldr	r6, [r5, #12]
 800a624:	b34e      	cbz	r6, 800a67a <FRAMEWIN_Callback+0x262>
 800a626:	6870      	ldr	r0, [r6, #4]
 800a628:	4621      	mov	r1, r4
 800a62a:	f000 fd4b 	bl	800b0c4 <WM__IsAncestorOrSelf>
 800a62e:	b120      	cbz	r0, 800a63a <FRAMEWIN_Callback+0x222>
 800a630:	4620      	mov	r0, r4
 800a632:	2101      	movs	r1, #1
 800a634:	f7ff fc8e 	bl	8009f54 <_SetActive>
 800a638:	e01f      	b.n	800a67a <FRAMEWIN_Callback+0x262>
 800a63a:	4620      	mov	r0, r4
 800a63c:	4639      	mov	r1, r7
 800a63e:	f7ff fc89 	bl	8009f54 <_SetActive>
 800a642:	6830      	ldr	r0, [r6, #0]
 800a644:	4621      	mov	r1, r4
 800a646:	f000 fd2c 	bl	800b0a2 <WM__IsAncestor>
 800a64a:	b1b0      	cbz	r0, 800a67a <FRAMEWIN_Callback+0x262>
 800a64c:	4620      	mov	r0, r4
 800a64e:	f007 f945 	bl	80118dc <GUI_ALLOC_LockH>
 800a652:	a90c      	add	r1, sp, #48	; 0x30
 800a654:	6832      	ldr	r2, [r6, #0]
 800a656:	f841 0d28 	str.w	r0, [r1, #-40]!
 800a65a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800a65e:	4608      	mov	r0, r1
 800a660:	e009      	b.n	800a676 <FRAMEWIN_Callback+0x25e>
 800a662:	4620      	mov	r0, r4
 800a664:	f007 f93a 	bl	80118dc <GUI_ALLOC_LockH>
 800a668:	ae0c      	add	r6, sp, #48	; 0x30
 800a66a:	f846 0d2c 	str.w	r0, [r6, #-44]!
 800a66e:	3070      	adds	r0, #112	; 0x70
 800a670:	f007 fb86 	bl	8011d80 <GUI_ALLOC_FreePtr>
 800a674:	4630      	mov	r0, r6
 800a676:	f007 f93f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a67a:	4620      	mov	r0, r4
 800a67c:	4629      	mov	r1, r5
 800a67e:	f007 fd6d 	bl	801215c <WIDGET_HandleActive>
 800a682:	b110      	cbz	r0, 800a68a <FRAMEWIN_Callback+0x272>
 800a684:	4628      	mov	r0, r5
 800a686:	f002 fa97 	bl	800cbb8 <WM_DefaultProc>
 800a68a:	b00c      	add	sp, #48	; 0x30
 800a68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a690 <DIALOG_GetBkColor>:
 800a690:	4b01      	ldr	r3, [pc, #4]	; (800a698 <DIALOG_GetBkColor+0x8>)
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	2000015c 	.word	0x2000015c

0800a69c <GUI_CreateDialogBox>:
 800a69c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	4688      	mov	r8, r1
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	461e      	mov	r6, r3
 800a6a8:	b913      	cbnz	r3, 800a6b0 <GUI_CreateDialogBox+0x14>
 800a6aa:	f001 f93f 	bl	800b92c <WM_GetDesktopWindow>
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	9400      	str	r4, [sp, #0]
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	682c      	ldr	r4, [r5, #0]
 800a6b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	47a0      	blx	r4
 800a6be:	4604      	mov	r4, r0
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d037      	beq.n	800a734 <GUI_CreateDialogBox+0x98>
 800a6c4:	f001 f93e 	bl	800b944 <WM_GetClientWindow>
 800a6c8:	8a69      	ldrh	r1, [r5, #18]
 800a6ca:	4607      	mov	r7, r0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f007 fd14 	bl	80120fa <WIDGET_OrState>
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fd2f 	bl	800b136 <WM_ShowWindow>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6de:	f000 fd2a 	bl	800b136 <WM_ShowWindow>
 800a6e2:	f1b8 0f00 	cmp.w	r8, #0
 800a6e6:	dd0f      	ble.n	800a708 <GUI_CreateDialogBox+0x6c>
 800a6e8:	f855 cf1c 	ldr.w	ip, [r5, #28]!
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	9200      	str	r2, [sp, #0]
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	47e0      	blx	ip
 800a6f8:	4681      	mov	r9, r0
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	d1ed      	bne.n	800a6da <GUI_CreateDialogBox+0x3e>
 800a6fe:	4620      	mov	r0, r4
 800a700:	f001 fe72 	bl	800c3e8 <WM_DeleteWindow>
 800a704:	464c      	mov	r4, r9
 800a706:	e015      	b.n	800a734 <GUI_CreateDialogBox+0x98>
 800a708:	211d      	movs	r1, #29
 800a70a:	4638      	mov	r0, r7
 800a70c:	f000 fef1 	bl	800b4f2 <WM_SendMessageNoPara>
 800a710:	1c73      	adds	r3, r6, #1
 800a712:	d00f      	beq.n	800a734 <GUI_CreateDialogBox+0x98>
 800a714:	f001 f8d6 	bl	800b8c4 <WM_GetFocussedWindow>
 800a718:	b150      	cbz	r0, 800a730 <GUI_CreateDialogBox+0x94>
 800a71a:	f007 f8d5 	bl	80118c8 <GUI_ALLOC_h2p>
 800a71e:	6980      	ldr	r0, [r0, #24]
 800a720:	42a0      	cmp	r0, r4
 800a722:	d007      	beq.n	800a734 <GUI_CreateDialogBox+0x98>
 800a724:	2800      	cmp	r0, #0
 800a726:	d1f8      	bne.n	800a71a <GUI_CreateDialogBox+0x7e>
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 fdad 	bl	800b288 <WM_SetFocusOnNextChild>
 800a72e:	e001      	b.n	800a734 <GUI_CreateDialogBox+0x98>
 800a730:	42a6      	cmp	r6, r4
 800a732:	d1f9      	bne.n	800a728 <GUI_CreateDialogBox+0x8c>
 800a734:	4620      	mov	r0, r4
 800a736:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800a73a <CHECKBOX_SetText>:
 800a73a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a73c:	460e      	mov	r6, r1
 800a73e:	4604      	mov	r4, r0
 800a740:	b1e0      	cbz	r0, 800a77c <CHECKBOX_SetText+0x42>
 800a742:	b1d9      	cbz	r1, 800a77c <CHECKBOX_SetText+0x42>
 800a744:	f007 f8ca 	bl	80118dc <GUI_ALLOC_LockH>
 800a748:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800a74a:	9000      	str	r0, [sp, #0]
 800a74c:	4668      	mov	r0, sp
 800a74e:	9501      	str	r5, [sp, #4]
 800a750:	f007 f8d2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a754:	a801      	add	r0, sp, #4
 800a756:	4631      	mov	r1, r6
 800a758:	f005 f848 	bl	800f7ec <GUI__SetText>
 800a75c:	b170      	cbz	r0, 800a77c <CHECKBOX_SetText+0x42>
 800a75e:	9b01      	ldr	r3, [sp, #4]
 800a760:	42ab      	cmp	r3, r5
 800a762:	d008      	beq.n	800a776 <CHECKBOX_SetText+0x3c>
 800a764:	4620      	mov	r0, r4
 800a766:	f007 f8b9 	bl	80118dc <GUI_ALLOC_LockH>
 800a76a:	9901      	ldr	r1, [sp, #4]
 800a76c:	9000      	str	r0, [sp, #0]
 800a76e:	6781      	str	r1, [r0, #120]	; 0x78
 800a770:	4668      	mov	r0, sp
 800a772:	f007 f8c1 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a776:	4620      	mov	r0, r4
 800a778:	f001 fdf4 	bl	800c364 <WM_InvalidateWindow>
 800a77c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800a77e <CHECKBOX_SetState>:
 800a77e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a780:	460d      	mov	r5, r1
 800a782:	4604      	mov	r4, r0
 800a784:	b1b8      	cbz	r0, 800a7b6 <CHECKBOX_SetState+0x38>
 800a786:	f007 f8a9 	bl	80118dc <GUI_ALLOC_LockH>
 800a78a:	4602      	mov	r2, r0
 800a78c:	a802      	add	r0, sp, #8
 800a78e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
 800a792:	f840 2d04 	str.w	r2, [r0, #-4]!
 800a796:	428d      	cmp	r5, r1
 800a798:	d20b      	bcs.n	800a7b2 <CHECKBOX_SetState+0x34>
 800a79a:	f882 5075 	strb.w	r5, [r2, #117]	; 0x75
 800a79e:	f007 f8ab 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f001 fdde 	bl	800c364 <WM_InvalidateWindow>
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	2105      	movs	r1, #5
 800a7ac:	f000 ff1d 	bl	800b5ea <WM_NotifyParent>
 800a7b0:	e001      	b.n	800a7b6 <CHECKBOX_SetState+0x38>
 800a7b2:	f007 f8a1 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a7b6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800a7b8 <CHECKBOX_SetFont>:
 800a7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	4605      	mov	r5, r0
 800a7be:	b160      	cbz	r0, 800a7da <CHECKBOX_SetFont+0x22>
 800a7c0:	f007 f88c 	bl	80118dc <GUI_ALLOC_LockH>
 800a7c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a7c6:	9001      	str	r0, [sp, #4]
 800a7c8:	42a2      	cmp	r2, r4
 800a7ca:	d003      	beq.n	800a7d4 <CHECKBOX_SetFont+0x1c>
 800a7cc:	6344      	str	r4, [r0, #52]	; 0x34
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f001 fdc8 	bl	800c364 <WM_InvalidateWindow>
 800a7d4:	a801      	add	r0, sp, #4
 800a7d6:	f007 f88f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a7da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800a7dc <CHECKBOX_CreateIndirect>:
 800a7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800a7e4:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800a7e8:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800a7ec:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800a7f0:	9100      	str	r1, [sp, #0]
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	9101      	str	r1, [sp, #4]
 800a7f6:	8a44      	ldrh	r4, [r0, #18]
 800a7f8:	9402      	str	r4, [sp, #8]
 800a7fa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800a7fe:	9103      	str	r1, [sp, #12]
 800a800:	6984      	ldr	r4, [r0, #24]
 800a802:	18f9      	adds	r1, r7, r3
 800a804:	eb0e 0002 	add.w	r0, lr, r2
 800a808:	9404      	str	r4, [sp, #16]
 800a80a:	4632      	mov	r2, r6
 800a80c:	462b      	mov	r3, r5
 800a80e:	f000 f8ab 	bl	800a968 <CHECKBOX_CreateUser>
 800a812:	b007      	add	sp, #28
 800a814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a818 <CHECKBOX__GetButtonSize>:
 800a818:	b500      	push	{lr}
 800a81a:	b08b      	sub	sp, #44	; 0x2c
 800a81c:	2100      	movs	r1, #0
 800a81e:	2224      	movs	r2, #36	; 0x24
 800a820:	a801      	add	r0, sp, #4
 800a822:	f00b fb4b 	bl	8015ebc <memset>
 800a826:	4805      	ldr	r0, [pc, #20]	; (800a83c <CHECKBOX__GetButtonSize+0x24>)
 800a828:	6801      	ldr	r1, [r0, #0]
 800a82a:	688a      	ldr	r2, [r1, #8]
 800a82c:	2319      	movs	r3, #25
 800a82e:	9302      	str	r3, [sp, #8]
 800a830:	a801      	add	r0, sp, #4
 800a832:	6853      	ldr	r3, [r2, #4]
 800a834:	4798      	blx	r3
 800a836:	b00b      	add	sp, #44	; 0x2c
 800a838:	bd00      	pop	{pc}
 800a83a:	bf00      	nop
 800a83c:	2000019c 	.word	0x2000019c

0800a840 <CHECKBOX_Callback>:
 800a840:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	6844      	ldr	r4, [r0, #4]
 800a846:	4605      	mov	r5, r0
 800a848:	4629      	mov	r1, r5
 800a84a:	4620      	mov	r0, r4
 800a84c:	f007 fc86 	bl	801215c <WIDGET_HandleActive>
 800a850:	2800      	cmp	r0, #0
 800a852:	f000 8086 	beq.w	800a962 <CHECKBOX_Callback+0x122>
 800a856:	682b      	ldr	r3, [r5, #0]
 800a858:	2b0e      	cmp	r3, #14
 800a85a:	d015      	beq.n	800a888 <CHECKBOX_Callback+0x48>
 800a85c:	dc0e      	bgt.n	800a87c <CHECKBOX_Callback+0x3c>
 800a85e:	2b0b      	cmp	r3, #11
 800a860:	d17c      	bne.n	800a95c <CHECKBOX_Callback+0x11c>
 800a862:	4620      	mov	r0, r4
 800a864:	f007 f83a 	bl	80118dc <GUI_ALLOC_LockH>
 800a868:	ac02      	add	r4, sp, #8
 800a86a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a86e:	3078      	adds	r0, #120	; 0x78
 800a870:	f007 fa86 	bl	8011d80 <GUI_ALLOC_FreePtr>
 800a874:	4620      	mov	r0, r4
 800a876:	f007 f83f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a87a:	e06f      	b.n	800a95c <CHECKBOX_Callback+0x11c>
 800a87c:	2b0f      	cmp	r3, #15
 800a87e:	d025      	beq.n	800a8cc <CHECKBOX_Callback+0x8c>
 800a880:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a884:	d16a      	bne.n	800a95c <CHECKBOX_Callback+0x11c>
 800a886:	e031      	b.n	800a8ec <CHECKBOX_Callback+0xac>
 800a888:	4620      	mov	r0, r4
 800a88a:	f007 f827 	bl	80118dc <GUI_ALLOC_LockH>
 800a88e:	a902      	add	r1, sp, #8
 800a890:	f841 0d04 	str.w	r0, [r1, #-4]!
 800a894:	f890 6074 	ldrb.w	r6, [r0, #116]	; 0x74
 800a898:	f890 7075 	ldrb.w	r7, [r0, #117]	; 0x75
 800a89c:	4608      	mov	r0, r1
 800a89e:	f007 f82b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 fbf4 	bl	800b090 <WM__IsEnabled>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d057      	beq.n	800a95c <CHECKBOX_Callback+0x11c>
 800a8ac:	68e8      	ldr	r0, [r5, #12]
 800a8ae:	6842      	ldr	r2, [r0, #4]
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	dd53      	ble.n	800a95c <CHECKBOX_Callback+0x11c>
 800a8b4:	6803      	ldr	r3, [r0, #0]
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d150      	bne.n	800a95c <CHECKBOX_Callback+0x11c>
 800a8ba:	1c7a      	adds	r2, r7, #1
 800a8bc:	fb92 f1f6 	sdiv	r1, r2, r6
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	fb06 2111 	mls	r1, r6, r1, r2
 800a8c6:	f7ff ff5a 	bl	800a77e <CHECKBOX_SetState>
 800a8ca:	e047      	b.n	800a95c <CHECKBOX_Callback+0x11c>
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f007 f805 	bl	80118dc <GUI_ALLOC_LockH>
 800a8d2:	ab02      	add	r3, sp, #8
 800a8d4:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a8d8:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800a8da:	682d      	ldr	r5, [r5, #0]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f007 f80b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a8e2:	2d00      	cmp	r5, #0
 800a8e4:	d03d      	beq.n	800a962 <CHECKBOX_Callback+0x122>
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	47a8      	blx	r5
 800a8ea:	e03a      	b.n	800a962 <CHECKBOX_Callback+0x122>
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f006 fff5 	bl	80118dc <GUI_ALLOC_LockH>
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	a802      	add	r0, sp, #8
 800a8f6:	f8b1 8030 	ldrh.w	r8, [r1, #48]	; 0x30
 800a8fa:	f840 1d04 	str.w	r1, [r0, #-4]!
 800a8fe:	f891 7074 	ldrb.w	r7, [r1, #116]	; 0x74
 800a902:	f891 9075 	ldrb.w	r9, [r1, #117]	; 0x75
 800a906:	f006 fff7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800a90a:	68ee      	ldr	r6, [r5, #12]
 800a90c:	b1b6      	cbz	r6, 800a93c <CHECKBOX_Callback+0xfc>
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 ff68 	bl	800b7e4 <WM_HasCaptured>
 800a914:	4682      	mov	sl, r0
 800a916:	b998      	cbnz	r0, 800a940 <CHECKBOX_Callback+0x100>
 800a918:	7a30      	ldrb	r0, [r6, #8]
 800a91a:	b1a0      	cbz	r0, 800a946 <CHECKBOX_Callback+0x106>
 800a91c:	4620      	mov	r0, r4
 800a91e:	2101      	movs	r1, #1
 800a920:	f109 0901 	add.w	r9, r9, #1
 800a924:	f000 fdb6 	bl	800b494 <WM_SetCapture>
 800a928:	fb99 f2f7 	sdiv	r2, r9, r7
 800a92c:	fb07 9112 	mls	r1, r7, r2, r9
 800a930:	4620      	mov	r0, r4
 800a932:	f7ff ff24 	bl	800a77e <CHECKBOX_SetState>
 800a936:	4656      	mov	r6, sl
 800a938:	2101      	movs	r1, #1
 800a93a:	e006      	b.n	800a94a <CHECKBOX_Callback+0x10a>
 800a93c:	2103      	movs	r1, #3
 800a93e:	e004      	b.n	800a94a <CHECKBOX_Callback+0x10a>
 800a940:	2600      	movs	r6, #0
 800a942:	4631      	mov	r1, r6
 800a944:	e001      	b.n	800a94a <CHECKBOX_Callback+0x10a>
 800a946:	2601      	movs	r6, #1
 800a948:	2102      	movs	r1, #2
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 fe4d 	bl	800b5ea <WM_NotifyParent>
 800a950:	2e01      	cmp	r6, #1
 800a952:	d103      	bne.n	800a95c <CHECKBOX_Callback+0x11c>
 800a954:	fa0f f088 	sxth.w	r0, r8
 800a958:	f005 fd2a 	bl	80103b0 <GUI_StoreKey>
 800a95c:	4628      	mov	r0, r5
 800a95e:	f002 f92b 	bl	800cbb8 <WM_DefaultProc>
 800a962:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800a968 <CHECKBOX_CreateUser>:
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	b086      	sub	sp, #24
 800a96e:	4680      	mov	r8, r0
 800a970:	460f      	mov	r7, r1
 800a972:	461c      	mov	r4, r3
 800a974:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a976:	4616      	mov	r6, r2
 800a978:	b92a      	cbnz	r2, 800a986 <CHECKBOX_CreateUser+0x1e>
 800a97a:	4b27      	ldr	r3, [pc, #156]	; (800aa18 <CHECKBOX_CreateUser+0xb0>)
 800a97c:	6818      	ldr	r0, [r3, #0]
 800a97e:	6881      	ldr	r1, [r0, #8]
 800a980:	680a      	ldr	r2, [r1, #0]
 800a982:	4790      	blx	r2
 800a984:	4606      	mov	r6, r0
 800a986:	b92c      	cbnz	r4, 800a994 <CHECKBOX_CreateUser+0x2c>
 800a988:	4c23      	ldr	r4, [pc, #140]	; (800aa18 <CHECKBOX_CreateUser+0xb0>)
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	6898      	ldr	r0, [r3, #8]
 800a98e:	6801      	ldr	r1, [r0, #0]
 800a990:	4788      	blx	r1
 800a992:	4604      	mov	r4, r0
 800a994:	4a21      	ldr	r2, [pc, #132]	; (800aa1c <CHECKBOX_CreateUser+0xb4>)
 800a996:	4922      	ldr	r1, [pc, #136]	; (800aa20 <CHECKBOX_CreateUser+0xb8>)
 800a998:	68d0      	ldr	r0, [r2, #12]
 800a99a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a99c:	9102      	str	r1, [sp, #8]
 800a99e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800a9a2:	4298      	cmp	r0, r3
 800a9a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9a6:	bf08      	it	eq
 800a9a8:	f045 0501 	orreq.w	r5, r5, #1
 800a9ac:	3254      	adds	r2, #84	; 0x54
 800a9ae:	e88d 0028 	stmia.w	sp, {r3, r5}
 800a9b2:	9203      	str	r2, [sp, #12]
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	4632      	mov	r2, r6
 800a9ba:	4623      	mov	r3, r4
 800a9bc:	f001 fd8e 	bl	800c4dc <WM_CreateWindowAsChild>
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	b328      	cbz	r0, 800aa10 <CHECKBOX_CreateUser+0xa8>
 800a9c4:	f006 ff8a 	bl	80118dc <GUI_ALLOC_LockH>
 800a9c8:	4d14      	ldr	r5, [pc, #80]	; (800aa1c <CHECKBOX_CreateUser+0xb4>)
 800a9ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9cc:	9005      	str	r0, [sp, #20]
 800a9ce:	2210      	movs	r2, #16
 800a9d0:	f007 fbbc 	bl	801214c <WIDGET__Init>
 800a9d4:	af06      	add	r7, sp, #24
 800a9d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9d8:	f857 6d04 	ldr.w	r6, [r7, #-4]!
 800a9dc:	f106 0434 	add.w	r4, r6, #52	; 0x34
 800a9e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a9ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a9f2:	4c09      	ldr	r4, [pc, #36]	; (800aa18 <CHECKBOX_CreateUser+0xb0>)
 800a9f4:	6820      	ldr	r0, [r4, #0]
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	210f      	movs	r1, #15
 800a9fa:	6730      	str	r0, [r6, #112]	; 0x70
 800a9fc:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
 800aa00:	4638      	mov	r0, r7
 800aa02:	67f1      	str	r1, [r6, #124]	; 0x7c
 800aa04:	f006 ff78 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800aa08:	6822      	ldr	r2, [r4, #0]
 800aa0a:	4640      	mov	r0, r8
 800aa0c:	6853      	ldr	r3, [r2, #4]
 800aa0e:	4798      	blx	r3
 800aa10:	4640      	mov	r0, r8
 800aa12:	b006      	add	sp, #24
 800aa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa18:	2000019c 	.word	0x2000019c
 800aa1c:	20000160 	.word	0x20000160
 800aa20:	0800a841 	.word	0x0800a841

0800aa24 <BUTTON_DrawSkinFlex>:
 800aa24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa26:	6883      	ldr	r3, [r0, #8]
 800aa28:	4a8b      	ldr	r2, [pc, #556]	; (800ac58 <BUTTON_DrawSkinFlex+0x234>)
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	6840      	ldr	r0, [r0, #4]
 800aa2e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800aa32:	2805      	cmp	r0, #5
 800aa34:	b089      	sub	sp, #36	; 0x24
 800aa36:	d00e      	beq.n	800aa56 <BUTTON_DrawSkinFlex+0x32>
 800aa38:	dc06      	bgt.n	800aa48 <BUTTON_DrawSkinFlex+0x24>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f040 8108 	bne.w	800ac50 <BUTTON_DrawSkinFlex+0x22c>
 800aa40:	6820      	ldr	r0, [r4, #0]
 800aa42:	f000 fb97 	bl	800b174 <WM_SetHasTrans>
 800aa46:	e103      	b.n	800ac50 <BUTTON_DrawSkinFlex+0x22c>
 800aa48:	2806      	cmp	r0, #6
 800aa4a:	f000 808a 	beq.w	800ab62 <BUTTON_DrawSkinFlex+0x13e>
 800aa4e:	2812      	cmp	r0, #18
 800aa50:	f040 80fe 	bne.w	800ac50 <BUTTON_DrawSkinFlex+0x22c>
 800aa54:	e0ab      	b.n	800abae <BUTTON_DrawSkinFlex+0x18a>
 800aa56:	69ee      	ldr	r6, [r5, #28]
 800aa58:	2e00      	cmp	r6, #0
 800aa5a:	d052      	beq.n	800ab02 <BUTTON_DrawSkinFlex+0xde>
 800aa5c:	9600      	str	r6, [sp, #0]
 800aa5e:	682e      	ldr	r6, [r5, #0]
 800aa60:	9601      	str	r6, [sp, #4]
 800aa62:	6868      	ldr	r0, [r5, #4]
 800aa64:	9002      	str	r0, [sp, #8]
 800aa66:	68ab      	ldr	r3, [r5, #8]
 800aa68:	f104 0210 	add.w	r2, r4, #16
 800aa6c:	9303      	str	r3, [sp, #12]
 800aa6e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800aa70:	f005 f89a 	bl	800fba8 <GUI__DrawTwinArc4>
 800aa74:	2600      	movs	r6, #0
 800aa76:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800aa7a:	f005 fc05 	bl	8010288 <GUI_SetColor>
 800aa7e:	69ef      	ldr	r7, [r5, #28]
 800aa80:	69a3      	ldr	r3, [r4, #24]
 800aa82:	6960      	ldr	r0, [r4, #20]
 800aa84:	6921      	ldr	r1, [r4, #16]
 800aa86:	1bda      	subs	r2, r3, r7
 800aa88:	1830      	adds	r0, r6, r0
 800aa8a:	1879      	adds	r1, r7, r1
 800aa8c:	f005 fdaa 	bl	80105e4 <GUI_DrawHLine>
 800aa90:	69ef      	ldr	r7, [r5, #28]
 800aa92:	69e0      	ldr	r0, [r4, #28]
 800aa94:	6921      	ldr	r1, [r4, #16]
 800aa96:	69a2      	ldr	r2, [r4, #24]
 800aa98:	1b80      	subs	r0, r0, r6
 800aa9a:	1879      	adds	r1, r7, r1
 800aa9c:	1bd2      	subs	r2, r2, r7
 800aa9e:	f005 fda1 	bl	80105e4 <GUI_DrawHLine>
 800aaa2:	69eb      	ldr	r3, [r5, #28]
 800aaa4:	6927      	ldr	r7, [r4, #16]
 800aaa6:	6961      	ldr	r1, [r4, #20]
 800aaa8:	69e2      	ldr	r2, [r4, #28]
 800aaaa:	19f0      	adds	r0, r6, r7
 800aaac:	1859      	adds	r1, r3, r1
 800aaae:	1ad2      	subs	r2, r2, r3
 800aab0:	f005 fd56 	bl	8010560 <GUI_DrawVLine>
 800aab4:	69eb      	ldr	r3, [r5, #28]
 800aab6:	69a0      	ldr	r0, [r4, #24]
 800aab8:	6967      	ldr	r7, [r4, #20]
 800aaba:	69e2      	ldr	r2, [r4, #28]
 800aabc:	1b80      	subs	r0, r0, r6
 800aabe:	19d9      	adds	r1, r3, r7
 800aac0:	1ad2      	subs	r2, r2, r3
 800aac2:	3601      	adds	r6, #1
 800aac4:	f005 fd4c 	bl	8010560 <GUI_DrawVLine>
 800aac8:	2e02      	cmp	r6, #2
 800aaca:	d1d4      	bne.n	800aa76 <BUTTON_DrawSkinFlex+0x52>
 800aacc:	68a8      	ldr	r0, [r5, #8]
 800aace:	f005 fbdb 	bl	8010288 <GUI_SetColor>
 800aad2:	69eb      	ldr	r3, [r5, #28]
 800aad4:	6920      	ldr	r0, [r4, #16]
 800aad6:	69e6      	ldr	r6, [r4, #28]
 800aad8:	6961      	ldr	r1, [r4, #20]
 800aada:	18c7      	adds	r7, r0, r3
 800aadc:	1859      	adds	r1, r3, r1
 800aade:	1e7a      	subs	r2, r7, #1
 800aae0:	1af3      	subs	r3, r6, r3
 800aae2:	3002      	adds	r0, #2
 800aae4:	f005 fcfc 	bl	80104e0 <GUI_FillRect>
 800aae8:	69eb      	ldr	r3, [r5, #28]
 800aaea:	69a2      	ldr	r2, [r4, #24]
 800aaec:	6961      	ldr	r1, [r4, #20]
 800aaee:	69e7      	ldr	r7, [r4, #28]
 800aaf0:	1ad0      	subs	r0, r2, r3
 800aaf2:	1859      	adds	r1, r3, r1
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	3a02      	subs	r2, #2
 800aaf8:	1afb      	subs	r3, r7, r3
 800aafa:	f005 fcf1 	bl	80104e0 <GUI_FillRect>
 800aafe:	69ee      	ldr	r6, [r5, #28]
 800ab00:	e010      	b.n	800ab24 <BUTTON_DrawSkinFlex+0x100>
 800ab02:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800ab06:	f104 0710 	add.w	r7, r4, #16
 800ab0a:	f005 fbbd 	bl	8010288 <GUI_SetColor>
 800ab0e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ab12:	1830      	adds	r0, r6, r0
 800ab14:	1871      	adds	r1, r6, r1
 800ab16:	1b92      	subs	r2, r2, r6
 800ab18:	1b9b      	subs	r3, r3, r6
 800ab1a:	3601      	adds	r6, #1
 800ab1c:	f007 f982 	bl	8011e24 <GUI_DrawRect>
 800ab20:	2e02      	cmp	r6, #2
 800ab22:	d1ee      	bne.n	800ab02 <BUTTON_DrawSkinFlex+0xde>
 800ab24:	f104 0210 	add.w	r2, r4, #16
 800ab28:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ab2a:	68ef      	ldr	r7, [r5, #12]
 800ab2c:	9700      	str	r7, [sp, #0]
 800ab2e:	692f      	ldr	r7, [r5, #16]
 800ab30:	18cb      	adds	r3, r1, r3
 800ab32:	1830      	adds	r0, r6, r0
 800ab34:	3102      	adds	r1, #2
 800ab36:	1b92      	subs	r2, r2, r6
 800ab38:	105b      	asrs	r3, r3, #1
 800ab3a:	9701      	str	r7, [sp, #4]
 800ab3c:	f005 fe62 	bl	8010804 <GUI_DrawGradientV>
 800ab40:	69e3      	ldr	r3, [r4, #28]
 800ab42:	6961      	ldr	r1, [r4, #20]
 800ab44:	6920      	ldr	r0, [r4, #16]
 800ab46:	185a      	adds	r2, r3, r1
 800ab48:	1051      	asrs	r1, r2, #1
 800ab4a:	69a2      	ldr	r2, [r4, #24]
 800ab4c:	696c      	ldr	r4, [r5, #20]
 800ab4e:	9400      	str	r4, [sp, #0]
 800ab50:	69ac      	ldr	r4, [r5, #24]
 800ab52:	1830      	adds	r0, r6, r0
 800ab54:	9401      	str	r4, [sp, #4]
 800ab56:	3101      	adds	r1, #1
 800ab58:	1b92      	subs	r2, r2, r6
 800ab5a:	3b02      	subs	r3, #2
 800ab5c:	f005 fe52 	bl	8010804 <GUI_DrawGradientV>
 800ab60:	e076      	b.n	800ac50 <BUTTON_DrawSkinFlex+0x22c>
 800ab62:	6820      	ldr	r0, [r4, #0]
 800ab64:	f006 feba 	bl	80118dc <GUI_ALLOC_LockH>
 800ab68:	9004      	str	r0, [sp, #16]
 800ab6a:	6820      	ldr	r0, [r4, #0]
 800ab6c:	f000 fa90 	bl	800b090 <WM__IsEnabled>
 800ab70:	9d04      	ldr	r5, [sp, #16]
 800ab72:	b130      	cbz	r0, 800ab82 <BUTTON_DrawSkinFlex+0x15e>
 800ab74:	68a1      	ldr	r1, [r4, #8]
 800ab76:	b951      	cbnz	r1, 800ab8e <BUTTON_DrawSkinFlex+0x16a>
 800ab78:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800ab7a:	1c13      	adds	r3, r2, #0
 800ab7c:	bf18      	it	ne
 800ab7e:	2301      	movne	r3, #1
 800ab80:	e006      	b.n	800ab90 <BUTTON_DrawSkinFlex+0x16c>
 800ab82:	6f68      	ldr	r0, [r5, #116]	; 0x74
 800ab84:	2800      	cmp	r0, #0
 800ab86:	bf14      	ite	ne
 800ab88:	2302      	movne	r3, #2
 800ab8a:	2300      	moveq	r3, #0
 800ab8c:	e000      	b.n	800ab90 <BUTTON_DrawSkinFlex+0x16c>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	a808      	add	r0, sp, #32
 800ab92:	f850 5d10 	ldr.w	r5, [r0, #-16]!
 800ab96:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 800ab9a:	6ecd      	ldr	r5, [r1, #108]	; 0x6c
 800ab9c:	f006 feac 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800aba0:	2200      	movs	r2, #0
 800aba2:	4628      	mov	r0, r5
 800aba4:	6821      	ldr	r1, [r4, #0]
 800aba6:	4613      	mov	r3, r2
 800aba8:	f007 fe4d 	bl	8012846 <GUI_DRAW__Draw>
 800abac:	e050      	b.n	800ac50 <BUTTON_DrawSkinFlex+0x22c>
 800abae:	6820      	ldr	r0, [r4, #0]
 800abb0:	f006 fe94 	bl	80118dc <GUI_ALLOC_LockH>
 800abb4:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800abb6:	9004      	str	r0, [sp, #16]
 800abb8:	2e00      	cmp	r6, #0
 800abba:	d046      	beq.n	800ac4a <BUTTON_DrawSkinFlex+0x226>
 800abbc:	68a1      	ldr	r1, [r4, #8]
 800abbe:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 800abc2:	b121      	cbz	r1, 800abce <BUTTON_DrawSkinFlex+0x1aa>
 800abc4:	2903      	cmp	r1, #3
 800abc6:	bf0c      	ite	eq
 800abc8:	2402      	moveq	r4, #2
 800abca:	2400      	movne	r4, #0
 800abcc:	e000      	b.n	800abd0 <BUTTON_DrawSkinFlex+0x1ac>
 800abce:	2401      	movs	r4, #1
 800abd0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800abd4:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800abd6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800abd8:	f005 fb28 	bl	801022c <GUI_SetFont>
 800abdc:	4620      	mov	r0, r4
 800abde:	f005 fb53 	bl	8010288 <GUI_SetColor>
 800abe2:	a806      	add	r0, sp, #24
 800abe4:	f005 fc6c 	bl	80104c0 <GUI_GetClientRect>
 800abe8:	8ba8      	ldrh	r0, [r5, #28]
 800abea:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800abee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800abf2:	1881      	adds	r1, r0, r2
 800abf4:	1a1c      	subs	r4, r3, r0
 800abf6:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800abfa:	f8ad 401c 	strh.w	r4, [sp, #28]
 800abfe:	ac08      	add	r4, sp, #32
 800ac00:	1c82      	adds	r2, r0, #2
 800ac02:	f8ad 1018 	strh.w	r1, [sp, #24]
 800ac06:	f8ad 201a 	strh.w	r2, [sp, #26]
 800ac0a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800ac0e:	f854 2d10 	ldr.w	r2, [r4, #-16]!
 800ac12:	1e8b      	subs	r3, r1, #2
 800ac14:	a806      	add	r0, sp, #24
 800ac16:	f9b2 105e 	ldrsh.w	r1, [r2, #94]	; 0x5e
 800ac1a:	f9b2 2060 	ldrsh.w	r2, [r2, #96]	; 0x60
 800ac1e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ac22:	f005 fbeb 	bl	80103fc <GUI_MoveRect>
 800ac26:	4620      	mov	r0, r4
 800ac28:	f006 fe66 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ac2c:	2002      	movs	r0, #2
 800ac2e:	f005 faf3 	bl	8010218 <GUI_SetTextMode>
 800ac32:	4630      	mov	r0, r6
 800ac34:	f006 fe52 	bl	80118dc <GUI_ALLOC_LockH>
 800ac38:	ac08      	add	r4, sp, #32
 800ac3a:	a906      	add	r1, sp, #24
 800ac3c:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800ac40:	463a      	mov	r2, r7
 800ac42:	f006 f842 	bl	8010cca <GUI_DispStringInRect>
 800ac46:	4620      	mov	r0, r4
 800ac48:	e000      	b.n	800ac4c <BUTTON_DrawSkinFlex+0x228>
 800ac4a:	a804      	add	r0, sp, #16
 800ac4c:	f006 fe54 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ac50:	2000      	movs	r0, #0
 800ac52:	b009      	add	sp, #36	; 0x24
 800ac54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac56:	bf00      	nop
 800ac58:	08024b3c 	.word	0x08024b3c

0800ac5c <_Create>:
 800ac5c:	b530      	push	{r4, r5, lr}
 800ac5e:	b08b      	sub	sp, #44	; 0x2c
 800ac60:	2100      	movs	r1, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	2224      	movs	r2, #36	; 0x24
 800ac66:	a801      	add	r0, sp, #4
 800ac68:	f00b f928 	bl	8015ebc <memset>
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f006 fe35 	bl	80118dc <GUI_ALLOC_LockH>
 800ac72:	ab0a      	add	r3, sp, #40	; 0x28
 800ac74:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800ac76:	f843 0d28 	str.w	r0, [r3, #-40]!
 800ac7a:	6895      	ldr	r5, [r2, #8]
 800ac7c:	4668      	mov	r0, sp
 800ac7e:	f006 fe3b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ac82:	2000      	movs	r0, #0
 800ac84:	9002      	str	r0, [sp, #8]
 800ac86:	9401      	str	r4, [sp, #4]
 800ac88:	6829      	ldr	r1, [r5, #0]
 800ac8a:	a801      	add	r0, sp, #4
 800ac8c:	4788      	blx	r1
 800ac8e:	b00b      	add	sp, #44	; 0x2c
 800ac90:	bd30      	pop	{r4, r5, pc}

0800ac92 <_Paint>:
 800ac92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac96:	b08a      	sub	sp, #40	; 0x28
 800ac98:	4605      	mov	r5, r0
 800ac9a:	f006 fe1f 	bl	80118dc <GUI_ALLOC_LockH>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	a80a      	add	r0, sp, #40	; 0x28
 800aca2:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800aca4:	f840 3d28 	str.w	r3, [r0, #-40]!
 800aca8:	4668      	mov	r0, sp
 800acaa:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800acac:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 800acae:	f006 fe23 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800acb2:	4628      	mov	r0, r5
 800acb4:	f000 fdb2 	bl	800b81c <WM_GetWindowSizeX>
 800acb8:	4680      	mov	r8, r0
 800acba:	4628      	mov	r0, r5
 800acbc:	f000 fdc2 	bl	800b844 <WM_GetWindowSizeY>
 800acc0:	2100      	movs	r1, #0
 800acc2:	1e43      	subs	r3, r0, #1
 800acc4:	f108 32ff 	add.w	r2, r8, #4294967295
 800acc8:	f016 0610 	ands.w	r6, r6, #16
 800accc:	9501      	str	r5, [sp, #4]
 800acce:	9106      	str	r1, [sp, #24]
 800acd0:	9105      	str	r1, [sp, #20]
 800acd2:	9207      	str	r2, [sp, #28]
 800acd4:	9308      	str	r3, [sp, #32]
 800acd6:	d001      	beq.n	800acdc <_Paint+0x4a>
 800acd8:	2203      	movs	r2, #3
 800acda:	e00a      	b.n	800acf2 <_Paint+0x60>
 800acdc:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800ace0:	b281      	uxth	r1, r0
 800ace2:	b109      	cbz	r1, 800ace8 <_Paint+0x56>
 800ace4:	9603      	str	r6, [sp, #12]
 800ace6:	e005      	b.n	800acf4 <_Paint+0x62>
 800ace8:	07fb      	lsls	r3, r7, #31
 800acea:	d501      	bpl.n	800acf0 <_Paint+0x5e>
 800acec:	2201      	movs	r2, #1
 800acee:	e000      	b.n	800acf2 <_Paint+0x60>
 800acf0:	2202      	movs	r2, #2
 800acf2:	9203      	str	r2, [sp, #12]
 800acf4:	2305      	movs	r3, #5
 800acf6:	9302      	str	r3, [sp, #8]
 800acf8:	a801      	add	r0, sp, #4
 800acfa:	47a0      	blx	r4
 800acfc:	2006      	movs	r0, #6
 800acfe:	9002      	str	r0, [sp, #8]
 800ad00:	a801      	add	r0, sp, #4
 800ad02:	47a0      	blx	r4
 800ad04:	2112      	movs	r1, #18
 800ad06:	9102      	str	r1, [sp, #8]
 800ad08:	a801      	add	r0, sp, #4
 800ad0a:	47a0      	blx	r4
 800ad0c:	220a      	movs	r2, #10
 800ad0e:	9202      	str	r2, [sp, #8]
 800ad10:	a801      	add	r0, sp, #4
 800ad12:	47a0      	blx	r4
 800ad14:	b00a      	add	sp, #40	; 0x28
 800ad16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ad1c <BUTTON_SetSkin>:
 800ad1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad1e:	460d      	mov	r5, r1
 800ad20:	4604      	mov	r4, r0
 800ad22:	f006 fddb 	bl	80118dc <GUI_ALLOC_LockH>
 800ad26:	4906      	ldr	r1, [pc, #24]	; (800ad40 <BUTTON_SetSkin+0x24>)
 800ad28:	4602      	mov	r2, r0
 800ad2a:	a802      	add	r0, sp, #8
 800ad2c:	6651      	str	r1, [r2, #100]	; 0x64
 800ad2e:	f840 2d04 	str.w	r2, [r0, #-4]!
 800ad32:	6595      	str	r5, [r2, #88]	; 0x58
 800ad34:	f006 fde0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f001 fb13 	bl	800c364 <WM_InvalidateWindow>
 800ad3e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800ad40:	20000220 	.word	0x20000220

0800ad44 <BUTTON_SetDefaultSkin>:
 800ad44:	4903      	ldr	r1, [pc, #12]	; (800ad54 <BUTTON_SetDefaultSkin+0x10>)
 800ad46:	4a04      	ldr	r2, [pc, #16]	; (800ad58 <BUTTON_SetDefaultSkin+0x14>)
 800ad48:	4b04      	ldr	r3, [pc, #16]	; (800ad5c <BUTTON_SetDefaultSkin+0x18>)
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800ad4e:	6248      	str	r0, [r1, #36]	; 0x24
 800ad50:	4610      	mov	r0, r2
 800ad52:	4770      	bx	lr
 800ad54:	20000230 	.word	0x20000230
 800ad58:	20000220 	.word	0x20000220
 800ad5c:	20000260 	.word	0x20000260

0800ad60 <BUTTON_CreateIndirect>:
 800ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad62:	4604      	mov	r4, r0
 800ad64:	b087      	sub	sp, #28
 800ad66:	8a65      	ldrh	r5, [r4, #18]
 800ad68:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800ad6c:	9100      	str	r1, [sp, #0]
 800ad6e:	2100      	movs	r1, #0
 800ad70:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 800ad74:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 800ad78:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 800ad7c:	9101      	str	r1, [sp, #4]
 800ad7e:	9502      	str	r5, [sp, #8]
 800ad80:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800ad84:	69a5      	ldr	r5, [r4, #24]
 800ad86:	9103      	str	r1, [sp, #12]
 800ad88:	9504      	str	r5, [sp, #16]
 800ad8a:	eb0e 0103 	add.w	r1, lr, r3
 800ad8e:	1880      	adds	r0, r0, r2
 800ad90:	4633      	mov	r3, r6
 800ad92:	463a      	mov	r2, r7
 800ad94:	f000 f8d6 	bl	800af44 <BUTTON_CreateUser>
 800ad98:	6861      	ldr	r1, [r4, #4]
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	f000 f91a 	bl	800afd4 <BUTTON_SetText>
 800ada0:	4628      	mov	r0, r5
 800ada2:	b007      	add	sp, #28
 800ada4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ada6 <BUTTON_CreateAsChild>:
 800ada6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ada8:	9c06      	ldr	r4, [sp, #24]
 800adaa:	9400      	str	r4, [sp, #0]
 800adac:	9c08      	ldr	r4, [sp, #32]
 800adae:	9401      	str	r4, [sp, #4]
 800adb0:	2400      	movs	r4, #0
 800adb2:	9402      	str	r4, [sp, #8]
 800adb4:	9c07      	ldr	r4, [sp, #28]
 800adb6:	9403      	str	r4, [sp, #12]
 800adb8:	f000 f8fc 	bl	800afb4 <BUTTON_CreateEx>
 800adbc:	b004      	add	sp, #16
 800adbe:	bd10      	pop	{r4, pc}

0800adc0 <_OnButtonPressed>:
 800adc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800adc6:	4604      	mov	r4, r0
 800adc8:	f007 f997 	bl	80120fa <WIDGET_OrState>
 800adcc:	4620      	mov	r0, r4
 800adce:	f006 fd85 	bl	80118dc <GUI_ALLOC_LockH>
 800add2:	ab02      	add	r3, sp, #8
 800add4:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800add6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800adda:	4618      	mov	r0, r3
 800addc:	f006 fd8c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ade0:	07ab      	lsls	r3, r5, #30
 800ade2:	d503      	bpl.n	800adec <_OnButtonPressed+0x2c>
 800ade4:	4620      	mov	r0, r4
 800ade6:	2101      	movs	r1, #1
 800ade8:	f000 fbff 	bl	800b5ea <WM_NotifyParent>
 800adec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800adee <_OnButtonReleased>:
 800adee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adf0:	4605      	mov	r5, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800adf8:	f007 f994 	bl	8012124 <WIDGET_AndState>
 800adfc:	4628      	mov	r0, r5
 800adfe:	f006 fd6d 	bl	80118dc <GUI_ALLOC_LockH>
 800ae02:	4602      	mov	r2, r0
 800ae04:	a802      	add	r0, sp, #8
 800ae06:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800ae08:	f840 2d04 	str.w	r2, [r0, #-4]!
 800ae0c:	8e17      	ldrh	r7, [r2, #48]	; 0x30
 800ae0e:	f006 fd73 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ae12:	2c02      	cmp	r4, #2
 800ae14:	d102      	bne.n	800ae1c <_OnButtonReleased+0x2e>
 800ae16:	4638      	mov	r0, r7
 800ae18:	f005 faca 	bl	80103b0 <GUI_StoreKey>
 800ae1c:	07b2      	lsls	r2, r6, #30
 800ae1e:	d503      	bpl.n	800ae28 <_OnButtonReleased+0x3a>
 800ae20:	4628      	mov	r0, r5
 800ae22:	4621      	mov	r1, r4
 800ae24:	f000 fbe1 	bl	800b5ea <WM_NotifyParent>
 800ae28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800ae2a <_OnTouchDefault>:
 800ae2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	4604      	mov	r4, r0
 800ae30:	f006 fd54 	bl	80118dc <GUI_ALLOC_LockH>
 800ae34:	ab02      	add	r3, sp, #8
 800ae36:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 800ae38:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f006 fd5b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ae42:	68ea      	ldr	r2, [r5, #12]
 800ae44:	b162      	cbz	r2, 800ae60 <_OnTouchDefault+0x36>
 800ae46:	7a10      	ldrb	r0, [r2, #8]
 800ae48:	f406 7180 	and.w	r1, r6, #256	; 0x100
 800ae4c:	b120      	cbz	r0, 800ae58 <_OnTouchDefault+0x2e>
 800ae4e:	b959      	cbnz	r1, 800ae68 <_OnTouchDefault+0x3e>
 800ae50:	4620      	mov	r0, r4
 800ae52:	f7ff ffb5 	bl	800adc0 <_OnButtonPressed>
 800ae56:	e007      	b.n	800ae68 <_OnTouchDefault+0x3e>
 800ae58:	b131      	cbz	r1, 800ae68 <_OnTouchDefault+0x3e>
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	2102      	movs	r1, #2
 800ae5e:	e001      	b.n	800ae64 <_OnTouchDefault+0x3a>
 800ae60:	4620      	mov	r0, r4
 800ae62:	2103      	movs	r1, #3
 800ae64:	f7ff ffc3 	bl	800adee <_OnButtonReleased>
 800ae68:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

0800ae6c <BUTTON_Callback>:
 800ae6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae6e:	6844      	ldr	r4, [r0, #4]
 800ae70:	4605      	mov	r5, r0
 800ae72:	4629      	mov	r1, r5
 800ae74:	4620      	mov	r0, r4
 800ae76:	f007 f971 	bl	801215c <WIDGET_HandleActive>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d05d      	beq.n	800af3a <BUTTON_Callback+0xce>
 800ae7e:	682b      	ldr	r3, [r5, #0]
 800ae80:	2b0f      	cmp	r3, #15
 800ae82:	d016      	beq.n	800aeb2 <BUTTON_Callback+0x46>
 800ae84:	dc04      	bgt.n	800ae90 <BUTTON_Callback+0x24>
 800ae86:	2b0b      	cmp	r3, #11
 800ae88:	d023      	beq.n	800aed2 <BUTTON_Callback+0x66>
 800ae8a:	2b0e      	cmp	r3, #14
 800ae8c:	d152      	bne.n	800af34 <BUTTON_Callback+0xc8>
 800ae8e:	e032      	b.n	800aef6 <BUTTON_Callback+0x8a>
 800ae90:	2b28      	cmp	r3, #40	; 0x28
 800ae92:	d048      	beq.n	800af26 <BUTTON_Callback+0xba>
 800ae94:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ae98:	d005      	beq.n	800aea6 <BUTTON_Callback+0x3a>
 800ae9a:	2b11      	cmp	r3, #17
 800ae9c:	d14a      	bne.n	800af34 <BUTTON_Callback+0xc8>
 800ae9e:	4827      	ldr	r0, [pc, #156]	; (800af3c <BUTTON_Callback+0xd0>)
 800aea0:	6803      	ldr	r3, [r0, #0]
 800aea2:	b913      	cbnz	r3, 800aeaa <BUTTON_Callback+0x3e>
 800aea4:	e049      	b.n	800af3a <BUTTON_Callback+0xce>
 800aea6:	4926      	ldr	r1, [pc, #152]	; (800af40 <BUTTON_Callback+0xd4>)
 800aea8:	680b      	ldr	r3, [r1, #0]
 800aeaa:	4620      	mov	r0, r4
 800aeac:	4629      	mov	r1, r5
 800aeae:	4798      	blx	r3
 800aeb0:	e043      	b.n	800af3a <BUTTON_Callback+0xce>
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f006 fd12 	bl	80118dc <GUI_ALLOC_LockH>
 800aeb8:	a902      	add	r1, sp, #8
 800aeba:	f841 0d04 	str.w	r0, [r1, #-4]!
 800aebe:	6e45      	ldr	r5, [r0, #100]	; 0x64
 800aec0:	682d      	ldr	r5, [r5, #0]
 800aec2:	4608      	mov	r0, r1
 800aec4:	f006 fd18 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800aec8:	2d00      	cmp	r5, #0
 800aeca:	d036      	beq.n	800af3a <BUTTON_Callback+0xce>
 800aecc:	4620      	mov	r0, r4
 800aece:	47a8      	blx	r5
 800aed0:	e033      	b.n	800af3a <BUTTON_Callback+0xce>
 800aed2:	4620      	mov	r0, r4
 800aed4:	f006 fd02 	bl	80118dc <GUI_ALLOC_LockH>
 800aed8:	ac02      	add	r4, sp, #8
 800aeda:	9001      	str	r0, [sp, #4]
 800aedc:	3068      	adds	r0, #104	; 0x68
 800aede:	f006 ff4f 	bl	8011d80 <GUI_ALLOC_FreePtr>
 800aee2:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800aee6:	2103      	movs	r1, #3
 800aee8:	306c      	adds	r0, #108	; 0x6c
 800aeea:	f006 ff51 	bl	8011d90 <GUI_ALLOC_FreePtrArray>
 800aeee:	4620      	mov	r0, r4
 800aef0:	f006 fd02 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800aef4:	e01e      	b.n	800af34 <BUTTON_Callback+0xc8>
 800aef6:	68ea      	ldr	r2, [r5, #12]
 800aef8:	ca0c      	ldmia	r2, {r2, r3}
 800aefa:	2a0d      	cmp	r2, #13
 800aefc:	d002      	beq.n	800af04 <BUTTON_Callback+0x98>
 800aefe:	2a20      	cmp	r2, #32
 800af00:	d111      	bne.n	800af26 <BUTTON_Callback+0xba>
 800af02:	e006      	b.n	800af12 <BUTTON_Callback+0xa6>
 800af04:	2b00      	cmp	r3, #0
 800af06:	dd0e      	ble.n	800af26 <BUTTON_Callback+0xba>
 800af08:	4620      	mov	r0, r4
 800af0a:	f7ff ff59 	bl	800adc0 <_OnButtonPressed>
 800af0e:	4620      	mov	r0, r4
 800af10:	e005      	b.n	800af1e <BUTTON_Callback+0xb2>
 800af12:	2b00      	cmp	r3, #0
 800af14:	4620      	mov	r0, r4
 800af16:	dd02      	ble.n	800af1e <BUTTON_Callback+0xb2>
 800af18:	f7ff ff52 	bl	800adc0 <_OnButtonPressed>
 800af1c:	e00d      	b.n	800af3a <BUTTON_Callback+0xce>
 800af1e:	2102      	movs	r1, #2
 800af20:	f7ff ff65 	bl	800adee <_OnButtonReleased>
 800af24:	e009      	b.n	800af3a <BUTTON_Callback+0xce>
 800af26:	68ea      	ldr	r2, [r5, #12]
 800af28:	b922      	cbnz	r2, 800af34 <BUTTON_Callback+0xc8>
 800af2a:	4620      	mov	r0, r4
 800af2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af30:	f007 f8f8 	bl	8012124 <WIDGET_AndState>
 800af34:	4628      	mov	r0, r5
 800af36:	f001 fe3f 	bl	800cbb8 <WM_DefaultProc>
 800af3a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800af3c:	20016de8 	.word	0x20016de8
 800af40:	2000022c 	.word	0x2000022c

0800af44 <BUTTON_CreateUser>:
 800af44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af46:	b087      	sub	sp, #28
 800af48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800af4a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800af4c:	9400      	str	r4, [sp, #0]
 800af4e:	4c16      	ldr	r4, [pc, #88]	; (800afa8 <BUTTON_CreateUser+0x64>)
 800af50:	9701      	str	r7, [sp, #4]
 800af52:	9402      	str	r4, [sp, #8]
 800af54:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800af56:	344c      	adds	r4, #76	; 0x4c
 800af58:	9403      	str	r4, [sp, #12]
 800af5a:	f001 fabf 	bl	800c4dc <WM_CreateWindowAsChild>
 800af5e:	4607      	mov	r7, r0
 800af60:	b1f8      	cbz	r0, 800afa2 <BUTTON_CreateUser+0x5e>
 800af62:	f006 fcbb 	bl	80118dc <GUI_ALLOC_LockH>
 800af66:	4d11      	ldr	r5, [pc, #68]	; (800afac <BUTTON_CreateUser+0x68>)
 800af68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af6a:	9005      	str	r0, [sp, #20]
 800af6c:	2210      	movs	r2, #16
 800af6e:	f007 f8ed 	bl	801214c <WIDGET__Init>
 800af72:	ae06      	add	r6, sp, #24
 800af74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af76:	f856 ed04 	ldr.w	lr, [r6, #-4]!
 800af7a:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 800af7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800af88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af8c:	4c08      	ldr	r4, [pc, #32]	; (800afb0 <BUTTON_CreateUser+0x6c>)
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	4630      	mov	r0, r6
 800af92:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 800af96:	f006 fcaf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800af9a:	6820      	ldr	r0, [r4, #0]
 800af9c:	6841      	ldr	r1, [r0, #4]
 800af9e:	4638      	mov	r0, r7
 800afa0:	4788      	blx	r1
 800afa2:	4638      	mov	r0, r7
 800afa4:	b007      	add	sp, #28
 800afa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa8:	0800ae6d 	.word	0x0800ae6d
 800afac:	20000230 	.word	0x20000230
 800afb0:	20000260 	.word	0x20000260

0800afb4 <BUTTON_CreateEx>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	9c08      	ldr	r4, [sp, #32]
 800afba:	9400      	str	r4, [sp, #0]
 800afbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800afbe:	9401      	str	r4, [sp, #4]
 800afc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800afc2:	9402      	str	r4, [sp, #8]
 800afc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800afc6:	9403      	str	r4, [sp, #12]
 800afc8:	2400      	movs	r4, #0
 800afca:	9404      	str	r4, [sp, #16]
 800afcc:	f7ff ffba 	bl	800af44 <BUTTON_CreateUser>
 800afd0:	b006      	add	sp, #24
 800afd2:	bd10      	pop	{r4, pc}

0800afd4 <BUTTON_SetText>:
 800afd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afd6:	460c      	mov	r4, r1
 800afd8:	4605      	mov	r5, r0
 800afda:	b300      	cbz	r0, 800b01e <BUTTON_SetText+0x4a>
 800afdc:	f006 fc7e 	bl	80118dc <GUI_ALLOC_LockH>
 800afe0:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800afe2:	9000      	str	r0, [sp, #0]
 800afe4:	4668      	mov	r0, sp
 800afe6:	9601      	str	r6, [sp, #4]
 800afe8:	f006 fc86 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800afec:	4621      	mov	r1, r4
 800afee:	a801      	add	r0, sp, #4
 800aff0:	f004 fbfc 	bl	800f7ec <GUI__SetText>
 800aff4:	f1d0 0401 	rsbs	r4, r0, #1
 800aff8:	bf38      	it	cc
 800affa:	2400      	movcc	r4, #0
 800affc:	b984      	cbnz	r4, 800b020 <BUTTON_SetText+0x4c>
 800affe:	9b01      	ldr	r3, [sp, #4]
 800b000:	42b3      	cmp	r3, r6
 800b002:	d008      	beq.n	800b016 <BUTTON_SetText+0x42>
 800b004:	4628      	mov	r0, r5
 800b006:	f006 fc69 	bl	80118dc <GUI_ALLOC_LockH>
 800b00a:	9901      	ldr	r1, [sp, #4]
 800b00c:	9000      	str	r0, [sp, #0]
 800b00e:	6681      	str	r1, [r0, #104]	; 0x68
 800b010:	4668      	mov	r0, sp
 800b012:	f006 fc71 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b016:	4628      	mov	r0, r5
 800b018:	f001 f9a4 	bl	800c364 <WM_InvalidateWindow>
 800b01c:	e000      	b.n	800b020 <BUTTON_SetText+0x4c>
 800b01e:	2401      	movs	r4, #1
 800b020:	4620      	mov	r0, r4
 800b022:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800b024 <BUTTON_SetFont>:
 800b024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b026:	460c      	mov	r4, r1
 800b028:	4605      	mov	r5, r0
 800b02a:	b158      	cbz	r0, 800b044 <BUTTON_SetFont+0x20>
 800b02c:	f006 fc56 	bl	80118dc <GUI_ALLOC_LockH>
 800b030:	4602      	mov	r2, r0
 800b032:	a802      	add	r0, sp, #8
 800b034:	6554      	str	r4, [r2, #84]	; 0x54
 800b036:	f840 2d04 	str.w	r2, [r0, #-4]!
 800b03a:	f006 fc5d 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b03e:	4628      	mov	r0, r5
 800b040:	f001 f990 	bl	800c364 <WM_InvalidateWindow>
 800b044:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b046 <BUTTON_SetFocussable>:
 800b046:	b111      	cbz	r1, 800b04e <BUTTON_SetFocussable+0x8>
 800b048:	2110      	movs	r1, #16
 800b04a:	f007 b856 	b.w	80120fa <WIDGET_OrState>
 800b04e:	2110      	movs	r1, #16
 800b050:	f007 b868 	b.w	8012124 <WIDGET_AndState>

0800b054 <WM__SendMessage>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	4c0d      	ldr	r4, [pc, #52]	; (800b08c <WM__SendMessage+0x38>)
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	2b13      	cmp	r3, #19
 800b05c:	4606      	mov	r6, r0
 800b05e:	460d      	mov	r5, r1
 800b060:	dc12      	bgt.n	800b088 <WM__SendMessage+0x34>
 800b062:	f006 fc31 	bl	80118c8 <GUI_ALLOC_h2p>
 800b066:	6901      	ldr	r1, [r0, #16]
 800b068:	606e      	str	r6, [r5, #4]
 800b06a:	b141      	cbz	r1, 800b07e <WM__SendMessage+0x2a>
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	1c50      	adds	r0, r2, #1
 800b070:	6020      	str	r0, [r4, #0]
 800b072:	4628      	mov	r0, r5
 800b074:	4788      	blx	r1
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	1e59      	subs	r1, r3, #1
 800b07a:	6021      	str	r1, [r4, #0]
 800b07c:	bd70      	pop	{r4, r5, r6, pc}
 800b07e:	4628      	mov	r0, r5
 800b080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b084:	f001 bd98 	b.w	800cbb8 <WM_DefaultProc>
 800b088:	bd70      	pop	{r4, r5, r6, pc}
 800b08a:	bf00      	nop
 800b08c:	20016dec 	.word	0x20016dec

0800b090 <WM__IsEnabled>:
 800b090:	b508      	push	{r3, lr}
 800b092:	f006 fc19 	bl	80118c8 <GUI_ALLOC_h2p>
 800b096:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b098:	f080 0110 	eor.w	r1, r0, #16
 800b09c:	f3c1 1000 	ubfx	r0, r1, #4, #1
 800b0a0:	bd08      	pop	{r3, pc}

0800b0a2 <WM__IsAncestor>:
 800b0a2:	b510      	push	{r4, lr}
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	b908      	cbnz	r0, 800b0ac <WM__IsAncestor+0xa>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	bd10      	pop	{r4, pc}
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	d0fb      	beq.n	800b0a8 <WM__IsAncestor+0x6>
 800b0b0:	f006 fc0a 	bl	80118c8 <GUI_ALLOC_h2p>
 800b0b4:	6980      	ldr	r0, [r0, #24]
 800b0b6:	42a0      	cmp	r0, r4
 800b0b8:	d002      	beq.n	800b0c0 <WM__IsAncestor+0x1e>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d1f8      	bne.n	800b0b0 <WM__IsAncestor+0xe>
 800b0be:	e7f3      	b.n	800b0a8 <WM__IsAncestor+0x6>
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	bd10      	pop	{r4, pc}

0800b0c4 <WM__IsAncestorOrSelf>:
 800b0c4:	4288      	cmp	r0, r1
 800b0c6:	d001      	beq.n	800b0cc <WM__IsAncestorOrSelf+0x8>
 800b0c8:	f7ff bfeb 	b.w	800b0a2 <WM__IsAncestor>
 800b0cc:	2001      	movs	r0, #1
 800b0ce:	4770      	bx	lr

0800b0d0 <WM__GetUserDataEx>:
 800b0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0d2:	460f      	mov	r7, r1
 800b0d4:	4614      	mov	r4, r2
 800b0d6:	461e      	mov	r6, r3
 800b0d8:	4605      	mov	r5, r0
 800b0da:	b1a0      	cbz	r0, 800b106 <WM__GetUserDataEx+0x36>
 800b0dc:	f006 fc2c 	bl	8011938 <GUI_ALLOC_GetSize>
 800b0e0:	1b80      	subs	r0, r0, r6
 800b0e2:	4284      	cmp	r4, r0
 800b0e4:	bfa8      	it	ge
 800b0e6:	4604      	movge	r4, r0
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f006 fbf7 	bl	80118dc <GUI_ALLOC_LockH>
 800b0ee:	ad02      	add	r5, sp, #8
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b0f6:	1989      	adds	r1, r1, r6
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	f7f5 f844 	bl	8000188 <memcpy>
 800b100:	4628      	mov	r0, r5
 800b102:	f006 fbf9 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b106:	4620      	mov	r0, r4
 800b108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800b10a <WM_GetUserData>:
 800b10a:	232c      	movs	r3, #44	; 0x2c
 800b10c:	f7ff bfe0 	b.w	800b0d0 <WM__GetUserDataEx>

0800b110 <WM_InvalidateWindowAndDescs>:
 800b110:	b510      	push	{r4, lr}
 800b112:	4604      	mov	r4, r0
 800b114:	b170      	cbz	r0, 800b134 <WM_InvalidateWindowAndDescs+0x24>
 800b116:	f001 f925 	bl	800c364 <WM_InvalidateWindow>
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fbdc 	bl	800b8d8 <WM_GetFirstChild>
 800b120:	4604      	mov	r4, r0
 800b122:	b13c      	cbz	r4, 800b134 <WM_InvalidateWindowAndDescs+0x24>
 800b124:	4620      	mov	r0, r4
 800b126:	f7ff fff3 	bl	800b110 <WM_InvalidateWindowAndDescs>
 800b12a:	4620      	mov	r0, r4
 800b12c:	f006 fbcc 	bl	80118c8 <GUI_ALLOC_h2p>
 800b130:	6a04      	ldr	r4, [r0, #32]
 800b132:	e7f6      	b.n	800b122 <WM_InvalidateWindowAndDescs+0x12>
 800b134:	bd10      	pop	{r4, pc}

0800b136 <WM_ShowWindow>:
 800b136:	b513      	push	{r0, r1, r4, lr}
 800b138:	4604      	mov	r4, r0
 800b13a:	b170      	cbz	r0, 800b15a <WM_ShowWindow+0x24>
 800b13c:	f006 fbce 	bl	80118dc <GUI_ALLOC_LockH>
 800b140:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b142:	9001      	str	r0, [sp, #4]
 800b144:	0793      	lsls	r3, r2, #30
 800b146:	d405      	bmi.n	800b154 <WM_ShowWindow+0x1e>
 800b148:	f042 0102 	orr.w	r1, r2, #2
 800b14c:	6281      	str	r1, [r0, #40]	; 0x28
 800b14e:	4620      	mov	r0, r4
 800b150:	f7ff ffde 	bl	800b110 <WM_InvalidateWindowAndDescs>
 800b154:	a801      	add	r0, sp, #4
 800b156:	f006 fbcf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b15a:	bd1c      	pop	{r2, r3, r4, pc}

0800b15c <WM_SetUserClipRect>:
 800b15c:	4b04      	ldr	r3, [pc, #16]	; (800b170 <WM_SetUserClipRect+0x14>)
 800b15e:	6819      	ldr	r1, [r3, #0]
 800b160:	b510      	push	{r4, lr}
 800b162:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800b164:	6448      	str	r0, [r1, #68]	; 0x44
 800b166:	f000 ff49 	bl	800bffc <WM__ActivateClipRect>
 800b16a:	4620      	mov	r0, r4
 800b16c:	bd10      	pop	{r4, pc}
 800b16e:	bf00      	nop
 800b170:	2000027c 	.word	0x2000027c

0800b174 <WM_SetHasTrans>:
 800b174:	b513      	push	{r0, r1, r4, lr}
 800b176:	4604      	mov	r4, r0
 800b178:	b1b8      	cbz	r0, 800b1aa <WM_SetHasTrans+0x36>
 800b17a:	f006 fbaf 	bl	80118dc <GUI_ALLOC_LockH>
 800b17e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b180:	9001      	str	r0, [sp, #4]
 800b182:	07db      	lsls	r3, r3, #31
 800b184:	d40e      	bmi.n	800b1a4 <WM_SetHasTrans+0x30>
 800b186:	4620      	mov	r0, r4
 800b188:	f007 ff74 	bl	8013074 <WM_ValidateWindow>
 800b18c:	9801      	ldr	r0, [sp, #4]
 800b18e:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <WM_SetHasTrans+0x38>)
 800b190:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b192:	f042 0101 	orr.w	r1, r2, #1
 800b196:	6281      	str	r1, [r0, #40]	; 0x28
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	1c42      	adds	r2, r0, #1
 800b19c:	4620      	mov	r0, r4
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	f001 f8e0 	bl	800c364 <WM_InvalidateWindow>
 800b1a4:	a801      	add	r0, sp, #4
 800b1a6:	f006 fba7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b1aa:	bd1c      	pop	{r2, r3, r4, pc}
 800b1ac:	200179dc 	.word	0x200179dc

0800b1b0 <WM_GetHasTrans>:
 800b1b0:	b508      	push	{r3, lr}
 800b1b2:	b128      	cbz	r0, 800b1c0 <WM_GetHasTrans+0x10>
 800b1b4:	f006 fb88 	bl	80118c8 <GUI_ALLOC_h2p>
 800b1b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b1ba:	f000 0001 	and.w	r0, r0, #1
 800b1be:	bd08      	pop	{r3, pc}
 800b1c0:	bd08      	pop	{r3, pc}

0800b1c2 <WM_SetSize>:
 800b1c2:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800b1c6:	460e      	mov	r6, r1
 800b1c8:	4690      	mov	r8, r2
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	b1d8      	cbz	r0, 800b206 <WM_SetSize+0x44>
 800b1ce:	f006 fb85 	bl	80118dc <GUI_ALLOC_LockH>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	a802      	add	r0, sp, #8
 800b1d6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800b1da:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b1de:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b1e2:	1a8d      	subs	r5, r1, r2
 800b1e4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b1e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1ec:	43e9      	mvns	r1, r5
 800b1ee:	1ad5      	subs	r5, r2, r3
 800b1f0:	1876      	adds	r6, r6, r1
 800b1f2:	43e9      	mvns	r1, r5
 800b1f4:	eb08 0501 	add.w	r5, r8, r1
 800b1f8:	f006 fb7e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	4631      	mov	r1, r6
 800b200:	462a      	mov	r2, r5
 800b202:	f000 f978 	bl	800b4f6 <WM_ResizeWindow>
 800b206:	e8bd 81ee 	ldmia.w	sp!, {r1, r2, r3, r5, r6, r7, r8, pc}

0800b20a <_GetPrevChild>:
 800b20a:	b510      	push	{r4, lr}
 800b20c:	4604      	mov	r4, r0
 800b20e:	b918      	cbnz	r0, 800b218 <_GetPrevChild+0xe>
 800b210:	4620      	mov	r0, r4
 800b212:	f007 ff07 	bl	8013024 <WM__GetLastSibling>
 800b216:	e003      	b.n	800b220 <_GetPrevChild+0x16>
 800b218:	f007 fef1 	bl	8012ffe <WM__GetPrevSibling>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d0f7      	beq.n	800b210 <_GetPrevChild+0x6>
 800b220:	42a0      	cmp	r0, r4
 800b222:	bf08      	it	eq
 800b224:	2000      	moveq	r0, #0
 800b226:	bd10      	pop	{r4, pc}

0800b228 <WM_SetFocusOnPrevChild>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4604      	mov	r4, r0
 800b22c:	b1c0      	cbz	r0, 800b260 <WM_SetFocusOnPrevChild+0x38>
 800b22e:	f007 ff05 	bl	801303c <WM__GetFocussedChild>
 800b232:	f7ff ffea 	bl	800b20a <_GetPrevChild>
 800b236:	4605      	mov	r5, r0
 800b238:	4604      	mov	r4, r0
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 faa0 	bl	800b780 <WM_IsFocussable>
 800b240:	b930      	cbnz	r0, 800b250 <WM_SetFocusOnPrevChild+0x28>
 800b242:	b12c      	cbz	r4, 800b250 <WM_SetFocusOnPrevChild+0x28>
 800b244:	4620      	mov	r0, r4
 800b246:	f7ff ffe0 	bl	800b20a <_GetPrevChild>
 800b24a:	42a8      	cmp	r0, r5
 800b24c:	4604      	mov	r4, r0
 800b24e:	d1f4      	bne.n	800b23a <WM_SetFocusOnPrevChild+0x12>
 800b250:	4620      	mov	r0, r4
 800b252:	f000 f84b 	bl	800b2ec <WM_SetFocus>
 800b256:	2800      	cmp	r0, #0
 800b258:	bf0c      	ite	eq
 800b25a:	4620      	moveq	r0, r4
 800b25c:	2000      	movne	r0, #0
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	bd38      	pop	{r3, r4, r5, pc}

0800b262 <_GetNextChild>:
 800b262:	b538      	push	{r3, r4, r5, lr}
 800b264:	4605      	mov	r5, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b921      	cbnz	r1, 800b274 <_GetNextChild+0x12>
 800b26a:	4628      	mov	r0, r5
 800b26c:	f006 fb2c 	bl	80118c8 <GUI_ALLOC_h2p>
 800b270:	69c0      	ldr	r0, [r0, #28]
 800b272:	e005      	b.n	800b280 <_GetNextChild+0x1e>
 800b274:	4608      	mov	r0, r1
 800b276:	f006 fb27 	bl	80118c8 <GUI_ALLOC_h2p>
 800b27a:	6a00      	ldr	r0, [r0, #32]
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d0f4      	beq.n	800b26a <_GetNextChild+0x8>
 800b280:	42a0      	cmp	r0, r4
 800b282:	bf08      	it	eq
 800b284:	2000      	moveq	r0, #0
 800b286:	bd38      	pop	{r3, r4, r5, pc}

0800b288 <WM_SetFocusOnNextChild>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	4605      	mov	r5, r0
 800b28c:	b340      	cbz	r0, 800b2e0 <WM_SetFocusOnNextChild+0x58>
 800b28e:	f007 fed5 	bl	801303c <WM__GetFocussedChild>
 800b292:	4601      	mov	r1, r0
 800b294:	4628      	mov	r0, r5
 800b296:	f7ff ffe4 	bl	800b262 <_GetNextChild>
 800b29a:	4606      	mov	r6, r0
 800b29c:	4604      	mov	r4, r0
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 fa6e 	bl	800b780 <WM_IsFocussable>
 800b2a4:	b938      	cbnz	r0, 800b2b6 <WM_SetFocusOnNextChild+0x2e>
 800b2a6:	b13c      	cbz	r4, 800b2b8 <WM_SetFocusOnNextChild+0x30>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f7ff ffd9 	bl	800b262 <_GetNextChild>
 800b2b0:	42b0      	cmp	r0, r6
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	d1f3      	bne.n	800b29e <WM_SetFocusOnNextChild+0x16>
 800b2b6:	b90c      	cbnz	r4, 800b2bc <WM_SetFocusOnNextChild+0x34>
 800b2b8:	2400      	movs	r4, #0
 800b2ba:	e012      	b.n	800b2e2 <WM_SetFocusOnNextChild+0x5a>
 800b2bc:	4d0a      	ldr	r5, [pc, #40]	; (800b2e8 <WM_SetFocusOnNextChild+0x60>)
 800b2be:	4620      	mov	r0, r4
 800b2c0:	682e      	ldr	r6, [r5, #0]
 800b2c2:	f001 f853 	bl	800c36c <WM__GetTopLevelLayer>
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d00b      	beq.n	800b2e2 <WM_SetFocusOnNextChild+0x5a>
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f001 f84e 	bl	800c36c <WM__GetTopLevelLayer>
 800b2d0:	6028      	str	r0, [r5, #0]
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 f80a 	bl	800b2ec <WM_SetFocus>
 800b2d8:	602e      	str	r6, [r5, #0]
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d1ec      	bne.n	800b2b8 <WM_SetFocusOnNextChild+0x30>
 800b2de:	e000      	b.n	800b2e2 <WM_SetFocusOnNextChild+0x5a>
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	bd70      	pop	{r4, r5, r6, pc}
 800b2e6:	bf00      	nop
 800b2e8:	200179b4 	.word	0x200179b4

0800b2ec <WM_SetFocus>:
 800b2ec:	b530      	push	{r4, r5, lr}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	a802      	add	r0, sp, #8
 800b2f6:	2210      	movs	r2, #16
 800b2f8:	f00a fde0 	bl	8015ebc <memset>
 800b2fc:	2c00      	cmp	r4, #0
 800b2fe:	d03a      	beq.n	800b376 <WM_SetFocus+0x8a>
 800b300:	4b1f      	ldr	r3, [pc, #124]	; (800b380 <WM_SetFocus+0x94>)
 800b302:	4820      	ldr	r0, [pc, #128]	; (800b384 <WM_SetFocus+0x98>)
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b30a:	4284      	cmp	r4, r0
 800b30c:	d033      	beq.n	800b376 <WM_SetFocus+0x8a>
 800b30e:	211e      	movs	r1, #30
 800b310:	e88d 0011 	stmia.w	sp, {r0, r4}
 800b314:	9102      	str	r1, [sp, #8]
 800b316:	b110      	cbz	r0, 800b31e <WM_SetFocus+0x32>
 800b318:	a902      	add	r1, sp, #8
 800b31a:	f7ff fe9b 	bl	800b054 <WM__SendMessage>
 800b31e:	2501      	movs	r5, #1
 800b320:	4620      	mov	r0, r4
 800b322:	a902      	add	r1, sp, #8
 800b324:	9505      	str	r5, [sp, #20]
 800b326:	f7ff fe95 	bl	800b054 <WM__SendMessage>
 800b32a:	9d05      	ldr	r5, [sp, #20]
 800b32c:	bb25      	cbnz	r5, 800b378 <WM_SetFocus+0x8c>
 800b32e:	4b14      	ldr	r3, [pc, #80]	; (800b380 <WM_SetFocus+0x94>)
 800b330:	4814      	ldr	r0, [pc, #80]	; (800b384 <WM_SetFocus+0x98>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 faa2 	bl	800b882 <WM_GetParent>
 800b33e:	4604      	mov	r4, r0
 800b340:	b138      	cbz	r0, 800b352 <WM_SetFocus+0x66>
 800b342:	a900      	add	r1, sp, #0
 800b344:	2220      	movs	r2, #32
 800b346:	9105      	str	r1, [sp, #20]
 800b348:	a902      	add	r1, sp, #8
 800b34a:	9202      	str	r2, [sp, #8]
 800b34c:	f7ff fe82 	bl	800b054 <WM__SendMessage>
 800b350:	e7f2      	b.n	800b338 <WM_SetFocus+0x4c>
 800b352:	9c00      	ldr	r4, [sp, #0]
 800b354:	4620      	mov	r0, r4
 800b356:	f000 fa11 	bl	800b77c <WM_IsWindow>
 800b35a:	b168      	cbz	r0, 800b378 <WM_SetFocus+0x8c>
 800b35c:	4620      	mov	r0, r4
 800b35e:	f000 fa90 	bl	800b882 <WM_GetParent>
 800b362:	4604      	mov	r4, r0
 800b364:	b140      	cbz	r0, 800b378 <WM_SetFocus+0x8c>
 800b366:	2120      	movs	r1, #32
 800b368:	9102      	str	r1, [sp, #8]
 800b36a:	ab00      	add	r3, sp, #0
 800b36c:	a902      	add	r1, sp, #8
 800b36e:	9305      	str	r3, [sp, #20]
 800b370:	f7ff fe70 	bl	800b054 <WM__SendMessage>
 800b374:	e7f2      	b.n	800b35c <WM_SetFocus+0x70>
 800b376:	2501      	movs	r5, #1
 800b378:	4628      	mov	r0, r5
 800b37a:	b007      	add	sp, #28
 800b37c:	bd30      	pop	{r4, r5, pc}
 800b37e:	bf00      	nop
 800b380:	200179b4 	.word	0x200179b4
 800b384:	200179a4 	.word	0x200179a4

0800b388 <WM_SetDesktopColorEx>:
 800b388:	2901      	cmp	r1, #1
 800b38a:	b510      	push	{r4, lr}
 800b38c:	bf88      	it	hi
 800b38e:	f06f 4470 	mvnhi.w	r4, #4026531840	; 0xf0000000
 800b392:	d809      	bhi.n	800b3a8 <WM_SetDesktopColorEx+0x20>
 800b394:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <WM_SetDesktopColorEx+0x24>)
 800b396:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800b39a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 800b39e:	4804      	ldr	r0, [pc, #16]	; (800b3b0 <WM_SetDesktopColorEx+0x28>)
 800b3a0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b3a4:	f000 ffde 	bl	800c364 <WM_InvalidateWindow>
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	bd10      	pop	{r4, pc}
 800b3ac:	200179c0 	.word	0x200179c0
 800b3b0:	20017994 	.word	0x20017994

0800b3b4 <WM_SetDesktopColor>:
 800b3b4:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <WM_SetDesktopColor+0xc>)
 800b3b6:	6819      	ldr	r1, [r3, #0]
 800b3b8:	7c49      	ldrb	r1, [r1, #17]
 800b3ba:	f7ff bfe5 	b.w	800b388 <WM_SetDesktopColorEx>
 800b3be:	bf00      	nop
 800b3c0:	2000027c 	.word	0x2000027c

0800b3c4 <WM_SetCaptureMove>:
 800b3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	b085      	sub	sp, #20
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	4691      	mov	r9, r2
 800b3d0:	4698      	mov	r8, r3
 800b3d2:	f000 fa07 	bl	800b7e4 <WM_HasCaptured>
 800b3d6:	4e21      	ldr	r6, [pc, #132]	; (800b45c <WM_SetCaptureMove+0x98>)
 800b3d8:	b940      	cbnz	r0, 800b3ec <WM_SetCaptureMove+0x28>
 800b3da:	4620      	mov	r0, r4
 800b3dc:	2101      	movs	r1, #1
 800b3de:	f000 f859 	bl	800b494 <WM_SetCapture>
 800b3e2:	682b      	ldr	r3, [r5, #0]
 800b3e4:	6868      	ldr	r0, [r5, #4]
 800b3e6:	8033      	strh	r3, [r6, #0]
 800b3e8:	8070      	strh	r0, [r6, #2]
 800b3ea:	e034      	b.n	800b456 <WM_SetCaptureMove+0x92>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 800b3f2:	f9b6 7000 	ldrsh.w	r7, [r6]
 800b3f6:	686d      	ldr	r5, [r5, #4]
 800b3f8:	1bdf      	subs	r7, r3, r7
 800b3fa:	1a2d      	subs	r5, r5, r0
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f1b9 0f00 	cmp.w	r9, #0
 800b402:	d102      	bne.n	800b40a <WM_SetCaptureMove+0x46>
 800b404:	f1b8 0f00 	cmp.w	r8, #0
 800b408:	d021      	beq.n	800b44e <WM_SetCaptureMove+0x8a>
 800b40a:	4669      	mov	r1, sp
 800b40c:	f000 fa2e 	bl	800b86c <WM_GetWindowRectEx>
 800b410:	f1b8 0f00 	cmp.w	r8, #0
 800b414:	d005      	beq.n	800b422 <WM_SetCaptureMove+0x5e>
 800b416:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800b41a:	1e4a      	subs	r2, r1, #1
 800b41c:	4490      	add	r8, r2
 800b41e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800b422:	4620      	mov	r0, r4
 800b424:	f000 fa2d 	bl	800b882 <WM_GetParent>
 800b428:	a902      	add	r1, sp, #8
 800b42a:	f000 fa1f 	bl	800b86c <WM_GetWindowRectEx>
 800b42e:	4668      	mov	r0, sp
 800b430:	4639      	mov	r1, r7
 800b432:	462a      	mov	r2, r5
 800b434:	f004 ffe2 	bl	80103fc <GUI_MoveRect>
 800b438:	a802      	add	r0, sp, #8
 800b43a:	4601      	mov	r1, r0
 800b43c:	464a      	mov	r2, r9
 800b43e:	f004 fa0f 	bl	800f860 <GUI__ReduceRect>
 800b442:	4668      	mov	r0, sp
 800b444:	a902      	add	r1, sp, #8
 800b446:	f004 ff63 	bl	8010310 <GUI_RectsIntersect>
 800b44a:	b120      	cbz	r0, 800b456 <WM_SetCaptureMove+0x92>
 800b44c:	4620      	mov	r0, r4
 800b44e:	4639      	mov	r1, r7
 800b450:	462a      	mov	r2, r5
 800b452:	f000 f986 	bl	800b762 <WM_MoveWindow>
 800b456:	b005      	add	sp, #20
 800b458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b45c:	20016df0 	.word	0x20016df0

0800b460 <WM__ReleaseCapture>:
 800b460:	b530      	push	{r4, r5, lr}
 800b462:	4d0a      	ldr	r5, [pc, #40]	; (800b48c <WM__ReleaseCapture+0x2c>)
 800b464:	4c0a      	ldr	r4, [pc, #40]	; (800b490 <WM__ReleaseCapture+0x30>)
 800b466:	682b      	ldr	r3, [r5, #0]
 800b468:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800b46c:	b085      	sub	sp, #20
 800b46e:	b150      	cbz	r0, 800b486 <WM__ReleaseCapture+0x26>
 800b470:	a904      	add	r1, sp, #16
 800b472:	2218      	movs	r2, #24
 800b474:	f841 2d10 	str.w	r2, [r1, #-16]!
 800b478:	4669      	mov	r1, sp
 800b47a:	f7ff fdeb 	bl	800b054 <WM__SendMessage>
 800b47e:	6828      	ldr	r0, [r5, #0]
 800b480:	2300      	movs	r3, #0
 800b482:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800b486:	b005      	add	sp, #20
 800b488:	bd30      	pop	{r4, r5, pc}
 800b48a:	bf00      	nop
 800b48c:	200179b4 	.word	0x200179b4
 800b490:	200179d0 	.word	0x200179d0

0800b494 <WM_SetCapture>:
 800b494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <WM_SetCapture+0x28>)
 800b498:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <WM_SetCapture+0x2c>)
 800b49a:	4604      	mov	r4, r0
 800b49c:	6818      	ldr	r0, [r3, #0]
 800b49e:	460f      	mov	r7, r1
 800b4a0:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800b4a4:	42a1      	cmp	r1, r4
 800b4a6:	4615      	mov	r5, r2
 800b4a8:	461e      	mov	r6, r3
 800b4aa:	d001      	beq.n	800b4b0 <WM_SetCapture+0x1c>
 800b4ac:	f7ff ffd8 	bl	800b460 <WM__ReleaseCapture>
 800b4b0:	6832      	ldr	r2, [r6, #0]
 800b4b2:	4b04      	ldr	r3, [pc, #16]	; (800b4c4 <WM_SetCapture+0x30>)
 800b4b4:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 800b4b8:	701f      	strb	r7, [r3, #0]
 800b4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4bc:	200179b4 	.word	0x200179b4
 800b4c0:	200179d0 	.word	0x200179d0
 800b4c4:	200179b8 	.word	0x200179b8

0800b4c8 <WM_SetCallback>:
 800b4c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4ca:	460e      	mov	r6, r1
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	b168      	cbz	r0, 800b4ec <WM_SetCallback+0x24>
 800b4d0:	f006 fa04 	bl	80118dc <GUI_ALLOC_LockH>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	a802      	add	r0, sp, #8
 800b4d8:	6914      	ldr	r4, [r2, #16]
 800b4da:	f840 2d04 	str.w	r2, [r0, #-4]!
 800b4de:	6116      	str	r6, [r2, #16]
 800b4e0:	f006 fa0a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f000 ff3d 	bl	800c364 <WM_InvalidateWindow>
 800b4ea:	e000      	b.n	800b4ee <WM_SetCallback+0x26>
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800b4f2 <WM_SendMessageNoPara>:
 800b4f2:	f007 bd67 	b.w	8012fc4 <WM__SendMessageNoPara>

0800b4f6 <WM_ResizeWindow>:
 800b4f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4f8:	ea52 0301 	orrs.w	r3, r2, r1
 800b4fc:	b08b      	sub	sp, #44	; 0x2c
 800b4fe:	4606      	mov	r6, r0
 800b500:	460c      	mov	r4, r1
 800b502:	4615      	mov	r5, r2
 800b504:	d06f      	beq.n	800b5e6 <WM_ResizeWindow+0xf0>
 800b506:	2800      	cmp	r0, #0
 800b508:	d06d      	beq.n	800b5e6 <WM_ResizeWindow+0xf0>
 800b50a:	f006 f9e7 	bl	80118dc <GUI_ALLOC_LockH>
 800b50e:	4603      	mov	r3, r0
 800b510:	9003      	str	r0, [sp, #12]
 800b512:	c803      	ldmia	r0, {r0, r1}
 800b514:	aa04      	add	r2, sp, #16
 800b516:	af06      	add	r7, sp, #24
 800b518:	e882 0003 	stmia.w	r2, {r0, r1}
 800b51c:	e887 0003 	stmia.w	r7, {r0, r1}
 800b520:	b17c      	cbz	r4, 800b542 <WM_ResizeWindow+0x4c>
 800b522:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b524:	f400 7120 	and.w	r1, r0, #640	; 0x280
 800b528:	2980      	cmp	r1, #128	; 0x80
 800b52a:	d105      	bne.n	800b538 <WM_ResizeWindow+0x42>
 800b52c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800b530:	1b38      	subs	r0, r7, r4
 800b532:	f8ad 0018 	strh.w	r0, [sp, #24]
 800b536:	e004      	b.n	800b542 <WM_ResizeWindow+0x4c>
 800b538:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b53c:	18a4      	adds	r4, r4, r2
 800b53e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800b542:	b185      	cbz	r5, 800b566 <WM_ResizeWindow+0x70>
 800b544:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b546:	f401 62a0 	and.w	r2, r1, #1280	; 0x500
 800b54a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b54e:	d105      	bne.n	800b55c <WM_ResizeWindow+0x66>
 800b550:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800b554:	1b78      	subs	r0, r7, r5
 800b556:	f8ad 001a 	strh.w	r0, [sp, #26]
 800b55a:	e004      	b.n	800b566 <WM_ResizeWindow+0x70>
 800b55c:	f8bd 401e 	ldrh.w	r4, [sp, #30]
 800b560:	192d      	adds	r5, r5, r4
 800b562:	f8ad 501e 	strh.w	r5, [sp, #30]
 800b566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b568:	03da      	lsls	r2, r3, #15
 800b56a:	d502      	bpl.n	800b572 <WM_ResizeWindow+0x7c>
 800b56c:	4630      	mov	r0, r6
 800b56e:	f000 fd79 	bl	800c064 <WM__InvalidateDrawAndDescs>
 800b572:	aa06      	add	r2, sp, #24
 800b574:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b578:	9c03      	ldr	r4, [sp, #12]
 800b57a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b57e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b580:	078b      	lsls	r3, r1, #30
 800b582:	d509      	bpl.n	800b598 <WM_ResizeWindow+0xa2>
 800b584:	a808      	add	r0, sp, #32
 800b586:	a904      	add	r1, sp, #16
 800b588:	f004 ff48 	bl	801041c <GUI_MergeRect>
 800b58c:	9a03      	ldr	r2, [sp, #12]
 800b58e:	a808      	add	r0, sp, #32
 800b590:	6991      	ldr	r1, [r2, #24]
 800b592:	6a12      	ldr	r2, [r2, #32]
 800b594:	f000 fe61 	bl	800c25a <WM__InvalidateRectEx>
 800b598:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 800b59c:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800b5a0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800b5a4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800b5a8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800b5ac:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800b5b0:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800b5b4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800b5b8:	ebc0 000e 	rsb	r0, r0, lr
 800b5bc:	1ae3      	subs	r3, r4, r3
 800b5be:	ac0a      	add	r4, sp, #40	; 0x28
 800b5c0:	1aaa      	subs	r2, r5, r2
 800b5c2:	9000      	str	r0, [sp, #0]
 800b5c4:	1a79      	subs	r1, r7, r1
 800b5c6:	9803      	ldr	r0, [sp, #12]
 800b5c8:	f007 fc7a 	bl	8012ec0 <WM__UpdateChildPositions>
 800b5cc:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800b5d0:	f101 0008 	add.w	r0, r1, #8
 800b5d4:	f004 f9f8 	bl	800f9c8 <GUI__IntersectRect>
 800b5d8:	4630      	mov	r0, r6
 800b5da:	2105      	movs	r1, #5
 800b5dc:	f000 fe70 	bl	800c2c0 <WM__SendMsgNoData>
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f006 f989 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b5e6:	b00b      	add	sp, #44	; 0x2c
 800b5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5ea <WM_NotifyParent>:
 800b5ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ec:	2326      	movs	r3, #38	; 0x26
 800b5ee:	9103      	str	r1, [sp, #12]
 800b5f0:	4669      	mov	r1, sp
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	f007 fd8a 	bl	801310c <WM_SendToParent>
 800b5f8:	b005      	add	sp, #20
 800b5fa:	bd00      	pop	{pc}

0800b5fc <WM_MoveChildTo>:
 800b5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5fe:	460f      	mov	r7, r1
 800b600:	4616      	mov	r6, r2
 800b602:	4605      	mov	r5, r0
 800b604:	b320      	cbz	r0, 800b650 <WM_MoveChildTo+0x54>
 800b606:	f000 f93c 	bl	800b882 <WM_GetParent>
 800b60a:	b308      	cbz	r0, 800b650 <WM_MoveChildTo+0x54>
 800b60c:	f006 f966 	bl	80118dc <GUI_ALLOC_LockH>
 800b610:	9000      	str	r0, [sp, #0]
 800b612:	4628      	mov	r0, r5
 800b614:	f006 f962 	bl	80118dc <GUI_ALLOC_LockH>
 800b618:	ab02      	add	r3, sp, #8
 800b61a:	4604      	mov	r4, r0
 800b61c:	9001      	str	r0, [sp, #4]
 800b61e:	f853 0d08 	ldr.w	r0, [r3, #-8]!
 800b622:	f9b4 2000 	ldrsh.w	r2, [r4]
 800b626:	f9b0 1000 	ldrsh.w	r1, [r0]
 800b62a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800b62e:	1a8b      	subs	r3, r1, r2
 800b630:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b634:	1a42      	subs	r2, r0, r1
 800b636:	4668      	mov	r0, sp
 800b638:	18ff      	adds	r7, r7, r3
 800b63a:	18b6      	adds	r6, r6, r2
 800b63c:	f006 f95c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b640:	a801      	add	r0, sp, #4
 800b642:	f006 f959 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b646:	4628      	mov	r0, r5
 800b648:	4639      	mov	r1, r7
 800b64a:	4632      	mov	r2, r6
 800b64c:	f000 f837 	bl	800b6be <WM__MoveWindow>
 800b650:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800b652 <_MoveDescendents>:
 800b652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	4606      	mov	r6, r0
 800b65a:	460c      	mov	r4, r1
 800b65c:	4615      	mov	r5, r2
 800b65e:	a804      	add	r0, sp, #16
 800b660:	2100      	movs	r1, #0
 800b662:	2210      	movs	r2, #16
 800b664:	f00a fc2a 	bl	8015ebc <memset>
 800b668:	b336      	cbz	r6, 800b6b8 <_MoveDescendents+0x66>
 800b66a:	4630      	mov	r0, r6
 800b66c:	f006 f936 	bl	80118dc <GUI_ALLOC_LockH>
 800b670:	4621      	mov	r1, r4
 800b672:	462a      	mov	r2, r5
 800b674:	9001      	str	r0, [sp, #4]
 800b676:	f004 fec1 	bl	80103fc <GUI_MoveRect>
 800b67a:	9801      	ldr	r0, [sp, #4]
 800b67c:	4621      	mov	r1, r4
 800b67e:	3008      	adds	r0, #8
 800b680:	462a      	mov	r2, r5
 800b682:	f004 febb 	bl	80103fc <GUI_MoveRect>
 800b686:	a808      	add	r0, sp, #32
 800b688:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 800b68c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800b690:	6a17      	ldr	r7, [r2, #32]
 800b692:	f006 f931 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b696:	4640      	mov	r0, r8
 800b698:	4621      	mov	r1, r4
 800b69a:	462a      	mov	r2, r5
 800b69c:	f7ff ffd9 	bl	800b652 <_MoveDescendents>
 800b6a0:	a802      	add	r0, sp, #8
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	9007      	str	r0, [sp, #28]
 800b6a6:	a904      	add	r1, sp, #16
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	9402      	str	r4, [sp, #8]
 800b6ae:	9503      	str	r5, [sp, #12]
 800b6b0:	463e      	mov	r6, r7
 800b6b2:	f7ff fccf 	bl	800b054 <WM__SendMessage>
 800b6b6:	e7d7      	b.n	800b668 <_MoveDescendents+0x16>
 800b6b8:	b008      	add	sp, #32
 800b6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6be <WM__MoveWindow>:
 800b6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c2:	b08a      	sub	sp, #40	; 0x28
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	a806      	add	r0, sp, #24
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	2210      	movs	r2, #16
 800b6d0:	f00a fbf4 	bl	8015ebc <memset>
 800b6d4:	2e00      	cmp	r6, #0
 800b6d6:	d041      	beq.n	800b75c <WM__MoveWindow+0x9e>
 800b6d8:	b90d      	cbnz	r5, 800b6de <WM__MoveWindow+0x20>
 800b6da:	2c00      	cmp	r4, #0
 800b6dc:	d03e      	beq.n	800b75c <WM__MoveWindow+0x9e>
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f006 f8fc 	bl	80118dc <GUI_ALLOC_LockH>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	9001      	str	r0, [sp, #4]
 800b6e8:	c803      	ldmia	r0, {r0, r1}
 800b6ea:	af02      	add	r7, sp, #8
 800b6ec:	e887 0003 	stmia.w	r7, {r0, r1}
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f004 fe81 	bl	80103fc <GUI_MoveRect>
 800b6fa:	9801      	ldr	r0, [sp, #4]
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	3008      	adds	r0, #8
 800b700:	4622      	mov	r2, r4
 800b702:	f004 fe7b 	bl	80103fc <GUI_MoveRect>
 800b706:	a80a      	add	r0, sp, #40	; 0x28
 800b708:	f850 2d24 	ldr.w	r2, [r0, #-36]!
 800b70c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800b710:	f006 f8f2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b714:	4629      	mov	r1, r5
 800b716:	4622      	mov	r2, r4
 800b718:	4640      	mov	r0, r8
 800b71a:	f7ff ff9a 	bl	800b652 <_MoveDescendents>
 800b71e:	4630      	mov	r0, r6
 800b720:	f006 f8dc 	bl	80118dc <GUI_ALLOC_LockH>
 800b724:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b726:	9001      	str	r0, [sp, #4]
 800b728:	078a      	lsls	r2, r1, #30
 800b72a:	d50a      	bpl.n	800b742 <WM__MoveWindow+0x84>
 800b72c:	6981      	ldr	r1, [r0, #24]
 800b72e:	b141      	cbz	r1, 800b742 <WM__MoveWindow+0x84>
 800b730:	6a02      	ldr	r2, [r0, #32]
 800b732:	f000 fda9 	bl	800c288 <WM__InvalidateParent>
 800b736:	9a01      	ldr	r2, [sp, #4]
 800b738:	4638      	mov	r0, r7
 800b73a:	6991      	ldr	r1, [r2, #24]
 800b73c:	6a12      	ldr	r2, [r2, #32]
 800b73e:	f000 fda3 	bl	800c288 <WM__InvalidateParent>
 800b742:	a801      	add	r0, sp, #4
 800b744:	f006 f8d8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b748:	2003      	movs	r0, #3
 800b74a:	9006      	str	r0, [sp, #24]
 800b74c:	ab04      	add	r3, sp, #16
 800b74e:	4630      	mov	r0, r6
 800b750:	a906      	add	r1, sp, #24
 800b752:	9309      	str	r3, [sp, #36]	; 0x24
 800b754:	9504      	str	r5, [sp, #16]
 800b756:	9405      	str	r4, [sp, #20]
 800b758:	f7ff fc7c 	bl	800b054 <WM__SendMessage>
 800b75c:	b00a      	add	sp, #40	; 0x28
 800b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b762 <WM_MoveWindow>:
 800b762:	f7ff bfac 	b.w	800b6be <WM__MoveWindow>

0800b766 <WM_DisableMemdev>:
 800b766:	b508      	push	{r3, lr}
 800b768:	b138      	cbz	r0, 800b77a <WM_DisableMemdev+0x14>
 800b76a:	f006 f8ad 	bl	80118c8 <GUI_ALLOC_h2p>
 800b76e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b774:	f021 0204 	bic.w	r2, r1, #4
 800b778:	6282      	str	r2, [r0, #40]	; 0x28
 800b77a:	bd08      	pop	{r3, pc}

0800b77c <WM_IsWindow>:
 800b77c:	f000 bc62 	b.w	800c044 <WM__IsWindow>

0800b780 <WM_IsFocussable>:
 800b780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b782:	b150      	cbz	r0, 800b79a <WM_IsFocussable+0x1a>
 800b784:	2100      	movs	r1, #0
 800b786:	aa04      	add	r2, sp, #16
 800b788:	9103      	str	r1, [sp, #12]
 800b78a:	231f      	movs	r3, #31
 800b78c:	4669      	mov	r1, sp
 800b78e:	f842 3d10 	str.w	r3, [r2, #-16]!
 800b792:	f000 fd91 	bl	800c2b8 <WM_SendMessage>
 800b796:	9803      	ldr	r0, [sp, #12]
 800b798:	e7ff      	b.n	800b79a <WM_IsFocussable+0x1a>
 800b79a:	b005      	add	sp, #20
 800b79c:	bd00      	pop	{pc}

0800b79e <WM_HideWindow>:
 800b79e:	b513      	push	{r0, r1, r4, lr}
 800b7a0:	b188      	cbz	r0, 800b7c6 <WM_HideWindow+0x28>
 800b7a2:	f006 f89b 	bl	80118dc <GUI_ALLOC_LockH>
 800b7a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b7a8:	ac02      	add	r4, sp, #8
 800b7aa:	0791      	lsls	r1, r2, #30
 800b7ac:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b7b0:	d506      	bpl.n	800b7c0 <WM_HideWindow+0x22>
 800b7b2:	f022 0102 	bic.w	r1, r2, #2
 800b7b6:	6281      	str	r1, [r0, #40]	; 0x28
 800b7b8:	6a02      	ldr	r2, [r0, #32]
 800b7ba:	6981      	ldr	r1, [r0, #24]
 800b7bc:	f000 fd4d 	bl	800c25a <WM__InvalidateRectEx>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f006 f899 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b7c6:	bd1c      	pop	{r2, r3, r4, pc}

0800b7c8 <WM_HasFocus>:
 800b7c8:	4b04      	ldr	r3, [pc, #16]	; (800b7dc <WM_HasFocus+0x14>)
 800b7ca:	4905      	ldr	r1, [pc, #20]	; (800b7e0 <WM_HasFocus+0x18>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800b7d2:	1ac2      	subs	r2, r0, r3
 800b7d4:	4250      	negs	r0, r2
 800b7d6:	4150      	adcs	r0, r2
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	200179b4 	.word	0x200179b4
 800b7e0:	200179a4 	.word	0x200179a4

0800b7e4 <WM_HasCaptured>:
 800b7e4:	4b04      	ldr	r3, [pc, #16]	; (800b7f8 <WM_HasCaptured+0x14>)
 800b7e6:	4905      	ldr	r1, [pc, #20]	; (800b7fc <WM_HasCaptured+0x18>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800b7ee:	1ac2      	subs	r2, r0, r3
 800b7f0:	4250      	negs	r0, r2
 800b7f2:	4150      	adcs	r0, r2
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	200179b4 	.word	0x200179b4
 800b7fc:	200179d0 	.word	0x200179d0

0800b800 <WM__GetWindowSizeX>:
 800b800:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800b804:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b808:	1ad0      	subs	r0, r2, r3
 800b80a:	3001      	adds	r0, #1
 800b80c:	4770      	bx	lr

0800b80e <WM__GetWindowSizeY>:
 800b80e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800b812:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b816:	1ad0      	subs	r0, r2, r3
 800b818:	3001      	adds	r0, #1
 800b81a:	4770      	bx	lr

0800b81c <WM_GetWindowSizeX>:
 800b81c:	b513      	push	{r0, r1, r4, lr}
 800b81e:	b908      	cbnz	r0, 800b824 <WM_GetWindowSizeX+0x8>
 800b820:	f000 ff1a 	bl	800c658 <WM_GetActiveWindow>
 800b824:	f006 f85a 	bl	80118dc <GUI_ALLOC_LockH>
 800b828:	ab02      	add	r3, sp, #8
 800b82a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b82e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b832:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b836:	1aa0      	subs	r0, r4, r2
 800b838:	1c44      	adds	r4, r0, #1
 800b83a:	4618      	mov	r0, r3
 800b83c:	f006 f85c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b840:	4620      	mov	r0, r4
 800b842:	bd1c      	pop	{r2, r3, r4, pc}

0800b844 <WM_GetWindowSizeY>:
 800b844:	b513      	push	{r0, r1, r4, lr}
 800b846:	b908      	cbnz	r0, 800b84c <WM_GetWindowSizeY+0x8>
 800b848:	f000 ff06 	bl	800c658 <WM_GetActiveWindow>
 800b84c:	f006 f846 	bl	80118dc <GUI_ALLOC_LockH>
 800b850:	ab02      	add	r3, sp, #8
 800b852:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800b856:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b85a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b85e:	1aa0      	subs	r0, r4, r2
 800b860:	1c44      	adds	r4, r0, #1
 800b862:	4618      	mov	r0, r3
 800b864:	f006 f848 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b868:	4620      	mov	r0, r4
 800b86a:	bd1c      	pop	{r2, r3, r4, pc}

0800b86c <WM_GetWindowRectEx>:
 800b86c:	b510      	push	{r4, lr}
 800b86e:	460c      	mov	r4, r1
 800b870:	b130      	cbz	r0, 800b880 <WM_GetWindowRectEx+0x14>
 800b872:	b129      	cbz	r1, 800b880 <WM_GetWindowRectEx+0x14>
 800b874:	f006 f828 	bl	80118c8 <GUI_ALLOC_h2p>
 800b878:	4603      	mov	r3, r0
 800b87a:	cb03      	ldmia	r3!, {r0, r1}
 800b87c:	6020      	str	r0, [r4, #0]
 800b87e:	6061      	str	r1, [r4, #4]
 800b880:	bd10      	pop	{r4, pc}

0800b882 <WM_GetParent>:
 800b882:	b508      	push	{r3, lr}
 800b884:	4603      	mov	r3, r0
 800b886:	b110      	cbz	r0, 800b88e <WM_GetParent+0xc>
 800b888:	f006 f81e 	bl	80118c8 <GUI_ALLOC_h2p>
 800b88c:	6983      	ldr	r3, [r0, #24]
 800b88e:	4618      	mov	r0, r3
 800b890:	bd08      	pop	{r3, pc}

0800b892 <WM_GetNextSibling>:
 800b892:	b508      	push	{r3, lr}
 800b894:	4603      	mov	r3, r0
 800b896:	b110      	cbz	r0, 800b89e <WM_GetNextSibling+0xc>
 800b898:	f006 f816 	bl	80118c8 <GUI_ALLOC_h2p>
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	bd08      	pop	{r3, pc}

0800b8a2 <WM_GetId>:
 800b8a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	2210      	movs	r2, #16
 800b8aa:	4668      	mov	r0, sp
 800b8ac:	f00a fb06 	bl	8015ebc <memset>
 800b8b0:	2315      	movs	r3, #21
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	4669      	mov	r1, sp
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	f000 fcfe 	bl	800c2b8 <WM_SendMessage>
 800b8bc:	9803      	ldr	r0, [sp, #12]
 800b8be:	b004      	add	sp, #16
 800b8c0:	bd10      	pop	{r4, pc}
	...

0800b8c4 <WM_GetFocussedWindow>:
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <WM_GetFocussedWindow+0xc>)
 800b8c6:	4803      	ldr	r0, [pc, #12]	; (800b8d4 <WM_GetFocussedWindow+0x10>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b8ce:	4770      	bx	lr
 800b8d0:	200179b4 	.word	0x200179b4
 800b8d4:	200179a4 	.word	0x200179a4

0800b8d8 <WM_GetFirstChild>:
 800b8d8:	b508      	push	{r3, lr}
 800b8da:	4603      	mov	r3, r0
 800b8dc:	b110      	cbz	r0, 800b8e4 <WM_GetFirstChild+0xc>
 800b8de:	f005 fff3 	bl	80118c8 <GUI_ALLOC_h2p>
 800b8e2:	69c3      	ldr	r3, [r0, #28]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	bd08      	pop	{r3, pc}

0800b8e8 <_GetDialogItem>:
 800b8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8ea:	460d      	mov	r5, r1
 800b8ec:	f005 fff6 	bl	80118dc <GUI_ALLOC_LockH>
 800b8f0:	ab02      	add	r3, sp, #8
 800b8f2:	69c4      	ldr	r4, [r0, #28]
 800b8f4:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f005 fffd 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b8fe:	b17c      	cbz	r4, 800b920 <_GetDialogItem+0x38>
 800b900:	4620      	mov	r0, r4
 800b902:	f7ff ffce 	bl	800b8a2 <WM_GetId>
 800b906:	42a8      	cmp	r0, r5
 800b908:	d00a      	beq.n	800b920 <_GetDialogItem+0x38>
 800b90a:	4620      	mov	r0, r4
 800b90c:	4629      	mov	r1, r5
 800b90e:	f7ff ffeb 	bl	800b8e8 <_GetDialogItem>
 800b912:	b920      	cbnz	r0, 800b91e <_GetDialogItem+0x36>
 800b914:	4620      	mov	r0, r4
 800b916:	f005 ffd7 	bl	80118c8 <GUI_ALLOC_h2p>
 800b91a:	6a04      	ldr	r4, [r0, #32]
 800b91c:	e7ef      	b.n	800b8fe <_GetDialogItem+0x16>
 800b91e:	4604      	mov	r4, r0
 800b920:	4620      	mov	r0, r4
 800b922:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b924 <WM_GetDialogItem>:
 800b924:	b108      	cbz	r0, 800b92a <WM_GetDialogItem+0x6>
 800b926:	f7ff bfdf 	b.w	800b8e8 <_GetDialogItem>
 800b92a:	4770      	bx	lr

0800b92c <WM_GetDesktopWindow>:
 800b92c:	4b03      	ldr	r3, [pc, #12]	; (800b93c <WM_GetDesktopWindow+0x10>)
 800b92e:	4904      	ldr	r1, [pc, #16]	; (800b940 <WM_GetDesktopWindow+0x14>)
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	7c42      	ldrb	r2, [r0, #17]
 800b934:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	2000027c 	.word	0x2000027c
 800b940:	20017994 	.word	0x20017994

0800b944 <WM_GetClientWindow>:
 800b944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b946:	a904      	add	r1, sp, #16
 800b948:	2217      	movs	r2, #23
 800b94a:	2300      	movs	r3, #0
 800b94c:	f841 2d10 	str.w	r2, [r1, #-16]!
 800b950:	4669      	mov	r1, sp
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	f000 fcb0 	bl	800c2b8 <WM_SendMessage>
 800b958:	9803      	ldr	r0, [sp, #12]
 800b95a:	b005      	add	sp, #20
 800b95c:	bd00      	pop	{pc}

0800b95e <WM__GetClientRectEx>:
 800b95e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b960:	460d      	mov	r5, r1
 800b962:	b158      	cbz	r0, 800b97c <WM__GetClientRectEx+0x1e>
 800b964:	b151      	cbz	r1, 800b97c <WM__GetClientRectEx+0x1e>
 800b966:	f005 ffb9 	bl	80118dc <GUI_ALLOC_LockH>
 800b96a:	ac02      	add	r4, sp, #8
 800b96c:	4629      	mov	r1, r5
 800b96e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b972:	f000 fcaf 	bl	800c2d4 <WM__GetClientRectWin>
 800b976:	4620      	mov	r0, r4
 800b978:	f005 ffbe 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b97c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b97e <WM_GetClientRectEx>:
 800b97e:	f7ff bfee 	b.w	800b95e <WM__GetClientRectEx>
	...

0800b984 <WM_GetClientRect>:
 800b984:	4b04      	ldr	r3, [pc, #16]	; (800b998 <WM_GetClientRect+0x14>)
 800b986:	4601      	mov	r1, r0
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	b910      	cbnz	r0, 800b992 <WM_GetClientRect+0xe>
 800b98c:	4803      	ldr	r0, [pc, #12]	; (800b99c <WM_GetClientRect+0x18>)
 800b98e:	6802      	ldr	r2, [r0, #0]
 800b990:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800b992:	f7ff bfe4 	b.w	800b95e <WM__GetClientRectEx>
 800b996:	bf00      	nop
 800b998:	20017990 	.word	0x20017990
 800b99c:	2000027c 	.word	0x2000027c

0800b9a0 <WM_GetBkColor>:
 800b9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9a2:	b140      	cbz	r0, 800b9b6 <WM_GetBkColor+0x16>
 800b9a4:	a904      	add	r1, sp, #16
 800b9a6:	2322      	movs	r3, #34	; 0x22
 800b9a8:	f841 3d10 	str.w	r3, [r1, #-16]!
 800b9ac:	4669      	mov	r1, sp
 800b9ae:	f000 fc83 	bl	800c2b8 <WM_SendMessage>
 800b9b2:	9803      	ldr	r0, [sp, #12]
 800b9b4:	e001      	b.n	800b9ba <WM_GetBkColor+0x1a>
 800b9b6:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 800b9ba:	b005      	add	sp, #20
 800b9bc:	bd00      	pop	{pc}

0800b9be <_cbInvalidateOne>:
 800b9be:	f000 bcd1 	b.w	800c364 <WM_InvalidateWindow>
	...

0800b9c4 <WM_BringToTop>:
 800b9c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d032      	beq.n	800ba32 <WM_BringToTop+0x6e>
 800b9cc:	f005 ff86 	bl	80118dc <GUI_ALLOC_LockH>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	9000      	str	r0, [sp, #0]
 800b9d4:	6a00      	ldr	r0, [r0, #32]
 800b9d6:	b908      	cbnz	r0, 800b9dc <WM_BringToTop+0x18>
 800b9d8:	4668      	mov	r0, sp
 800b9da:	e00e      	b.n	800b9fa <WM_BringToTop+0x36>
 800b9dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b9de:	070a      	lsls	r2, r1, #28
 800b9e0:	d411      	bmi.n	800ba06 <WM_BringToTop+0x42>
 800b9e2:	f005 ff7b 	bl	80118dc <GUI_ALLOC_LockH>
 800b9e6:	ad02      	add	r5, sp, #8
 800b9e8:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b9ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b9ee:	0703      	lsls	r3, r0, #28
 800b9f0:	d506      	bpl.n	800ba00 <WM_BringToTop+0x3c>
 800b9f2:	4668      	mov	r0, sp
 800b9f4:	f005 ff80 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	f005 ff7d 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800b9fe:	e018      	b.n	800ba32 <WM_BringToTop+0x6e>
 800ba00:	4628      	mov	r0, r5
 800ba02:	f005 ff79 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ba06:	aa02      	add	r2, sp, #8
 800ba08:	4668      	mov	r0, sp
 800ba0a:	f852 5d08 	ldr.w	r5, [r2, #-8]!
 800ba0e:	69ad      	ldr	r5, [r5, #24]
 800ba10:	f005 ff72 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ba14:	4620      	mov	r0, r4
 800ba16:	f000 faa3 	bl	800bf60 <WM__RemoveWindowFromList>
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f000 fa51 	bl	800bec4 <WM__InsertWindowIntoList>
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 fc9e 	bl	800c364 <WM_InvalidateWindow>
 800ba28:	4620      	mov	r0, r4
 800ba2a:	4902      	ldr	r1, [pc, #8]	; (800ba34 <WM_BringToTop+0x70>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f007 fb9b 	bl	8013168 <WM_ForEachDesc>
 800ba32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800ba34:	0800b9bf 	.word	0x0800b9bf

0800ba38 <_OnExit>:
 800ba38:	4a0a      	ldr	r2, [pc, #40]	; (800ba64 <_OnExit+0x2c>)
 800ba3a:	480b      	ldr	r0, [pc, #44]	; (800ba68 <_OnExit+0x30>)
 800ba3c:	490b      	ldr	r1, [pc, #44]	; (800ba6c <_OnExit+0x34>)
 800ba3e:	2300      	movs	r3, #0
 800ba40:	7013      	strb	r3, [r2, #0]
 800ba42:	6003      	str	r3, [r0, #0]
 800ba44:	600b      	str	r3, [r1, #0]
 800ba46:	480a      	ldr	r0, [pc, #40]	; (800ba70 <_OnExit+0x38>)
 800ba48:	4a0a      	ldr	r2, [pc, #40]	; (800ba74 <_OnExit+0x3c>)
 800ba4a:	490b      	ldr	r1, [pc, #44]	; (800ba78 <_OnExit+0x40>)
 800ba4c:	6003      	str	r3, [r0, #0]
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	600b      	str	r3, [r1, #0]
 800ba52:	6043      	str	r3, [r0, #4]
 800ba54:	6053      	str	r3, [r2, #4]
 800ba56:	4809      	ldr	r0, [pc, #36]	; (800ba7c <_OnExit+0x44>)
 800ba58:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <_OnExit+0x48>)
 800ba5a:	490a      	ldr	r1, [pc, #40]	; (800ba84 <_OnExit+0x4c>)
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	600b      	str	r3, [r1, #0]
 800ba62:	4770      	bx	lr
 800ba64:	20016e1c 	.word	0x20016e1c
 800ba68:	20016df4 	.word	0x20016df4
 800ba6c:	200179c8 	.word	0x200179c8
 800ba70:	200179a4 	.word	0x200179a4
 800ba74:	200179d0 	.word	0x200179d0
 800ba78:	200179dc 	.word	0x200179dc
 800ba7c:	20017990 	.word	0x20017990
 800ba80:	200179bc 	.word	0x200179bc
 800ba84:	200179cc 	.word	0x200179cc

0800ba88 <_Paint1>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	f005 ff1c 	bl	80118c8 <GUI_ALLOC_h2p>
 800ba90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ba92:	4a04      	ldr	r2, [pc, #16]	; (800baa4 <_Paint1+0x1c>)
 800ba94:	4904      	ldr	r1, [pc, #16]	; (800baa8 <_Paint1+0x20>)
 800ba96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ba9a:	bf08      	it	eq
 800ba9c:	4611      	moveq	r1, r2
 800ba9e:	4620      	mov	r0, r4
 800baa0:	4788      	blx	r1
 800baa2:	bd10      	pop	{r4, pc}
 800baa4:	0800c8f9 	.word	0x0800c8f9
 800baa8:	0800ceb9 	.word	0x0800ceb9

0800baac <_Paint1Trans>:
 800baac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bab0:	4c21      	ldr	r4, [pc, #132]	; (800bb38 <_Paint1Trans+0x8c>)
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	4605      	mov	r5, r0
 800bab6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800bab8:	f005 ff10 	bl	80118dc <GUI_ALLOC_LockH>
 800babc:	9000      	str	r0, [sp, #0]
 800babe:	4628      	mov	r0, r5
 800bac0:	f005 ff0c 	bl	80118dc <GUI_ALLOC_LockH>
 800bac4:	4601      	mov	r1, r0
 800bac6:	9001      	str	r0, [sp, #4]
 800bac8:	9800      	ldr	r0, [sp, #0]
 800baca:	3008      	adds	r0, #8
 800bacc:	f004 fc20 	bl	8010310 <GUI_RectsIntersect>
 800bad0:	4606      	mov	r6, r0
 800bad2:	b340      	cbz	r0, 800bb26 <_Paint1Trans+0x7a>
 800bad4:	ae02      	add	r6, sp, #8
 800bad6:	6820      	ldr	r0, [r4, #0]
 800bad8:	9901      	ldr	r1, [sp, #4]
 800bada:	f856 2d08 	ldr.w	r2, [r6, #-8]!
 800bade:	f8d0 804c 	ldr.w	r8, [r0, #76]	; 0x4c
 800bae2:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800bae4:	4e15      	ldr	r6, [pc, #84]	; (800bb3c <_Paint1Trans+0x90>)
 800bae6:	f101 0008 	add.w	r0, r1, #8
 800baea:	3208      	adds	r2, #8
 800baec:	f003 ff3a 	bl	800f964 <GUI__IntersectRects>
 800baf0:	4668      	mov	r0, sp
 800baf2:	f005 ff01 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800baf6:	a802      	add	r0, sp, #8
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800bafe:	6035      	str	r5, [r6, #0]
 800bb00:	f9b2 1000 	ldrsh.w	r1, [r2]
 800bb04:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800bb08:	64d9      	str	r1, [r3, #76]	; 0x4c
 800bb0a:	651a      	str	r2, [r3, #80]	; 0x50
 800bb0c:	f005 fef4 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7ff ffb9 	bl	800ba88 <_Paint1>
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	2000      	movs	r0, #0
 800bb1a:	6030      	str	r0, [r6, #0]
 800bb1c:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 800bb20:	651f      	str	r7, [r3, #80]	; 0x50
 800bb22:	2001      	movs	r0, #1
 800bb24:	e006      	b.n	800bb34 <_Paint1Trans+0x88>
 800bb26:	4668      	mov	r0, sp
 800bb28:	f005 fee6 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bb2c:	a801      	add	r0, sp, #4
 800bb2e:	f005 fee3 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bb32:	4630      	mov	r0, r6
 800bb34:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 800bb38:	2000027c 	.word	0x2000027c
 800bb3c:	20017990 	.word	0x20017990

0800bb40 <_PaintTransChildren>:
 800bb40:	b530      	push	{r4, r5, lr}
 800bb42:	b085      	sub	sp, #20
 800bb44:	4605      	mov	r5, r0
 800bb46:	f005 fec9 	bl	80118dc <GUI_ALLOC_LockH>
 800bb4a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bb4c:	9001      	str	r0, [sp, #4]
 800bb4e:	0793      	lsls	r3, r2, #30
 800bb50:	d404      	bmi.n	800bb5c <_PaintTransChildren+0x1c>
 800bb52:	a801      	add	r0, sp, #4
 800bb54:	f005 fed0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bb58:	b005      	add	sp, #20
 800bb5a:	bd30      	pop	{r4, r5, pc}
 800bb5c:	69c4      	ldr	r4, [r0, #28]
 800bb5e:	2c00      	cmp	r4, #0
 800bb60:	d0f7      	beq.n	800bb52 <_PaintTransChildren+0x12>
 800bb62:	4620      	mov	r0, r4
 800bb64:	f005 feba 	bl	80118dc <GUI_ALLOC_LockH>
 800bb68:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800bb6a:	9000      	str	r0, [sp, #0]
 800bb6c:	f001 0203 	and.w	r2, r1, #3
 800bb70:	2a03      	cmp	r2, #3
 800bb72:	d133      	bne.n	800bbdc <_PaintTransChildren+0x9c>
 800bb74:	9901      	ldr	r1, [sp, #4]
 800bb76:	3108      	adds	r1, #8
 800bb78:	f004 fbca 	bl	8010310 <GUI_RectsIntersect>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d02d      	beq.n	800bbdc <_PaintTransChildren+0x9c>
 800bb80:	9801      	ldr	r0, [sp, #4]
 800bb82:	3008      	adds	r0, #8
 800bb84:	c803      	ldmia	r0, {r0, r1}
 800bb86:	ab04      	add	r3, sp, #16
 800bb88:	e903 0003 	stmdb	r3, {r0, r1}
 800bb8c:	a801      	add	r0, sp, #4
 800bb8e:	f005 feb3 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bb92:	4668      	mov	r0, sp
 800bb94:	f005 feb0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f7ff ff87 	bl	800baac <_Paint1Trans>
 800bb9e:	b170      	cbz	r0, 800bbbe <_PaintTransChildren+0x7e>
 800bba0:	4620      	mov	r0, r4
 800bba2:	f005 fe91 	bl	80118c8 <GUI_ALLOC_h2p>
 800bba6:	9000      	str	r0, [sp, #0]
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7ff ffc9 	bl	800bb40 <_PaintTransChildren>
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f005 fe8a 	bl	80118c8 <GUI_ALLOC_h2p>
 800bbb4:	9000      	str	r0, [sp, #0]
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f005 fe86 	bl	80118c8 <GUI_ALLOC_h2p>
 800bbbc:	9001      	str	r0, [sp, #4]
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f005 fe8c 	bl	80118dc <GUI_ALLOC_LockH>
 800bbc4:	9001      	str	r0, [sp, #4]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f005 fe88 	bl	80118dc <GUI_ALLOC_LockH>
 800bbcc:	a904      	add	r1, sp, #16
 800bbce:	9000      	str	r0, [sp, #0]
 800bbd0:	9c01      	ldr	r4, [sp, #4]
 800bbd2:	e911 0003 	ldmdb	r1, {r0, r1}
 800bbd6:	3408      	adds	r4, #8
 800bbd8:	e884 0003 	stmia.w	r4, {r0, r1}
 800bbdc:	a804      	add	r0, sp, #16
 800bbde:	f850 2d10 	ldr.w	r2, [r0, #-16]!
 800bbe2:	4668      	mov	r0, sp
 800bbe4:	6a14      	ldr	r4, [r2, #32]
 800bbe6:	f005 fe87 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bbea:	e7b8      	b.n	800bb5e <_PaintTransChildren+0x1e>

0800bbec <_Findy1>:
 800bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbee:	4606      	mov	r6, r0
 800bbf0:	b085      	sub	sp, #20
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	4615      	mov	r5, r2
 800bbf6:	2e00      	cmp	r6, #0
 800bbf8:	d04c      	beq.n	800bc94 <_Findy1+0xa8>
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f005 fe6e 	bl	80118dc <GUI_ALLOC_LockH>
 800bc00:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800bc02:	9001      	str	r0, [sp, #4]
 800bc04:	07ba      	lsls	r2, r7, #30
 800bc06:	4601      	mov	r1, r0
 800bc08:	d53d      	bpl.n	800bc86 <_Findy1+0x9a>
 800bc0a:	ae02      	add	r6, sp, #8
 800bc0c:	b125      	cbz	r5, 800bc18 <_Findy1+0x2c>
 800bc0e:	4630      	mov	r0, r6
 800bc10:	462a      	mov	r2, r5
 800bc12:	f003 fea7 	bl	800f964 <GUI__IntersectRects>
 800bc16:	e002      	b.n	800bc1e <_Findy1+0x32>
 800bc18:	c803      	ldmia	r0, {r0, r1}
 800bc1a:	e886 0003 	stmia.w	r6, {r0, r1}
 800bc1e:	4620      	mov	r0, r4
 800bc20:	4631      	mov	r1, r6
 800bc22:	f004 fb75 	bl	8010310 <GUI_RectsIntersect>
 800bc26:	b370      	cbz	r0, 800bc86 <_Findy1+0x9a>
 800bc28:	f017 0f01 	tst.w	r7, #1
 800bc2c:	9b01      	ldr	r3, [sp, #4]
 800bc2e:	d11e      	bne.n	800bc6e <_Findy1+0x82>
 800bc30:	b13d      	cbz	r5, 800bc42 <_Findy1+0x56>
 800bc32:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800bc36:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 800bc3a:	4282      	cmp	r2, r0
 800bc3c:	bfa8      	it	ge
 800bc3e:	4610      	movge	r0, r2
 800bc40:	e001      	b.n	800bc46 <_Findy1+0x5a>
 800bc42:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800bc46:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800bc4a:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 800bc4e:	4288      	cmp	r0, r1
 800bc50:	dd06      	ble.n	800bc60 <_Findy1+0x74>
 800bc52:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800bc56:	b211      	sxth	r1, r2
 800bc58:	428e      	cmp	r6, r1
 800bc5a:	db14      	blt.n	800bc86 <_Findy1+0x9a>
 800bc5c:	1e53      	subs	r3, r2, #1
 800bc5e:	e004      	b.n	800bc6a <_Findy1+0x7e>
 800bc60:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800bc64:	b218      	sxth	r0, r3
 800bc66:	4286      	cmp	r6, r0
 800bc68:	dd0d      	ble.n	800bc86 <_Findy1+0x9a>
 800bc6a:	80e3      	strh	r3, [r4, #6]
 800bc6c:	e00b      	b.n	800bc86 <_Findy1+0x9a>
 800bc6e:	69de      	ldr	r6, [r3, #28]
 800bc70:	b14e      	cbz	r6, 800bc86 <_Findy1+0x9a>
 800bc72:	4630      	mov	r0, r6
 800bc74:	4621      	mov	r1, r4
 800bc76:	aa02      	add	r2, sp, #8
 800bc78:	f7ff ffb8 	bl	800bbec <_Findy1>
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	f005 fe23 	bl	80118c8 <GUI_ALLOC_h2p>
 800bc82:	6a06      	ldr	r6, [r0, #32]
 800bc84:	e7f4      	b.n	800bc70 <_Findy1+0x84>
 800bc86:	a804      	add	r0, sp, #16
 800bc88:	f850 6d0c 	ldr.w	r6, [r0, #-12]!
 800bc8c:	6a36      	ldr	r6, [r6, #32]
 800bc8e:	f005 fe33 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bc92:	e7b0      	b.n	800bbf6 <_Findy1+0xa>
 800bc94:	b005      	add	sp, #20
 800bc96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc98 <_Findx0>:
 800bc98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	460e      	mov	r6, r1
 800bca0:	4617      	mov	r7, r2
 800bca2:	2400      	movs	r4, #0
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	d038      	beq.n	800bd1a <_Findx0+0x82>
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f005 fe17 	bl	80118dc <GUI_ALLOC_LockH>
 800bcae:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 800bcb2:	9001      	str	r0, [sp, #4]
 800bcb4:	f018 0f02 	tst.w	r8, #2
 800bcb8:	4601      	mov	r1, r0
 800bcba:	d027      	beq.n	800bd0c <_Findx0+0x74>
 800bcbc:	ad02      	add	r5, sp, #8
 800bcbe:	b127      	cbz	r7, 800bcca <_Findx0+0x32>
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	463a      	mov	r2, r7
 800bcc4:	f003 fe4e 	bl	800f964 <GUI__IntersectRects>
 800bcc8:	e002      	b.n	800bcd0 <_Findx0+0x38>
 800bcca:	c803      	ldmia	r0, {r0, r1}
 800bccc:	e885 0003 	stmia.w	r5, {r0, r1}
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f004 fb1c 	bl	8010310 <GUI_RectsIntersect>
 800bcd8:	b1c0      	cbz	r0, 800bd0c <_Findx0+0x74>
 800bcda:	f018 0f01 	tst.w	r8, #1
 800bcde:	d105      	bne.n	800bcec <_Findx0+0x54>
 800bce0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800bce4:	1c41      	adds	r1, r0, #1
 800bce6:	8031      	strh	r1, [r6, #0]
 800bce8:	2401      	movs	r4, #1
 800bcea:	e00f      	b.n	800bd0c <_Findx0+0x74>
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	69dd      	ldr	r5, [r3, #28]
 800bcf0:	b165      	cbz	r5, 800bd0c <_Findx0+0x74>
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	aa02      	add	r2, sp, #8
 800bcf8:	f7ff ffce 	bl	800bc98 <_Findx0>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	bf18      	it	ne
 800bd00:	2401      	movne	r4, #1
 800bd02:	4628      	mov	r0, r5
 800bd04:	f005 fde0 	bl	80118c8 <GUI_ALLOC_h2p>
 800bd08:	6a05      	ldr	r5, [r0, #32]
 800bd0a:	e7f1      	b.n	800bcf0 <_Findx0+0x58>
 800bd0c:	a804      	add	r0, sp, #16
 800bd0e:	f850 2d0c 	ldr.w	r2, [r0, #-12]!
 800bd12:	6a15      	ldr	r5, [r2, #32]
 800bd14:	f005 fdf0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bd18:	e7c4      	b.n	800bca4 <_Findx0+0xc>
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	b004      	add	sp, #16
 800bd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd22 <_Findx1>:
 800bd22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd24:	4604      	mov	r4, r0
 800bd26:	b085      	sub	sp, #20
 800bd28:	460d      	mov	r5, r1
 800bd2a:	4616      	mov	r6, r2
 800bd2c:	2c00      	cmp	r4, #0
 800bd2e:	d031      	beq.n	800bd94 <_Findx1+0x72>
 800bd30:	4620      	mov	r0, r4
 800bd32:	f005 fdd3 	bl	80118dc <GUI_ALLOC_LockH>
 800bd36:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800bd38:	9001      	str	r0, [sp, #4]
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	07b8      	lsls	r0, r7, #30
 800bd3e:	d522      	bpl.n	800bd86 <_Findx1+0x64>
 800bd40:	ac02      	add	r4, sp, #8
 800bd42:	b126      	cbz	r6, 800bd4e <_Findx1+0x2c>
 800bd44:	4620      	mov	r0, r4
 800bd46:	4632      	mov	r2, r6
 800bd48:	f003 fe0c 	bl	800f964 <GUI__IntersectRects>
 800bd4c:	e002      	b.n	800bd54 <_Findx1+0x32>
 800bd4e:	c903      	ldmia	r1, {r0, r1}
 800bd50:	e884 0003 	stmia.w	r4, {r0, r1}
 800bd54:	4628      	mov	r0, r5
 800bd56:	4621      	mov	r1, r4
 800bd58:	f004 fada 	bl	8010310 <GUI_RectsIntersect>
 800bd5c:	b198      	cbz	r0, 800bd86 <_Findx1+0x64>
 800bd5e:	07f9      	lsls	r1, r7, #31
 800bd60:	d404      	bmi.n	800bd6c <_Findx1+0x4a>
 800bd62:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800bd66:	1e41      	subs	r1, r0, #1
 800bd68:	80a9      	strh	r1, [r5, #4]
 800bd6a:	e00c      	b.n	800bd86 <_Findx1+0x64>
 800bd6c:	9b01      	ldr	r3, [sp, #4]
 800bd6e:	69dc      	ldr	r4, [r3, #28]
 800bd70:	b14c      	cbz	r4, 800bd86 <_Findx1+0x64>
 800bd72:	4620      	mov	r0, r4
 800bd74:	4629      	mov	r1, r5
 800bd76:	aa02      	add	r2, sp, #8
 800bd78:	f7ff ffd3 	bl	800bd22 <_Findx1>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f005 fda3 	bl	80118c8 <GUI_ALLOC_h2p>
 800bd82:	6a04      	ldr	r4, [r0, #32]
 800bd84:	e7f4      	b.n	800bd70 <_Findx1+0x4e>
 800bd86:	a804      	add	r0, sp, #16
 800bd88:	f850 2d0c 	ldr.w	r2, [r0, #-12]!
 800bd8c:	6a14      	ldr	r4, [r2, #32]
 800bd8e:	f005 fdb3 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bd92:	e7cb      	b.n	800bd2c <_Findx1+0xa>
 800bd94:	b005      	add	sp, #20
 800bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd98 <WM__PaintWinAndOverlays>:
 800bd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	f005 fd9e 	bl	80118dc <GUI_ALLOC_LockH>
 800bda0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bda2:	9001      	str	r0, [sp, #4]
 800bda4:	f640 0301 	movw	r3, #2049	; 0x801
 800bda8:	4013      	ands	r3, r2
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d005      	beq.n	800bdba <WM__PaintWinAndOverlays+0x22>
 800bdae:	a801      	add	r0, sp, #4
 800bdb0:	f005 fda2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f7ff fe67 	bl	800ba88 <_Paint1>
 800bdba:	4813      	ldr	r0, [pc, #76]	; (800be08 <WM__PaintWinAndOverlays+0x70>)
 800bdbc:	6801      	ldr	r1, [r0, #0]
 800bdbe:	b311      	cbz	r1, 800be06 <WM__PaintWinAndOverlays+0x6e>
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f7ff febd 	bl	800bb40 <_PaintTransChildren>
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f005 fd7e 	bl	80118c8 <GUI_ALLOC_h2p>
 800bdcc:	6985      	ldr	r5, [r0, #24]
 800bdce:	6a04      	ldr	r4, [r0, #32]
 800bdd0:	b1cd      	cbz	r5, 800be06 <WM__PaintWinAndOverlays+0x6e>
 800bdd2:	b194      	cbz	r4, 800bdfa <WM__PaintWinAndOverlays+0x62>
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f005 fd77 	bl	80118c8 <GUI_ALLOC_h2p>
 800bdda:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bddc:	f002 0303 	and.w	r3, r2, #3
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d102      	bne.n	800bdea <WM__PaintWinAndOverlays+0x52>
 800bde4:	4620      	mov	r0, r4
 800bde6:	f7ff fe61 	bl	800baac <_Paint1Trans>
 800bdea:	4620      	mov	r0, r4
 800bdec:	f7ff fea8 	bl	800bb40 <_PaintTransChildren>
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f005 fd69 	bl	80118c8 <GUI_ALLOC_h2p>
 800bdf6:	6a04      	ldr	r4, [r0, #32]
 800bdf8:	e7eb      	b.n	800bdd2 <WM__PaintWinAndOverlays+0x3a>
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f005 fd64 	bl	80118c8 <GUI_ALLOC_h2p>
 800be00:	6a04      	ldr	r4, [r0, #32]
 800be02:	6985      	ldr	r5, [r0, #24]
 800be04:	e7e4      	b.n	800bdd0 <WM__PaintWinAndOverlays+0x38>
 800be06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800be08:	200179dc 	.word	0x200179dc

0800be0c <_cbPaintMemDev>:
 800be0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800be0e:	4d14      	ldr	r5, [pc, #80]	; (800be60 <_cbPaintMemDev+0x54>)
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	4606      	mov	r6, r0
 800be14:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800be16:	f005 fd61 	bl	80118dc <GUI_ALLOC_LockH>
 800be1a:	f100 0308 	add.w	r3, r0, #8
 800be1e:	9001      	str	r0, [sp, #4]
 800be20:	682a      	ldr	r2, [r5, #0]
 800be22:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be26:	3208      	adds	r2, #8
 800be28:	ac02      	add	r4, sp, #8
 800be2a:	e884 0003 	stmia.w	r4, {r0, r1}
 800be2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be32:	e883 0003 	stmia.w	r3, {r0, r1}
 800be36:	a801      	add	r0, sp, #4
 800be38:	f005 fd5e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800be3c:	6830      	ldr	r0, [r6, #0]
 800be3e:	f7ff ffab 	bl	800bd98 <WM__PaintWinAndOverlays>
 800be42:	6828      	ldr	r0, [r5, #0]
 800be44:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800be46:	f005 fd49 	bl	80118dc <GUI_ALLOC_LockH>
 800be4a:	f100 0308 	add.w	r3, r0, #8
 800be4e:	9001      	str	r0, [sp, #4]
 800be50:	e894 0003 	ldmia.w	r4, {r0, r1}
 800be54:	e883 0003 	stmia.w	r3, {r0, r1}
 800be58:	a801      	add	r0, sp, #4
 800be5a:	f005 fd4d 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800be5e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 800be60:	2000027c 	.word	0x2000027c

0800be64 <WM__ClipAtParentBorders>:
 800be64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be66:	4607      	mov	r7, r0
 800be68:	460d      	mov	r5, r1
 800be6a:	4628      	mov	r0, r5
 800be6c:	f005 fd36 	bl	80118dc <GUI_ALLOC_LockH>
 800be70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800be72:	ac02      	add	r4, sp, #8
 800be74:	f013 0602 	ands.w	r6, r3, #2
 800be78:	4601      	mov	r1, r0
 800be7a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800be7e:	d104      	bne.n	800be8a <WM__ClipAtParentBorders+0x26>
 800be80:	4620      	mov	r0, r4
 800be82:	f005 fd39 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800be86:	4630      	mov	r0, r6
 800be88:	e019      	b.n	800bebe <WM__ClipAtParentBorders+0x5a>
 800be8a:	4638      	mov	r0, r7
 800be8c:	f003 fd9c 	bl	800f9c8 <GUI__IntersectRect>
 800be90:	9801      	ldr	r0, [sp, #4]
 800be92:	6986      	ldr	r6, [r0, #24]
 800be94:	4620      	mov	r0, r4
 800be96:	b96e      	cbnz	r6, 800beb4 <WM__ClipAtParentBorders+0x50>
 800be98:	f005 fd2e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800be9c:	4908      	ldr	r1, [pc, #32]	; (800bec0 <WM__ClipAtParentBorders+0x5c>)
 800be9e:	680a      	ldr	r2, [r1, #0]
 800bea0:	4295      	cmp	r5, r2
 800bea2:	d00b      	beq.n	800bebc <WM__ClipAtParentBorders+0x58>
 800bea4:	684b      	ldr	r3, [r1, #4]
 800bea6:	ebb5 0c03 	subs.w	ip, r5, r3
 800beaa:	f1dc 0000 	rsbs	r0, ip, #0
 800beae:	eb50 000c 	adcs.w	r0, r0, ip
 800beb2:	e004      	b.n	800bebe <WM__ClipAtParentBorders+0x5a>
 800beb4:	f005 fd20 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800beb8:	4635      	mov	r5, r6
 800beba:	e7d6      	b.n	800be6a <WM__ClipAtParentBorders+0x6>
 800bebc:	2001      	movs	r0, #1
 800bebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bec0:	20017994 	.word	0x20017994

0800bec4 <WM__InsertWindowIntoList>:
 800bec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bec6:	4604      	mov	r4, r0
 800bec8:	460d      	mov	r5, r1
 800beca:	2900      	cmp	r1, #0
 800becc:	d047      	beq.n	800bf5e <WM__InsertWindowIntoList+0x9a>
 800bece:	f005 fd05 	bl	80118dc <GUI_ALLOC_LockH>
 800bed2:	2300      	movs	r3, #0
 800bed4:	6185      	str	r5, [r0, #24]
 800bed6:	9001      	str	r0, [sp, #4]
 800bed8:	6203      	str	r3, [r0, #32]
 800beda:	4628      	mov	r0, r5
 800bedc:	f005 fcfe 	bl	80118dc <GUI_ALLOC_LockH>
 800bee0:	9901      	ldr	r1, [sp, #4]
 800bee2:	69c5      	ldr	r5, [r0, #28]
 800bee4:	9002      	str	r0, [sp, #8]
 800bee6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800bee8:	b92d      	cbnz	r5, 800bef6 <WM__InsertWindowIntoList+0x32>
 800beea:	61c4      	str	r4, [r0, #28]
 800beec:	a801      	add	r0, sp, #4
 800beee:	f005 fd03 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bef2:	a802      	add	r0, sp, #8
 800bef4:	e031      	b.n	800bf5a <WM__InsertWindowIntoList+0x96>
 800bef6:	4628      	mov	r0, r5
 800bef8:	f005 fcf0 	bl	80118dc <GUI_ALLOC_LockH>
 800befc:	f006 0608 	and.w	r6, r6, #8
 800bf00:	9003      	str	r0, [sp, #12]
 800bf02:	b976      	cbnz	r6, 800bf22 <WM__InsertWindowIntoList+0x5e>
 800bf04:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bf06:	0702      	lsls	r2, r0, #28
 800bf08:	d50b      	bpl.n	800bf22 <WM__InsertWindowIntoList+0x5e>
 800bf0a:	9a01      	ldr	r2, [sp, #4]
 800bf0c:	9b02      	ldr	r3, [sp, #8]
 800bf0e:	6215      	str	r5, [r2, #32]
 800bf10:	61dc      	str	r4, [r3, #28]
 800bf12:	a801      	add	r0, sp, #4
 800bf14:	f005 fcf0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bf18:	a802      	add	r0, sp, #8
 800bf1a:	f005 fced 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bf1e:	a803      	add	r0, sp, #12
 800bf20:	e01b      	b.n	800bf5a <WM__InsertWindowIntoList+0x96>
 800bf22:	a802      	add	r0, sp, #8
 800bf24:	f005 fce8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bf28:	a803      	add	r0, sp, #12
 800bf2a:	f005 fce5 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f005 fcca 	bl	80118c8 <GUI_ALLOC_h2p>
 800bf34:	9003      	str	r0, [sp, #12]
 800bf36:	9a03      	ldr	r2, [sp, #12]
 800bf38:	6a15      	ldr	r5, [r2, #32]
 800bf3a:	b90d      	cbnz	r5, 800bf40 <WM__InsertWindowIntoList+0x7c>
 800bf3c:	6214      	str	r4, [r2, #32]
 800bf3e:	e00b      	b.n	800bf58 <WM__InsertWindowIntoList+0x94>
 800bf40:	4628      	mov	r0, r5
 800bf42:	f005 fcc1 	bl	80118c8 <GUI_ALLOC_h2p>
 800bf46:	2e00      	cmp	r6, #0
 800bf48:	d1f4      	bne.n	800bf34 <WM__InsertWindowIntoList+0x70>
 800bf4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bf4c:	071b      	lsls	r3, r3, #28
 800bf4e:	d5f1      	bpl.n	800bf34 <WM__InsertWindowIntoList+0x70>
 800bf50:	9903      	ldr	r1, [sp, #12]
 800bf52:	9801      	ldr	r0, [sp, #4]
 800bf54:	620c      	str	r4, [r1, #32]
 800bf56:	6205      	str	r5, [r0, #32]
 800bf58:	a801      	add	r0, sp, #4
 800bf5a:	f005 fccd 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bf5e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0800bf60 <WM__RemoveWindowFromList>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	4604      	mov	r4, r0
 800bf64:	f005 fcb0 	bl	80118c8 <GUI_ALLOC_h2p>
 800bf68:	4605      	mov	r5, r0
 800bf6a:	6980      	ldr	r0, [r0, #24]
 800bf6c:	b1a8      	cbz	r0, 800bf9a <WM__RemoveWindowFromList+0x3a>
 800bf6e:	f005 fcab 	bl	80118c8 <GUI_ALLOC_h2p>
 800bf72:	69c3      	ldr	r3, [r0, #28]
 800bf74:	42a3      	cmp	r3, r4
 800bf76:	4606      	mov	r6, r0
 800bf78:	d105      	bne.n	800bf86 <WM__RemoveWindowFromList+0x26>
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f005 fca4 	bl	80118c8 <GUI_ALLOC_h2p>
 800bf80:	6a00      	ldr	r0, [r0, #32]
 800bf82:	61f0      	str	r0, [r6, #28]
 800bf84:	bd70      	pop	{r4, r5, r6, pc}
 800bf86:	b143      	cbz	r3, 800bf9a <WM__RemoveWindowFromList+0x3a>
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f005 fc9d 	bl	80118c8 <GUI_ALLOC_h2p>
 800bf8e:	6a03      	ldr	r3, [r0, #32]
 800bf90:	42a3      	cmp	r3, r4
 800bf92:	d1f8      	bne.n	800bf86 <WM__RemoveWindowFromList+0x26>
 800bf94:	6a29      	ldr	r1, [r5, #32]
 800bf96:	6201      	str	r1, [r0, #32]
 800bf98:	bd70      	pop	{r4, r5, r6, pc}
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}

0800bf9c <WM__Client2Screen>:
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800bfa4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800bfa8:	f004 ba28 	b.w	80103fc <GUI_MoveRect>

0800bfac <_SetClipRectUserIntersect>:
 800bfac:	4b11      	ldr	r3, [pc, #68]	; (800bff4 <_SetClipRectUserIntersect+0x48>)
 800bfae:	b530      	push	{r4, r5, lr}
 800bfb0:	681c      	ldr	r4, [r3, #0]
 800bfb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bfb4:	b085      	sub	sp, #20
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	b1ba      	cbz	r2, 800bfea <_SetClipRectUserIntersect+0x3e>
 800bfba:	6810      	ldr	r0, [r2, #0]
 800bfbc:	6851      	ldr	r1, [r2, #4]
 800bfbe:	ab02      	add	r3, sp, #8
 800bfc0:	c303      	stmia	r3!, {r0, r1}
 800bfc2:	480d      	ldr	r0, [pc, #52]	; (800bff8 <_SetClipRectUserIntersect+0x4c>)
 800bfc4:	6800      	ldr	r0, [r0, #0]
 800bfc6:	b900      	cbnz	r0, 800bfca <_SetClipRectUserIntersect+0x1e>
 800bfc8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bfca:	f005 fc87 	bl	80118dc <GUI_ALLOC_LockH>
 800bfce:	ac04      	add	r4, sp, #16
 800bfd0:	a902      	add	r1, sp, #8
 800bfd2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800bfd6:	f7ff ffe1 	bl	800bf9c <WM__Client2Screen>
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f005 fc8c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800bfe0:	a802      	add	r0, sp, #8
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	f003 fcf0 	bl	800f9c8 <GUI__IntersectRect>
 800bfe8:	a802      	add	r0, sp, #8
 800bfea:	f002 ff01 	bl	800edf0 <LCD_SetClipRectEx>
 800bfee:	b005      	add	sp, #20
 800bff0:	bd30      	pop	{r4, r5, pc}
 800bff2:	bf00      	nop
 800bff4:	2000027c 	.word	0x2000027c
 800bff8:	20017990 	.word	0x20017990

0800bffc <WM__ActivateClipRect>:
 800bffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bffe:	4b0e      	ldr	r3, [pc, #56]	; (800c038 <WM__ActivateClipRect+0x3c>)
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800c006:	b10a      	cbz	r2, 800c00c <WM__ActivateClipRect+0x10>
 800c008:	480c      	ldr	r0, [pc, #48]	; (800c03c <WM__ActivateClipRect+0x40>)
 800c00a:	e011      	b.n	800c030 <WM__ActivateClipRect+0x34>
 800c00c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800c00e:	f005 fc65 	bl	80118dc <GUI_ALLOC_LockH>
 800c012:	9001      	str	r0, [sp, #4]
 800c014:	c803      	ldmia	r0, {r0, r1}
 800c016:	ac02      	add	r4, sp, #8
 800c018:	e884 0003 	stmia.w	r4, {r0, r1}
 800c01c:	a801      	add	r0, sp, #4
 800c01e:	f005 fc6b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c022:	4907      	ldr	r1, [pc, #28]	; (800c040 <WM__ActivateClipRect+0x44>)
 800c024:	6809      	ldr	r1, [r1, #0]
 800c026:	b111      	cbz	r1, 800c02e <WM__ActivateClipRect+0x32>
 800c028:	4620      	mov	r0, r4
 800c02a:	f7ff ff1b 	bl	800be64 <WM__ClipAtParentBorders>
 800c02e:	4620      	mov	r0, r4
 800c030:	f7ff ffbc 	bl	800bfac <_SetClipRectUserIntersect>
 800c034:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800c036:	bf00      	nop
 800c038:	2000027c 	.word	0x2000027c
 800c03c:	20016e08 	.word	0x20016e08
 800c040:	20017990 	.word	0x20017990

0800c044 <WM__IsWindow>:
 800c044:	4b06      	ldr	r3, [pc, #24]	; (800c060 <WM__IsWindow+0x1c>)
 800c046:	b510      	push	{r4, lr}
 800c048:	4604      	mov	r4, r0
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	b128      	cbz	r0, 800c05a <WM__IsWindow+0x16>
 800c04e:	42a0      	cmp	r0, r4
 800c050:	d004      	beq.n	800c05c <WM__IsWindow+0x18>
 800c052:	f005 fc39 	bl	80118c8 <GUI_ALLOC_h2p>
 800c056:	6940      	ldr	r0, [r0, #20]
 800c058:	e7f8      	b.n	800c04c <WM__IsWindow+0x8>
 800c05a:	bd10      	pop	{r4, pc}
 800c05c:	2001      	movs	r0, #1
 800c05e:	bd10      	pop	{r4, pc}
 800c060:	200179b0 	.word	0x200179b0

0800c064 <WM__InvalidateDrawAndDescs>:
 800c064:	b513      	push	{r0, r1, r4, lr}
 800c066:	4604      	mov	r4, r0
 800c068:	b300      	cbz	r0, 800c0ac <WM__InvalidateDrawAndDescs+0x48>
 800c06a:	f005 fc37 	bl	80118dc <GUI_ALLOC_LockH>
 800c06e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c070:	9001      	str	r0, [sp, #4]
 800c072:	0791      	lsls	r1, r2, #30
 800c074:	d517      	bpl.n	800c0a6 <WM__InvalidateDrawAndDescs+0x42>
 800c076:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c078:	b140      	cbz	r0, 800c08c <WM__InvalidateDrawAndDescs+0x28>
 800c07a:	4b0d      	ldr	r3, [pc, #52]	; (800c0b0 <WM__InvalidateDrawAndDescs+0x4c>)
 800c07c:	6819      	ldr	r1, [r3, #0]
 800c07e:	42a1      	cmp	r1, r4
 800c080:	d004      	beq.n	800c08c <WM__InvalidateDrawAndDescs+0x28>
 800c082:	f001 fdaf 	bl	800dbe4 <GUI_MEMDEV_Delete>
 800c086:	9a01      	ldr	r2, [sp, #4]
 800c088:	2000      	movs	r0, #0
 800c08a:	6250      	str	r0, [r2, #36]	; 0x24
 800c08c:	4620      	mov	r0, r4
 800c08e:	f7ff fc23 	bl	800b8d8 <WM_GetFirstChild>
 800c092:	4604      	mov	r4, r0
 800c094:	b13c      	cbz	r4, 800c0a6 <WM__InvalidateDrawAndDescs+0x42>
 800c096:	4620      	mov	r0, r4
 800c098:	f7ff ffe4 	bl	800c064 <WM__InvalidateDrawAndDescs>
 800c09c:	4620      	mov	r0, r4
 800c09e:	f005 fc13 	bl	80118c8 <GUI_ALLOC_h2p>
 800c0a2:	6a04      	ldr	r4, [r0, #32]
 800c0a4:	e7f6      	b.n	800c094 <WM__InvalidateDrawAndDescs+0x30>
 800c0a6:	a801      	add	r0, sp, #4
 800c0a8:	f005 fc26 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c0ac:	bd1c      	pop	{r2, r3, r4, pc}
 800c0ae:	bf00      	nop
 800c0b0:	200179d8 	.word	0x200179d8

0800c0b4 <WM__RemoveFromLinList>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4b08      	ldr	r3, [pc, #32]	; (800c0d8 <WM__RemoveFromLinList+0x24>)
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	6818      	ldr	r0, [r3, #0]
 800c0bc:	b150      	cbz	r0, 800c0d4 <WM__RemoveFromLinList+0x20>
 800c0be:	f005 fc03 	bl	80118c8 <GUI_ALLOC_h2p>
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	6940      	ldr	r0, [r0, #20]
 800c0c6:	42a8      	cmp	r0, r5
 800c0c8:	d1f8      	bne.n	800c0bc <WM__RemoveFromLinList+0x8>
 800c0ca:	f005 fbfd 	bl	80118c8 <GUI_ALLOC_h2p>
 800c0ce:	6940      	ldr	r0, [r0, #20]
 800c0d0:	6160      	str	r0, [r4, #20]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	bd38      	pop	{r3, r4, r5, pc}
 800c0d6:	bf00      	nop
 800c0d8:	200179b0 	.word	0x200179b0

0800c0dc <WM__RectIsNZ>:
 800c0dc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c0e0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	dc08      	bgt.n	800c0fa <WM__RectIsNZ+0x1e>
 800c0e8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c0ec:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800c0f0:	4291      	cmp	r1, r2
 800c0f2:	bfcc      	ite	gt
 800c0f4:	2000      	movgt	r0, #0
 800c0f6:	2001      	movle	r0, #1
 800c0f8:	4770      	bx	lr
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	4770      	bx	lr
	...

0800c100 <_Invalidate1Abs>:
 800c100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c102:	b085      	sub	sp, #20
 800c104:	4606      	mov	r6, r0
 800c106:	460d      	mov	r5, r1
 800c108:	4617      	mov	r7, r2
 800c10a:	f005 fbdd 	bl	80118c8 <GUI_ALLOC_h2p>
 800c10e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c110:	9001      	str	r0, [sp, #4]
 800c112:	07a0      	lsls	r0, r4, #30
 800c114:	d534      	bpl.n	800c180 <_Invalidate1Abs+0x80>
 800c116:	4628      	mov	r0, r5
 800c118:	f7ff ffe0 	bl	800c0dc <WM__RectIsNZ>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d02f      	beq.n	800c180 <_Invalidate1Abs+0x80>
 800c120:	f640 0301 	movw	r3, #2049	; 0x801
 800c124:	4023      	ands	r3, r4
 800c126:	2b01      	cmp	r3, #1
 800c128:	d02a      	beq.n	800c180 <_Invalidate1Abs+0x80>
 800c12a:	4630      	mov	r0, r6
 800c12c:	f005 fbd6 	bl	80118dc <GUI_ALLOC_LockH>
 800c130:	ac02      	add	r4, sp, #8
 800c132:	4602      	mov	r2, r0
 800c134:	9001      	str	r0, [sp, #4]
 800c136:	4629      	mov	r1, r5
 800c138:	4620      	mov	r0, r4
 800c13a:	f003 fc13 	bl	800f964 <GUI__IntersectRects>
 800c13e:	4620      	mov	r0, r4
 800c140:	f7ff ffcc 	bl	800c0dc <WM__RectIsNZ>
 800c144:	b1c8      	cbz	r0, 800c17a <_Invalidate1Abs+0x7a>
 800c146:	9a01      	ldr	r2, [sp, #4]
 800c148:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800c14a:	f244 0120 	movw	r1, #16416	; 0x4020
 800c14e:	4031      	ands	r1, r6
 800c150:	f102 0508 	add.w	r5, r2, #8
 800c154:	b129      	cbz	r1, 800c162 <_Invalidate1Abs+0x62>
 800c156:	4628      	mov	r0, r5
 800c158:	4629      	mov	r1, r5
 800c15a:	4622      	mov	r2, r4
 800c15c:	f004 f95e 	bl	801041c <GUI_MergeRect>
 800c160:	e00b      	b.n	800c17a <_Invalidate1Abs+0x7a>
 800c162:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c166:	e885 0003 	stmia.w	r5, {r0, r1}
 800c16a:	4806      	ldr	r0, [pc, #24]	; (800c184 <_Invalidate1Abs+0x84>)
 800c16c:	8803      	ldrh	r3, [r0, #0]
 800c16e:	433e      	orrs	r6, r7
 800c170:	6296      	str	r6, [r2, #40]	; 0x28
 800c172:	1c5a      	adds	r2, r3, #1
 800c174:	8002      	strh	r2, [r0, #0]
 800c176:	f003 ffad 	bl	80100d4 <GUI_SignalEvent>
 800c17a:	a801      	add	r0, sp, #4
 800c17c:	f005 fbbc 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c180:	b005      	add	sp, #20
 800c182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c184:	200179ac 	.word	0x200179ac

0800c188 <WM_InvalidateWindowAndDescsEx>:
 800c188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c18a:	460e      	mov	r6, r1
 800c18c:	4615      	mov	r5, r2
 800c18e:	4604      	mov	r4, r0
 800c190:	b338      	cbz	r0, 800c1e2 <WM_InvalidateWindowAndDescsEx+0x5a>
 800c192:	f005 fba3 	bl	80118dc <GUI_ALLOC_LockH>
 800c196:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c198:	9001      	str	r0, [sp, #4]
 800c19a:	079b      	lsls	r3, r3, #30
 800c19c:	4602      	mov	r2, r0
 800c19e:	d403      	bmi.n	800c1a8 <WM_InvalidateWindowAndDescsEx+0x20>
 800c1a0:	a801      	add	r0, sp, #4
 800c1a2:	f005 fba9 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c1a6:	e01c      	b.n	800c1e2 <WM_InvalidateWindowAndDescsEx+0x5a>
 800c1a8:	a802      	add	r0, sp, #8
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	f003 fbda 	bl	800f964 <GUI__IntersectRects>
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d0f5      	beq.n	800c1a0 <WM_InvalidateWindowAndDescsEx+0x18>
 800c1b4:	a801      	add	r0, sp, #4
 800c1b6:	f005 fb9f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	a902      	add	r1, sp, #8
 800c1be:	462a      	mov	r2, r5
 800c1c0:	f7ff ff9e 	bl	800c100 <_Invalidate1Abs>
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f7ff fb87 	bl	800b8d8 <WM_GetFirstChild>
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	b14c      	cbz	r4, 800c1e2 <WM_InvalidateWindowAndDescsEx+0x5a>
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	a902      	add	r1, sp, #8
 800c1d2:	462a      	mov	r2, r5
 800c1d4:	f7ff ffd8 	bl	800c188 <WM_InvalidateWindowAndDescsEx>
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f005 fb75 	bl	80118c8 <GUI_ALLOC_h2p>
 800c1de:	6a04      	ldr	r4, [r0, #32]
 800c1e0:	e7f4      	b.n	800c1cc <WM_InvalidateWindowAndDescsEx+0x44>
 800c1e2:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0800c1e4 <WM__InvalidateRect>:
 800c1e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c1e8:	4680      	mov	r8, r0
 800c1ea:	4617      	mov	r7, r2
 800c1ec:	461d      	mov	r5, r3
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	2900      	cmp	r1, #0
 800c1f2:	d030      	beq.n	800c256 <WM__InvalidateRect+0x72>
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	f005 fb71 	bl	80118dc <GUI_ALLOC_LockH>
 800c1fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800c1fc:	9001      	str	r0, [sp, #4]
 800c1fe:	07b1      	lsls	r1, r6, #30
 800c200:	4602      	mov	r2, r0
 800c202:	d525      	bpl.n	800c250 <WM__InvalidateRect+0x6c>
 800c204:	a802      	add	r0, sp, #8
 800c206:	4641      	mov	r1, r8
 800c208:	f003 fbac 	bl	800f964 <GUI__IntersectRects>
 800c20c:	b300      	cbz	r0, 800c250 <WM__InvalidateRect+0x6c>
 800c20e:	f640 0301 	movw	r3, #2049	; 0x801
 800c212:	4033      	ands	r3, r6
 800c214:	2b01      	cmp	r3, #1
 800c216:	d107      	bne.n	800c228 <WM__InvalidateRect+0x44>
 800c218:	9a01      	ldr	r2, [sp, #4]
 800c21a:	a802      	add	r0, sp, #8
 800c21c:	6991      	ldr	r1, [r2, #24]
 800c21e:	6a12      	ldr	r2, [r2, #32]
 800c220:	462b      	mov	r3, r5
 800c222:	f7ff ffdf 	bl	800c1e4 <WM__InvalidateRect>
 800c226:	e004      	b.n	800c232 <WM__InvalidateRect+0x4e>
 800c228:	4620      	mov	r0, r4
 800c22a:	a902      	add	r1, sp, #8
 800c22c:	462a      	mov	r2, r5
 800c22e:	f7ff ff67 	bl	800c100 <_Invalidate1Abs>
 800c232:	9801      	ldr	r0, [sp, #4]
 800c234:	69c4      	ldr	r4, [r0, #28]
 800c236:	b15c      	cbz	r4, 800c250 <WM__InvalidateRect+0x6c>
 800c238:	42bc      	cmp	r4, r7
 800c23a:	d009      	beq.n	800c250 <WM__InvalidateRect+0x6c>
 800c23c:	4620      	mov	r0, r4
 800c23e:	a902      	add	r1, sp, #8
 800c240:	462a      	mov	r2, r5
 800c242:	f7ff ffa1 	bl	800c188 <WM_InvalidateWindowAndDescsEx>
 800c246:	4620      	mov	r0, r4
 800c248:	f005 fb3e 	bl	80118c8 <GUI_ALLOC_h2p>
 800c24c:	6a04      	ldr	r4, [r0, #32]
 800c24e:	e7f2      	b.n	800c236 <WM__InvalidateRect+0x52>
 800c250:	a801      	add	r0, sp, #4
 800c252:	f005 fb51 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c256:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

0800c25a <WM__InvalidateRectEx>:
 800c25a:	2320      	movs	r3, #32
 800c25c:	f7ff bfc2 	b.w	800c1e4 <WM__InvalidateRect>

0800c260 <WM__DetachWindow>:
 800c260:	b513      	push	{r0, r1, r4, lr}
 800c262:	4604      	mov	r4, r0
 800c264:	f005 fb3a 	bl	80118dc <GUI_ALLOC_LockH>
 800c268:	6981      	ldr	r1, [r0, #24]
 800c26a:	9001      	str	r0, [sp, #4]
 800c26c:	b141      	cbz	r1, 800c280 <WM__DetachWindow+0x20>
 800c26e:	6a02      	ldr	r2, [r0, #32]
 800c270:	f7ff fff3 	bl	800c25a <WM__InvalidateRectEx>
 800c274:	4620      	mov	r0, r4
 800c276:	f7ff fe73 	bl	800bf60 <WM__RemoveWindowFromList>
 800c27a:	9801      	ldr	r0, [sp, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	6182      	str	r2, [r0, #24]
 800c280:	a801      	add	r0, sp, #4
 800c282:	f005 fb39 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c286:	bd1c      	pop	{r2, r3, r4, pc}

0800c288 <WM__InvalidateParent>:
 800c288:	b570      	push	{r4, r5, r6, lr}
 800c28a:	4605      	mov	r5, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	460c      	mov	r4, r1
 800c290:	4616      	mov	r6, r2
 800c292:	f005 fb19 	bl	80118c8 <GUI_ALLOC_h2p>
 800c296:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c298:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800c29c:	4628      	mov	r0, r5
 800c29e:	4621      	mov	r1, r4
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	bf0c      	ite	eq
 800c2a4:	2320      	moveq	r3, #32
 800c2a6:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800c2aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2ae:	f7ff bf99 	b.w	800c1e4 <WM__InvalidateRect>

0800c2b2 <WM__Invalidate1Abs>:
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	f7ff bf24 	b.w	800c100 <_Invalidate1Abs>

0800c2b8 <WM_SendMessage>:
 800c2b8:	b108      	cbz	r0, 800c2be <WM_SendMessage+0x6>
 800c2ba:	f7fe becb 	b.w	800b054 <WM__SendMessage>
 800c2be:	4770      	bx	lr

0800c2c0 <WM__SendMsgNoData>:
 800c2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2c2:	ab04      	add	r3, sp, #16
 800c2c4:	9001      	str	r0, [sp, #4]
 800c2c6:	f843 1d10 	str.w	r1, [r3, #-16]!
 800c2ca:	4669      	mov	r1, sp
 800c2cc:	f7fe fec2 	bl	800b054 <WM__SendMessage>
 800c2d0:	b005      	add	sp, #20
 800c2d2:	bd00      	pop	{pc}

0800c2d4 <WM__GetClientRectWin>:
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	800b      	strh	r3, [r1, #0]
 800c2d8:	8882      	ldrh	r2, [r0, #4]
 800c2da:	804b      	strh	r3, [r1, #2]
 800c2dc:	8803      	ldrh	r3, [r0, #0]
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	808a      	strh	r2, [r1, #4]
 800c2e2:	88c2      	ldrh	r2, [r0, #6]
 800c2e4:	8840      	ldrh	r0, [r0, #2]
 800c2e6:	1a13      	subs	r3, r2, r0
 800c2e8:	80cb      	strh	r3, [r1, #6]
 800c2ea:	4770      	bx	lr

0800c2ec <WM_InvalidateRect>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	460e      	mov	r6, r1
 800c2f0:	b086      	sub	sp, #24
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d033      	beq.n	800c360 <WM_InvalidateRect+0x74>
 800c2f8:	f005 faf0 	bl	80118dc <GUI_ALLOC_LockH>
 800c2fc:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800c2fe:	9001      	str	r0, [sp, #4]
 800c300:	07ab      	lsls	r3, r5, #30
 800c302:	d52a      	bpl.n	800c35a <WM_InvalidateRect+0x6e>
 800c304:	c803      	ldmia	r0, {r0, r1}
 800c306:	ab06      	add	r3, sp, #24
 800c308:	e903 0003 	stmdb	r3, {r0, r1}
 800c30c:	03e8      	lsls	r0, r5, #15
 800c30e:	d502      	bpl.n	800c316 <WM_InvalidateRect+0x2a>
 800c310:	4620      	mov	r0, r4
 800c312:	f7ff fea7 	bl	800c064 <WM__InvalidateDrawAndDescs>
 800c316:	b15e      	cbz	r6, 800c330 <WM_InvalidateRect+0x44>
 800c318:	6830      	ldr	r0, [r6, #0]
 800c31a:	6871      	ldr	r1, [r6, #4]
 800c31c:	aa02      	add	r2, sp, #8
 800c31e:	c203      	stmia	r2!, {r0, r1}
 800c320:	9801      	ldr	r0, [sp, #4]
 800c322:	a902      	add	r1, sp, #8
 800c324:	f7ff fe3a 	bl	800bf9c <WM__Client2Screen>
 800c328:	a804      	add	r0, sp, #16
 800c32a:	a902      	add	r1, sp, #8
 800c32c:	f003 fb4c 	bl	800f9c8 <GUI__IntersectRect>
 800c330:	a804      	add	r0, sp, #16
 800c332:	4621      	mov	r1, r4
 800c334:	f7ff fd96 	bl	800be64 <WM__ClipAtParentBorders>
 800c338:	b178      	cbz	r0, 800c35a <WM_InvalidateRect+0x6e>
 800c33a:	f640 0001 	movw	r0, #2049	; 0x801
 800c33e:	4028      	ands	r0, r5
 800c340:	2801      	cmp	r0, #1
 800c342:	d106      	bne.n	800c352 <WM_InvalidateRect+0x66>
 800c344:	9b01      	ldr	r3, [sp, #4]
 800c346:	a804      	add	r0, sp, #16
 800c348:	6999      	ldr	r1, [r3, #24]
 800c34a:	6a1a      	ldr	r2, [r3, #32]
 800c34c:	f7ff ff85 	bl	800c25a <WM__InvalidateRectEx>
 800c350:	e003      	b.n	800c35a <WM_InvalidateRect+0x6e>
 800c352:	4620      	mov	r0, r4
 800c354:	a904      	add	r1, sp, #16
 800c356:	f7ff ffac 	bl	800c2b2 <WM__Invalidate1Abs>
 800c35a:	a801      	add	r0, sp, #4
 800c35c:	f005 facc 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c360:	b006      	add	sp, #24
 800c362:	bd70      	pop	{r4, r5, r6, pc}

0800c364 <WM_InvalidateWindow>:
 800c364:	2100      	movs	r1, #0
 800c366:	f7ff bfc1 	b.w	800c2ec <WM_InvalidateRect>
	...

0800c36c <WM__GetTopLevelLayer>:
 800c36c:	b510      	push	{r4, lr}
 800c36e:	4604      	mov	r4, r0
 800c370:	f005 faaa 	bl	80118c8 <GUI_ALLOC_h2p>
 800c374:	6980      	ldr	r0, [r0, #24]
 800c376:	2800      	cmp	r0, #0
 800c378:	d1f9      	bne.n	800c36e <WM__GetTopLevelLayer+0x2>
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <WM__GetTopLevelLayer+0x24>)
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	4294      	cmp	r4, r2
 800c380:	d005      	beq.n	800c38e <WM__GetTopLevelLayer+0x22>
 800c382:	6858      	ldr	r0, [r3, #4]
 800c384:	4284      	cmp	r4, r0
 800c386:	bf14      	ite	ne
 800c388:	f04f 30ff 	movne.w	r0, #4294967295
 800c38c:	2001      	moveq	r0, #1
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	20017994 	.word	0x20017994

0800c394 <WM__SelectTopLevelLayer>:
 800c394:	b508      	push	{r3, lr}
 800c396:	f7ff ffe9 	bl	800c36c <WM__GetTopLevelLayer>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	db03      	blt.n	800c3a6 <WM__SelectTopLevelLayer+0x12>
 800c39e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c3a2:	f003 bf85 	b.w	80102b0 <GUI_SelectLayer>
 800c3a6:	bd08      	pop	{r3, pc}

0800c3a8 <WM_SelectWindow>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4b0d      	ldr	r3, [pc, #52]	; (800c3e0 <WM_SelectWindow+0x38>)
 800c3ac:	6819      	ldr	r1, [r3, #0]
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800c3b2:	b908      	cbnz	r0, 800c3b8 <WM_SelectWindow+0x10>
 800c3b4:	4a0b      	ldr	r2, [pc, #44]	; (800c3e4 <WM_SelectWindow+0x3c>)
 800c3b6:	6814      	ldr	r4, [r2, #0]
 800c3b8:	648c      	str	r4, [r1, #72]	; 0x48
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f7ff ffea 	bl	800c394 <WM__SelectTopLevelLayer>
 800c3c0:	f003 f8f0 	bl	800f5a4 <LCD_SetClipRectMax>
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f005 fa7f 	bl	80118c8 <GUI_ALLOC_h2p>
 800c3ca:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <WM_SelectWindow+0x38>)
 800c3cc:	f9b0 1000 	ldrsh.w	r1, [r0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800c3d6:	64d9      	str	r1, [r3, #76]	; 0x4c
 800c3d8:	6518      	str	r0, [r3, #80]	; 0x50
 800c3da:	4628      	mov	r0, r5
 800c3dc:	bd38      	pop	{r3, r4, r5, pc}
 800c3de:	bf00      	nop
 800c3e0:	2000027c 	.word	0x2000027c
 800c3e4:	200179b0 	.word	0x200179b0

0800c3e8 <WM_DeleteWindow>:
 800c3e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d061      	beq.n	800c4b4 <WM_DeleteWindow+0xcc>
 800c3f0:	f7ff fe28 	bl	800c044 <WM__IsWindow>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d05d      	beq.n	800c4b4 <WM_DeleteWindow+0xcc>
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f7ff ffb7 	bl	800c36c <WM__GetTopLevelLayer>
 800c3fe:	210b      	movs	r1, #11
 800c400:	4606      	mov	r6, r0
 800c402:	4620      	mov	r0, r4
 800c404:	f7ff ff5c 	bl	800c2c0 <WM__SendMsgNoData>
 800c408:	4620      	mov	r0, r4
 800c40a:	f006 fe5b 	bl	80130c4 <WM__DeleteAssocTimer>
 800c40e:	4620      	mov	r0, r4
 800c410:	f005 fa64 	bl	80118dc <GUI_ALLOC_LockH>
 800c414:	9001      	str	r0, [sp, #4]
 800c416:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c418:	b108      	cbz	r0, 800c41e <WM_DeleteWindow+0x36>
 800c41a:	f001 fbe3 	bl	800dbe4 <GUI_MEMDEV_Delete>
 800c41e:	4826      	ldr	r0, [pc, #152]	; (800c4b8 <WM_DeleteWindow+0xd0>)
 800c420:	4b26      	ldr	r3, [pc, #152]	; (800c4bc <WM_DeleteWindow+0xd4>)
 800c422:	6805      	ldr	r5, [r0, #0]
 800c424:	4a26      	ldr	r2, [pc, #152]	; (800c4c0 <WM_DeleteWindow+0xd8>)
 800c426:	4827      	ldr	r0, [pc, #156]	; (800c4c4 <WM_DeleteWindow+0xdc>)
 800c428:	2100      	movs	r1, #0
 800c42a:	6019      	str	r1, [r3, #0]
 800c42c:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800c430:	42a3      	cmp	r3, r4
 800c432:	bf08      	it	eq
 800c434:	f842 1025 	streq.w	r1, [r2, r5, lsl #2]
 800c438:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
 800c43c:	42a1      	cmp	r1, r4
 800c43e:	d102      	bne.n	800c446 <WM_DeleteWindow+0x5e>
 800c440:	2200      	movs	r2, #0
 800c442:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
 800c446:	4d20      	ldr	r5, [pc, #128]	; (800c4c8 <WM_DeleteWindow+0xe0>)
 800c448:	682d      	ldr	r5, [r5, #0]
 800c44a:	b12d      	cbz	r5, 800c458 <WM_DeleteWindow+0x70>
 800c44c:	6868      	ldr	r0, [r5, #4]
 800c44e:	42a0      	cmp	r0, r4
 800c450:	d1fa      	bne.n	800c448 <WM_DeleteWindow+0x60>
 800c452:	2300      	movs	r3, #0
 800c454:	606b      	str	r3, [r5, #4]
 800c456:	e7f7      	b.n	800c448 <WM_DeleteWindow+0x60>
 800c458:	4620      	mov	r0, r4
 800c45a:	2107      	movs	r1, #7
 800c45c:	f7ff f8c5 	bl	800b5ea <WM_NotifyParent>
 800c460:	9d01      	ldr	r5, [sp, #4]
 800c462:	69e8      	ldr	r0, [r5, #28]
 800c464:	f7ff ffc0 	bl	800c3e8 <WM_DeleteWindow>
 800c468:	69eb      	ldr	r3, [r5, #28]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1f9      	bne.n	800c462 <WM_DeleteWindow+0x7a>
 800c46e:	4620      	mov	r0, r4
 800c470:	f7ff fef6 	bl	800c260 <WM__DetachWindow>
 800c474:	4620      	mov	r0, r4
 800c476:	f7ff fe1d 	bl	800c0b4 <WM__RemoveFromLinList>
 800c47a:	9801      	ldr	r0, [sp, #4]
 800c47c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c47e:	07d9      	lsls	r1, r3, #31
 800c480:	d503      	bpl.n	800c48a <WM_DeleteWindow+0xa2>
 800c482:	4a12      	ldr	r2, [pc, #72]	; (800c4cc <WM_DeleteWindow+0xe4>)
 800c484:	6811      	ldr	r1, [r2, #0]
 800c486:	1e48      	subs	r0, r1, #1
 800c488:	6010      	str	r0, [r2, #0]
 800c48a:	069a      	lsls	r2, r3, #26
 800c48c:	d503      	bpl.n	800c496 <WM_DeleteWindow+0xae>
 800c48e:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <WM_DeleteWindow+0xe8>)
 800c490:	881a      	ldrh	r2, [r3, #0]
 800c492:	1e51      	subs	r1, r2, #1
 800c494:	8019      	strh	r1, [r3, #0]
 800c496:	a801      	add	r0, sp, #4
 800c498:	f005 fa2e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c49c:	480d      	ldr	r0, [pc, #52]	; (800c4d4 <WM_DeleteWindow+0xec>)
 800c49e:	8803      	ldrh	r3, [r0, #0]
 800c4a0:	1e5a      	subs	r2, r3, #1
 800c4a2:	8002      	strh	r2, [r0, #0]
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f005 fa53 	bl	8011950 <GUI_ALLOC_Free>
 800c4aa:	490b      	ldr	r1, [pc, #44]	; (800c4d8 <WM_DeleteWindow+0xf0>)
 800c4ac:	f851 0026 	ldr.w	r0, [r1, r6, lsl #2]
 800c4b0:	f7ff ff7a 	bl	800c3a8 <WM_SelectWindow>
 800c4b4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800c4b6:	bf00      	nop
 800c4b8:	200179b4 	.word	0x200179b4
 800c4bc:	20016e18 	.word	0x20016e18
 800c4c0:	200179a4 	.word	0x200179a4
 800c4c4:	200179d0 	.word	0x200179d0
 800c4c8:	200179c8 	.word	0x200179c8
 800c4cc:	200179dc 	.word	0x200179dc
 800c4d0:	200179ac 	.word	0x200179ac
 800c4d4:	2001798c 	.word	0x2001798c
 800c4d8:	20017994 	.word	0x20017994

0800c4dc <WM_CreateWindowAsChild>:
 800c4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c4e2:	469b      	mov	fp, r3
 800c4e4:	4b4e      	ldr	r3, [pc, #312]	; (800c620 <WM_CreateWindowAsChild+0x144>)
 800c4e6:	4680      	mov	r8, r0
 800c4e8:	4689      	mov	r9, r1
 800c4ea:	4692      	mov	sl, r2
 800c4ec:	681d      	ldr	r5, [r3, #0]
 800c4ee:	bb66      	cbnz	r6, 800c54a <WM_CreateWindowAsChild+0x6e>
 800c4f0:	484c      	ldr	r0, [pc, #304]	; (800c624 <WM_CreateWindowAsChild+0x148>)
 800c4f2:	8801      	ldrh	r1, [r0, #0]
 800c4f4:	b361      	cbz	r1, 800c550 <WM_CreateWindowAsChild+0x74>
 800c4f6:	4a4c      	ldr	r2, [pc, #304]	; (800c628 <WM_CreateWindowAsChild+0x14c>)
 800c4f8:	4b4c      	ldr	r3, [pc, #304]	; (800c62c <WM_CreateWindowAsChild+0x150>)
 800c4fa:	6814      	ldr	r4, [r2, #0]
 800c4fc:	7c60      	ldrb	r0, [r4, #17]
 800c4fe:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800c502:	1c4c      	adds	r4, r1, #1
 800c504:	d024      	beq.n	800c550 <WM_CreateWindowAsChild+0x74>
 800c506:	b319      	cbz	r1, 800c550 <WM_CreateWindowAsChild+0x74>
 800c508:	460e      	mov	r6, r1
 800c50a:	4630      	mov	r0, r6
 800c50c:	f005 f9e6 	bl	80118dc <GUI_ALLOC_LockH>
 800c510:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c514:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800c518:	9001      	str	r0, [sp, #4]
 800c51a:	4490      	add	r8, r2
 800c51c:	44a1      	add	r9, r4
 800c51e:	f1ba 0f00 	cmp.w	sl, #0
 800c522:	d105      	bne.n	800c530 <WM_CreateWindowAsChild+0x54>
 800c524:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800c528:	ebc2 030a 	rsb	r3, r2, sl
 800c52c:	f103 0a01 	add.w	sl, r3, #1
 800c530:	f1bb 0f00 	cmp.w	fp, #0
 800c534:	d105      	bne.n	800c542 <WM_CreateWindowAsChild+0x66>
 800c536:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800c53a:	ebc4 000b 	rsb	r0, r4, fp
 800c53e:	f100 0b01 	add.w	fp, r0, #1
 800c542:	a801      	add	r0, sp, #4
 800c544:	f005 f9d8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c548:	e002      	b.n	800c550 <WM_CreateWindowAsChild+0x74>
 800c54a:	1c70      	adds	r0, r6, #1
 800c54c:	d1dd      	bne.n	800c50a <WM_CreateWindowAsChild+0x2e>
 800c54e:	2600      	movs	r6, #0
 800c550:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c552:	302c      	adds	r0, #44	; 0x2c
 800c554:	f005 fc36 	bl	8011dc4 <GUI_ALLOC_AllocZero>
 800c558:	4604      	mov	r4, r0
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d05c      	beq.n	800c618 <WM_CreateWindowAsChild+0x13c>
 800c55e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c560:	432f      	orrs	r7, r5
 800c562:	4d30      	ldr	r5, [pc, #192]	; (800c624 <WM_CreateWindowAsChild+0x148>)
 800c564:	8829      	ldrh	r1, [r5, #0]
 800c566:	1c4a      	adds	r2, r1, #1
 800c568:	802a      	strh	r2, [r5, #0]
 800c56a:	f005 f9b7 	bl	80118dc <GUI_ALLOC_LockH>
 800c56e:	ab02      	add	r3, sp, #8
 800c570:	4605      	mov	r5, r0
 800c572:	f843 0d08 	str.w	r0, [r3, #-8]!
 800c576:	492e      	ldr	r1, [pc, #184]	; (800c630 <WM_CreateWindowAsChild+0x154>)
 800c578:	f8a0 8000 	strh.w	r8, [r0]
 800c57c:	f8a0 9002 	strh.w	r9, [r0, #2]
 800c580:	44d0      	add	r8, sl
 800c582:	44d9      	add	r9, fp
 800c584:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c586:	f108 38ff 	add.w	r8, r8, #4294967295
 800c58a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c58e:	4039      	ands	r1, r7
 800c590:	f8a0 8004 	strh.w	r8, [r0, #4]
 800c594:	f8a0 9006 	strh.w	r9, [r0, #6]
 800c598:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c59a:	ea42 0301 	orr.w	r3, r2, r1
 800c59e:	6128      	str	r0, [r5, #16]
 800c5a0:	62ab      	str	r3, [r5, #40]	; 0x28
 800c5a2:	4668      	mov	r0, sp
 800c5a4:	f005 f9a8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c5a8:	4922      	ldr	r1, [pc, #136]	; (800c634 <WM_CreateWindowAsChild+0x158>)
 800c5aa:	6808      	ldr	r0, [r1, #0]
 800c5ac:	b148      	cbz	r0, 800c5c2 <WM_CreateWindowAsChild+0xe6>
 800c5ae:	f005 f98b 	bl	80118c8 <GUI_ALLOC_h2p>
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f005 f987 	bl	80118c8 <GUI_ALLOC_h2p>
 800c5ba:	696a      	ldr	r2, [r5, #20]
 800c5bc:	6142      	str	r2, [r0, #20]
 800c5be:	616c      	str	r4, [r5, #20]
 800c5c0:	e000      	b.n	800c5c4 <WM_CreateWindowAsChild+0xe8>
 800c5c2:	600c      	str	r4, [r1, #0]
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	4631      	mov	r1, r6
 800c5c8:	f7ff fc7c 	bl	800bec4 <WM__InsertWindowIntoList>
 800c5cc:	06b8      	lsls	r0, r7, #26
 800c5ce:	d502      	bpl.n	800c5d6 <WM_CreateWindowAsChild+0xfa>
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f7ff fee9 	bl	800c3a8 <WM_SelectWindow>
 800c5d6:	07f9      	lsls	r1, r7, #31
 800c5d8:	d503      	bpl.n	800c5e2 <WM_CreateWindowAsChild+0x106>
 800c5da:	4817      	ldr	r0, [pc, #92]	; (800c638 <WM_CreateWindowAsChild+0x15c>)
 800c5dc:	6803      	ldr	r3, [r0, #0]
 800c5de:	1c59      	adds	r1, r3, #1
 800c5e0:	6001      	str	r1, [r0, #0]
 800c5e2:	067a      	lsls	r2, r7, #25
 800c5e4:	d502      	bpl.n	800c5ec <WM_CreateWindowAsChild+0x110>
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f006 fdc8 	bl	801317c <WM_BringToBottom>
 800c5ec:	07bb      	lsls	r3, r7, #30
 800c5ee:	d50f      	bpl.n	800c610 <WM_CreateWindowAsChild+0x134>
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f005 f973 	bl	80118dc <GUI_ALLOC_LockH>
 800c5f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c5f8:	aa02      	add	r2, sp, #8
 800c5fa:	f043 0102 	orr.w	r1, r3, #2
 800c5fe:	f842 0d08 	str.w	r0, [r2, #-8]!
 800c602:	6281      	str	r1, [r0, #40]	; 0x28
 800c604:	4668      	mov	r0, sp
 800c606:	f005 f977 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c60a:	4620      	mov	r0, r4
 800c60c:	f7ff feaa 	bl	800c364 <WM_InvalidateWindow>
 800c610:	4620      	mov	r0, r4
 800c612:	2101      	movs	r1, #1
 800c614:	f7ff fe54 	bl	800c2c0 <WM__SendMsgNoData>
 800c618:	4620      	mov	r0, r4
 800c61a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61e:	bf00      	nop
 800c620:	200179bc 	.word	0x200179bc
 800c624:	2001798c 	.word	0x2001798c
 800c628:	2000027c 	.word	0x2000027c
 800c62c:	20017994 	.word	0x20017994
 800c630:	003f3f9f 	.word	0x003f3f9f
 800c634:	200179b0 	.word	0x200179b0
 800c638:	200179dc 	.word	0x200179dc

0800c63c <WM_CreateWindow>:
 800c63c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c63e:	2400      	movs	r4, #0
 800c640:	9400      	str	r4, [sp, #0]
 800c642:	9c06      	ldr	r4, [sp, #24]
 800c644:	9401      	str	r4, [sp, #4]
 800c646:	9c07      	ldr	r4, [sp, #28]
 800c648:	9402      	str	r4, [sp, #8]
 800c64a:	9c08      	ldr	r4, [sp, #32]
 800c64c:	9403      	str	r4, [sp, #12]
 800c64e:	f7ff ff45 	bl	800c4dc <WM_CreateWindowAsChild>
 800c652:	b004      	add	sp, #16
 800c654:	bd10      	pop	{r4, pc}
	...

0800c658 <WM_GetActiveWindow>:
 800c658:	4b01      	ldr	r3, [pc, #4]	; (800c660 <WM_GetActiveWindow+0x8>)
 800c65a:	6818      	ldr	r0, [r3, #0]
 800c65c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800c65e:	4770      	bx	lr
 800c660:	2000027c 	.word	0x2000027c

0800c664 <WM__GetNextIVR>:
 800c664:	b530      	push	{r4, r5, lr}
 800c666:	4b5d      	ldr	r3, [pc, #372]	; (800c7dc <WM__GetNextIVR+0x178>)
 800c668:	6818      	ldr	r0, [r3, #0]
 800c66a:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800c66e:	b085      	sub	sp, #20
 800c670:	2800      	cmp	r0, #0
 800c672:	f000 80b1 	beq.w	800c7d8 <WM__GetNextIVR+0x174>
 800c676:	4b5a      	ldr	r3, [pc, #360]	; (800c7e0 <WM__GetNextIVR+0x17c>)
 800c678:	6959      	ldr	r1, [r3, #20]
 800c67a:	2901      	cmp	r1, #1
 800c67c:	dc2c      	bgt.n	800c6d8 <WM__GetNextIVR+0x74>
 800c67e:	f103 0108 	add.w	r1, r3, #8
 800c682:	691a      	ldr	r2, [r3, #16]
 800c684:	c903      	ldmia	r1, {r0, r1}
 800c686:	3201      	adds	r2, #1
 800c688:	ac04      	add	r4, sp, #16
 800c68a:	611a      	str	r2, [r3, #16]
 800c68c:	e904 0003 	stmdb	r4, {r0, r1}
 800c690:	b922      	cbnz	r2, 800c69c <WM__GetNextIVR+0x38>
 800c692:	881a      	ldrh	r2, [r3, #0]
 800c694:	f8ad 2008 	strh.w	r2, [sp, #8]
 800c698:	885a      	ldrh	r2, [r3, #2]
 800c69a:	e012      	b.n	800c6c2 <WM__GetNextIVR+0x5e>
 800c69c:	8998      	ldrh	r0, [r3, #12]
 800c69e:	8959      	ldrh	r1, [r3, #10]
 800c6a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c6a4:	f8ad 100a 	strh.w	r1, [sp, #10]
 800c6a8:	1c42      	adds	r2, r0, #1
 800c6aa:	b294      	uxth	r4, r2
 800c6ac:	b220      	sxth	r0, r4
 800c6ae:	4283      	cmp	r3, r0
 800c6b0:	f8ad 4008 	strh.w	r4, [sp, #8]
 800c6b4:	da07      	bge.n	800c6c6 <WM__GetNextIVR+0x62>
 800c6b6:	484a      	ldr	r0, [pc, #296]	; (800c7e0 <WM__GetNextIVR+0x17c>)
 800c6b8:	8804      	ldrh	r4, [r0, #0]
 800c6ba:	89c3      	ldrh	r3, [r0, #14]
 800c6bc:	f8ad 4008 	strh.w	r4, [sp, #8]
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	f8ad 200a 	strh.w	r2, [sp, #10]
 800c6c6:	4c46      	ldr	r4, [pc, #280]	; (800c7e0 <WM__GetNextIVR+0x17c>)
 800c6c8:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800c6cc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800c6d0:	4299      	cmp	r1, r3
 800c6d2:	dd05      	ble.n	800c6e0 <WM__GetNextIVR+0x7c>
 800c6d4:	4b42      	ldr	r3, [pc, #264]	; (800c7e0 <WM__GetNextIVR+0x17c>)
 800c6d6:	6959      	ldr	r1, [r3, #20]
 800c6d8:	1e48      	subs	r0, r1, #1
 800c6da:	6158      	str	r0, [r3, #20]
 800c6dc:	2000      	movs	r0, #0
 800c6de:	e07b      	b.n	800c7d8 <WM__GetNextIVR+0x174>
 800c6e0:	4d3e      	ldr	r5, [pc, #248]	; (800c7dc <WM__GetNextIVR+0x178>)
 800c6e2:	6828      	ldr	r0, [r5, #0]
 800c6e4:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800c6e6:	f005 f8f9 	bl	80118dc <GUI_ALLOC_LockH>
 800c6ea:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800c6ee:	f9b4 1000 	ldrsh.w	r1, [r4]
 800c6f2:	9001      	str	r0, [sp, #4]
 800c6f4:	428a      	cmp	r2, r1
 800c6f6:	d118      	bne.n	800c72a <WM__GetNextIVR+0xc6>
 800c6f8:	6828      	ldr	r0, [r5, #0]
 800c6fa:	88e3      	ldrh	r3, [r4, #6]
 800c6fc:	88a4      	ldrh	r4, [r4, #4]
 800c6fe:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800c700:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c704:	f8ad 400c 	strh.w	r4, [sp, #12]
 800c708:	b152      	cbz	r2, 800c720 <WM__GetNextIVR+0xbc>
 800c70a:	4610      	mov	r0, r2
 800c70c:	f005 f8dc 	bl	80118c8 <GUI_ALLOC_h2p>
 800c710:	4604      	mov	r4, r0
 800c712:	2200      	movs	r2, #0
 800c714:	6a00      	ldr	r0, [r0, #32]
 800c716:	a902      	add	r1, sp, #8
 800c718:	f7ff fa68 	bl	800bbec <_Findy1>
 800c71c:	69a2      	ldr	r2, [r4, #24]
 800c71e:	e7f3      	b.n	800c708 <WM__GetNextIVR+0xa4>
 800c720:	9901      	ldr	r1, [sp, #4]
 800c722:	69c8      	ldr	r0, [r1, #28]
 800c724:	a902      	add	r1, sp, #8
 800c726:	f7ff fa61 	bl	800bbec <_Findy1>
 800c72a:	4b2c      	ldr	r3, [pc, #176]	; (800c7dc <WM__GetNextIVR+0x178>)
 800c72c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c730:	681c      	ldr	r4, [r3, #0]
 800c732:	f8ad 200c 	strh.w	r2, [sp, #12]
 800c736:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c738:	ac02      	add	r4, sp, #8
 800c73a:	b162      	cbz	r2, 800c756 <WM__GetNextIVR+0xf2>
 800c73c:	4610      	mov	r0, r2
 800c73e:	f005 f8c3 	bl	80118c8 <GUI_ALLOC_h2p>
 800c742:	4621      	mov	r1, r4
 800c744:	4605      	mov	r5, r0
 800c746:	2200      	movs	r2, #0
 800c748:	6a00      	ldr	r0, [r0, #32]
 800c74a:	f7ff faa5 	bl	800bc98 <_Findx0>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d1eb      	bne.n	800c72a <WM__GetNextIVR+0xc6>
 800c752:	69aa      	ldr	r2, [r5, #24]
 800c754:	e7f0      	b.n	800c738 <WM__GetNextIVR+0xd4>
 800c756:	9801      	ldr	r0, [sp, #4]
 800c758:	4621      	mov	r1, r4
 800c75a:	69c0      	ldr	r0, [r0, #28]
 800c75c:	f7ff fa9c 	bl	800bc98 <_Findx0>
 800c760:	2800      	cmp	r0, #0
 800c762:	d1e2      	bne.n	800c72a <WM__GetNextIVR+0xc6>
 800c764:	4b1e      	ldr	r3, [pc, #120]	; (800c7e0 <WM__GetNextIVR+0x17c>)
 800c766:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800c76a:	889a      	ldrh	r2, [r3, #4]
 800c76c:	b210      	sxth	r0, r2
 800c76e:	4281      	cmp	r1, r0
 800c770:	f8ad 200c 	strh.w	r2, [sp, #12]
 800c774:	dd08      	ble.n	800c788 <WM__GetNextIVR+0x124>
 800c776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c77a:	3308      	adds	r3, #8
 800c77c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c780:	a801      	add	r0, sp, #4
 800c782:	f005 f8b9 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c786:	e796      	b.n	800c6b6 <WM__GetNextIVR+0x52>
 800c788:	4d14      	ldr	r5, [pc, #80]	; (800c7dc <WM__GetNextIVR+0x178>)
 800c78a:	682c      	ldr	r4, [r5, #0]
 800c78c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c78e:	ac02      	add	r4, sp, #8
 800c790:	b152      	cbz	r2, 800c7a8 <WM__GetNextIVR+0x144>
 800c792:	4610      	mov	r0, r2
 800c794:	f005 f898 	bl	80118c8 <GUI_ALLOC_h2p>
 800c798:	4605      	mov	r5, r0
 800c79a:	2200      	movs	r2, #0
 800c79c:	6a00      	ldr	r0, [r0, #32]
 800c79e:	4621      	mov	r1, r4
 800c7a0:	f7ff fabf 	bl	800bd22 <_Findx1>
 800c7a4:	69aa      	ldr	r2, [r5, #24]
 800c7a6:	e7f2      	b.n	800c78e <WM__GetNextIVR+0x12a>
 800c7a8:	ad04      	add	r5, sp, #16
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	f855 3d0c 	ldr.w	r3, [r5, #-12]!
 800c7b0:	69d8      	ldr	r0, [r3, #28]
 800c7b2:	f7ff fab6 	bl	800bd22 <_Findx1>
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f005 f89e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c7bc:	4b08      	ldr	r3, [pc, #32]	; (800c7e0 <WM__GetNextIVR+0x17c>)
 800c7be:	691a      	ldr	r2, [r3, #16]
 800c7c0:	f644 6120 	movw	r1, #20000	; 0x4e20
 800c7c4:	428a      	cmp	r2, r1
 800c7c6:	dc85      	bgt.n	800c6d4 <WM__GetNextIVR+0x70>
 800c7c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	e883 0003 	stmia.w	r3, {r0, r1}
 800c7d2:	f7ff fc13 	bl	800bffc <WM__ActivateClipRect>
 800c7d6:	2001      	movs	r0, #1
 800c7d8:	b005      	add	sp, #20
 800c7da:	bd30      	pop	{r4, r5, pc}
 800c7dc:	2000027c 	.word	0x2000027c
 800c7e0:	20016e00 	.word	0x20016e00

0800c7e4 <WM__InitIVRSearch>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	4b3b      	ldr	r3, [pc, #236]	; (800c8d4 <WM__InitIVRSearch+0xf0>)
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	6818      	ldr	r0, [r3, #0]
 800c7ec:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800c7f0:	b086      	sub	sp, #24
 800c7f2:	b912      	cbnz	r2, 800c7fa <WM__InitIVRSearch+0x16>
 800c7f4:	f7ff fc02 	bl	800bffc <WM__ActivateClipRect>
 800c7f8:	e068      	b.n	800c8cc <WM__InitIVRSearch+0xe8>
 800c7fa:	4c37      	ldr	r4, [pc, #220]	; (800c8d8 <WM__InitIVRSearch+0xf4>)
 800c7fc:	6961      	ldr	r1, [r4, #20]
 800c7fe:	1c4b      	adds	r3, r1, #1
 800c800:	2b01      	cmp	r3, #1
 800c802:	6163      	str	r3, [r4, #20]
 800c804:	dc62      	bgt.n	800c8cc <WM__InitIVRSearch+0xe8>
 800c806:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800c808:	f005 f868 	bl	80118dc <GUI_ALLOC_LockH>
 800c80c:	4933      	ldr	r1, [pc, #204]	; (800c8dc <WM__InitIVRSearch+0xf8>)
 800c80e:	9000      	str	r0, [sp, #0]
 800c810:	780b      	ldrb	r3, [r1, #0]
 800c812:	f04f 32ff 	mov.w	r2, #4294967295
 800c816:	6122      	str	r2, [r4, #16]
 800c818:	b123      	cbz	r3, 800c824 <WM__InitIVRSearch+0x40>
 800c81a:	f100 0108 	add.w	r1, r0, #8
 800c81e:	ac02      	add	r4, sp, #8
 800c820:	c903      	ldmia	r1, {r0, r1}
 800c822:	e005      	b.n	800c830 <WM__InitIVRSearch+0x4c>
 800c824:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800c826:	f016 0602 	ands.w	r6, r6, #2
 800c82a:	d009      	beq.n	800c840 <WM__InitIVRSearch+0x5c>
 800c82c:	c803      	ldmia	r0, {r0, r1}
 800c82e:	ac02      	add	r4, sp, #8
 800c830:	e884 0003 	stmia.w	r4, {r0, r1}
 800c834:	b165      	cbz	r5, 800c850 <WM__InitIVRSearch+0x6c>
 800c836:	a802      	add	r0, sp, #8
 800c838:	4629      	mov	r1, r5
 800c83a:	f003 f8c5 	bl	800f9c8 <GUI__IntersectRect>
 800c83e:	e007      	b.n	800c850 <WM__InitIVRSearch+0x6c>
 800c840:	6960      	ldr	r0, [r4, #20]
 800c842:	1e42      	subs	r2, r0, #1
 800c844:	4668      	mov	r0, sp
 800c846:	6162      	str	r2, [r4, #20]
 800c848:	f005 f856 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c84c:	4630      	mov	r0, r6
 800c84e:	e03e      	b.n	800c8ce <WM__InitIVRSearch+0xea>
 800c850:	4b20      	ldr	r3, [pc, #128]	; (800c8d4 <WM__InitIVRSearch+0xf0>)
 800c852:	6818      	ldr	r0, [r3, #0]
 800c854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c856:	b1ca      	cbz	r2, 800c88c <WM__InitIVRSearch+0xa8>
 800c858:	9c00      	ldr	r4, [sp, #0]
 800c85a:	6851      	ldr	r1, [r2, #4]
 800c85c:	9401      	str	r4, [sp, #4]
 800c85e:	6810      	ldr	r0, [r2, #0]
 800c860:	4c1f      	ldr	r4, [pc, #124]	; (800c8e0 <WM__InitIVRSearch+0xfc>)
 800c862:	ab04      	add	r3, sp, #16
 800c864:	c303      	stmia	r3!, {r0, r1}
 800c866:	6821      	ldr	r1, [r4, #0]
 800c868:	b131      	cbz	r1, 800c878 <WM__InitIVRSearch+0x94>
 800c86a:	a801      	add	r0, sp, #4
 800c86c:	f005 f844 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c870:	6820      	ldr	r0, [r4, #0]
 800c872:	f005 f833 	bl	80118dc <GUI_ALLOC_LockH>
 800c876:	9001      	str	r0, [sp, #4]
 800c878:	9801      	ldr	r0, [sp, #4]
 800c87a:	a904      	add	r1, sp, #16
 800c87c:	f7ff fb8e 	bl	800bf9c <WM__Client2Screen>
 800c880:	a802      	add	r0, sp, #8
 800c882:	a904      	add	r1, sp, #16
 800c884:	f003 f8a0 	bl	800f9c8 <GUI__IntersectRect>
 800c888:	a801      	add	r0, sp, #4
 800c88a:	e000      	b.n	800c88e <WM__InitIVRSearch+0xaa>
 800c88c:	4668      	mov	r0, sp
 800c88e:	f005 f833 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c892:	4813      	ldr	r0, [pc, #76]	; (800c8e0 <WM__InitIVRSearch+0xfc>)
 800c894:	6801      	ldr	r1, [r0, #0]
 800c896:	ac02      	add	r4, sp, #8
 800c898:	b129      	cbz	r1, 800c8a6 <WM__InitIVRSearch+0xc2>
 800c89a:	4620      	mov	r0, r4
 800c89c:	f7ff fae2 	bl	800be64 <WM__ClipAtParentBorders>
 800c8a0:	b908      	cbnz	r0, 800c8a6 <WM__InitIVRSearch+0xc2>
 800c8a2:	4b0d      	ldr	r3, [pc, #52]	; (800c8d8 <WM__InitIVRSearch+0xf4>)
 800c8a4:	e007      	b.n	800c8b6 <WM__InitIVRSearch+0xd2>
 800c8a6:	4a0b      	ldr	r2, [pc, #44]	; (800c8d4 <WM__InitIVRSearch+0xf0>)
 800c8a8:	6813      	ldr	r3, [r2, #0]
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800c8ae:	f7ff fad9 	bl	800be64 <WM__ClipAtParentBorders>
 800c8b2:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <WM__InitIVRSearch+0xf4>)
 800c8b4:	b918      	cbnz	r0, 800c8be <WM__InitIVRSearch+0xda>
 800c8b6:	6959      	ldr	r1, [r3, #20]
 800c8b8:	1e4a      	subs	r2, r1, #1
 800c8ba:	615a      	str	r2, [r3, #20]
 800c8bc:	e007      	b.n	800c8ce <WM__InitIVRSearch+0xea>
 800c8be:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c8c2:	e883 0003 	stmia.w	r3, {r0, r1}
 800c8c6:	f7ff fecd 	bl	800c664 <WM__GetNextIVR>
 800c8ca:	e000      	b.n	800c8ce <WM__InitIVRSearch+0xea>
 800c8cc:	2001      	movs	r0, #1
 800c8ce:	b006      	add	sp, #24
 800c8d0:	bd70      	pop	{r4, r5, r6, pc}
 800c8d2:	bf00      	nop
 800c8d4:	2000027c 	.word	0x2000027c
 800c8d8:	20016e00 	.word	0x20016e00
 800c8dc:	200179b9 	.word	0x200179b9
 800c8e0:	20017990 	.word	0x20017990

0800c8e4 <WM_SetDefault>:
 800c8e4:	b508      	push	{r3, lr}
 800c8e6:	f003 fcad 	bl	8010244 <GL_SetDefault>
 800c8ea:	4b02      	ldr	r3, [pc, #8]	; (800c8f4 <WM_SetDefault+0x10>)
 800c8ec:	6818      	ldr	r0, [r3, #0]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	6442      	str	r2, [r0, #68]	; 0x44
 800c8f2:	bd08      	pop	{r3, pc}
 800c8f4:	2000027c 	.word	0x2000027c

0800c8f8 <WM__Paint1>:
 800c8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8fa:	b089      	sub	sp, #36	; 0x24
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	f004 ffed 	bl	80118dc <GUI_ALLOC_LockH>
 800c902:	6907      	ldr	r7, [r0, #16]
 800c904:	9001      	str	r0, [sp, #4]
 800c906:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800c908:	3008      	adds	r0, #8
 800c90a:	c803      	ldmia	r0, {r0, r1}
 800c90c:	ad02      	add	r5, sp, #8
 800c90e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c912:	a801      	add	r0, sp, #4
 800c914:	f004 fff0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c918:	2f00      	cmp	r7, #0
 800c91a:	d030      	beq.n	800c97e <WM__Paint1+0x86>
 800c91c:	07b2      	lsls	r2, r6, #30
 800c91e:	d52e      	bpl.n	800c97e <WM__Paint1+0x86>
 800c920:	4620      	mov	r0, r4
 800c922:	212e      	movs	r1, #46	; 0x2e
 800c924:	f7fe fde5 	bl	800b4f2 <WM_SendMessageNoPara>
 800c928:	4b16      	ldr	r3, [pc, #88]	; (800c984 <WM__Paint1+0x8c>)
 800c92a:	781a      	ldrb	r2, [r3, #0]
 800c92c:	1c50      	adds	r0, r2, #1
 800c92e:	7018      	strb	r0, [r3, #0]
 800c930:	04f3      	lsls	r3, r6, #19
 800c932:	d50a      	bpl.n	800c94a <WM__Paint1+0x52>
 800c934:	220f      	movs	r2, #15
 800c936:	9405      	str	r4, [sp, #20]
 800c938:	9204      	str	r2, [sp, #16]
 800c93a:	9507      	str	r5, [sp, #28]
 800c93c:	f7ff ffd2 	bl	800c8e4 <WM_SetDefault>
 800c940:	4620      	mov	r0, r4
 800c942:	a904      	add	r1, sp, #16
 800c944:	f7fe fb86 	bl	800b054 <WM__SendMessage>
 800c948:	e011      	b.n	800c96e <WM__Paint1+0x76>
 800c94a:	4628      	mov	r0, r5
 800c94c:	f7ff ff4a 	bl	800c7e4 <WM__InitIVRSearch>
 800c950:	b168      	cbz	r0, 800c96e <WM__Paint1+0x76>
 800c952:	210f      	movs	r1, #15
 800c954:	ab02      	add	r3, sp, #8
 800c956:	9104      	str	r1, [sp, #16]
 800c958:	9307      	str	r3, [sp, #28]
 800c95a:	9405      	str	r4, [sp, #20]
 800c95c:	f7ff ffc2 	bl	800c8e4 <WM_SetDefault>
 800c960:	4620      	mov	r0, r4
 800c962:	a904      	add	r1, sp, #16
 800c964:	f7fe fb76 	bl	800b054 <WM__SendMessage>
 800c968:	f7ff fe7c 	bl	800c664 <WM__GetNextIVR>
 800c96c:	e7f0      	b.n	800c950 <WM__Paint1+0x58>
 800c96e:	4805      	ldr	r0, [pc, #20]	; (800c984 <WM__Paint1+0x8c>)
 800c970:	7801      	ldrb	r1, [r0, #0]
 800c972:	1e4b      	subs	r3, r1, #1
 800c974:	7003      	strb	r3, [r0, #0]
 800c976:	212f      	movs	r1, #47	; 0x2f
 800c978:	4620      	mov	r0, r4
 800c97a:	f7fe fdba 	bl	800b4f2 <WM_SendMessageNoPara>
 800c97e:	b009      	add	sp, #36	; 0x24
 800c980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c982:	bf00      	nop
 800c984:	200179b9 	.word	0x200179b9

0800c988 <WM__Paint>:
 800c988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c98c:	b088      	sub	sp, #32
 800c98e:	ae06      	add	r6, sp, #24
 800c990:	9003      	str	r0, [sp, #12]
 800c992:	f004 ffa3 	bl	80118dc <GUI_ALLOC_LockH>
 800c996:	4603      	mov	r3, r0
 800c998:	f100 0208 	add.w	r2, r0, #8
 800c99c:	9005      	str	r0, [sp, #20]
 800c99e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9a2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800c9a4:	699f      	ldr	r7, [r3, #24]
 800c9a6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800c9aa:	f244 0420 	movw	r4, #16416	; 0x4020
 800c9ae:	e886 0003 	stmia.w	r6, {r0, r1}
 800c9b2:	402c      	ands	r4, r5
 800c9b4:	a805      	add	r0, sp, #20
 800c9b6:	f004 ff9f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800c9ba:	2c00      	cmp	r4, #0
 800c9bc:	d035      	beq.n	800ca2a <WM__Paint+0xa2>
 800c9be:	f1b8 0f00 	cmp.w	r8, #0
 800c9c2:	d017      	beq.n	800c9f4 <WM__Paint+0x6c>
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	9903      	ldr	r1, [sp, #12]
 800c9c8:	f7ff fa4c 	bl	800be64 <WM__ClipAtParentBorders>
 800c9cc:	b190      	cbz	r0, 800c9f4 <WM__Paint+0x6c>
 800c9ce:	9803      	ldr	r0, [sp, #12]
 800c9d0:	f7ff fcea 	bl	800c3a8 <WM_SelectWindow>
 800c9d4:	0768      	lsls	r0, r5, #29
 800c9d6:	d50f      	bpl.n	800c9f8 <WM__Paint+0x70>
 800c9d8:	b127      	cbz	r7, 800c9e4 <WM__Paint+0x5c>
 800c9da:	f005 0501 	and.w	r5, r5, #1
 800c9de:	f085 0501 	eor.w	r5, r5, #1
 800c9e2:	e000      	b.n	800c9e6 <WM__Paint+0x5e>
 800c9e4:	2501      	movs	r5, #1
 800c9e6:	9500      	str	r5, [sp, #0]
 800c9e8:	a806      	add	r0, sp, #24
 800c9ea:	4912      	ldr	r1, [pc, #72]	; (800ca34 <WM__Paint+0xac>)
 800c9ec:	aa03      	add	r2, sp, #12
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f000 fabc 	bl	800cf6c <GUI_MEMDEV_Draw>
 800c9f4:	2400      	movs	r4, #0
 800c9f6:	e003      	b.n	800ca00 <WM__Paint+0x78>
 800c9f8:	9803      	ldr	r0, [sp, #12]
 800c9fa:	f7ff f9cd 	bl	800bd98 <WM__PaintWinAndOverlays>
 800c9fe:	2401      	movs	r4, #1
 800ca00:	9803      	ldr	r0, [sp, #12]
 800ca02:	f004 ff6b 	bl	80118dc <GUI_ALLOC_LockH>
 800ca06:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ca08:	9005      	str	r0, [sp, #20]
 800ca0a:	f421 4380 	bic.w	r3, r1, #16384	; 0x4000
 800ca0e:	f023 0220 	bic.w	r2, r3, #32
 800ca12:	0489      	lsls	r1, r1, #18
 800ca14:	bf48      	it	mi
 800ca16:	f042 0204 	orrmi.w	r2, r2, #4
 800ca1a:	6282      	str	r2, [r0, #40]	; 0x28
 800ca1c:	a805      	add	r0, sp, #20
 800ca1e:	f004 ff6b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ca22:	4805      	ldr	r0, [pc, #20]	; (800ca38 <WM__Paint+0xb0>)
 800ca24:	8801      	ldrh	r1, [r0, #0]
 800ca26:	1e4b      	subs	r3, r1, #1
 800ca28:	8003      	strh	r3, [r0, #0]
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	b008      	add	sp, #32
 800ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca32:	bf00      	nop
 800ca34:	0800be0d 	.word	0x0800be0d
 800ca38:	200179ac 	.word	0x200179ac

0800ca3c <WM_Exec>:
 800ca3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca40:	4b4b      	ldr	r3, [pc, #300]	; (800cb70 <WM_Exec+0x134>)
 800ca42:	6818      	ldr	r0, [r3, #0]
 800ca44:	b09f      	sub	sp, #124	; 0x7c
 800ca46:	b100      	cbz	r0, 800ca4a <WM_Exec+0xe>
 800ca48:	4780      	blx	r0
 800ca4a:	2600      	movs	r6, #0
 800ca4c:	4949      	ldr	r1, [pc, #292]	; (800cb74 <WM_Exec+0x138>)
 800ca4e:	680a      	ldr	r2, [r1, #0]
 800ca50:	b1e2      	cbz	r2, 800ca8c <WM_Exec+0x50>
 800ca52:	4c49      	ldr	r4, [pc, #292]	; (800cb78 <WM_Exec+0x13c>)
 800ca54:	6824      	ldr	r4, [r4, #0]
 800ca56:	b1bc      	cbz	r4, 800ca88 <WM_Exec+0x4c>
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f004 ff3f 	bl	80118dc <GUI_ALLOC_LockH>
 800ca5e:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800ca60:	a91e      	add	r1, sp, #120	; 0x78
 800ca62:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 800ca66:	f841 0d74 	str.w	r0, [r1, #-116]!
 800ca6a:	6945      	ldr	r5, [r0, #20]
 800ca6c:	d007      	beq.n	800ca7e <WM_Exec+0x42>
 800ca6e:	4608      	mov	r0, r1
 800ca70:	f004 ff42 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ca74:	4620      	mov	r0, r4
 800ca76:	f7ff fcb7 	bl	800c3e8 <WM_DeleteWindow>
 800ca7a:	462c      	mov	r4, r5
 800ca7c:	e7eb      	b.n	800ca56 <WM_Exec+0x1a>
 800ca7e:	4608      	mov	r0, r1
 800ca80:	462c      	mov	r4, r5
 800ca82:	f004 ff39 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ca86:	e7e6      	b.n	800ca56 <WM_Exec+0x1a>
 800ca88:	4d3a      	ldr	r5, [pc, #232]	; (800cb74 <WM_Exec+0x138>)
 800ca8a:	602c      	str	r4, [r5, #0]
 800ca8c:	4b3b      	ldr	r3, [pc, #236]	; (800cb7c <WM_Exec+0x140>)
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	b100      	cbz	r0, 800ca94 <WM_Exec+0x58>
 800ca92:	4780      	blx	r0
 800ca94:	493a      	ldr	r1, [pc, #232]	; (800cb80 <WM_Exec+0x144>)
 800ca96:	680a      	ldr	r2, [r1, #0]
 800ca98:	b92a      	cbnz	r2, 800caa6 <WM_Exec+0x6a>
 800ca9a:	4c3a      	ldr	r4, [pc, #232]	; (800cb84 <WM_Exec+0x148>)
 800ca9c:	6825      	ldr	r5, [r4, #0]
 800ca9e:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800caa2:	b143      	cbz	r3, 800cab6 <WM_Exec+0x7a>
 800caa4:	e003      	b.n	800caae <WM_Exec+0x72>
 800caa6:	4790      	blx	r2
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d0f6      	beq.n	800ca9a <WM_Exec+0x5e>
 800caac:	e055      	b.n	800cb5a <WM_Exec+0x11e>
 800caae:	f003 fc87 	bl	80103c0 <GUI_PollKeyMsg>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d151      	bne.n	800cb5a <WM_Exec+0x11e>
 800cab6:	6820      	ldr	r0, [r4, #0]
 800cab8:	f890 5054 	ldrb.w	r5, [r0, #84]	; 0x54
 800cabc:	b14d      	cbz	r5, 800cad2 <WM_Exec+0x96>
 800cabe:	4932      	ldr	r1, [pc, #200]	; (800cb88 <WM_Exec+0x14c>)
 800cac0:	880d      	ldrh	r5, [r1, #0]
 800cac2:	b135      	cbz	r5, 800cad2 <WM_Exec+0x96>
 800cac4:	4a31      	ldr	r2, [pc, #196]	; (800cb8c <WM_Exec+0x150>)
 800cac6:	6815      	ldr	r5, [r2, #0]
 800cac8:	2d00      	cmp	r5, #0
 800caca:	d048      	beq.n	800cb5e <WM_Exec+0x122>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	4798      	blx	r3
 800cad0:	2501      	movs	r5, #1
 800cad2:	482c      	ldr	r0, [pc, #176]	; (800cb84 <WM_Exec+0x148>)
 800cad4:	6801      	ldr	r1, [r0, #0]
 800cad6:	f891 2054 	ldrb.w	r2, [r1, #84]	; 0x54
 800cada:	b912      	cbnz	r2, 800cae2 <WM_Exec+0xa6>
 800cadc:	2d00      	cmp	r5, #0
 800cade:	d133      	bne.n	800cb48 <WM_Exec+0x10c>
 800cae0:	e041      	b.n	800cb66 <WM_Exec+0x12a>
 800cae2:	4b29      	ldr	r3, [pc, #164]	; (800cb88 <WM_Exec+0x14c>)
 800cae4:	8818      	ldrh	r0, [r3, #0]
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d0f8      	beq.n	800cadc <WM_Exec+0xa0>
 800caea:	4f29      	ldr	r7, [pc, #164]	; (800cb90 <WM_Exec+0x154>)
 800caec:	683c      	ldr	r4, [r7, #0]
 800caee:	b90c      	cbnz	r4, 800caf4 <WM_Exec+0xb8>
 800caf0:	4c21      	ldr	r4, [pc, #132]	; (800cb78 <WM_Exec+0x13c>)
 800caf2:	6824      	ldr	r4, [r4, #0]
 800caf4:	a802      	add	r0, sp, #8
 800caf6:	f003 fbf7 	bl	80102e8 <GUI_SaveContext_W>
 800cafa:	4922      	ldr	r1, [pc, #136]	; (800cb84 <WM_Exec+0x148>)
 800cafc:	680a      	ldr	r2, [r1, #0]
 800cafe:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
 800cb02:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800cb04:	b924      	cbnz	r4, 800cb10 <WM_Exec+0xd4>
 800cb06:	2400      	movs	r4, #0
 800cb08:	e00d      	b.n	800cb26 <WM_Exec+0xea>
 800cb0a:	f1b9 0f00 	cmp.w	r9, #0
 800cb0e:	d10a      	bne.n	800cb26 <WM_Exec+0xea>
 800cb10:	4620      	mov	r0, r4
 800cb12:	f7ff ff39 	bl	800c988 <WM__Paint>
 800cb16:	4681      	mov	r9, r0
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f004 fed5 	bl	80118c8 <GUI_ALLOC_h2p>
 800cb1e:	6944      	ldr	r4, [r0, #20]
 800cb20:	2c00      	cmp	r4, #0
 800cb22:	d1f2      	bne.n	800cb0a <WM_Exec+0xce>
 800cb24:	e7ef      	b.n	800cb06 <WM_Exec+0xca>
 800cb26:	4b1a      	ldr	r3, [pc, #104]	; (800cb90 <WM_Exec+0x154>)
 800cb28:	4640      	mov	r0, r8
 800cb2a:	601c      	str	r4, [r3, #0]
 800cb2c:	f003 fbac 	bl	8010288 <GUI_SetColor>
 800cb30:	4638      	mov	r0, r7
 800cb32:	f003 fba7 	bl	8010284 <GUI_SetBkColor>
 800cb36:	a802      	add	r0, sp, #8
 800cb38:	f003 fbe0 	bl	80102fc <GUI_RestoreContext>
 800cb3c:	4812      	ldr	r0, [pc, #72]	; (800cb88 <WM_Exec+0x14c>)
 800cb3e:	8801      	ldrh	r1, [r0, #0]
 800cb40:	2900      	cmp	r1, #0
 800cb42:	d0cb      	beq.n	800cadc <WM_Exec+0xa0>
 800cb44:	2601      	movs	r6, #1
 800cb46:	e7c4      	b.n	800cad2 <WM_Exec+0x96>
 800cb48:	4a10      	ldr	r2, [pc, #64]	; (800cb8c <WM_Exec+0x150>)
 800cb4a:	6810      	ldr	r0, [r2, #0]
 800cb4c:	b110      	cbz	r0, 800cb54 <WM_Exec+0x118>
 800cb4e:	6843      	ldr	r3, [r0, #4]
 800cb50:	4798      	blx	r3
 800cb52:	e008      	b.n	800cb66 <WM_Exec+0x12a>
 800cb54:	f002 fefe 	bl	800f954 <GUI__ManageCache>
 800cb58:	e005      	b.n	800cb66 <WM_Exec+0x12a>
 800cb5a:	2601      	movs	r6, #1
 800cb5c:	e776      	b.n	800ca4c <WM_Exec+0x10>
 800cb5e:	2001      	movs	r0, #1
 800cb60:	f002 fef8 	bl	800f954 <GUI__ManageCache>
 800cb64:	e7b4      	b.n	800cad0 <WM_Exec+0x94>
 800cb66:	4630      	mov	r0, r6
 800cb68:	b01f      	add	sp, #124	; 0x7c
 800cb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb6e:	bf00      	nop
 800cb70:	200179a0 	.word	0x200179a0
 800cb74:	20016df4 	.word	0x20016df4
 800cb78:	200179b0 	.word	0x200179b0
 800cb7c:	2001799c 	.word	0x2001799c
 800cb80:	20017a10 	.word	0x20017a10
 800cb84:	2000027c 	.word	0x2000027c
 800cb88:	200179ac 	.word	0x200179ac
 800cb8c:	200179cc 	.word	0x200179cc
 800cb90:	20016e18 	.word	0x20016e18

0800cb94 <WM_Activate>:
 800cb94:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <WM_Activate+0xc>)
 800cb96:	6818      	ldr	r0, [r3, #0]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800cb9e:	4770      	bx	lr
 800cba0:	2000027c 	.word	0x2000027c

0800cba4 <WM_Deactivate>:
 800cba4:	4b03      	ldr	r3, [pc, #12]	; (800cbb4 <WM_Deactivate+0x10>)
 800cba6:	6818      	ldr	r0, [r3, #0]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800cbae:	f002 bcf9 	b.w	800f5a4 <LCD_SetClipRectMax>
 800cbb2:	bf00      	nop
 800cbb4:	2000027c 	.word	0x2000027c

0800cbb8 <WM_DefaultProc>:
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	4604      	mov	r4, r0
 800cbbc:	6840      	ldr	r0, [r0, #4]
 800cbbe:	6823      	ldr	r3, [r4, #0]
 800cbc0:	68e1      	ldr	r1, [r4, #12]
 800cbc2:	2b17      	cmp	r3, #23
 800cbc4:	d00f      	beq.n	800cbe6 <WM_DefaultProc+0x2e>
 800cbc6:	dc06      	bgt.n	800cbd6 <WM_DefaultProc+0x1e>
 800cbc8:	2b0e      	cmp	r3, #14
 800cbca:	d00e      	beq.n	800cbea <WM_DefaultProc+0x32>
 800cbcc:	2b14      	cmp	r3, #20
 800cbce:	d114      	bne.n	800cbfa <WM_DefaultProc+0x42>
 800cbd0:	f7fe fec5 	bl	800b95e <WM__GetClientRectEx>
 800cbd4:	e011      	b.n	800cbfa <WM_DefaultProc+0x42>
 800cbd6:	2b22      	cmp	r3, #34	; 0x22
 800cbd8:	d00c      	beq.n	800cbf4 <WM_DefaultProc+0x3c>
 800cbda:	2b28      	cmp	r3, #40	; 0x28
 800cbdc:	d10d      	bne.n	800cbfa <WM_DefaultProc+0x42>
 800cbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbe2:	f7ff bbbf 	b.w	800c364 <WM_InvalidateWindow>
 800cbe6:	60e0      	str	r0, [r4, #12]
 800cbe8:	bd10      	pop	{r4, pc}
 800cbea:	4621      	mov	r1, r4
 800cbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbf0:	f006 ba8c 	b.w	801310c <WM_SendToParent>
 800cbf4:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 800cbf8:	e000      	b.n	800cbfc <WM_DefaultProc+0x44>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	60e0      	str	r0, [r4, #12]
 800cbfe:	bd10      	pop	{r4, pc}

0800cc00 <cbBackWin>:
 800cc00:	6803      	ldr	r3, [r0, #0]
 800cc02:	2b0e      	cmp	r3, #14
 800cc04:	b510      	push	{r4, lr}
 800cc06:	4604      	mov	r4, r0
 800cc08:	d002      	beq.n	800cc10 <cbBackWin+0x10>
 800cc0a:	2b0f      	cmp	r3, #15
 800cc0c:	d121      	bne.n	800cc52 <cbBackWin+0x52>
 800cc0e:	e008      	b.n	800cc22 <cbBackWin+0x22>
 800cc10:	68c3      	ldr	r3, [r0, #12]
 800cc12:	6858      	ldr	r0, [r3, #4]
 800cc14:	2801      	cmp	r0, #1
 800cc16:	d121      	bne.n	800cc5c <cbBackWin+0x5c>
 800cc18:	6818      	ldr	r0, [r3, #0]
 800cc1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc1e:	f003 bbc7 	b.w	80103b0 <GUI_StoreKey>
 800cc22:	4a0f      	ldr	r2, [pc, #60]	; (800cc60 <cbBackWin+0x60>)
 800cc24:	6840      	ldr	r0, [r0, #4]
 800cc26:	6811      	ldr	r1, [r2, #0]
 800cc28:	4288      	cmp	r0, r1
 800cc2a:	d006      	beq.n	800cc3a <cbBackWin+0x3a>
 800cc2c:	6853      	ldr	r3, [r2, #4]
 800cc2e:	4298      	cmp	r0, r3
 800cc30:	bf14      	ite	ne
 800cc32:	f04f 30ff 	movne.w	r0, #4294967295
 800cc36:	2001      	moveq	r0, #1
 800cc38:	e000      	b.n	800cc3c <cbBackWin+0x3c>
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	4a09      	ldr	r2, [pc, #36]	; (800cc64 <cbBackWin+0x64>)
 800cc3e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800cc42:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800cc46:	4288      	cmp	r0, r1
 800cc48:	d003      	beq.n	800cc52 <cbBackWin+0x52>
 800cc4a:	f003 fb1b 	bl	8010284 <GUI_SetBkColor>
 800cc4e:	f004 fa33 	bl	80110b8 <GUI_Clear>
 800cc52:	4620      	mov	r0, r4
 800cc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc58:	f7ff bfae 	b.w	800cbb8 <WM_DefaultProc>
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	bf00      	nop
 800cc60:	20017994 	.word	0x20017994
 800cc64:	200179c0 	.word	0x200179c0

0800cc68 <WM_Init>:
 800cc68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc6a:	4b2b      	ldr	r3, [pc, #172]	; (800cd18 <WM_Init+0xb0>)
 800cc6c:	7818      	ldrb	r0, [r3, #0]
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d14f      	bne.n	800cd12 <WM_Init+0xaa>
 800cc72:	492a      	ldr	r1, [pc, #168]	; (800cd1c <WM_Init+0xb4>)
 800cc74:	4a2a      	ldr	r2, [pc, #168]	; (800cd20 <WM_Init+0xb8>)
 800cc76:	4c2b      	ldr	r4, [pc, #172]	; (800cd24 <WM_Init+0xbc>)
 800cc78:	6008      	str	r0, [r1, #0]
 800cc7a:	6010      	str	r0, [r2, #0]
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	492a      	ldr	r1, [pc, #168]	; (800cd28 <WM_Init+0xc0>)
 800cc80:	4a2a      	ldr	r2, [pc, #168]	; (800cd2c <WM_Init+0xc4>)
 800cc82:	6458      	str	r0, [r3, #68]	; 0x44
 800cc84:	8008      	strh	r0, [r1, #0]
 800cc86:	8010      	strh	r0, [r2, #0]
 800cc88:	4604      	mov	r4, r0
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f004 f902 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800cc90:	b1c8      	cbz	r0, 800ccc6 <WM_Init+0x5e>
 800cc92:	4827      	ldr	r0, [pc, #156]	; (800cd30 <WM_Init+0xc8>)
 800cc94:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800cc98:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9c:	f04f 0e02 	mov.w	lr, #2
 800cca0:	9002      	str	r0, [sp, #8]
 800cca2:	2000      	movs	r0, #0
 800cca4:	e88d 4008 	stmia.w	sp, {r3, lr}
 800cca8:	4601      	mov	r1, r0
 800ccaa:	4613      	mov	r3, r2
 800ccac:	9003      	str	r0, [sp, #12]
 800ccae:	f7ff fc15 	bl	800c4dc <WM_CreateWindowAsChild>
 800ccb2:	4b20      	ldr	r3, [pc, #128]	; (800cd34 <WM_Init+0xcc>)
 800ccb4:	4a20      	ldr	r2, [pc, #128]	; (800cd38 <WM_Init+0xd0>)
 800ccb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ccba:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ccbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccc2:	f7ff fb4f 	bl	800c364 <WM_InvalidateWindow>
 800ccc6:	3401      	adds	r4, #1
 800ccc8:	2c02      	cmp	r4, #2
 800ccca:	d1de      	bne.n	800cc8a <WM_Init+0x22>
 800cccc:	481b      	ldr	r0, [pc, #108]	; (800cd3c <WM_Init+0xd4>)
 800ccce:	f006 fa4d 	bl	801316c <WM__AddCriticalHandle>
 800ccd2:	481b      	ldr	r0, [pc, #108]	; (800cd40 <WM_Init+0xd8>)
 800ccd4:	f006 fa4a 	bl	801316c <WM__AddCriticalHandle>
 800ccd8:	481a      	ldr	r0, [pc, #104]	; (800cd44 <WM_Init+0xdc>)
 800ccda:	f006 fa47 	bl	801316c <WM__AddCriticalHandle>
 800ccde:	481a      	ldr	r0, [pc, #104]	; (800cd48 <WM_Init+0xe0>)
 800cce0:	f006 fa44 	bl	801316c <WM__AddCriticalHandle>
 800cce4:	4819      	ldr	r0, [pc, #100]	; (800cd4c <WM_Init+0xe4>)
 800cce6:	f006 fa41 	bl	801316c <WM__AddCriticalHandle>
 800ccea:	4819      	ldr	r0, [pc, #100]	; (800cd50 <WM_Init+0xe8>)
 800ccec:	f006 fa3e 	bl	801316c <WM__AddCriticalHandle>
 800ccf0:	4810      	ldr	r0, [pc, #64]	; (800cd34 <WM_Init+0xcc>)
 800ccf2:	6800      	ldr	r0, [r0, #0]
 800ccf4:	f7ff fb58 	bl	800c3a8 <WM_SelectWindow>
 800ccf8:	f7ff ff4c 	bl	800cb94 <WM_Activate>
 800ccfc:	4b06      	ldr	r3, [pc, #24]	; (800cd18 <WM_Init+0xb0>)
 800ccfe:	4815      	ldr	r0, [pc, #84]	; (800cd54 <WM_Init+0xec>)
 800cd00:	4a15      	ldr	r2, [pc, #84]	; (800cd58 <WM_Init+0xf0>)
 800cd02:	2101      	movs	r1, #1
 800cd04:	7019      	strb	r1, [r3, #0]
 800cd06:	6002      	str	r2, [r0, #0]
 800cd08:	b004      	add	sp, #16
 800cd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd0e:	f004 b9e3 	b.w	80110d8 <GUI__RegisterExit>
 800cd12:	b004      	add	sp, #16
 800cd14:	bd10      	pop	{r4, pc}
 800cd16:	bf00      	nop
 800cd18:	20016e1c 	.word	0x20016e1c
 800cd1c:	200179b0 	.word	0x200179b0
 800cd20:	20016e18 	.word	0x20016e18
 800cd24:	2000027c 	.word	0x2000027c
 800cd28:	200179ac 	.word	0x200179ac
 800cd2c:	2001798c 	.word	0x2001798c
 800cd30:	0800cc01 	.word	0x0800cc01
 800cd34:	20017994 	.word	0x20017994
 800cd38:	200179c0 	.word	0x200179c0
 800cd3c:	20017af0 	.word	0x20017af0
 800cd40:	20017ae0 	.word	0x20017ae0
 800cd44:	20017ad0 	.word	0x20017ad0
 800cd48:	20017af8 	.word	0x20017af8
 800cd4c:	20017ae8 	.word	0x20017ae8
 800cd50:	20017ad8 	.word	0x20017ad8
 800cd54:	20016df8 	.word	0x20016df8
 800cd58:	0800ba39 	.word	0x0800ba39

0800cd5c <_CreateStaticDevice>:
 800cd5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd60:	b087      	sub	sp, #28
 800cd62:	4604      	mov	r4, r0
 800cd64:	f004 fdba 	bl	80118dc <GUI_ALLOC_LockH>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	a806      	add	r0, sp, #24
 800cd6c:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 800cd70:	f9b3 7000 	ldrsh.w	r7, [r3]
 800cd74:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800cd78:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800cd7c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800cd80:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 800cd84:	f004 fdb8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800cd88:	1bf0      	subs	r0, r6, r7
 800cd8a:	1c46      	adds	r6, r0, #1
 800cd8c:	ebc8 0105 	rsb	r1, r8, r5
 800cd90:	1c4d      	adds	r5, r1, #1
 800cd92:	2e00      	cmp	r6, #0
 800cd94:	dd4b      	ble.n	800ce2e <_CreateStaticDevice+0xd2>
 800cd96:	2d00      	cmp	r5, #0
 800cd98:	dd49      	ble.n	800ce2e <_CreateStaticDevice+0xd2>
 800cd9a:	f1b9 0f00 	cmp.w	r9, #0
 800cd9e:	d048      	beq.n	800ce32 <_CreateStaticDevice+0xd6>
 800cda0:	4648      	mov	r0, r9
 800cda2:	f004 fd9b 	bl	80118dc <GUI_ALLOC_LockH>
 800cda6:	a906      	add	r1, sp, #24
 800cda8:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800cdac:	f841 0d08 	str.w	r0, [r1, #-8]!
 800cdb0:	88c5      	ldrh	r5, [r0, #6]
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	f004 fda0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800cdb8:	42be      	cmp	r6, r7
 800cdba:	d102      	bne.n	800cdc2 <_CreateStaticDevice+0x66>
 800cdbc:	b22d      	sxth	r5, r5
 800cdbe:	4545      	cmp	r5, r8
 800cdc0:	d030      	beq.n	800ce24 <_CreateStaticDevice+0xc8>
 800cdc2:	4648      	mov	r0, r9
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	4642      	mov	r2, r8
 800cdc8:	f000 f884 	bl	800ced4 <GUI_MEMDEV_SetOrg>
 800cdcc:	e02a      	b.n	800ce24 <_CreateStaticDevice+0xc8>
 800cdce:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800cdd0:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
 800cdd4:	6283      	str	r3, [r0, #40]	; 0x28
 800cdd6:	4608      	mov	r0, r1
 800cdd8:	f004 fd8e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800cddc:	4638      	mov	r0, r7
 800cdde:	f000 ff5d 	bl	800dc9c <GUI_MEMDEV_Select>
 800cde2:	4680      	mov	r8, r0
 800cde4:	4648      	mov	r0, r9
 800cde6:	f003 fa51 	bl	801028c <GUI__AlphaSuppressMixing>
 800cdea:	4638      	mov	r0, r7
 800cdec:	fb05 f706 	mul.w	r7, r5, r6
 800cdf0:	4e2c      	ldr	r6, [pc, #176]	; (800cea4 <_CreateStaticDevice+0x148>)
 800cdf2:	4d2d      	ldr	r5, [pc, #180]	; (800cea8 <_CreateStaticDevice+0x14c>)
 800cdf4:	f000 f8ae 	bl	800cf54 <GUI_MEMDEV_GetDataPtr>
 800cdf8:	7831      	ldrb	r1, [r6, #0]
 800cdfa:	4e2c      	ldr	r6, [pc, #176]	; (800ceac <_CreateStaticDevice+0x150>)
 800cdfc:	00ba      	lsls	r2, r7, #2
 800cdfe:	f002 fccb 	bl	800f798 <GUI__memset>
 800ce02:	4620      	mov	r0, r4
 800ce04:	682f      	ldr	r7, [r5, #0]
 800ce06:	6034      	str	r4, [r6, #0]
 800ce08:	f006 f9a6 	bl	8013158 <WM_GetWindowOrgX>
 800ce0c:	6028      	str	r0, [r5, #0]
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f7ff fd72 	bl	800c8f8 <WM__Paint1>
 800ce14:	2000      	movs	r0, #0
 800ce16:	602f      	str	r7, [r5, #0]
 800ce18:	6030      	str	r0, [r6, #0]
 800ce1a:	f003 fa37 	bl	801028c <GUI__AlphaSuppressMixing>
 800ce1e:	4640      	mov	r0, r8
 800ce20:	f000 ff3c 	bl	800dc9c <GUI_MEMDEV_Select>
 800ce24:	4620      	mov	r0, r4
 800ce26:	f004 fd4f 	bl	80118c8 <GUI_ALLOC_h2p>
 800ce2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ce2c:	e037      	b.n	800ce9e <_CreateStaticDevice+0x142>
 800ce2e:	2000      	movs	r0, #0
 800ce30:	e035      	b.n	800ce9e <_CreateStaticDevice+0x142>
 800ce32:	f7fe fd7b 	bl	800b92c <WM_GetDesktopWindow>
 800ce36:	4284      	cmp	r4, r0
 800ce38:	d112      	bne.n	800ce60 <_CreateStaticDevice+0x104>
 800ce3a:	f002 f869 	bl	800ef10 <LCD_GetXSize>
 800ce3e:	4681      	mov	r9, r0
 800ce40:	f002 f86e 	bl	800ef20 <LCD_GetYSize>
 800ce44:	454e      	cmp	r6, r9
 800ce46:	dc02      	bgt.n	800ce4e <_CreateStaticDevice+0xf2>
 800ce48:	4285      	cmp	r5, r0
 800ce4a:	dd09      	ble.n	800ce60 <_CreateStaticDevice+0x104>
 800ce4c:	e000      	b.n	800ce50 <_CreateStaticDevice+0xf4>
 800ce4e:	464e      	mov	r6, r9
 800ce50:	4285      	cmp	r5, r0
 800ce52:	bfa8      	it	ge
 800ce54:	4605      	movge	r5, r0
 800ce56:	4631      	mov	r1, r6
 800ce58:	4620      	mov	r0, r4
 800ce5a:	462a      	mov	r2, r5
 800ce5c:	f7fe f9b1 	bl	800b1c2 <WM_SetSize>
 800ce60:	4a13      	ldr	r2, [pc, #76]	; (800ceb0 <_CreateStaticDevice+0x154>)
 800ce62:	4b14      	ldr	r3, [pc, #80]	; (800ceb4 <_CreateStaticDevice+0x158>)
 800ce64:	9201      	str	r2, [sp, #4]
 800ce66:	f04f 0901 	mov.w	r9, #1
 800ce6a:	4641      	mov	r1, r8
 800ce6c:	9302      	str	r3, [sp, #8]
 800ce6e:	4638      	mov	r0, r7
 800ce70:	4632      	mov	r2, r6
 800ce72:	462b      	mov	r3, r5
 800ce74:	f8cd 9000 	str.w	r9, [sp]
 800ce78:	f000 fe22 	bl	800dac0 <GUI_MEMDEV__CreateFixed>
 800ce7c:	4607      	mov	r7, r0
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f004 fd2c 	bl	80118dc <GUI_ALLOC_LockH>
 800ce84:	a906      	add	r1, sp, #24
 800ce86:	6247      	str	r7, [r0, #36]	; 0x24
 800ce88:	f841 0d04 	str.w	r0, [r1, #-4]!
 800ce8c:	2f00      	cmp	r7, #0
 800ce8e:	d19e      	bne.n	800cdce <_CreateStaticDevice+0x72>
 800ce90:	4608      	mov	r0, r1
 800ce92:	f004 fd31 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800ce96:	4620      	mov	r0, r4
 800ce98:	f7ff fd2e 	bl	800c8f8 <WM__Paint1>
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	b007      	add	sp, #28
 800cea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cea4:	20000264 	.word	0x20000264
 800cea8:	200179e8 	.word	0x200179e8
 800ceac:	200179d8 	.word	0x200179d8
 800ceb0:	08024b8c 	.word	0x08024b8c
 800ceb4:	0802f74c 	.word	0x0802f74c

0800ceb8 <GUI_MEMDEV_Paint1Static>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4605      	mov	r5, r0
 800cebc:	2405      	movs	r4, #5
 800cebe:	4628      	mov	r0, r5
 800cec0:	f7ff ff4c 	bl	800cd5c <_CreateStaticDevice>
 800cec4:	b910      	cbnz	r0, 800cecc <GUI_MEMDEV_Paint1Static+0x14>
 800cec6:	3c01      	subs	r4, #1
 800cec8:	d1f9      	bne.n	800cebe <GUI_MEMDEV_Paint1Static+0x6>
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ced0:	f006 be5c 	b.w	8013b8c <GUI_MEMDEV_Write>

0800ced4 <GUI_MEMDEV_SetOrg>:
 800ced4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ced6:	460d      	mov	r5, r1
 800ced8:	4614      	mov	r4, r2
 800ceda:	b918      	cbnz	r0, 800cee4 <GUI_MEMDEV_SetOrg+0x10>
 800cedc:	4b11      	ldr	r3, [pc, #68]	; (800cf24 <GUI_MEMDEV_SetOrg+0x50>)
 800cede:	6818      	ldr	r0, [r3, #0]
 800cee0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800cee2:	b1e8      	cbz	r0, 800cf20 <GUI_MEMDEV_SetOrg+0x4c>
 800cee4:	f004 fcfa 	bl	80118dc <GUI_ALLOC_LockH>
 800cee8:	b2a4      	uxth	r4, r4
 800ceea:	b2ad      	uxth	r5, r5
 800ceec:	80c4      	strh	r4, [r0, #6]
 800ceee:	8085      	strh	r5, [r0, #4]
 800cef0:	9000      	str	r0, [sp, #0]
 800cef2:	f002 fb57 	bl	800f5a4 <LCD_SetClipRectMax>
 800cef6:	9900      	ldr	r1, [sp, #0]
 800cef8:	6948      	ldr	r0, [r1, #20]
 800cefa:	b170      	cbz	r0, 800cf1a <GUI_MEMDEV_SetOrg+0x46>
 800cefc:	f004 fcee 	bl	80118dc <GUI_ALLOC_LockH>
 800cf00:	9b00      	ldr	r3, [sp, #0]
 800cf02:	9001      	str	r0, [sp, #4]
 800cf04:	891a      	ldrh	r2, [r3, #8]
 800cf06:	8959      	ldrh	r1, [r3, #10]
 800cf08:	8082      	strh	r2, [r0, #4]
 800cf0a:	80c1      	strh	r1, [r0, #6]
 800cf0c:	b112      	cbz	r2, 800cf14 <GUI_MEMDEV_SetOrg+0x40>
 800cf0e:	b109      	cbz	r1, 800cf14 <GUI_MEMDEV_SetOrg+0x40>
 800cf10:	8005      	strh	r5, [r0, #0]
 800cf12:	8044      	strh	r4, [r0, #2]
 800cf14:	a801      	add	r0, sp, #4
 800cf16:	f004 fcef 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800cf1a:	4668      	mov	r0, sp
 800cf1c:	f004 fcec 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800cf20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800cf22:	bf00      	nop
 800cf24:	2000027c 	.word	0x2000027c

0800cf28 <GUI_MEMDEV_GetYSize>:
 800cf28:	b513      	push	{r0, r1, r4, lr}
 800cf2a:	b920      	cbnz	r0, 800cf36 <GUI_MEMDEV_GetYSize+0xe>
 800cf2c:	4b08      	ldr	r3, [pc, #32]	; (800cf50 <GUI_MEMDEV_GetYSize+0x28>)
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800cf32:	4604      	mov	r4, r0
 800cf34:	b148      	cbz	r0, 800cf4a <GUI_MEMDEV_GetYSize+0x22>
 800cf36:	f004 fcd1 	bl	80118dc <GUI_ALLOC_LockH>
 800cf3a:	a902      	add	r1, sp, #8
 800cf3c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800cf40:	f841 0d04 	str.w	r0, [r1, #-4]!
 800cf44:	4608      	mov	r0, r1
 800cf46:	f004 fcd7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	bd1c      	pop	{r2, r3, r4, pc}
 800cf4e:	bf00      	nop
 800cf50:	2000027c 	.word	0x2000027c

0800cf54 <GUI_MEMDEV_GetDataPtr>:
 800cf54:	b513      	push	{r0, r1, r4, lr}
 800cf56:	f004 fcc1 	bl	80118dc <GUI_ALLOC_LockH>
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	a802      	add	r0, sp, #8
 800cf5e:	f840 4d04 	str.w	r4, [r0, #-4]!
 800cf62:	f004 fcc9 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800cf66:	f104 0018 	add.w	r0, r4, #24
 800cf6a:	bd1c      	pop	{r2, r3, r4, pc}

0800cf6c <GUI_MEMDEV_Draw>:
 800cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf70:	461e      	mov	r6, r3
 800cf72:	4b46      	ldr	r3, [pc, #280]	; (800d08c <GUI_MEMDEV_Draw+0x120>)
 800cf74:	b087      	sub	sp, #28
 800cf76:	4604      	mov	r4, r0
 800cf78:	6818      	ldr	r0, [r3, #0]
 800cf7a:	9102      	str	r1, [sp, #8]
 800cf7c:	7c45      	ldrb	r5, [r0, #17]
 800cf7e:	4944      	ldr	r1, [pc, #272]	; (800d090 <GUI_MEMDEV_Draw+0x124>)
 800cf80:	4693      	mov	fp, r2
 800cf82:	574a      	ldrsb	r2, [r1, r5]
 800cf84:	2a01      	cmp	r2, #1
 800cf86:	4628      	mov	r0, r5
 800cf88:	dd06      	ble.n	800cf98 <GUI_MEMDEV_Draw+0x2c>
 800cf8a:	f001 ffae 	bl	800eeea <LCD_GetXSizeEx>
 800cf8e:	4680      	mov	r8, r0
 800cf90:	4628      	mov	r0, r5
 800cf92:	f001 ffad 	bl	800eef0 <LCD_GetYSizeEx>
 800cf96:	e005      	b.n	800cfa4 <GUI_MEMDEV_Draw+0x38>
 800cf98:	f001 ffad 	bl	800eef6 <LCD_GetVXSizeEx>
 800cf9c:	4680      	mov	r8, r0
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f001 ffac 	bl	800eefc <LCD_GetVYSizeEx>
 800cfa4:	4605      	mov	r5, r0
 800cfa6:	b32c      	cbz	r4, 800cff4 <GUI_MEMDEV_Draw+0x88>
 800cfa8:	a804      	add	r0, sp, #16
 800cfaa:	a905      	add	r1, sp, #20
 800cfac:	f003 fa78 	bl	80104a0 <GUI_GetOrg>
 800cfb0:	9b04      	ldr	r3, [sp, #16]
 800cfb2:	f9b4 9000 	ldrsh.w	r9, [r4]
 800cfb6:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 800cfba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800cfbe:	eb08 0103 	add.w	r1, r8, r3
 800cfc2:	9b05      	ldr	r3, [sp, #20]
 800cfc4:	1e4a      	subs	r2, r1, #1
 800cfc6:	18ed      	adds	r5, r5, r3
 800cfc8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800cfcc:	1e6b      	subs	r3, r5, #1
 800cfce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfd2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800cfd6:	4282      	cmp	r2, r0
 800cfd8:	bfd4      	ite	le
 800cfda:	ebc9 0002 	rsble	r0, r9, r2
 800cfde:	ebc9 0000 	rsbgt	r0, r9, r0
 800cfe2:	428b      	cmp	r3, r1
 800cfe4:	bfd4      	ite	le
 800cfe6:	ebc7 0103 	rsble	r1, r7, r3
 800cfea:	ebc7 0101 	rsbgt	r1, r7, r1
 800cfee:	1c42      	adds	r2, r0, #1
 800cff0:	1c4d      	adds	r5, r1, #1
 800cff2:	e002      	b.n	800cffa <GUI_MEMDEV_Draw+0x8e>
 800cff4:	4642      	mov	r2, r8
 800cff6:	4627      	mov	r7, r4
 800cff8:	46a1      	mov	r9, r4
 800cffa:	b906      	cbnz	r6, 800cffe <GUI_MEMDEV_Draw+0x92>
 800cffc:	426e      	negs	r6, r5
 800cffe:	2a00      	cmp	r2, #0
 800d000:	dd3f      	ble.n	800d082 <GUI_MEMDEV_Draw+0x116>
 800d002:	2d00      	cmp	r5, #0
 800d004:	dd3d      	ble.n	800d082 <GUI_MEMDEV_Draw+0x116>
 800d006:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d008:	4648      	mov	r0, r9
 800d00a:	9400      	str	r4, [sp, #0]
 800d00c:	4639      	mov	r1, r7
 800d00e:	4633      	mov	r3, r6
 800d010:	f000 fe0a 	bl	800dc28 <GUI_MEMDEV_CreateEx>
 800d014:	4604      	mov	r4, r0
 800d016:	b920      	cbnz	r0, 800d022 <GUI_MEMDEV_Draw+0xb6>
 800d018:	4658      	mov	r0, fp
 800d01a:	9a02      	ldr	r2, [sp, #8]
 800d01c:	4790      	blx	r2
 800d01e:	2001      	movs	r0, #1
 800d020:	e030      	b.n	800d084 <GUI_MEMDEV_Draw+0x118>
 800d022:	f7ff ff81 	bl	800cf28 <GUI_MEMDEV_GetYSize>
 800d026:	4682      	mov	sl, r0
 800d028:	f1ca 0600 	rsb	r6, sl, #0
 800d02c:	4620      	mov	r0, r4
 800d02e:	f000 fe35 	bl	800dc9c <GUI_MEMDEV_Select>
 800d032:	46a8      	mov	r8, r5
 800d034:	9603      	str	r6, [sp, #12]
 800d036:	2600      	movs	r6, #0
 800d038:	45d0      	cmp	r8, sl
 800d03a:	da03      	bge.n	800d044 <GUI_MEMDEV_Draw+0xd8>
 800d03c:	4620      	mov	r0, r4
 800d03e:	4641      	mov	r1, r8
 800d040:	f006 fea0 	bl	8013d84 <GUI_MEMDEV_ReduceYSize>
 800d044:	b13e      	cbz	r6, 800d056 <GUI_MEMDEV_Draw+0xea>
 800d046:	4620      	mov	r0, r4
 800d048:	4649      	mov	r1, r9
 800d04a:	19f2      	adds	r2, r6, r7
 800d04c:	f7ff ff42 	bl	800ced4 <GUI_MEMDEV_SetOrg>
 800d050:	4620      	mov	r0, r4
 800d052:	f006 fead 	bl	8013db0 <GUI_MEMDEV_Clear>
 800d056:	4658      	mov	r0, fp
 800d058:	9a02      	ldr	r2, [sp, #8]
 800d05a:	4790      	blx	r2
 800d05c:	4b0d      	ldr	r3, [pc, #52]	; (800d094 <GUI_MEMDEV_Draw+0x128>)
 800d05e:	6819      	ldr	r1, [r3, #0]
 800d060:	b109      	cbz	r1, 800d066 <GUI_MEMDEV_Draw+0xfa>
 800d062:	2000      	movs	r0, #0
 800d064:	4788      	blx	r1
 800d066:	4620      	mov	r0, r4
 800d068:	f000 fe90 	bl	800dd8c <GUI_MEMDEV_CopyToLCD>
 800d06c:	4456      	add	r6, sl
 800d06e:	9803      	ldr	r0, [sp, #12]
 800d070:	42ae      	cmp	r6, r5
 800d072:	4480      	add	r8, r0
 800d074:	dbe0      	blt.n	800d038 <GUI_MEMDEV_Draw+0xcc>
 800d076:	4620      	mov	r0, r4
 800d078:	f000 fdb4 	bl	800dbe4 <GUI_MEMDEV_Delete>
 800d07c:	2000      	movs	r0, #0
 800d07e:	f000 fe0d 	bl	800dc9c <GUI_MEMDEV_Select>
 800d082:	2000      	movs	r0, #0
 800d084:	b007      	add	sp, #28
 800d086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08a:	bf00      	nop
 800d08c:	2000027c 	.word	0x2000027c
 800d090:	200179e0 	.word	0x200179e0
 800d094:	20016e20 	.word	0x20016e20

0800d098 <_GetDevData>:
 800d098:	4802      	ldr	r0, [pc, #8]	; (800d0a4 <_GetDevData+0xc>)
 800d09a:	2901      	cmp	r1, #1
 800d09c:	bf18      	it	ne
 800d09e:	2000      	movne	r0, #0
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	08024b8c 	.word	0x08024b8c

0800d0a8 <_GetDevFunc>:
 800d0a8:	4802      	ldr	r0, [pc, #8]	; (800d0b4 <_GetDevFunc+0xc>)
 800d0aa:	2916      	cmp	r1, #22
 800d0ac:	bf18      	it	ne
 800d0ae:	2000      	movne	r0, #0
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	0801399d 	.word	0x0801399d

0800d0b8 <_GetDevProp>:
 800d0b8:	2908      	cmp	r1, #8
 800d0ba:	bf0c      	ite	eq
 800d0bc:	2020      	moveq	r0, #32
 800d0be:	2000      	movne	r0, #0
 800d0c0:	4770      	bx	lr

0800d0c2 <_SetOrg>:
 800d0c2:	6800      	ldr	r0, [r0, #0]
 800d0c4:	b508      	push	{r3, lr}
 800d0c6:	68c3      	ldr	r3, [r0, #12]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	4798      	blx	r3
 800d0cc:	bd08      	pop	{r3, pc}

0800d0ce <_GetRect>:
 800d0ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0d0:	6880      	ldr	r0, [r0, #8]
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	f004 fc02 	bl	80118dc <GUI_ALLOC_LockH>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	a802      	add	r0, sp, #8
 800d0dc:	8899      	ldrh	r1, [r3, #4]
 800d0de:	891d      	ldrh	r5, [r3, #8]
 800d0e0:	88da      	ldrh	r2, [r3, #6]
 800d0e2:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d0e6:	895b      	ldrh	r3, [r3, #10]
 800d0e8:	8021      	strh	r1, [r4, #0]
 800d0ea:	1949      	adds	r1, r1, r5
 800d0ec:	3901      	subs	r1, #1
 800d0ee:	8062      	strh	r2, [r4, #2]
 800d0f0:	18d2      	adds	r2, r2, r3
 800d0f2:	80a1      	strh	r1, [r4, #4]
 800d0f4:	1e51      	subs	r1, r2, #1
 800d0f6:	80e1      	strh	r1, [r4, #6]
 800d0f8:	f004 fbfe 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d0fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0800d100 <_XY2PTR>:
 800d100:	4b0e      	ldr	r3, [pc, #56]	; (800d13c <_XY2PTR+0x3c>)
 800d102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d104:	4605      	mov	r5, r0
 800d106:	6818      	ldr	r0, [r3, #0]
 800d108:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d10a:	460e      	mov	r6, r1
 800d10c:	f004 fbe6 	bl	80118dc <GUI_ALLOC_LockH>
 800d110:	4602      	mov	r2, r0
 800d112:	a802      	add	r0, sp, #8
 800d114:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 800d118:	68d3      	ldr	r3, [r2, #12]
 800d11a:	f840 2d04 	str.w	r2, [r0, #-4]!
 800d11e:	f102 0118 	add.w	r1, r2, #24
 800d122:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d126:	1b36      	subs	r6, r6, r4
 800d128:	fb03 1106 	mla	r1, r3, r6, r1
 800d12c:	1aad      	subs	r5, r5, r2
 800d12e:	eb01 0485 	add.w	r4, r1, r5, lsl #2
 800d132:	f004 fbe1 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d136:	4620      	mov	r0, r4
 800d138:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800d13a:	bf00      	nop
 800d13c:	2000027c 	.word	0x2000027c

0800d140 <_GetPixelIndex>:
 800d140:	b508      	push	{r3, lr}
 800d142:	4608      	mov	r0, r1
 800d144:	4611      	mov	r1, r2
 800d146:	f7ff ffdb 	bl	800d100 <_XY2PTR>
 800d14a:	6800      	ldr	r0, [r0, #0]
 800d14c:	bd08      	pop	{r3, pc}
	...

0800d150 <_XorPixel>:
 800d150:	4b15      	ldr	r3, [pc, #84]	; (800d1a8 <_XorPixel+0x58>)
 800d152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d154:	6818      	ldr	r0, [r3, #0]
 800d156:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d158:	4615      	mov	r5, r2
 800d15a:	460e      	mov	r6, r1
 800d15c:	f004 fbbe 	bl	80118dc <GUI_ALLOC_LockH>
 800d160:	4629      	mov	r1, r5
 800d162:	9000      	str	r0, [sp, #0]
 800d164:	4630      	mov	r0, r6
 800d166:	f7ff ffcb 	bl	800d100 <_XY2PTR>
 800d16a:	9900      	ldr	r1, [sp, #0]
 800d16c:	680a      	ldr	r2, [r1, #0]
 800d16e:	6913      	ldr	r3, [r2, #16]
 800d170:	4604      	mov	r4, r0
 800d172:	6898      	ldr	r0, [r3, #8]
 800d174:	4780      	blx	r0
 800d176:	6821      	ldr	r1, [r4, #0]
 800d178:	9b00      	ldr	r3, [sp, #0]
 800d17a:	ea81 0200 	eor.w	r2, r1, r0
 800d17e:	6022      	str	r2, [r4, #0]
 800d180:	6958      	ldr	r0, [r3, #20]
 800d182:	b160      	cbz	r0, 800d19e <_XorPixel+0x4e>
 800d184:	f004 fbaa 	bl	80118dc <GUI_ALLOC_LockH>
 800d188:	ac02      	add	r4, sp, #8
 800d18a:	6882      	ldr	r2, [r0, #8]
 800d18c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d190:	6813      	ldr	r3, [r2, #0]
 800d192:	4631      	mov	r1, r6
 800d194:	462a      	mov	r2, r5
 800d196:	4798      	blx	r3
 800d198:	4620      	mov	r0, r4
 800d19a:	f004 fbad 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d19e:	4668      	mov	r0, sp
 800d1a0:	f004 fbaa 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d1a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800d1a6:	bf00      	nop
 800d1a8:	2000027c 	.word	0x2000027c

0800d1ac <_SetPixelIndex>:
 800d1ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1ae:	461c      	mov	r4, r3
 800d1b0:	4b10      	ldr	r3, [pc, #64]	; (800d1f4 <_SetPixelIndex+0x48>)
 800d1b2:	6818      	ldr	r0, [r3, #0]
 800d1b4:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d1b6:	460e      	mov	r6, r1
 800d1b8:	4615      	mov	r5, r2
 800d1ba:	f004 fb8f 	bl	80118dc <GUI_ALLOC_LockH>
 800d1be:	4629      	mov	r1, r5
 800d1c0:	9000      	str	r0, [sp, #0]
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f7ff ff9c 	bl	800d100 <_XY2PTR>
 800d1c8:	9900      	ldr	r1, [sp, #0]
 800d1ca:	6004      	str	r4, [r0, #0]
 800d1cc:	6948      	ldr	r0, [r1, #20]
 800d1ce:	b160      	cbz	r0, 800d1ea <_SetPixelIndex+0x3e>
 800d1d0:	f004 fb84 	bl	80118dc <GUI_ALLOC_LockH>
 800d1d4:	ac02      	add	r4, sp, #8
 800d1d6:	6883      	ldr	r3, [r0, #8]
 800d1d8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4631      	mov	r1, r6
 800d1e0:	462a      	mov	r2, r5
 800d1e2:	4798      	blx	r3
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f004 fb87 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d1ea:	4668      	mov	r0, sp
 800d1ec:	f004 fb84 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d1f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800d1f2:	bf00      	nop
 800d1f4:	2000027c 	.word	0x2000027c

0800d1f8 <_DrawVLine>:
 800d1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1fc:	461e      	mov	r6, r3
 800d1fe:	4b2b      	ldr	r3, [pc, #172]	; (800d2ac <_DrawVLine+0xb4>)
 800d200:	6818      	ldr	r0, [r3, #0]
 800d202:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d204:	460f      	mov	r7, r1
 800d206:	4614      	mov	r4, r2
 800d208:	f004 fb68 	bl	80118dc <GUI_ALLOC_LockH>
 800d20c:	9000      	str	r0, [sp, #0]
 800d20e:	6940      	ldr	r0, [r0, #20]
 800d210:	b108      	cbz	r0, 800d216 <_DrawVLine+0x1e>
 800d212:	f004 fb63 	bl	80118dc <GUI_ALLOC_LockH>
 800d216:	9001      	str	r0, [sp, #4]
 800d218:	4621      	mov	r1, r4
 800d21a:	4638      	mov	r0, r7
 800d21c:	f7ff ff70 	bl	800d100 <_XY2PTR>
 800d220:	4a22      	ldr	r2, [pc, #136]	; (800d2ac <_DrawVLine+0xb4>)
 800d222:	9b00      	ldr	r3, [sp, #0]
 800d224:	4605      	mov	r5, r0
 800d226:	6810      	ldr	r0, [r2, #0]
 800d228:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800d22c:	7c02      	ldrb	r2, [r0, #16]
 800d22e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800d230:	07d2      	lsls	r2, r2, #31
 800d232:	f8d1 9000 	ldr.w	r9, [r1]
 800d236:	d51f      	bpl.n	800d278 <_DrawVLine+0x80>
 800d238:	6818      	ldr	r0, [r3, #0]
 800d23a:	6902      	ldr	r2, [r0, #16]
 800d23c:	6891      	ldr	r1, [r2, #8]
 800d23e:	4788      	blx	r1
 800d240:	4680      	mov	r8, r0
 800d242:	9801      	ldr	r0, [sp, #4]
 800d244:	b128      	cbz	r0, 800d252 <_DrawVLine+0x5a>
 800d246:	6883      	ldr	r3, [r0, #8]
 800d248:	4639      	mov	r1, r7
 800d24a:	f8d3 c000 	ldr.w	ip, [r3]
 800d24e:	4622      	mov	r2, r4
 800d250:	47e0      	blx	ip
 800d252:	9900      	ldr	r1, [sp, #0]
 800d254:	6828      	ldr	r0, [r5, #0]
 800d256:	68cb      	ldr	r3, [r1, #12]
 800d258:	3401      	adds	r4, #1
 800d25a:	ea80 0208 	eor.w	r2, r0, r8
 800d25e:	42b4      	cmp	r4, r6
 800d260:	602a      	str	r2, [r5, #0]
 800d262:	441d      	add	r5, r3
 800d264:	dded      	ble.n	800d242 <_DrawVLine+0x4a>
 800d266:	4668      	mov	r0, sp
 800d268:	f004 fb46 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d26c:	9801      	ldr	r0, [sp, #4]
 800d26e:	b1d0      	cbz	r0, 800d2a6 <_DrawVLine+0xae>
 800d270:	a801      	add	r0, sp, #4
 800d272:	f004 fb41 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d276:	e016      	b.n	800d2a6 <_DrawVLine+0xae>
 800d278:	9b01      	ldr	r3, [sp, #4]
 800d27a:	b163      	cbz	r3, 800d296 <_DrawVLine+0x9e>
 800d27c:	9801      	ldr	r0, [sp, #4]
 800d27e:	6881      	ldr	r1, [r0, #8]
 800d280:	4622      	mov	r2, r4
 800d282:	680b      	ldr	r3, [r1, #0]
 800d284:	3401      	adds	r4, #1
 800d286:	4639      	mov	r1, r7
 800d288:	4798      	blx	r3
 800d28a:	42b4      	cmp	r4, r6
 800d28c:	f8c5 9000 	str.w	r9, [r5]
 800d290:	4445      	add	r5, r8
 800d292:	ddf3      	ble.n	800d27c <_DrawVLine+0x84>
 800d294:	e7e7      	b.n	800d266 <_DrawVLine+0x6e>
 800d296:	1b34      	subs	r4, r6, r4
 800d298:	3401      	adds	r4, #1
 800d29a:	3c01      	subs	r4, #1
 800d29c:	f8c5 9000 	str.w	r9, [r5]
 800d2a0:	4445      	add	r5, r8
 800d2a2:	d1fa      	bne.n	800d29a <_DrawVLine+0xa2>
 800d2a4:	e7df      	b.n	800d266 <_DrawVLine+0x6e>
 800d2a6:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 800d2aa:	bf00      	nop
 800d2ac:	2000027c 	.word	0x2000027c

0800d2b0 <_FillRect>:
 800d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800d368 <_FillRect+0xb8>
 800d2b8:	4614      	mov	r4, r2
 800d2ba:	f8d8 2000 	ldr.w	r2, [r8]
 800d2be:	b085      	sub	sp, #20
 800d2c0:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800d2c2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800d2c6:	461d      	mov	r5, r3
 800d2c8:	460f      	mov	r7, r1
 800d2ca:	f004 fb07 	bl	80118dc <GUI_ALLOC_LockH>
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	9002      	str	r0, [sp, #8]
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	f7ff ff14 	bl	800d100 <_XY2PTR>
 800d2d8:	f8d8 3000 	ldr.w	r3, [r8]
 800d2dc:	4606      	mov	r6, r0
 800d2de:	9802      	ldr	r0, [sp, #8]
 800d2e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2e2:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800d2e6:	6940      	ldr	r0, [r0, #20]
 800d2e8:	f8d2 b000 	ldr.w	fp, [r2]
 800d2ec:	1be9      	subs	r1, r5, r7
 800d2ee:	1c4d      	adds	r5, r1, #1
 800d2f0:	b338      	cbz	r0, 800d342 <_FillRect+0x92>
 800d2f2:	f004 faf3 	bl	80118dc <GUI_ALLOC_LockH>
 800d2f6:	f10d 0810 	add.w	r8, sp, #16
 800d2fa:	ebc4 0109 	rsb	r1, r4, r9
 800d2fe:	f848 0d04 	str.w	r0, [r8, #-4]!
 800d302:	1c4b      	adds	r3, r1, #1
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	4639      	mov	r1, r7
 800d308:	4622      	mov	r2, r4
 800d30a:	462b      	mov	r3, r5
 800d30c:	f006 fd25 	bl	8013d5a <GUI_USAGE_AddRect>
 800d310:	4640      	mov	r0, r8
 800d312:	f004 faf1 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d316:	e014      	b.n	800d342 <_FillRect+0x92>
 800d318:	4813      	ldr	r0, [pc, #76]	; (800d368 <_FillRect+0xb8>)
 800d31a:	6802      	ldr	r2, [r0, #0]
 800d31c:	7c11      	ldrb	r1, [r2, #16]
 800d31e:	07c9      	lsls	r1, r1, #31
 800d320:	d512      	bpl.n	800d348 <_FillRect+0x98>
 800d322:	9a02      	ldr	r2, [sp, #8]
 800d324:	6811      	ldr	r1, [r2, #0]
 800d326:	6908      	ldr	r0, [r1, #16]
 800d328:	6883      	ldr	r3, [r0, #8]
 800d32a:	4798      	blx	r3
 800d32c:	4632      	mov	r2, r6
 800d32e:	462b      	mov	r3, r5
 800d330:	6811      	ldr	r1, [r2, #0]
 800d332:	3b01      	subs	r3, #1
 800d334:	ea81 0100 	eor.w	r1, r1, r0
 800d338:	f842 1b04 	str.w	r1, [r2], #4
 800d33c:	d1f8      	bne.n	800d330 <_FillRect+0x80>
 800d33e:	4456      	add	r6, sl
 800d340:	3401      	adds	r4, #1
 800d342:	454c      	cmp	r4, r9
 800d344:	dde8      	ble.n	800d318 <_FillRect+0x68>
 800d346:	e008      	b.n	800d35a <_FillRect+0xaa>
 800d348:	2d00      	cmp	r5, #0
 800d34a:	ddf8      	ble.n	800d33e <_FillRect+0x8e>
 800d34c:	462b      	mov	r3, r5
 800d34e:	4630      	mov	r0, r6
 800d350:	3b01      	subs	r3, #1
 800d352:	f840 bb04 	str.w	fp, [r0], #4
 800d356:	d1fb      	bne.n	800d350 <_FillRect+0xa0>
 800d358:	e7f1      	b.n	800d33e <_FillRect+0x8e>
 800d35a:	a802      	add	r0, sp, #8
 800d35c:	f004 facc 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d360:	b005      	add	sp, #20
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	bf00      	nop
 800d368:	2000027c 	.word	0x2000027c

0800d36c <_DrawHLine>:
 800d36c:	b507      	push	{r0, r1, r2, lr}
 800d36e:	9200      	str	r2, [sp, #0]
 800d370:	f7ff ff9e 	bl	800d2b0 <_FillRect>
 800d374:	bd0e      	pop	{r1, r2, r3, pc}
	...

0800d378 <_DrawBitmap>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	469a      	mov	sl, r3
 800d37e:	4b98      	ldr	r3, [pc, #608]	; (800d5e0 <_DrawBitmap+0x268>)
 800d380:	4681      	mov	r9, r0
 800d382:	6818      	ldr	r0, [r3, #0]
 800d384:	b093      	sub	sp, #76	; 0x4c
 800d386:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d388:	9208      	str	r2, [sp, #32]
 800d38a:	460c      	mov	r4, r1
 800d38c:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 800d390:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800d392:	2800      	cmp	r0, #0
 800d394:	f000 8372 	beq.w	800da7c <_DrawBitmap+0x704>
 800d398:	f004 faa0 	bl	80118dc <GUI_ALLOC_LockH>
 800d39c:	9010      	str	r0, [sp, #64]	; 0x40
 800d39e:	6940      	ldr	r0, [r0, #20]
 800d3a0:	b108      	cbz	r0, 800d3a6 <_DrawBitmap+0x2e>
 800d3a2:	f004 fa9b 	bl	80118dc <GUI_ALLOC_LockH>
 800d3a6:	9011      	str	r0, [sp, #68]	; 0x44
 800d3a8:	a812      	add	r0, sp, #72	; 0x48
 800d3aa:	f850 1d08 	ldr.w	r1, [r0, #-8]!
 800d3ae:	68ca      	ldr	r2, [r1, #12]
 800d3b0:	920c      	str	r2, [sp, #48]	; 0x30
 800d3b2:	f004 faa1 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d3b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d3b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d3ba:	18e4      	adds	r4, r4, r3
 800d3bc:	9405      	str	r4, [sp, #20]
 800d3be:	b168      	cbz	r0, 800d3dc <_DrawBitmap+0x64>
 800d3c0:	4987      	ldr	r1, [pc, #540]	; (800d5e0 <_DrawBitmap+0x268>)
 800d3c2:	680a      	ldr	r2, [r1, #0]
 800d3c4:	7c13      	ldrb	r3, [r2, #16]
 800d3c6:	f003 0102 	and.w	r1, r3, #2
 800d3ca:	b2ca      	uxtb	r2, r1
 800d3cc:	b932      	cbnz	r2, 800d3dc <_DrawBitmap+0x64>
 800d3ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d3d0:	9a08      	ldr	r2, [sp, #32]
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	4621      	mov	r1, r4
 800d3d6:	4653      	mov	r3, sl
 800d3d8:	f006 fcbf 	bl	8013d5a <GUI_USAGE_AddRect>
 800d3dc:	9805      	ldr	r0, [sp, #20]
 800d3de:	9908      	ldr	r1, [sp, #32]
 800d3e0:	f7ff fe8e 	bl	800d100 <_XY2PTR>
 800d3e4:	4680      	mov	r8, r0
 800d3e6:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d3e8:	2817      	cmp	r0, #23
 800d3ea:	dd5b      	ble.n	800d4a4 <_DrawBitmap+0x12c>
 800d3ec:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800d3f0:	9707      	str	r7, [sp, #28]
 800d3f2:	2700      	movs	r7, #0
 800d3f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d3f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d3f8:	428f      	cmp	r7, r1
 800d3fa:	da4f      	bge.n	800d49c <_DrawBitmap+0x124>
 800d3fc:	b130      	cbz	r0, 800d40c <_DrawBitmap+0x94>
 800d3fe:	6883      	ldr	r3, [r0, #8]
 800d400:	9a08      	ldr	r2, [sp, #32]
 800d402:	685c      	ldr	r4, [r3, #4]
 800d404:	9905      	ldr	r1, [sp, #20]
 800d406:	18ba      	adds	r2, r7, r2
 800d408:	4653      	mov	r3, sl
 800d40a:	47a0      	blx	r4
 800d40c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d410:	68c1      	ldr	r1, [r0, #12]
 800d412:	b129      	cbz	r1, 800d420 <_DrawBitmap+0xa8>
 800d414:	4640      	mov	r0, r8
 800d416:	4659      	mov	r1, fp
 800d418:	9a07      	ldr	r2, [sp, #28]
 800d41a:	f7f2 feb5 	bl	8000188 <memcpy>
 800d41e:	e037      	b.n	800d490 <_DrawBitmap+0x118>
 800d420:	4644      	mov	r4, r8
 800d422:	4655      	mov	r5, sl
 800d424:	465e      	mov	r6, fp
 800d426:	1d33      	adds	r3, r6, #4
 800d428:	9306      	str	r3, [sp, #24]
 800d42a:	461a      	mov	r2, r3
 800d42c:	4629      	mov	r1, r5
 800d42e:	f04f 0e00 	mov.w	lr, #0
 800d432:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800d436:	b908      	cbnz	r0, 800d43c <_DrawBitmap+0xc4>
 800d438:	f10e 0e01 	add.w	lr, lr, #1
 800d43c:	3901      	subs	r1, #1
 800d43e:	b1a0      	cbz	r0, 800d46a <_DrawBitmap+0xf2>
 800d440:	f1be 0f00 	cmp.w	lr, #0
 800d444:	d015      	beq.n	800d472 <_DrawBitmap+0xfa>
 800d446:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800d44a:	4620      	mov	r0, r4
 800d44c:	4631      	mov	r1, r6
 800d44e:	461a      	mov	r2, r3
 800d450:	9304      	str	r3, [sp, #16]
 800d452:	f8cd e00c 	str.w	lr, [sp, #12]
 800d456:	f7f2 fe97 	bl	8000188 <memcpy>
 800d45a:	9804      	ldr	r0, [sp, #16]
 800d45c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d460:	1824      	adds	r4, r4, r0
 800d462:	1836      	adds	r6, r6, r0
 800d464:	ebcc 0505 	rsb	r5, ip, r5
 800d468:	e010      	b.n	800d48c <_DrawBitmap+0x114>
 800d46a:	3204      	adds	r2, #4
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d1e0      	bne.n	800d432 <_DrawBitmap+0xba>
 800d470:	e7e6      	b.n	800d440 <_DrawBitmap+0xc8>
 800d472:	6830      	ldr	r0, [r6, #0]
 800d474:	0e06      	lsrs	r6, r0, #24
 800d476:	2eff      	cmp	r6, #255	; 0xff
 800d478:	d005      	beq.n	800d486 <_DrawBitmap+0x10e>
 800d47a:	43f3      	mvns	r3, r6
 800d47c:	6821      	ldr	r1, [r4, #0]
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	f002 fc7e 	bl	800fd80 <GUI__MixColors>
 800d484:	6020      	str	r0, [r4, #0]
 800d486:	9e06      	ldr	r6, [sp, #24]
 800d488:	3404      	adds	r4, #4
 800d48a:	3d01      	subs	r5, #1
 800d48c:	2d00      	cmp	r5, #0
 800d48e:	d1ca      	bne.n	800d426 <_DrawBitmap+0xae>
 800d490:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d494:	448b      	add	fp, r1
 800d496:	4490      	add	r8, r2
 800d498:	3701      	adds	r7, #1
 800d49a:	e7ab      	b.n	800d3f4 <_DrawBitmap+0x7c>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	f040 82ea 	bne.w	800da76 <_DrawBitmap+0x6fe>
 800d4a2:	e2eb      	b.n	800da7c <_DrawBitmap+0x704>
 800d4a4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d4a6:	2c10      	cmp	r4, #16
 800d4a8:	d137      	bne.n	800d51a <_DrawBitmap+0x1a2>
 800d4aa:	f10b 0702 	add.w	r7, fp, #2
 800d4ae:	f1a8 0804 	sub.w	r8, r8, #4
 800d4b2:	2500      	movs	r5, #0
 800d4b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d4b6:	42a5      	cmp	r5, r4
 800d4b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d4ba:	f280 8099 	bge.w	800d5f0 <_DrawBitmap+0x278>
 800d4be:	9e08      	ldr	r6, [sp, #32]
 800d4c0:	19aa      	adds	r2, r5, r6
 800d4c2:	9207      	str	r2, [sp, #28]
 800d4c4:	b12c      	cbz	r4, 800d4d2 <_DrawBitmap+0x15a>
 800d4c6:	68a3      	ldr	r3, [r4, #8]
 800d4c8:	9905      	ldr	r1, [sp, #20]
 800d4ca:	685e      	ldr	r6, [r3, #4]
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	4653      	mov	r3, sl
 800d4d0:	47b0      	blx	r6
 800d4d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800d4d6:	46bb      	mov	fp, r7
 800d4d8:	4656      	mov	r6, sl
 800d4da:	9a05      	ldr	r2, [sp, #20]
 800d4dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4e0:	eb02 000a 	add.w	r0, r2, sl
 800d4e4:	1b81      	subs	r1, r0, r6
 800d4e6:	685a      	ldr	r2, [r3, #4]
 800d4e8:	f83b 0c02 	ldrh.w	r0, [fp, #-2]
 800d4ec:	9104      	str	r1, [sp, #16]
 800d4ee:	4790      	blx	r2
 800d4f0:	9906      	ldr	r1, [sp, #24]
 800d4f2:	f841 0f04 	str.w	r0, [r1, #4]!
 800d4f6:	9106      	str	r1, [sp, #24]
 800d4f8:	9904      	ldr	r1, [sp, #16]
 800d4fa:	b124      	cbz	r4, 800d506 <_DrawBitmap+0x18e>
 800d4fc:	68a0      	ldr	r0, [r4, #8]
 800d4fe:	9a07      	ldr	r2, [sp, #28]
 800d500:	6803      	ldr	r3, [r0, #0]
 800d502:	4620      	mov	r0, r4
 800d504:	4798      	blx	r3
 800d506:	3e01      	subs	r6, #1
 800d508:	f10b 0b02 	add.w	fp, fp, #2
 800d50c:	d1e5      	bne.n	800d4da <_DrawBitmap+0x162>
 800d50e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d512:	3501      	adds	r5, #1
 800d514:	193f      	adds	r7, r7, r4
 800d516:	4490      	add	r8, r2
 800d518:	e7cc      	b.n	800d4b4 <_DrawBitmap+0x13c>
 800d51a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d51c:	2908      	cmp	r1, #8
 800d51e:	d16b      	bne.n	800d5f8 <_DrawBitmap+0x280>
 800d520:	9e08      	ldr	r6, [sp, #32]
 800d522:	f108 0804 	add.w	r8, r8, #4
 800d526:	9b08      	ldr	r3, [sp, #32]
 800d528:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d52a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d52c:	1af1      	subs	r1, r6, r3
 800d52e:	4291      	cmp	r1, r2
 800d530:	f1a8 0004 	sub.w	r0, r8, #4
 800d534:	da5c      	bge.n	800d5f0 <_DrawBitmap+0x278>
 800d536:	4b2a      	ldr	r3, [pc, #168]	; (800d5e0 <_DrawBitmap+0x268>)
 800d538:	6819      	ldr	r1, [r3, #0]
 800d53a:	7c0a      	ldrb	r2, [r1, #16]
 800d53c:	b35d      	cbz	r5, 800d596 <_DrawBitmap+0x21e>
 800d53e:	f012 0303 	ands.w	r3, r2, #3
 800d542:	d004      	beq.n	800d54e <_DrawBitmap+0x1d6>
 800d544:	2b02      	cmp	r3, #2
 800d546:	d14d      	bne.n	800d5e4 <_DrawBitmap+0x26c>
 800d548:	46c1      	mov	r9, r8
 800d54a:	9f05      	ldr	r7, [sp, #20]
 800d54c:	e01c      	b.n	800d588 <_DrawBitmap+0x210>
 800d54e:	f81b 4003 	ldrb.w	r4, [fp, r3]
 800d552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d556:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d55a:	3301      	adds	r3, #1
 800d55c:	4553      	cmp	r3, sl
 800d55e:	d1f6      	bne.n	800d54e <_DrawBitmap+0x1d6>
 800d560:	e040      	b.n	800d5e4 <_DrawBitmap+0x26c>
 800d562:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
 800d566:	f849 1c04 	str.w	r1, [r9, #-4]
 800d56a:	b12c      	cbz	r4, 800d578 <_DrawBitmap+0x200>
 800d56c:	68a2      	ldr	r2, [r4, #8]
 800d56e:	4620      	mov	r0, r4
 800d570:	6813      	ldr	r3, [r2, #0]
 800d572:	4639      	mov	r1, r7
 800d574:	4632      	mov	r2, r6
 800d576:	4798      	blx	r3
 800d578:	9805      	ldr	r0, [sp, #20]
 800d57a:	3701      	adds	r7, #1
 800d57c:	eb00 010a 	add.w	r1, r0, sl
 800d580:	42b9      	cmp	r1, r7
 800d582:	f109 0904 	add.w	r9, r9, #4
 800d586:	d02d      	beq.n	800d5e4 <_DrawBitmap+0x26c>
 800d588:	9a05      	ldr	r2, [sp, #20]
 800d58a:	ebc2 030b 	rsb	r3, r2, fp
 800d58e:	5dd8      	ldrb	r0, [r3, r7]
 800d590:	2800      	cmp	r0, #0
 800d592:	d0f1      	beq.n	800d578 <_DrawBitmap+0x200>
 800d594:	e7e5      	b.n	800d562 <_DrawBitmap+0x1ea>
 800d596:	f012 0303 	ands.w	r3, r2, #3
 800d59a:	d004      	beq.n	800d5a6 <_DrawBitmap+0x22e>
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d121      	bne.n	800d5e4 <_DrawBitmap+0x26c>
 800d5a0:	46c1      	mov	r9, r8
 800d5a2:	9f05      	ldr	r7, [sp, #20]
 800d5a4:	e015      	b.n	800d5d2 <_DrawBitmap+0x25a>
 800d5a6:	4659      	mov	r1, fp
 800d5a8:	4652      	mov	r2, sl
 800d5aa:	f7f2 fded 	bl	8000188 <memcpy>
 800d5ae:	e019      	b.n	800d5e4 <_DrawBitmap+0x26c>
 800d5b0:	f849 2c04 	str.w	r2, [r9, #-4]
 800d5b4:	b12c      	cbz	r4, 800d5c2 <_DrawBitmap+0x24a>
 800d5b6:	68a3      	ldr	r3, [r4, #8]
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4639      	mov	r1, r7
 800d5be:	4632      	mov	r2, r6
 800d5c0:	4798      	blx	r3
 800d5c2:	9805      	ldr	r0, [sp, #20]
 800d5c4:	3701      	adds	r7, #1
 800d5c6:	eb00 010a 	add.w	r1, r0, sl
 800d5ca:	42b9      	cmp	r1, r7
 800d5cc:	f109 0904 	add.w	r9, r9, #4
 800d5d0:	d008      	beq.n	800d5e4 <_DrawBitmap+0x26c>
 800d5d2:	9805      	ldr	r0, [sp, #20]
 800d5d4:	ebc0 010b 	rsb	r1, r0, fp
 800d5d8:	5dca      	ldrb	r2, [r1, r7]
 800d5da:	2a00      	cmp	r2, #0
 800d5dc:	d0f1      	beq.n	800d5c2 <_DrawBitmap+0x24a>
 800d5de:	e7e7      	b.n	800d5b0 <_DrawBitmap+0x238>
 800d5e0:	2000027c 	.word	0x2000027c
 800d5e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 800d5e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d5e8:	4483      	add	fp, r0
 800d5ea:	3601      	adds	r6, #1
 800d5ec:	4488      	add	r8, r1
 800d5ee:	e79a      	b.n	800d526 <_DrawBitmap+0x1ae>
 800d5f0:	2c00      	cmp	r4, #0
 800d5f2:	f040 8240 	bne.w	800da76 <_DrawBitmap+0x6fe>
 800d5f6:	e241      	b.n	800da7c <_DrawBitmap+0x704>
 800d5f8:	4ab0      	ldr	r2, [pc, #704]	; (800d8bc <_DrawBitmap+0x544>)
 800d5fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d5fc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800d5fe:	2d00      	cmp	r5, #0
 800d600:	bf14      	ite	ne
 800d602:	46a9      	movne	r9, r5
 800d604:	4691      	moveq	r9, r2
 800d606:	9a08      	ldr	r2, [sp, #32]
 800d608:	0058      	lsls	r0, r3, #1
 800d60a:	00a1      	lsls	r1, r4, #2
 800d60c:	f108 0804 	add.w	r8, r8, #4
 800d610:	900d      	str	r0, [sp, #52]	; 0x34
 800d612:	910e      	str	r1, [sp, #56]	; 0x38
 800d614:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d618:	9206      	str	r2, [sp, #24]
 800d61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d61c:	9806      	ldr	r0, [sp, #24]
 800d61e:	9908      	ldr	r1, [sp, #32]
 800d620:	1f1c      	subs	r4, r3, #4
 800d622:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d624:	1a42      	subs	r2, r0, r1
 800d626:	429a      	cmp	r2, r3
 800d628:	f280 8223 	bge.w	800da72 <_DrawBitmap+0x6fa>
 800d62c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d62e:	2902      	cmp	r1, #2
 800d630:	f000 80a1 	beq.w	800d776 <_DrawBitmap+0x3fe>
 800d634:	2904      	cmp	r1, #4
 800d636:	f000 8147 	beq.w	800d8c8 <_DrawBitmap+0x550>
 800d63a:	2901      	cmp	r1, #1
 800d63c:	f040 820f 	bne.w	800da5e <_DrawBitmap+0x6e6>
 800d640:	f8df 8280 	ldr.w	r8, [pc, #640]	; 800d8c4 <_DrawBitmap+0x54c>
 800d644:	f8d8 5000 	ldr.w	r5, [r8]
 800d648:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800d64a:	f004 f947 	bl	80118dc <GUI_ALLOC_LockH>
 800d64e:	f89b 3000 	ldrb.w	r3, [fp]
 800d652:	4a9b      	ldr	r2, [pc, #620]	; (800d8c0 <_DrawBitmap+0x548>)
 800d654:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d656:	5cd5      	ldrb	r5, [r2, r3]
 800d658:	9010      	str	r0, [sp, #64]	; 0x40
 800d65a:	f1c1 0708 	rsb	r7, r1, #8
 800d65e:	fa45 f501 	asr.w	r5, r5, r1
 800d662:	f8d8 1000 	ldr.w	r1, [r8]
 800d666:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800d66a:	7c0b      	ldrb	r3, [r1, #16]
 800d66c:	f003 0203 	and.w	r2, r3, #3
 800d670:	2a02      	cmp	r2, #2
 800d672:	4656      	mov	r6, sl
 800d674:	d01d      	beq.n	800d6b2 <_DrawBitmap+0x33a>
 800d676:	2a03      	cmp	r2, #3
 800d678:	d059      	beq.n	800d72e <_DrawBitmap+0x3b6>
 800d67a:	2a01      	cmp	r2, #1
 800d67c:	d057      	beq.n	800d72e <_DrawBitmap+0x3b6>
 800d67e:	465a      	mov	r2, fp
 800d680:	42be      	cmp	r6, r7
 800d682:	bf38      	it	cc
 800d684:	4637      	movcc	r7, r6
 800d686:	1bf6      	subs	r6, r6, r7
 800d688:	463b      	mov	r3, r7
 800d68a:	4621      	mov	r1, r4
 800d68c:	f005 0001 	and.w	r0, r5, #1
 800d690:	086d      	lsrs	r5, r5, #1
 800d692:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d696:	3b01      	subs	r3, #1
 800d698:	f841 0b04 	str.w	r0, [r1], #4
 800d69c:	d1f6      	bne.n	800d68c <_DrawBitmap+0x314>
 800d69e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d6a2:	2e00      	cmp	r6, #0
 800d6a4:	d063      	beq.n	800d76e <_DrawBitmap+0x3f6>
 800d6a6:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800d6aa:	4d85      	ldr	r5, [pc, #532]	; (800d8c0 <_DrawBitmap+0x548>)
 800d6ac:	5ded      	ldrb	r5, [r5, r7]
 800d6ae:	2708      	movs	r7, #8
 800d6b0:	e7e6      	b.n	800d680 <_DrawBitmap+0x308>
 800d6b2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800d6b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d6ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6bc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d6c0:	42be      	cmp	r6, r7
 800d6c2:	bf38      	it	cc
 800d6c4:	4637      	movcc	r7, r6
 800d6c6:	1bf6      	subs	r6, r6, r7
 800d6c8:	f1bc 0f00 	cmp.w	ip, #0
 800d6cc:	d022      	beq.n	800d714 <_DrawBitmap+0x39c>
 800d6ce:	b91d      	cbnz	r5, 800d6d8 <_DrawBitmap+0x360>
 800d6d0:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d6d4:	44b8      	add	r8, r7
 800d6d6:	e021      	b.n	800d71c <_DrawBitmap+0x3a4>
 800d6d8:	07e8      	lsls	r0, r5, #31
 800d6da:	d50c      	bpl.n	800d6f6 <_DrawBitmap+0x37e>
 800d6dc:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800d6e0:	9a06      	ldr	r2, [sp, #24]
 800d6e2:	6803      	ldr	r3, [r0, #0]
 800d6e4:	f8cd c00c 	str.w	ip, [sp, #12]
 800d6e8:	4660      	mov	r0, ip
 800d6ea:	4641      	mov	r1, r8
 800d6ec:	4798      	blx	r3
 800d6ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d6f4:	6021      	str	r1, [r4, #0]
 800d6f6:	3404      	adds	r4, #4
 800d6f8:	3f01      	subs	r7, #1
 800d6fa:	f108 0801 	add.w	r8, r8, #1
 800d6fe:	d00d      	beq.n	800d71c <_DrawBitmap+0x3a4>
 800d700:	086d      	lsrs	r5, r5, #1
 800d702:	e7e4      	b.n	800d6ce <_DrawBitmap+0x356>
 800d704:	07e9      	lsls	r1, r5, #31
 800d706:	bf44      	itt	mi
 800d708:	980b      	ldrmi	r0, [sp, #44]	; 0x2c
 800d70a:	6020      	strmi	r0, [r4, #0]
 800d70c:	3404      	adds	r4, #4
 800d70e:	3f01      	subs	r7, #1
 800d710:	d004      	beq.n	800d71c <_DrawBitmap+0x3a4>
 800d712:	086d      	lsrs	r5, r5, #1
 800d714:	2d00      	cmp	r5, #0
 800d716:	d1f5      	bne.n	800d704 <_DrawBitmap+0x38c>
 800d718:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d71c:	b33e      	cbz	r6, 800d76e <_DrawBitmap+0x3f6>
 800d71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d720:	4f67      	ldr	r7, [pc, #412]	; (800d8c0 <_DrawBitmap+0x548>)
 800d722:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d726:	5c3d      	ldrb	r5, [r7, r0]
 800d728:	9209      	str	r2, [sp, #36]	; 0x24
 800d72a:	2708      	movs	r7, #8
 800d72c:	e7c8      	b.n	800d6c0 <_DrawBitmap+0x348>
 800d72e:	6802      	ldr	r2, [r0, #0]
 800d730:	6911      	ldr	r1, [r2, #16]
 800d732:	6888      	ldr	r0, [r1, #8]
 800d734:	4780      	blx	r0
 800d736:	4659      	mov	r1, fp
 800d738:	42be      	cmp	r6, r7
 800d73a:	bf38      	it	cc
 800d73c:	4637      	movcc	r7, r6
 800d73e:	1bf6      	subs	r6, r6, r7
 800d740:	1d23      	adds	r3, r4, #4
 800d742:	46be      	mov	lr, r7
 800d744:	07ea      	lsls	r2, r5, #31
 800d746:	d504      	bpl.n	800d752 <_DrawBitmap+0x3da>
 800d748:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d74c:	4042      	eors	r2, r0
 800d74e:	f843 2c04 	str.w	r2, [r3, #-4]
 800d752:	086d      	lsrs	r5, r5, #1
 800d754:	3304      	adds	r3, #4
 800d756:	f1be 0e01 	subs.w	lr, lr, #1
 800d75a:	d1f3      	bne.n	800d744 <_DrawBitmap+0x3cc>
 800d75c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d760:	b12e      	cbz	r6, 800d76e <_DrawBitmap+0x3f6>
 800d762:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 800d766:	4d56      	ldr	r5, [pc, #344]	; (800d8c0 <_DrawBitmap+0x548>)
 800d768:	5ded      	ldrb	r5, [r5, r7]
 800d76a:	2708      	movs	r7, #8
 800d76c:	e7e4      	b.n	800d738 <_DrawBitmap+0x3c0>
 800d76e:	a810      	add	r0, sp, #64	; 0x40
 800d770:	f004 f8c2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800d774:	e173      	b.n	800da5e <_DrawBitmap+0x6e6>
 800d776:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800d778:	4b52      	ldr	r3, [pc, #328]	; (800d8c4 <_DrawBitmap+0x54c>)
 800d77a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d77c:	f89b 1000 	ldrb.w	r1, [fp]
 800d780:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800d784:	f1c6 0204 	rsb	r2, r6, #4
 800d788:	b2d5      	uxtb	r5, r2
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	fa01 f100 	lsl.w	r1, r1, r0
 800d790:	b2ce      	uxtb	r6, r1
 800d792:	7c11      	ldrb	r1, [r2, #16]
 800d794:	f001 0003 	and.w	r0, r1, #3
 800d798:	2801      	cmp	r0, #1
 800d79a:	d06a      	beq.n	800d872 <_DrawBitmap+0x4fa>
 800d79c:	d308      	bcc.n	800d7b0 <_DrawBitmap+0x438>
 800d79e:	2802      	cmp	r0, #2
 800d7a0:	f040 815d 	bne.w	800da5e <_DrawBitmap+0x6e6>
 800d7a4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d7a8:	4657      	mov	r7, sl
 800d7aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d7ae:	e040      	b.n	800d832 <_DrawBitmap+0x4ba>
 800d7b0:	465a      	mov	r2, fp
 800d7b2:	4653      	mov	r3, sl
 800d7b4:	429d      	cmp	r5, r3
 800d7b6:	bfc8      	it	gt
 800d7b8:	b2dd      	uxtbgt	r5, r3
 800d7ba:	1b5b      	subs	r3, r3, r5
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4620      	mov	r0, r4
 800d7c0:	09b7      	lsrs	r7, r6, #6
 800d7c2:	3901      	subs	r1, #1
 800d7c4:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 800d7c8:	00b6      	lsls	r6, r6, #2
 800d7ca:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800d7ce:	f840 7b04 	str.w	r7, [r0], #4
 800d7d2:	b2f6      	uxtb	r6, r6
 800d7d4:	d1f4      	bne.n	800d7c0 <_DrawBitmap+0x448>
 800d7d6:	3d01      	subs	r5, #1
 800d7d8:	b2e8      	uxtb	r0, r5
 800d7da:	1c45      	adds	r5, r0, #1
 800d7dc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f000 813c 	beq.w	800da5e <_DrawBitmap+0x6e6>
 800d7e6:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800d7ea:	2504      	movs	r5, #4
 800d7ec:	e7e2      	b.n	800d7b4 <_DrawBitmap+0x43c>
 800d7ee:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800d7f2:	d127      	bne.n	800d844 <_DrawBitmap+0x4cc>
 800d7f4:	9907      	ldr	r1, [sp, #28]
 800d7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f8:	1c48      	adds	r0, r1, #1
 800d7fa:	9007      	str	r0, [sp, #28]
 800d7fc:	1d13      	adds	r3, r2, #4
 800d7fe:	9a07      	ldr	r2, [sp, #28]
 800d800:	9309      	str	r3, [sp, #36]	; 0x24
 800d802:	eb05 0108 	add.w	r1, r5, r8
 800d806:	b2c8      	uxtb	r0, r1
 800d808:	b2d3      	uxtb	r3, r2
 800d80a:	00b6      	lsls	r6, r6, #2
 800d80c:	4298      	cmp	r0, r3
 800d80e:	b2f6      	uxtb	r6, r6
 800d810:	d1ed      	bne.n	800d7ee <_DrawBitmap+0x476>
 800d812:	3d01      	subs	r5, #1
 800d814:	b2ed      	uxtb	r5, r5
 800d816:	1c69      	adds	r1, r5, #1
 800d818:	f108 0801 	add.w	r8, r8, #1
 800d81c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800d820:	44a8      	add	r8, r5
 800d822:	2f00      	cmp	r7, #0
 800d824:	f000 811b 	beq.w	800da5e <_DrawBitmap+0x6e6>
 800d828:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d82a:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 800d82e:	2504      	movs	r5, #4
 800d830:	900b      	str	r0, [sp, #44]	; 0x2c
 800d832:	42bd      	cmp	r5, r7
 800d834:	bfc8      	it	gt
 800d836:	b2fd      	uxtbgt	r5, r7
 800d838:	1d23      	adds	r3, r4, #4
 800d83a:	1b7f      	subs	r7, r7, r5
 800d83c:	9309      	str	r3, [sp, #36]	; 0x24
 800d83e:	f8cd 801c 	str.w	r8, [sp, #28]
 800d842:	e7d4      	b.n	800d7ee <_DrawBitmap+0x476>
 800d844:	09b2      	lsrs	r2, r6, #6
 800d846:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d848:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 800d84c:	f840 1c04 	str.w	r1, [r0, #-4]
 800d850:	f1bc 0f00 	cmp.w	ip, #0
 800d854:	d0ce      	beq.n	800d7f4 <_DrawBitmap+0x47c>
 800d856:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d85a:	9907      	ldr	r1, [sp, #28]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	f8cd c00c 	str.w	ip, [sp, #12]
 800d862:	920f      	str	r2, [sp, #60]	; 0x3c
 800d864:	4660      	mov	r0, ip
 800d866:	9a06      	ldr	r2, [sp, #24]
 800d868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d86a:	4798      	blx	r3
 800d86c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d870:	e7c0      	b.n	800d7f4 <_DrawBitmap+0x47c>
 800d872:	4658      	mov	r0, fp
 800d874:	4653      	mov	r3, sl
 800d876:	429d      	cmp	r5, r3
 800d878:	bfc8      	it	gt
 800d87a:	b2dd      	uxtbgt	r5, r3
 800d87c:	1b5b      	subs	r3, r3, r5
 800d87e:	1d22      	adds	r2, r4, #4
 800d880:	462f      	mov	r7, r5
 800d882:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800d886:	d005      	beq.n	800d894 <_DrawBitmap+0x51c>
 800d888:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800d88c:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800d890:	f842 1c04 	str.w	r1, [r2, #-4]
 800d894:	3f01      	subs	r7, #1
 800d896:	00b6      	lsls	r6, r6, #2
 800d898:	3204      	adds	r2, #4
 800d89a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800d89e:	b2f6      	uxtb	r6, r6
 800d8a0:	d1ef      	bne.n	800d882 <_DrawBitmap+0x50a>
 800d8a2:	3d01      	subs	r5, #1
 800d8a4:	b2e9      	uxtb	r1, r5
 800d8a6:	1c4d      	adds	r5, r1, #1
 800d8a8:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 80d6 	beq.w	800da5e <_DrawBitmap+0x6e6>
 800d8b2:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 800d8b6:	2504      	movs	r5, #4
 800d8b8:	e7dd      	b.n	800d876 <_DrawBitmap+0x4fe>
 800d8ba:	bf00      	nop
 800d8bc:	08024b4c 	.word	0x08024b4c
 800d8c0:	0802f628 	.word	0x0802f628
 800d8c4:	2000027c 	.word	0x2000027c
 800d8c8:	496e      	ldr	r1, [pc, #440]	; (800da84 <_DrawBitmap+0x70c>)
 800d8ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d8cc:	680a      	ldr	r2, [r1, #0]
 800d8ce:	f89b 3000 	ldrb.w	r3, [fp]
 800d8d2:	7c10      	ldrb	r0, [r2, #16]
 800d8d4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d8d6:	f000 0103 	and.w	r1, r0, #3
 800d8da:	fa03 f305 	lsl.w	r3, r3, r5
 800d8de:	2901      	cmp	r1, #1
 800d8e0:	b2dd      	uxtb	r5, r3
 800d8e2:	f000 8096 	beq.w	800da12 <_DrawBitmap+0x69a>
 800d8e6:	d303      	bcc.n	800d8f0 <_DrawBitmap+0x578>
 800d8e8:	2902      	cmp	r1, #2
 800d8ea:	f040 80b8 	bne.w	800da5e <_DrawBitmap+0x6e6>
 800d8ee:	e031      	b.n	800d954 <_DrawBitmap+0x5dc>
 800d8f0:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d8f2:	b159      	cbz	r1, 800d90c <_DrawBitmap+0x594>
 800d8f4:	092d      	lsrs	r5, r5, #4
 800d8f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d8fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d8fe:	6020      	str	r0, [r4, #0]
 800d900:	f10b 0201 	add.w	r2, fp, #1
 800d904:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d906:	f89b 5001 	ldrb.w	r5, [fp, #1]
 800d90a:	e001      	b.n	800d910 <_DrawBitmap+0x598>
 800d90c:	4653      	mov	r3, sl
 800d90e:	465a      	mov	r2, fp
 800d910:	2b01      	cmp	r3, #1
 800d912:	dd17      	ble.n	800d944 <_DrawBitmap+0x5cc>
 800d914:	1058      	asrs	r0, r3, #1
 800d916:	f104 0108 	add.w	r1, r4, #8
 800d91a:	f003 0301 	and.w	r3, r3, #1
 800d91e:	1816      	adds	r6, r2, r0
 800d920:	092f      	lsrs	r7, r5, #4
 800d922:	f005 050f 	and.w	r5, r5, #15
 800d926:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 800d92a:	f841 7c08 	str.w	r7, [r1, #-8]
 800d92e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800d932:	f841 5c04 	str.w	r5, [r1, #-4]
 800d936:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800d93a:	3108      	adds	r1, #8
 800d93c:	42b2      	cmp	r2, r6
 800d93e:	d1ef      	bne.n	800d920 <_DrawBitmap+0x5a8>
 800d940:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800d944:	2b00      	cmp	r3, #0
 800d946:	f000 808a 	beq.w	800da5e <_DrawBitmap+0x6e6>
 800d94a:	092d      	lsrs	r5, r5, #4
 800d94c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 800d950:	6022      	str	r2, [r4, #0]
 800d952:	e084      	b.n	800da5e <_DrawBitmap+0x6e6>
 800d954:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800d956:	b1bf      	cbz	r7, 800d988 <_DrawBitmap+0x610>
 800d958:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800d95c:	d00a      	beq.n	800d974 <_DrawBitmap+0x5fc>
 800d95e:	092b      	lsrs	r3, r5, #4
 800d960:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800d964:	6025      	str	r5, [r4, #0]
 800d966:	b12e      	cbz	r6, 800d974 <_DrawBitmap+0x5fc>
 800d968:	68b4      	ldr	r4, [r6, #8]
 800d96a:	9905      	ldr	r1, [sp, #20]
 800d96c:	6827      	ldr	r7, [r4, #0]
 800d96e:	9a06      	ldr	r2, [sp, #24]
 800d970:	4630      	mov	r0, r6
 800d972:	47b8      	blx	r7
 800d974:	9a05      	ldr	r2, [sp, #20]
 800d976:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d978:	f89b 5001 	ldrb.w	r5, [fp, #1]
 800d97c:	1c57      	adds	r7, r2, #1
 800d97e:	f10a 3cff 	add.w	ip, sl, #4294967295
 800d982:	f10b 0801 	add.w	r8, fp, #1
 800d986:	e00f      	b.n	800d9a8 <_DrawBitmap+0x630>
 800d988:	46d4      	mov	ip, sl
 800d98a:	46d8      	mov	r8, fp
 800d98c:	9f05      	ldr	r7, [sp, #20]
 800d98e:	e00b      	b.n	800d9a8 <_DrawBitmap+0x630>
 800d990:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800d994:	d10c      	bne.n	800d9b0 <_DrawBitmap+0x638>
 800d996:	f015 050f 	ands.w	r5, r5, #15
 800d99a:	d11a      	bne.n	800d9d2 <_DrawBitmap+0x65a>
 800d99c:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800d9a0:	3408      	adds	r4, #8
 800d9a2:	3702      	adds	r7, #2
 800d9a4:	f1ac 0c02 	sub.w	ip, ip, #2
 800d9a8:	f1bc 0f01 	cmp.w	ip, #1
 800d9ac:	dcf0      	bgt.n	800d990 <_DrawBitmap+0x618>
 800d9ae:	e020      	b.n	800d9f2 <_DrawBitmap+0x67a>
 800d9b0:	092a      	lsrs	r2, r5, #4
 800d9b2:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 800d9b6:	6020      	str	r0, [r4, #0]
 800d9b8:	2e00      	cmp	r6, #0
 800d9ba:	d0ec      	beq.n	800d996 <_DrawBitmap+0x61e>
 800d9bc:	68b1      	ldr	r1, [r6, #8]
 800d9be:	9a06      	ldr	r2, [sp, #24]
 800d9c0:	680b      	ldr	r3, [r1, #0]
 800d9c2:	f8cd c00c 	str.w	ip, [sp, #12]
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	4639      	mov	r1, r7
 800d9ca:	4798      	blx	r3
 800d9cc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d9d0:	e7e1      	b.n	800d996 <_DrawBitmap+0x61e>
 800d9d2:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 800d9d6:	6062      	str	r2, [r4, #4]
 800d9d8:	2e00      	cmp	r6, #0
 800d9da:	d0df      	beq.n	800d99c <_DrawBitmap+0x624>
 800d9dc:	68b0      	ldr	r0, [r6, #8]
 800d9de:	9a06      	ldr	r2, [sp, #24]
 800d9e0:	6803      	ldr	r3, [r0, #0]
 800d9e2:	f8cd c00c 	str.w	ip, [sp, #12]
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	1c79      	adds	r1, r7, #1
 800d9ea:	4798      	blx	r3
 800d9ec:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d9f0:	e7d4      	b.n	800d99c <_DrawBitmap+0x624>
 800d9f2:	f1bc 0f00 	cmp.w	ip, #0
 800d9f6:	d032      	beq.n	800da5e <_DrawBitmap+0x6e6>
 800d9f8:	092d      	lsrs	r5, r5, #4
 800d9fa:	d030      	beq.n	800da5e <_DrawBitmap+0x6e6>
 800d9fc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800da00:	6020      	str	r0, [r4, #0]
 800da02:	b366      	cbz	r6, 800da5e <_DrawBitmap+0x6e6>
 800da04:	68b1      	ldr	r1, [r6, #8]
 800da06:	9a06      	ldr	r2, [sp, #24]
 800da08:	680b      	ldr	r3, [r1, #0]
 800da0a:	4630      	mov	r0, r6
 800da0c:	4639      	mov	r1, r7
 800da0e:	4798      	blx	r3
 800da10:	e025      	b.n	800da5e <_DrawBitmap+0x6e6>
 800da12:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800da14:	f1c6 0002 	rsb	r0, r6, #2
 800da18:	b2c3      	uxtb	r3, r0
 800da1a:	465e      	mov	r6, fp
 800da1c:	4652      	mov	r2, sl
 800da1e:	4293      	cmp	r3, r2
 800da20:	bfc8      	it	gt
 800da22:	b2d3      	uxtbgt	r3, r2
 800da24:	1ad2      	subs	r2, r2, r3
 800da26:	1d20      	adds	r0, r4, #4
 800da28:	461f      	mov	r7, r3
 800da2a:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800da2e:	d005      	beq.n	800da3c <_DrawBitmap+0x6c4>
 800da30:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800da34:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800da38:	f840 1c04 	str.w	r1, [r0, #-4]
 800da3c:	3f01      	subs	r7, #1
 800da3e:	012d      	lsls	r5, r5, #4
 800da40:	3004      	adds	r0, #4
 800da42:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800da46:	b2ed      	uxtb	r5, r5
 800da48:	d1ef      	bne.n	800da2a <_DrawBitmap+0x6b2>
 800da4a:	3b01      	subs	r3, #1
 800da4c:	b2d9      	uxtb	r1, r3
 800da4e:	1c48      	adds	r0, r1, #1
 800da50:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800da54:	b11a      	cbz	r2, 800da5e <_DrawBitmap+0x6e6>
 800da56:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 800da5a:	2302      	movs	r3, #2
 800da5c:	e7df      	b.n	800da1e <_DrawBitmap+0x6a6>
 800da5e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800da60:	9806      	ldr	r0, [sp, #24]
 800da62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da64:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da66:	44a3      	add	fp, r4
 800da68:	1c43      	adds	r3, r0, #1
 800da6a:	1854      	adds	r4, r2, r1
 800da6c:	9306      	str	r3, [sp, #24]
 800da6e:	940a      	str	r4, [sp, #40]	; 0x28
 800da70:	e5d3      	b.n	800d61a <_DrawBitmap+0x2a2>
 800da72:	9811      	ldr	r0, [sp, #68]	; 0x44
 800da74:	b110      	cbz	r0, 800da7c <_DrawBitmap+0x704>
 800da76:	a811      	add	r0, sp, #68	; 0x44
 800da78:	f003 ff3e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800da7c:	b013      	add	sp, #76	; 0x4c
 800da7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da82:	bf00      	nop
 800da84:	2000027c 	.word	0x2000027c

0800da88 <GUI_MEMDEV__WriteToActiveAt>:
 800da88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800da8c:	460e      	mov	r6, r1
 800da8e:	4690      	mov	r8, r2
 800da90:	4607      	mov	r7, r0
 800da92:	f003 ff23 	bl	80118dc <GUI_ALLOC_LockH>
 800da96:	ac02      	add	r4, sp, #8
 800da98:	6803      	ldr	r3, [r0, #0]
 800da9a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800da9e:	68d8      	ldr	r0, [r3, #12]
 800daa0:	2116      	movs	r1, #22
 800daa2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800daa4:	2000      	movs	r0, #0
 800daa6:	4790      	blx	r2
 800daa8:	4605      	mov	r5, r0
 800daaa:	4620      	mov	r0, r4
 800daac:	f003 ff24 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800dab0:	b11d      	cbz	r5, 800daba <GUI_MEMDEV__WriteToActiveAt+0x32>
 800dab2:	4638      	mov	r0, r7
 800dab4:	4631      	mov	r1, r6
 800dab6:	4642      	mov	r2, r8
 800dab8:	47a8      	blx	r5
 800daba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
	...

0800dac0 <GUI_MEMDEV__CreateFixed>:
 800dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac4:	461d      	mov	r5, r3
 800dac6:	4b3c      	ldr	r3, [pc, #240]	; (800dbb8 <GUI_MEMDEV__CreateFixed+0xf8>)
 800dac8:	b087      	sub	sp, #28
 800daca:	681c      	ldr	r4, [r3, #0]
 800dacc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800dace:	7c63      	ldrb	r3, [r4, #17]
 800dad0:	4683      	mov	fp, r0
 800dad2:	468a      	mov	sl, r1
 800dad4:	4690      	mov	r8, r2
 800dad6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800dad8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dada:	2200      	movs	r2, #0
 800dadc:	f003 f9ec 	bl	8010eb8 <GUI_DEVICE_Create>
 800dae0:	4604      	mov	r4, r0
 800dae2:	b378      	cbz	r0, 800db44 <GUI_MEMDEV__CreateFixed+0x84>
 800dae4:	6900      	ldr	r0, [r0, #16]
 800dae6:	6881      	ldr	r1, [r0, #8]
 800dae8:	4788      	blx	r1
 800daea:	f001 fa9b 	bl	800f024 <LCD__GetBPPDevice>
 800daee:	fb08 f600 	mul.w	r6, r8, r0
 800daf2:	1df2      	adds	r2, r6, #7
 800daf4:	08d6      	lsrs	r6, r2, #3
 800daf6:	9003      	str	r0, [sp, #12]
 800daf8:	f004 f860 	bl	8011bbc <GUI_ALLOC_RequestSize>
 800dafc:	f017 0901 	ands.w	r9, r7, #1
 800db00:	d104      	bne.n	800db0c <GUI_MEMDEV__CreateFixed+0x4c>
 800db02:	2704      	movs	r7, #4
 800db04:	fb90 f0f7 	sdiv	r0, r0, r7
 800db08:	2303      	movs	r3, #3
 800db0a:	4358      	muls	r0, r3
 800db0c:	2d00      	cmp	r5, #0
 800db0e:	dc06      	bgt.n	800db1e <GUI_MEMDEV__CreateFixed+0x5e>
 800db10:	3818      	subs	r0, #24
 800db12:	426d      	negs	r5, r5
 800db14:	fbb0 f0f6 	udiv	r0, r0, r6
 800db18:	42a8      	cmp	r0, r5
 800db1a:	bfb8      	it	lt
 800db1c:	4605      	movlt	r5, r0
 800db1e:	f1b9 0f00 	cmp.w	r9, #0
 800db22:	d109      	bne.n	800db38 <GUI_MEMDEV__CreateFixed+0x78>
 800db24:	f8cd 9000 	str.w	r9, [sp]
 800db28:	4658      	mov	r0, fp
 800db2a:	4651      	mov	r1, sl
 800db2c:	4642      	mov	r2, r8
 800db2e:	462b      	mov	r3, r5
 800db30:	f006 f8d6 	bl	8013ce0 <GUI_USAGE_BM_Create>
 800db34:	4607      	mov	r7, r0
 800db36:	e000      	b.n	800db3a <GUI_MEMDEV__CreateFixed+0x7a>
 800db38:	2700      	movs	r7, #0
 800db3a:	2d00      	cmp	r5, #0
 800db3c:	dc05      	bgt.n	800db4a <GUI_MEMDEV__CreateFixed+0x8a>
 800db3e:	4620      	mov	r0, r4
 800db40:	f003 f9b8 	bl	8010eb4 <GUI_DEVICE_Delete>
 800db44:	f04f 0900 	mov.w	r9, #0
 800db48:	e031      	b.n	800dbae <GUI_MEMDEV__CreateFixed+0xee>
 800db4a:	fb06 f005 	mul.w	r0, r6, r5
 800db4e:	3018      	adds	r0, #24
 800db50:	f1b9 0f00 	cmp.w	r9, #0
 800db54:	d002      	beq.n	800db5c <GUI_MEMDEV__CreateFixed+0x9c>
 800db56:	f004 f90f 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 800db5a:	e001      	b.n	800db60 <GUI_MEMDEV__CreateFixed+0xa0>
 800db5c:	f004 f932 	bl	8011dc4 <GUI_ALLOC_AllocZero>
 800db60:	4681      	mov	r9, r0
 800db62:	b940      	cbnz	r0, 800db76 <GUI_MEMDEV__CreateFixed+0xb6>
 800db64:	4620      	mov	r0, r4
 800db66:	f003 f9a5 	bl	8010eb4 <GUI_DEVICE_Delete>
 800db6a:	2f00      	cmp	r7, #0
 800db6c:	d0ea      	beq.n	800db44 <GUI_MEMDEV__CreateFixed+0x84>
 800db6e:	4638      	mov	r0, r7
 800db70:	f003 feee 	bl	8011950 <GUI_ALLOC_Free>
 800db74:	e01b      	b.n	800dbae <GUI_MEMDEV__CreateFixed+0xee>
 800db76:	f003 feb1 	bl	80118dc <GUI_ALLOC_LockH>
 800db7a:	9a03      	ldr	r2, [sp, #12]
 800db7c:	4601      	mov	r1, r0
 800db7e:	a806      	add	r0, sp, #24
 800db80:	610a      	str	r2, [r1, #16]
 800db82:	f840 1d04 	str.w	r1, [r0, #-4]!
 800db86:	f8a1 b004 	strh.w	fp, [r1, #4]
 800db8a:	600c      	str	r4, [r1, #0]
 800db8c:	f8a1 a006 	strh.w	sl, [r1, #6]
 800db90:	f8a1 8008 	strh.w	r8, [r1, #8]
 800db94:	814d      	strh	r5, [r1, #10]
 800db96:	60ce      	str	r6, [r1, #12]
 800db98:	614f      	str	r7, [r1, #20]
 800db9a:	f003 fead 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800db9e:	4806      	ldr	r0, [pc, #24]	; (800dbb8 <GUI_MEMDEV__CreateFixed+0xf8>)
 800dba0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dba2:	6801      	ldr	r1, [r0, #0]
 800dba4:	6123      	str	r3, [r4, #16]
 800dba6:	f8c4 9008 	str.w	r9, [r4, #8]
 800dbaa:	7c4a      	ldrb	r2, [r1, #17]
 800dbac:	61a2      	str	r2, [r4, #24]
 800dbae:	4648      	mov	r0, r9
 800dbb0:	b007      	add	sp, #28
 800dbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb6:	bf00      	nop
 800dbb8:	2000027c 	.word	0x2000027c

0800dbbc <GUI_MEMDEV_GetBitsPerPixel>:
 800dbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	b170      	cbz	r0, 800dbe0 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800dbc2:	f003 fe8b 	bl	80118dc <GUI_ALLOC_LockH>
 800dbc6:	ac02      	add	r4, sp, #8
 800dbc8:	6803      	ldr	r3, [r0, #0]
 800dbca:	f844 0d04 	str.w	r0, [r4, #-4]!
 800dbce:	6918      	ldr	r0, [r3, #16]
 800dbd0:	6881      	ldr	r1, [r0, #8]
 800dbd2:	4788      	blx	r1
 800dbd4:	f001 fa26 	bl	800f024 <LCD__GetBPPDevice>
 800dbd8:	4605      	mov	r5, r0
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f003 fe8c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800dbe4 <GUI_MEMDEV_Delete>:
 800dbe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	b1d0      	cbz	r0, 800dc20 <GUI_MEMDEV_Delete+0x3c>
 800dbea:	4b0e      	ldr	r3, [pc, #56]	; (800dc24 <GUI_MEMDEV_Delete+0x40>)
 800dbec:	6818      	ldr	r0, [r3, #0]
 800dbee:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800dbf0:	42a1      	cmp	r1, r4
 800dbf2:	d101      	bne.n	800dbf8 <GUI_MEMDEV_Delete+0x14>
 800dbf4:	f002 fb6e 	bl	80102d4 <GUI_SelectLCD>
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f003 fe6f 	bl	80118dc <GUI_ALLOC_LockH>
 800dbfe:	9001      	str	r0, [sp, #4]
 800dc00:	6940      	ldr	r0, [r0, #20]
 800dc02:	b108      	cbz	r0, 800dc08 <GUI_MEMDEV_Delete+0x24>
 800dc04:	f006 f896 	bl	8013d34 <GUI_USAGE_DecUseCnt>
 800dc08:	ad02      	add	r5, sp, #8
 800dc0a:	f855 2d04 	ldr.w	r2, [r5, #-4]!
 800dc0e:	6810      	ldr	r0, [r2, #0]
 800dc10:	f003 f950 	bl	8010eb4 <GUI_DEVICE_Delete>
 800dc14:	4628      	mov	r0, r5
 800dc16:	f003 fe6f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f003 fe98 	bl	8011950 <GUI_ALLOC_Free>
 800dc20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800dc22:	bf00      	nop
 800dc24:	2000027c 	.word	0x2000027c

0800dc28 <GUI_MEMDEV_CreateEx>:
 800dc28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc2c:	469a      	mov	sl, r3
 800dc2e:	4b18      	ldr	r3, [pc, #96]	; (800dc90 <GUI_MEMDEV_CreateEx+0x68>)
 800dc30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc32:	4607      	mov	r7, r0
 800dc34:	6818      	ldr	r0, [r3, #0]
 800dc36:	4688      	mov	r8, r1
 800dc38:	7c40      	ldrb	r0, [r0, #17]
 800dc3a:	4916      	ldr	r1, [pc, #88]	; (800dc94 <GUI_MEMDEV_CreateEx+0x6c>)
 800dc3c:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800dc40:	4691      	mov	r9, r2
 800dc42:	68e2      	ldr	r2, [r4, #12]
 800dc44:	6816      	ldr	r6, [r2, #0]
 800dc46:	2e04      	cmp	r6, #4
 800dc48:	d005      	beq.n	800dc56 <GUI_MEMDEV_CreateEx+0x2e>
 800dc4a:	6824      	ldr	r4, [r4, #0]
 800dc4c:	2c00      	cmp	r4, #0
 800dc4e:	d1f8      	bne.n	800dc42 <GUI_MEMDEV_CreateEx+0x1a>
 800dc50:	f003 f920 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800dc54:	4604      	mov	r4, r0
 800dc56:	68e3      	ldr	r3, [r4, #12]
 800dc58:	4620      	mov	r0, r4
 800dc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	4790      	blx	r2
 800dc60:	4606      	mov	r6, r0
 800dc62:	b188      	cbz	r0, 800dc88 <GUI_MEMDEV_CreateEx+0x60>
 800dc64:	6924      	ldr	r4, [r4, #16]
 800dc66:	68a0      	ldr	r0, [r4, #8]
 800dc68:	4780      	blx	r0
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	bf04      	itt	eq
 800dc6e:	4c0a      	ldreq	r4, [pc, #40]	; (800dc98 <GUI_MEMDEV_CreateEx+0x70>)
 800dc70:	f045 0501 	orreq.w	r5, r5, #1
 800dc74:	e88d 0060 	stmia.w	sp, {r5, r6}
 800dc78:	9402      	str	r4, [sp, #8]
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	4641      	mov	r1, r8
 800dc7e:	464a      	mov	r2, r9
 800dc80:	4653      	mov	r3, sl
 800dc82:	f7ff ff1d 	bl	800dac0 <GUI_MEMDEV__CreateFixed>
 800dc86:	e7ff      	b.n	800dc88 <GUI_MEMDEV_CreateEx+0x60>
 800dc88:	b004      	add	sp, #16
 800dc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc8e:	bf00      	nop
 800dc90:	2000027c 	.word	0x2000027c
 800dc94:	20017a04 	.word	0x20017a04
 800dc98:	0802f74c 	.word	0x0802f74c

0800dc9c <GUI_MEMDEV_Select>:
 800dc9c:	4b11      	ldr	r3, [pc, #68]	; (800dce4 <GUI_MEMDEV_Select+0x48>)
 800dc9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	4604      	mov	r4, r0
 800dca4:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800dca6:	461f      	mov	r7, r3
 800dca8:	b910      	cbnz	r0, 800dcb0 <GUI_MEMDEV_Select+0x14>
 800dcaa:	f002 fb13 	bl	80102d4 <GUI_SelectLCD>
 800dcae:	e016      	b.n	800dcde <GUI_MEMDEV_Select+0x42>
 800dcb0:	b10e      	cbz	r6, 800dcb6 <GUI_MEMDEV_Select+0x1a>
 800dcb2:	f002 fb0f 	bl	80102d4 <GUI_SelectLCD>
 800dcb6:	f7fe ff75 	bl	800cba4 <WM_Deactivate>
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f003 fe0e 	bl	80118dc <GUI_ALLOC_LockH>
 800dcc0:	ad02      	add	r5, sp, #8
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	f845 0d04 	str.w	r0, [r5, #-4]!
 800dcc8:	660c      	str	r4, [r1, #96]	; 0x60
 800dcca:	6800      	ldr	r0, [r0, #0]
 800dccc:	f003 f91c 	bl	8010f08 <GUI_DEVICE_Link>
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f003 fe11 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800dcd6:	f001 f879 	bl	800edcc <LCD_UpdateColorIndices>
 800dcda:	f001 fc63 	bl	800f5a4 <LCD_SetClipRectMax>
 800dcde:	4630      	mov	r0, r6
 800dce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dce2:	bf00      	nop
 800dce4:	2000027c 	.word	0x2000027c

0800dce8 <GUI_MEMDEV_CopyToLCDAt>:
 800dce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcec:	460c      	mov	r4, r1
 800dcee:	b085      	sub	sp, #20
 800dcf0:	4615      	mov	r5, r2
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d042      	beq.n	800dd7e <GUI_MEMDEV_CopyToLCDAt+0x96>
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	f002 faa1 	bl	8010240 <GUI_SetDrawMode>
 800dcfe:	4b21      	ldr	r3, [pc, #132]	; (800dd84 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800dd00:	4607      	mov	r7, r0
 800dd02:	6818      	ldr	r0, [r3, #0]
 800dd04:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f003 fde7 	bl	80118dc <GUI_ALLOC_LockH>
 800dd0e:	6801      	ldr	r1, [r0, #0]
 800dd10:	9001      	str	r0, [sp, #4]
 800dd12:	6988      	ldr	r0, [r1, #24]
 800dd14:	f002 facc 	bl	80102b0 <GUI_SelectLayer>
 800dd18:	4a1b      	ldr	r2, [pc, #108]	; (800dd88 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800dd1a:	4294      	cmp	r4, r2
 800dd1c:	4681      	mov	r9, r0
 800dd1e:	d104      	bne.n	800dd2a <GUI_MEMDEV_CopyToLCDAt+0x42>
 800dd20:	9d01      	ldr	r5, [sp, #4]
 800dd22:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 800dd26:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800dd2a:	9b01      	ldr	r3, [sp, #4]
 800dd2c:	f8ad 4008 	strh.w	r4, [sp, #8]
 800dd30:	8918      	ldrh	r0, [r3, #8]
 800dd32:	895b      	ldrh	r3, [r3, #10]
 800dd34:	f8ad 500a 	strh.w	r5, [sp, #10]
 800dd38:	1e41      	subs	r1, r0, #1
 800dd3a:	1e58      	subs	r0, r3, #1
 800dd3c:	190a      	adds	r2, r1, r4
 800dd3e:	1941      	adds	r1, r0, r5
 800dd40:	f8ad 200c 	strh.w	r2, [sp, #12]
 800dd44:	f8ad 100e 	strh.w	r1, [sp, #14]
 800dd48:	f7fe ff24 	bl	800cb94 <WM_Activate>
 800dd4c:	a801      	add	r0, sp, #4
 800dd4e:	f003 fdd3 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800dd52:	a802      	add	r0, sp, #8
 800dd54:	f7fe fd46 	bl	800c7e4 <WM__InitIVRSearch>
 800dd58:	b948      	cbnz	r0, 800dd6e <GUI_MEMDEV_CopyToLCDAt+0x86>
 800dd5a:	4648      	mov	r0, r9
 800dd5c:	f002 faa8 	bl	80102b0 <GUI_SelectLayer>
 800dd60:	4640      	mov	r0, r8
 800dd62:	f7ff ff9b 	bl	800dc9c <GUI_MEMDEV_Select>
 800dd66:	4638      	mov	r0, r7
 800dd68:	f002 fa6a 	bl	8010240 <GUI_SetDrawMode>
 800dd6c:	e007      	b.n	800dd7e <GUI_MEMDEV_CopyToLCDAt+0x96>
 800dd6e:	4630      	mov	r0, r6
 800dd70:	4621      	mov	r1, r4
 800dd72:	462a      	mov	r2, r5
 800dd74:	f005 fa86 	bl	8013284 <GUI_MEMDEV__WriteToActiveOpaque>
 800dd78:	f7fe fc74 	bl	800c664 <WM__GetNextIVR>
 800dd7c:	e7ec      	b.n	800dd58 <GUI_MEMDEV_CopyToLCDAt+0x70>
 800dd7e:	b005      	add	sp, #20
 800dd80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd84:	2000027c 	.word	0x2000027c
 800dd88:	fffff001 	.word	0xfffff001

0800dd8c <GUI_MEMDEV_CopyToLCD>:
 800dd8c:	4901      	ldr	r1, [pc, #4]	; (800dd94 <GUI_MEMDEV_CopyToLCD+0x8>)
 800dd8e:	460a      	mov	r2, r1
 800dd90:	f7ff bfaa 	b.w	800dce8 <GUI_MEMDEV_CopyToLCDAt>
 800dd94:	fffff001 	.word	0xfffff001

0800dd98 <_SetPhysRAMAddr>:
 800dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	460e      	mov	r6, r1
 800dd9e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800dda2:	212a      	movs	r1, #42	; 0x2a
 800dda4:	4615      	mov	r5, r2
 800dda6:	4798      	blx	r3
 800dda8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ddaa:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 800ddae:	1872      	adds	r2, r6, r1
 800ddb0:	f3c2 210f 	ubfx	r1, r2, #8, #16
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	47b8      	blx	r7
 800ddb8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ddba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ddbe:	b2b7      	uxth	r7, r6
 800ddc0:	1839      	adds	r1, r7, r0
 800ddc2:	b2c9      	uxtb	r1, r1
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	4798      	blx	r3
 800ddc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ddca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ddce:	18b6      	adds	r6, r6, r2
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f3c6 210f 	ubfx	r1, r6, #8, #16
 800ddd6:	4798      	blx	r3
 800ddd8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ddda:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800ddde:	1839      	adds	r1, r7, r0
 800dde0:	b2c9      	uxtb	r1, r1
 800dde2:	4620      	mov	r0, r4
 800dde4:	4790      	blx	r2
 800dde6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800ddea:	4620      	mov	r0, r4
 800ddec:	212b      	movs	r1, #43	; 0x2b
 800ddee:	47b0      	blx	r6
 800ddf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ddf2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800ddf6:	18e9      	adds	r1, r5, r3
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800ddfe:	4790      	blx	r2
 800de00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800de02:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800de06:	b2ae      	uxth	r6, r5
 800de08:	1831      	adds	r1, r6, r0
 800de0a:	b2c9      	uxtb	r1, r1
 800de0c:	4620      	mov	r0, r4
 800de0e:	4798      	blx	r3
 800de10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800de12:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800de16:	18a9      	adds	r1, r5, r2
 800de18:	4620      	mov	r0, r4
 800de1a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800de1e:	4798      	blx	r3
 800de20:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800de22:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800de26:	1832      	adds	r2, r6, r0
 800de28:	b2d1      	uxtb	r1, r2
 800de2a:	4620      	mov	r0, r4
 800de2c:	4798      	blx	r3
 800de2e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800de32:	4620      	mov	r0, r4
 800de34:	212c      	movs	r1, #44	; 0x2c
 800de36:	4790      	blx	r2
 800de38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de3a <_SetRect>:
 800de3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de3e:	4604      	mov	r4, r0
 800de40:	4688      	mov	r8, r1
 800de42:	461f      	mov	r7, r3
 800de44:	212a      	movs	r1, #42	; 0x2a
 800de46:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800de4a:	9d06      	ldr	r5, [sp, #24]
 800de4c:	4616      	mov	r6, r2
 800de4e:	4798      	blx	r3
 800de50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800de52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800de56:	eb08 0201 	add.w	r2, r8, r1
 800de5a:	4620      	mov	r0, r4
 800de5c:	f3c2 210f 	ubfx	r1, r2, #8, #16
 800de60:	4798      	blx	r3
 800de62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800de64:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800de68:	eb08 0100 	add.w	r1, r8, r0
 800de6c:	b2c9      	uxtb	r1, r1
 800de6e:	4620      	mov	r0, r4
 800de70:	4790      	blx	r2
 800de72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800de74:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800de78:	18f9      	adds	r1, r7, r3
 800de7a:	4620      	mov	r0, r4
 800de7c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800de80:	4790      	blx	r2
 800de82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800de84:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800de88:	1839      	adds	r1, r7, r0
 800de8a:	b2c9      	uxtb	r1, r1
 800de8c:	4620      	mov	r0, r4
 800de8e:	4798      	blx	r3
 800de90:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800de94:	4620      	mov	r0, r4
 800de96:	212b      	movs	r1, #43	; 0x2b
 800de98:	4790      	blx	r2
 800de9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800de9c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800dea0:	1831      	adds	r1, r6, r0
 800dea2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800dea6:	4620      	mov	r0, r4
 800dea8:	4798      	blx	r3
 800deaa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800deac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800deb0:	18b1      	adds	r1, r6, r2
 800deb2:	4620      	mov	r0, r4
 800deb4:	b2c9      	uxtb	r1, r1
 800deb6:	4798      	blx	r3
 800deb8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800deba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800debe:	182a      	adds	r2, r5, r0
 800dec0:	f3c2 210f 	ubfx	r1, r2, #8, #16
 800dec4:	4620      	mov	r0, r4
 800dec6:	4798      	blx	r3
 800dec8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800deca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800dece:	186a      	adds	r2, r5, r1
 800ded0:	4620      	mov	r0, r4
 800ded2:	b2d1      	uxtb	r1, r2
 800ded4:	4798      	blx	r3
 800ded6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800deda:	4620      	mov	r0, r4
 800dedc:	212c      	movs	r1, #44	; 0x2c
 800dede:	4790      	blx	r2
 800dee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dee4 <_SetOrientation>:
 800dee4:	b513      	push	{r0, r1, r4, lr}
 800dee6:	4a0d      	ldr	r2, [pc, #52]	; (800df1c <_SetOrientation+0x38>)
 800dee8:	4604      	mov	r4, r0
 800deea:	6851      	ldr	r1, [r2, #4]
 800deec:	6810      	ldr	r0, [r2, #0]
 800deee:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800def2:	466b      	mov	r3, sp
 800def4:	c303      	stmia	r3!, {r0, r1}
 800def6:	4620      	mov	r0, r4
 800def8:	2136      	movs	r1, #54	; 0x36
 800defa:	4790      	blx	r2
 800defc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800defe:	a902      	add	r1, sp, #8
 800df00:	180b      	adds	r3, r1, r0
 800df02:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800df04:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800df08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800df0c:	f020 01e0 	bic.w	r1, r0, #224	; 0xe0
 800df10:	430a      	orrs	r2, r1
 800df12:	4620      	mov	r0, r4
 800df14:	b291      	uxth	r1, r2
 800df16:	4798      	blx	r3
 800df18:	bd1c      	pop	{r2, r3, r4, pc}
 800df1a:	bf00      	nop
 800df1c:	0801b118 	.word	0x0801b118

0800df20 <_ReadPixel_16bpp_B8>:
 800df20:	b513      	push	{r0, r1, r4, lr}
 800df22:	4604      	mov	r4, r0
 800df24:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800df28:	202e      	movs	r0, #46	; 0x2e
 800df2a:	4798      	blx	r3
 800df2c:	6a21      	ldr	r1, [r4, #32]
 800df2e:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800df32:	4668      	mov	r0, sp
 800df34:	3103      	adds	r1, #3
 800df36:	4790      	blx	r2
 800df38:	6a20      	ldr	r0, [r4, #32]
 800df3a:	ab00      	add	r3, sp, #0
 800df3c:	181b      	adds	r3, r3, r0
 800df3e:	f81d 2000 	ldrb.w	r2, [sp, r0]
 800df42:	7859      	ldrb	r1, [r3, #1]
 800df44:	789b      	ldrb	r3, [r3, #2]
 800df46:	08d0      	lsrs	r0, r2, #3
 800df48:	02c2      	lsls	r2, r0, #11
 800df4a:	0889      	lsrs	r1, r1, #2
 800df4c:	ea42 1141 	orr.w	r1, r2, r1, lsl #5
 800df50:	ea41 00d3 	orr.w	r0, r1, r3, lsr #3
 800df54:	bd1c      	pop	{r2, r3, r4, pc}

0800df56 <_ReadPixel_16bpp_B16_I>:
 800df56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df58:	4604      	mov	r4, r0
 800df5a:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800df5e:	202e      	movs	r0, #46	; 0x2e
 800df60:	4798      	blx	r3
 800df62:	6a21      	ldr	r1, [r4, #32]
 800df64:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800df68:	4668      	mov	r0, sp
 800df6a:	3102      	adds	r1, #2
 800df6c:	4790      	blx	r2
 800df6e:	6a20      	ldr	r0, [r4, #32]
 800df70:	ab00      	add	r3, sp, #0
 800df72:	eb03 0140 	add.w	r1, r3, r0, lsl #1
 800df76:	f83d 0010 	ldrh.w	r0, [sp, r0, lsl #1]
 800df7a:	884a      	ldrh	r2, [r1, #2]
 800df7c:	f402 437c 	and.w	r3, r2, #64512	; 0xfc00
 800df80:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 800df84:	ea41 1253 	orr.w	r2, r1, r3, lsr #5
 800df88:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800df8c:	ea42 2003 	orr.w	r0, r2, r3, lsl #8
 800df90:	b004      	add	sp, #16
 800df92:	bd10      	pop	{r4, pc}

0800df94 <_SetReg_B8>:
 800df94:	b538      	push	{r3, r4, r5, lr}
 800df96:	4604      	mov	r4, r0
 800df98:	460d      	mov	r5, r1
 800df9a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800df9e:	0a08      	lsrs	r0, r1, #8
 800dfa0:	4798      	blx	r3
 800dfa2:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 800dfa6:	b2e8      	uxtb	r0, r5
 800dfa8:	4788      	blx	r1
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}

0800dfac <_SetReg_B16>:
 800dfac:	b508      	push	{r3, lr}
 800dfae:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800dfb2:	4608      	mov	r0, r1
 800dfb4:	4798      	blx	r3
 800dfb6:	bd08      	pop	{r3, pc}

0800dfb8 <_WritePara_B8>:
 800dfb8:	b508      	push	{r3, lr}
 800dfba:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800dfbe:	b2c8      	uxtb	r0, r1
 800dfc0:	4798      	blx	r3
 800dfc2:	bd08      	pop	{r3, pc}

0800dfc4 <_WritePara_B16>:
 800dfc4:	b508      	push	{r3, lr}
 800dfc6:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800dfca:	4608      	mov	r0, r1
 800dfcc:	4798      	blx	r3
 800dfce:	bd08      	pop	{r3, pc}

0800dfd0 <_SetInterface>:
 800dfd0:	2908      	cmp	r1, #8
 800dfd2:	d006      	beq.n	800dfe2 <_SetInterface+0x12>
 800dfd4:	2910      	cmp	r1, #16
 800dfd6:	d10a      	bne.n	800dfee <_SetInterface+0x1e>
 800dfd8:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <_SetInterface+0x20>)
 800dfda:	4906      	ldr	r1, [pc, #24]	; (800dff4 <_SetInterface+0x24>)
 800dfdc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800dfe0:	e003      	b.n	800dfea <_SetInterface+0x1a>
 800dfe2:	4a05      	ldr	r2, [pc, #20]	; (800dff8 <_SetInterface+0x28>)
 800dfe4:	4905      	ldr	r1, [pc, #20]	; (800dffc <_SetInterface+0x2c>)
 800dfe6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800dfea:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 800dfee:	4770      	bx	lr
 800dff0:	0800dfad 	.word	0x0800dfad
 800dff4:	0800dfc5 	.word	0x0800dfc5
 800dff8:	0800df95 	.word	0x0800df95
 800dffc:	0800dfb9 	.word	0x0800dfb9

0800e000 <_ReadRect_16bpp_B16_I>:
 800e000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e002:	b087      	sub	sp, #28
 800e004:	6884      	ldr	r4, [r0, #8]
 800e006:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800e008:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e00a:	9700      	str	r7, [sp, #0]
 800e00c:	1a58      	subs	r0, r3, r1
 800e00e:	1abd      	subs	r5, r7, r2
 800e010:	3001      	adds	r0, #1
 800e012:	3501      	adds	r5, #1
 800e014:	4345      	muls	r5, r0
 800e016:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800e01a:	4620      	mov	r0, r4
 800e01c:	47b8      	blx	r7
 800e01e:	202e      	movs	r0, #46	; 0x2e
 800e020:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800e024:	4798      	blx	r3
 800e026:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800e02a:	6a21      	ldr	r1, [r4, #32]
 800e02c:	a802      	add	r0, sp, #8
 800e02e:	4790      	blx	r2
 800e030:	2102      	movs	r1, #2
 800e032:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800e036:	a802      	add	r0, sp, #8
 800e038:	4798      	blx	r3
 800e03a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e03e:	f401 407c 	and.w	r0, r1, #64512	; 0xfc00
 800e042:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 800e046:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800e04a:	ea42 1350 	orr.w	r3, r2, r0, lsr #5
 800e04e:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 800e052:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
 800e056:	3d01      	subs	r5, #1
 800e058:	f826 2b02 	strh.w	r2, [r6], #2
 800e05c:	d1e8      	bne.n	800e030 <_ReadRect_16bpp_B16_I+0x30>
 800e05e:	b007      	add	sp, #28
 800e060:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e062 <_ReadRect_16bpp_B8>:
 800e062:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e064:	b085      	sub	sp, #20
 800e066:	6884      	ldr	r4, [r0, #8]
 800e068:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e06a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e06c:	9700      	str	r7, [sp, #0]
 800e06e:	1a58      	subs	r0, r3, r1
 800e070:	1abd      	subs	r5, r7, r2
 800e072:	3001      	adds	r0, #1
 800e074:	3501      	adds	r5, #1
 800e076:	4345      	muls	r5, r0
 800e078:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800e07c:	4620      	mov	r0, r4
 800e07e:	47b8      	blx	r7
 800e080:	202e      	movs	r0, #46	; 0x2e
 800e082:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800e086:	4798      	blx	r3
 800e088:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800e08c:	6a21      	ldr	r1, [r4, #32]
 800e08e:	a802      	add	r0, sp, #8
 800e090:	4790      	blx	r2
 800e092:	2103      	movs	r1, #3
 800e094:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800e098:	a802      	add	r0, sp, #8
 800e09a:	4798      	blx	r3
 800e09c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e0a0:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800e0a4:	08d3      	lsrs	r3, r2, #3
 800e0a6:	0888      	lsrs	r0, r1, #2
 800e0a8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800e0ac:	02d9      	lsls	r1, r3, #11
 800e0ae:	ea41 1040 	orr.w	r0, r1, r0, lsl #5
 800e0b2:	ea40 03d2 	orr.w	r3, r0, r2, lsr #3
 800e0b6:	3d01      	subs	r5, #1
 800e0b8:	f826 3b02 	strh.w	r3, [r6], #2
 800e0bc:	d1e9      	bne.n	800e092 <_ReadRect_16bpp_B8+0x30>
 800e0be:	b005      	add	sp, #20
 800e0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e0c4 <GUIDRV_FlexColor_SetFunc66709>:
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	f000 fda8 	bl	800ec1c <GUIDRV_FlexColor__InitOnce>
 800e0cc:	68a3      	ldr	r3, [r4, #8]
 800e0ce:	4a12      	ldr	r2, [pc, #72]	; (800e118 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 800e0d0:	4912      	ldr	r1, [pc, #72]	; (800e11c <GUIDRV_FlexColor_SetFunc66709+0x58>)
 800e0d2:	4813      	ldr	r0, [pc, #76]	; (800e120 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 800e0d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800e0d8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 800e0dc:	4a11      	ldr	r2, [pc, #68]	; (800e124 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 800e0de:	4912      	ldr	r1, [pc, #72]	; (800e128 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 800e0e0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800e0ea:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
 800e0ee:	680a      	ldr	r2, [r1, #0]
 800e0f0:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 800e0f4:	480d      	ldr	r0, [pc, #52]	; (800e12c <GUIDRV_FlexColor_SetFunc66709+0x68>)
 800e0f6:	490e      	ldr	r1, [pc, #56]	; (800e130 <GUIDRV_FlexColor_SetFunc66709+0x6c>)
 800e0f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800e0fc:	6802      	ldr	r2, [r0, #0]
 800e0fe:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 800e102:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800e104:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800e108:	4a0a      	ldr	r2, [pc, #40]	; (800e134 <GUIDRV_FlexColor_SetFunc66709+0x70>)
 800e10a:	f021 0003 	bic.w	r0, r1, #3
 800e10e:	84d8      	strh	r0, [r3, #38]	; 0x26
 800e110:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800e114:	bd10      	pop	{r4, pc}
 800e116:	bf00      	nop
 800e118:	0800dd99 	.word	0x0800dd99
 800e11c:	0800dee5 	.word	0x0800dee5
 800e120:	0800de3b 	.word	0x0800de3b
 800e124:	0800df21 	.word	0x0800df21
 800e128:	20000268 	.word	0x20000268
 800e12c:	2000026c 	.word	0x2000026c
 800e130:	0800e063 	.word	0x0800e063
 800e134:	0800dfd1 	.word	0x0800dfd1

0800e138 <_ReadData>:
 800e138:	b508      	push	{r3, lr}
 800e13a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800e13e:	4798      	blx	r3
 800e140:	bd08      	pop	{r3, pc}

0800e142 <_WriteData>:
 800e142:	b508      	push	{r3, lr}
 800e144:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800e148:	b288      	uxth	r0, r1
 800e14a:	4798      	blx	r3
 800e14c:	bd08      	pop	{r3, pc}
	...

0800e150 <_DrawBitmap>:
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	b08d      	sub	sp, #52	; 0x34
 800e156:	469a      	mov	sl, r3
 800e158:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800e15a:	6884      	ldr	r4, [r0, #8]
 800e15c:	9009      	str	r0, [sp, #36]	; 0x24
 800e15e:	1e6b      	subs	r3, r5, #1
 800e160:	2b01      	cmp	r3, #1
 800e162:	9108      	str	r1, [sp, #32]
 800e164:	920a      	str	r2, [sp, #40]	; 0x28
 800e166:	940b      	str	r4, [sp, #44]	; 0x2c
 800e168:	d903      	bls.n	800e172 <_DrawBitmap+0x22>
 800e16a:	2d04      	cmp	r5, #4
 800e16c:	d001      	beq.n	800e172 <_DrawBitmap+0x22>
 800e16e:	2d08      	cmp	r5, #8
 800e170:	d106      	bne.n	800e180 <_DrawBitmap+0x30>
 800e172:	4891      	ldr	r0, [pc, #580]	; (800e3b8 <_DrawBitmap+0x268>)
 800e174:	6801      	ldr	r1, [r0, #0]
 800e176:	7c0a      	ldrb	r2, [r1, #16]
 800e178:	f002 0703 	and.w	r7, r2, #3
 800e17c:	2f02      	cmp	r7, #2
 800e17e:	d010      	beq.n	800e1a2 <_DrawBitmap+0x52>
 800e180:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e182:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e184:	9d08      	ldr	r5, [sp, #32]
 800e186:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800e188:	183a      	adds	r2, r7, r0
 800e18a:	1929      	adds	r1, r5, r4
 800e18c:	1e55      	subs	r5, r2, #1
 800e18e:	9500      	str	r5, [sp, #0]
 800e190:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e192:	eb01 030a 	add.w	r3, r1, sl
 800e196:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800e19a:	4628      	mov	r0, r5
 800e19c:	463a      	mov	r2, r7
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	47a0      	blx	r4
 800e1a2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800e1a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e1a8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800e1aa:	ebc7 010b 	rsb	r1, r7, fp
 800e1ae:	42a1      	cmp	r1, r4
 800e1b0:	f280 825b 	bge.w	800e66a <_DrawBitmap+0x51a>
 800e1b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1b6:	1e5f      	subs	r7, r3, #1
 800e1b8:	2f0f      	cmp	r7, #15
 800e1ba:	f200 824f 	bhi.w	800e65c <_DrawBitmap+0x50c>
 800e1be:	e8df f017 	tbh	[pc, r7, lsl #1]
 800e1c2:	0010      	.short	0x0010
 800e1c4:	024d00ba 	.word	0x024d00ba
 800e1c8:	024d0145 	.word	0x024d0145
 800e1cc:	024d024d 	.word	0x024d024d
 800e1d0:	024d01df 	.word	0x024d01df
 800e1d4:	024d024d 	.word	0x024d024d
 800e1d8:	024d024d 	.word	0x024d024d
 800e1dc:	024d024d 	.word	0x024d024d
 800e1e0:	0247      	.short	0x0247
 800e1e2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e1e4:	4d74      	ldr	r5, [pc, #464]	; (800e3b8 <_DrawBitmap+0x268>)
 800e1e6:	6872      	ldr	r2, [r6, #4]
 800e1e8:	6837      	ldr	r7, [r6, #0]
 800e1ea:	682e      	ldr	r6, [r5, #0]
 800e1ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e1ee:	9207      	str	r2, [sp, #28]
 800e1f0:	9808      	ldr	r0, [sp, #32]
 800e1f2:	7c32      	ldrb	r2, [r6, #16]
 800e1f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e1f6:	1843      	adds	r3, r0, r1
 800e1f8:	f002 0103 	and.w	r1, r2, #3
 800e1fc:	2902      	cmp	r1, #2
 800e1fe:	68a4      	ldr	r4, [r4, #8]
 800e200:	9305      	str	r3, [sp, #20]
 800e202:	d01d      	beq.n	800e240 <_DrawBitmap+0xf0>
 800e204:	2903      	cmp	r1, #3
 800e206:	d070      	beq.n	800e2ea <_DrawBitmap+0x19a>
 800e208:	2901      	cmp	r1, #1
 800e20a:	d06e      	beq.n	800e2ea <_DrawBitmap+0x19a>
 800e20c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800e20e:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800e212:	4656      	mov	r6, sl
 800e214:	f898 1000 	ldrb.w	r1, [r8]
 800e218:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e21c:	2280      	movs	r2, #128	; 0x80
 800e21e:	fa42 f205 	asr.w	r2, r2, r5
 800e222:	4211      	tst	r1, r2
 800e224:	bf16      	itet	ne
 800e226:	9907      	ldrne	r1, [sp, #28]
 800e228:	b2b8      	uxtheq	r0, r7
 800e22a:	b288      	uxthne	r0, r1
 800e22c:	3501      	adds	r5, #1
 800e22e:	4798      	blx	r3
 800e230:	2d08      	cmp	r5, #8
 800e232:	bf04      	itt	eq
 800e234:	f108 0801 	addeq.w	r8, r8, #1
 800e238:	2500      	moveq	r5, #0
 800e23a:	3e01      	subs	r6, #1
 800e23c:	d1ea      	bne.n	800e214 <_DrawBitmap+0xc4>
 800e23e:	e20d      	b.n	800e65c <_DrawBitmap+0x50c>
 800e240:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800e242:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e246:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e248:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e24c:	9606      	str	r6, [sp, #24]
 800e24e:	2500      	movs	r5, #0
 800e250:	9203      	str	r2, [sp, #12]
 800e252:	464e      	mov	r6, r9
 800e254:	462b      	mov	r3, r5
 800e256:	9803      	ldr	r0, [sp, #12]
 800e258:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800e25c:	7801      	ldrb	r1, [r0, #0]
 800e25e:	fa4c f708 	asr.w	r7, ip, r8
 800e262:	ea11 0c07 	ands.w	ip, r1, r7
 800e266:	d00b      	beq.n	800e280 <_DrawBitmap+0x130>
 800e268:	b913      	cbnz	r3, 800e270 <_DrawBitmap+0x120>
 800e26a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e26c:	46b1      	mov	r9, r6
 800e26e:	9006      	str	r0, [sp, #24]
 800e270:	9906      	ldr	r1, [sp, #24]
 800e272:	9b07      	ldr	r3, [sp, #28]
 800e274:	f821 3b02 	strh.w	r3, [r1], #2
 800e278:	3501      	adds	r5, #1
 800e27a:	9106      	str	r1, [sp, #24]
 800e27c:	2301      	movs	r3, #1
 800e27e:	e017      	b.n	800e2b0 <_DrawBitmap+0x160>
 800e280:	2b01      	cmp	r3, #1
 800e282:	d114      	bne.n	800e2ae <_DrawBitmap+0x15e>
 800e284:	f8cd b000 	str.w	fp, [sp]
 800e288:	1e73      	subs	r3, r6, #1
 800e28a:	f8cd c010 	str.w	ip, [sp, #16]
 800e28e:	4620      	mov	r0, r4
 800e290:	4649      	mov	r1, r9
 800e292:	465a      	mov	r2, fp
 800e294:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800e298:	47b8      	blx	r7
 800e29a:	4629      	mov	r1, r5
 800e29c:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e2a0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e2a2:	4790      	blx	r2
 800e2a4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e2a8:	4665      	mov	r5, ip
 800e2aa:	4663      	mov	r3, ip
 800e2ac:	e000      	b.n	800e2b0 <_DrawBitmap+0x160>
 800e2ae:	4663      	mov	r3, ip
 800e2b0:	f108 0801 	add.w	r8, r8, #1
 800e2b4:	3601      	adds	r6, #1
 800e2b6:	f1b8 0f08 	cmp.w	r8, #8
 800e2ba:	d104      	bne.n	800e2c6 <_DrawBitmap+0x176>
 800e2bc:	9f03      	ldr	r7, [sp, #12]
 800e2be:	1c7a      	adds	r2, r7, #1
 800e2c0:	9203      	str	r2, [sp, #12]
 800e2c2:	f04f 0800 	mov.w	r8, #0
 800e2c6:	9805      	ldr	r0, [sp, #20]
 800e2c8:	eb00 010a 	add.w	r1, r0, sl
 800e2cc:	42b1      	cmp	r1, r6
 800e2ce:	d1c2      	bne.n	800e256 <_DrawBitmap+0x106>
 800e2d0:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e2d4:	18c3      	adds	r3, r0, r3
 800e2d6:	2d00      	cmp	r5, #0
 800e2d8:	f000 81c0 	beq.w	800e65c <_DrawBitmap+0x50c>
 800e2dc:	f8cd b000 	str.w	fp, [sp]
 800e2e0:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	4649      	mov	r1, r9
 800e2e8:	e143      	b.n	800e572 <_DrawBitmap+0x422>
 800e2ea:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800e2ec:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e2ee:	46d0      	mov	r8, sl
 800e2f0:	2380      	movs	r3, #128	; 0x80
 800e2f2:	9805      	ldr	r0, [sp, #20]
 800e2f4:	782f      	ldrb	r7, [r5, #0]
 800e2f6:	fa43 f306 	asr.w	r3, r3, r6
 800e2fa:	eb00 090a 	add.w	r9, r0, sl
 800e2fe:	421f      	tst	r7, r3
 800e300:	ebc8 0909 	rsb	r9, r8, r9
 800e304:	d00e      	beq.n	800e324 <_DrawBitmap+0x1d4>
 800e306:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
 800e30a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e30c:	4649      	mov	r1, r9
 800e30e:	465a      	mov	r2, fp
 800e310:	47b8      	blx	r7
 800e312:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e314:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 800e318:	ea80 0301 	eor.w	r3, r0, r1
 800e31c:	465a      	mov	r2, fp
 800e31e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e320:	4649      	mov	r1, r9
 800e322:	47b8      	blx	r7
 800e324:	3601      	adds	r6, #1
 800e326:	2e08      	cmp	r6, #8
 800e328:	d101      	bne.n	800e32e <_DrawBitmap+0x1de>
 800e32a:	3501      	adds	r5, #1
 800e32c:	2600      	movs	r6, #0
 800e32e:	f1b8 0801 	subs.w	r8, r8, #1
 800e332:	d1dd      	bne.n	800e2f0 <_DrawBitmap+0x1a0>
 800e334:	e192      	b.n	800e65c <_DrawBitmap+0x50c>
 800e336:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e338:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e33a:	68a4      	ldr	r4, [r4, #8]
 800e33c:	2a00      	cmp	r2, #0
 800e33e:	f000 818d 	beq.w	800e65c <_DrawBitmap+0x50c>
 800e342:	491d      	ldr	r1, [pc, #116]	; (800e3b8 <_DrawBitmap+0x268>)
 800e344:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e346:	680f      	ldr	r7, [r1, #0]
 800e348:	7803      	ldrb	r3, [r0, #0]
 800e34a:	7c3d      	ldrb	r5, [r7, #16]
 800e34c:	9305      	str	r3, [sp, #20]
 800e34e:	f015 0203 	ands.w	r2, r5, #3
 800e352:	d012      	beq.n	800e37a <_DrawBitmap+0x22a>
 800e354:	2a02      	cmp	r2, #2
 800e356:	f040 8181 	bne.w	800e65c <_DrawBitmap+0x50c>
 800e35a:	9e08      	ldr	r6, [sp, #32]
 800e35c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800e35e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e360:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e362:	9307      	str	r3, [sp, #28]
 800e364:	eb06 0900 	add.w	r9, r6, r0
 800e368:	2500      	movs	r5, #0
 800e36a:	f8cd 900c 	str.w	r9, [sp, #12]
 800e36e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e372:	9106      	str	r1, [sp, #24]
 800e374:	464e      	mov	r6, r9
 800e376:	462b      	mov	r3, r5
 800e378:	e040      	b.n	800e3fc <_DrawBitmap+0x2ac>
 800e37a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800e37c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e37e:	4656      	mov	r6, sl
 800e380:	f1c5 0103 	rsb	r1, r5, #3
 800e384:	004b      	lsls	r3, r1, #1
 800e386:	f1c3 0006 	rsb	r0, r3, #6
 800e38a:	22c0      	movs	r2, #192	; 0xc0
 800e38c:	9905      	ldr	r1, [sp, #20]
 800e38e:	fa42 f200 	asr.w	r2, r2, r0
 800e392:	400a      	ands	r2, r1
 800e394:	fa22 f203 	lsr.w	r2, r2, r3
 800e398:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e39a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e39e:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
 800e3a2:	3501      	adds	r5, #1
 800e3a4:	4798      	blx	r3
 800e3a6:	2d04      	cmp	r5, #4
 800e3a8:	d103      	bne.n	800e3b2 <_DrawBitmap+0x262>
 800e3aa:	787d      	ldrb	r5, [r7, #1]
 800e3ac:	3701      	adds	r7, #1
 800e3ae:	9505      	str	r5, [sp, #20]
 800e3b0:	2500      	movs	r5, #0
 800e3b2:	3e01      	subs	r6, #1
 800e3b4:	d1e4      	bne.n	800e380 <_DrawBitmap+0x230>
 800e3b6:	e151      	b.n	800e65c <_DrawBitmap+0x50c>
 800e3b8:	2000027c 	.word	0x2000027c
 800e3bc:	b913      	cbnz	r3, 800e3c4 <_DrawBitmap+0x274>
 800e3be:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e3c0:	9603      	str	r6, [sp, #12]
 800e3c2:	9107      	str	r1, [sp, #28]
 800e3c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e3c6:	9f07      	ldr	r7, [sp, #28]
 800e3c8:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
 800e3cc:	f827 3b02 	strh.w	r3, [r7], #2
 800e3d0:	3501      	adds	r5, #1
 800e3d2:	9707      	str	r7, [sp, #28]
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	f108 0801 	add.w	r8, r8, #1
 800e3da:	3601      	adds	r6, #1
 800e3dc:	f1b8 0f04 	cmp.w	r8, #4
 800e3e0:	d107      	bne.n	800e3f2 <_DrawBitmap+0x2a2>
 800e3e2:	9a06      	ldr	r2, [sp, #24]
 800e3e4:	9806      	ldr	r0, [sp, #24]
 800e3e6:	7851      	ldrb	r1, [r2, #1]
 800e3e8:	1c47      	adds	r7, r0, #1
 800e3ea:	9105      	str	r1, [sp, #20]
 800e3ec:	9706      	str	r7, [sp, #24]
 800e3ee:	f04f 0800 	mov.w	r8, #0
 800e3f2:	eb09 020a 	add.w	r2, r9, sl
 800e3f6:	42b2      	cmp	r2, r6
 800e3f8:	f000 80b0 	beq.w	800e55c <_DrawBitmap+0x40c>
 800e3fc:	f1c8 0703 	rsb	r7, r8, #3
 800e400:	007a      	lsls	r2, r7, #1
 800e402:	f1c2 0006 	rsb	r0, r2, #6
 800e406:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800e40a:	9f05      	ldr	r7, [sp, #20]
 800e40c:	fa4c f100 	asr.w	r1, ip, r0
 800e410:	ea01 0007 	and.w	r0, r1, r7
 800e414:	fa30 fc02 	lsrs.w	ip, r0, r2
 800e418:	d1d0      	bne.n	800e3bc <_DrawBitmap+0x26c>
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d114      	bne.n	800e448 <_DrawBitmap+0x2f8>
 800e41e:	f8cd b000 	str.w	fp, [sp]
 800e422:	1e73      	subs	r3, r6, #1
 800e424:	f8cd c010 	str.w	ip, [sp, #16]
 800e428:	4620      	mov	r0, r4
 800e42a:	9903      	ldr	r1, [sp, #12]
 800e42c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800e430:	465a      	mov	r2, fp
 800e432:	47b8      	blx	r7
 800e434:	4629      	mov	r1, r5
 800e436:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e43a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e43c:	4790      	blx	r2
 800e43e:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e442:	4665      	mov	r5, ip
 800e444:	4663      	mov	r3, ip
 800e446:	e7c6      	b.n	800e3d6 <_DrawBitmap+0x286>
 800e448:	4663      	mov	r3, ip
 800e44a:	e7c4      	b.n	800e3d6 <_DrawBitmap+0x286>
 800e44c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e44e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e450:	6884      	ldr	r4, [r0, #8]
 800e452:	2a00      	cmp	r2, #0
 800e454:	f000 8102 	beq.w	800e65c <_DrawBitmap+0x50c>
 800e458:	4b85      	ldr	r3, [pc, #532]	; (800e670 <_DrawBitmap+0x520>)
 800e45a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e45c:	681f      	ldr	r7, [r3, #0]
 800e45e:	7829      	ldrb	r1, [r5, #0]
 800e460:	7c38      	ldrb	r0, [r7, #16]
 800e462:	9105      	str	r1, [sp, #20]
 800e464:	f010 0203 	ands.w	r2, r0, #3
 800e468:	d012      	beq.n	800e490 <_DrawBitmap+0x340>
 800e46a:	2a02      	cmp	r2, #2
 800e46c:	f040 80f6 	bne.w	800e65c <_DrawBitmap+0x50c>
 800e470:	9e08      	ldr	r6, [sp, #32]
 800e472:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800e474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e476:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e478:	9306      	str	r3, [sp, #24]
 800e47a:	eb06 0905 	add.w	r9, r6, r5
 800e47e:	2500      	movs	r5, #0
 800e480:	9107      	str	r1, [sp, #28]
 800e482:	f8cd 900c 	str.w	r9, [sp, #12]
 800e486:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e48a:	464e      	mov	r6, r9
 800e48c:	462b      	mov	r3, r5
 800e48e:	e03d      	b.n	800e50c <_DrawBitmap+0x3bc>
 800e490:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800e492:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e494:	4656      	mov	r6, sl
 800e496:	f1c5 0301 	rsb	r3, r5, #1
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	f1c3 0004 	rsb	r0, r3, #4
 800e4a0:	21f0      	movs	r1, #240	; 0xf0
 800e4a2:	fa41 f200 	asr.w	r2, r1, r0
 800e4a6:	9805      	ldr	r0, [sp, #20]
 800e4a8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e4aa:	4002      	ands	r2, r0
 800e4ac:	fa22 f203 	lsr.w	r2, r2, r3
 800e4b0:	3501      	adds	r5, #1
 800e4b2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e4b6:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800e4ba:	4798      	blx	r3
 800e4bc:	2d02      	cmp	r5, #2
 800e4be:	d103      	bne.n	800e4c8 <_DrawBitmap+0x378>
 800e4c0:	787d      	ldrb	r5, [r7, #1]
 800e4c2:	3701      	adds	r7, #1
 800e4c4:	9505      	str	r5, [sp, #20]
 800e4c6:	2500      	movs	r5, #0
 800e4c8:	3e01      	subs	r6, #1
 800e4ca:	d1e4      	bne.n	800e496 <_DrawBitmap+0x346>
 800e4cc:	e0c6      	b.n	800e65c <_DrawBitmap+0x50c>
 800e4ce:	b913      	cbnz	r3, 800e4d6 <_DrawBitmap+0x386>
 800e4d0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e4d2:	9603      	str	r6, [sp, #12]
 800e4d4:	9007      	str	r0, [sp, #28]
 800e4d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e4d8:	9f07      	ldr	r7, [sp, #28]
 800e4da:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800e4de:	f827 3b02 	strh.w	r3, [r7], #2
 800e4e2:	3501      	adds	r5, #1
 800e4e4:	9707      	str	r7, [sp, #28]
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	f108 0801 	add.w	r8, r8, #1
 800e4ec:	3601      	adds	r6, #1
 800e4ee:	f1b8 0f02 	cmp.w	r8, #2
 800e4f2:	d107      	bne.n	800e504 <_DrawBitmap+0x3b4>
 800e4f4:	9a06      	ldr	r2, [sp, #24]
 800e4f6:	9906      	ldr	r1, [sp, #24]
 800e4f8:	7850      	ldrb	r0, [r2, #1]
 800e4fa:	1c4f      	adds	r7, r1, #1
 800e4fc:	9005      	str	r0, [sp, #20]
 800e4fe:	9706      	str	r7, [sp, #24]
 800e500:	f04f 0800 	mov.w	r8, #0
 800e504:	eb09 020a 	add.w	r2, r9, sl
 800e508:	42b2      	cmp	r2, r6
 800e50a:	d027      	beq.n	800e55c <_DrawBitmap+0x40c>
 800e50c:	f1c8 0701 	rsb	r7, r8, #1
 800e510:	00b8      	lsls	r0, r7, #2
 800e512:	f1c0 0204 	rsb	r2, r0, #4
 800e516:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800e51a:	9f05      	ldr	r7, [sp, #20]
 800e51c:	fa4c f102 	asr.w	r1, ip, r2
 800e520:	ea01 0207 	and.w	r2, r1, r7
 800e524:	fa32 fc00 	lsrs.w	ip, r2, r0
 800e528:	d1d1      	bne.n	800e4ce <_DrawBitmap+0x37e>
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d114      	bne.n	800e558 <_DrawBitmap+0x408>
 800e52e:	f8cd b000 	str.w	fp, [sp]
 800e532:	1e73      	subs	r3, r6, #1
 800e534:	f8cd c010 	str.w	ip, [sp, #16]
 800e538:	4620      	mov	r0, r4
 800e53a:	9903      	ldr	r1, [sp, #12]
 800e53c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800e540:	465a      	mov	r2, fp
 800e542:	47b8      	blx	r7
 800e544:	4629      	mov	r1, r5
 800e546:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e54a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e54c:	4790      	blx	r2
 800e54e:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e552:	4665      	mov	r5, ip
 800e554:	4663      	mov	r3, ip
 800e556:	e7c7      	b.n	800e4e8 <_DrawBitmap+0x398>
 800e558:	4663      	mov	r3, ip
 800e55a:	e7c5      	b.n	800e4e8 <_DrawBitmap+0x398>
 800e55c:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e560:	444b      	add	r3, r9
 800e562:	2d00      	cmp	r5, #0
 800e564:	d07a      	beq.n	800e65c <_DrawBitmap+0x50c>
 800e566:	f8cd b000 	str.w	fp, [sp]
 800e56a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800e56e:	9903      	ldr	r1, [sp, #12]
 800e570:	4620      	mov	r0, r4
 800e572:	465a      	mov	r2, fp
 800e574:	47b0      	blx	r6
 800e576:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e57a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e57c:	4629      	mov	r1, r5
 800e57e:	e06c      	b.n	800e65a <_DrawBitmap+0x50a>
 800e580:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e582:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e584:	68ac      	ldr	r4, [r5, #8]
 800e586:	2900      	cmp	r1, #0
 800e588:	d068      	beq.n	800e65c <_DrawBitmap+0x50c>
 800e58a:	4b39      	ldr	r3, [pc, #228]	; (800e670 <_DrawBitmap+0x520>)
 800e58c:	681f      	ldr	r7, [r3, #0]
 800e58e:	7c38      	ldrb	r0, [r7, #16]
 800e590:	f010 0203 	ands.w	r2, r0, #3
 800e594:	d009      	beq.n	800e5aa <_DrawBitmap+0x45a>
 800e596:	2a02      	cmp	r2, #2
 800e598:	d160      	bne.n	800e65c <_DrawBitmap+0x50c>
 800e59a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e59e:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800e5a2:	2600      	movs	r6, #0
 800e5a4:	464f      	mov	r7, r9
 800e5a6:	4633      	mov	r3, r6
 800e5a8:	e020      	b.n	800e5ec <_DrawBitmap+0x49c>
 800e5aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e5ac:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e5ae:	eb01 000a 	add.w	r0, r1, sl
 800e5b2:	1b42      	subs	r2, r0, r5
 800e5b4:	2a00      	cmp	r2, #0
 800e5b6:	dd51      	ble.n	800e65c <_DrawBitmap+0x50c>
 800e5b8:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e5bc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e5be:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e5c2:	f837 0021 	ldrh.w	r0, [r7, r1, lsl #2]
 800e5c6:	4798      	blx	r3
 800e5c8:	e7f0      	b.n	800e5ac <_DrawBitmap+0x45c>
 800e5ca:	b913      	cbnz	r3, 800e5d2 <_DrawBitmap+0x482>
 800e5cc:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800e5d0:	46b9      	mov	r9, r7
 800e5d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e5d4:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
 800e5d8:	f82c 0b02 	strh.w	r0, [ip], #2
 800e5dc:	3601      	adds	r6, #1
 800e5de:	2301      	movs	r3, #1
 800e5e0:	9d08      	ldr	r5, [sp, #32]
 800e5e2:	3701      	adds	r7, #1
 800e5e4:	eb0a 0205 	add.w	r2, sl, r5
 800e5e8:	42ba      	cmp	r2, r7
 800e5ea:	d020      	beq.n	800e62e <_DrawBitmap+0x4de>
 800e5ec:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e5ee:	9908      	ldr	r1, [sp, #32]
 800e5f0:	1a68      	subs	r0, r5, r1
 800e5f2:	f810 8007 	ldrb.w	r8, [r0, r7]
 800e5f6:	f1b8 0f00 	cmp.w	r8, #0
 800e5fa:	d1e6      	bne.n	800e5ca <_DrawBitmap+0x47a>
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d114      	bne.n	800e62a <_DrawBitmap+0x4da>
 800e600:	f8cd b000 	str.w	fp, [sp]
 800e604:	1e7b      	subs	r3, r7, #1
 800e606:	f8cd c010 	str.w	ip, [sp, #16]
 800e60a:	4620      	mov	r0, r4
 800e60c:	4649      	mov	r1, r9
 800e60e:	465a      	mov	r2, fp
 800e610:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800e614:	47a8      	blx	r5
 800e616:	4631      	mov	r1, r6
 800e618:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e61c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e61e:	4790      	blx	r2
 800e620:	4646      	mov	r6, r8
 800e622:	4643      	mov	r3, r8
 800e624:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e628:	e7da      	b.n	800e5e0 <_DrawBitmap+0x490>
 800e62a:	4643      	mov	r3, r8
 800e62c:	e7d8      	b.n	800e5e0 <_DrawBitmap+0x490>
 800e62e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e632:	18eb      	adds	r3, r5, r3
 800e634:	b196      	cbz	r6, 800e65c <_DrawBitmap+0x50c>
 800e636:	f8cd b000 	str.w	fp, [sp]
 800e63a:	4620      	mov	r0, r4
 800e63c:	4649      	mov	r1, r9
 800e63e:	465a      	mov	r2, fp
 800e640:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800e644:	47b8      	blx	r7
 800e646:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e64a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e64c:	4631      	mov	r1, r6
 800e64e:	e004      	b.n	800e65a <_DrawBitmap+0x50a>
 800e650:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e652:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 800e656:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e658:	4651      	mov	r1, sl
 800e65a:	4790      	blx	r2
 800e65c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800e65e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800e660:	1967      	adds	r7, r4, r5
 800e662:	9719      	str	r7, [sp, #100]	; 0x64
 800e664:	f10b 0b01 	add.w	fp, fp, #1
 800e668:	e59d      	b.n	800e1a6 <_DrawBitmap+0x56>
 800e66a:	b00d      	add	sp, #52	; 0x34
 800e66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	2000027c 	.word	0x2000027c

0800e674 <_FillRect>:
 800e674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e678:	4f38      	ldr	r7, [pc, #224]	; (800e75c <_FillRect+0xe8>)
 800e67a:	6884      	ldr	r4, [r0, #8]
 800e67c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800e680:	4682      	mov	sl, r0
 800e682:	6838      	ldr	r0, [r7, #0]
 800e684:	7c00      	ldrb	r0, [r0, #16]
 800e686:	07c0      	lsls	r0, r0, #31
 800e688:	460e      	mov	r6, r1
 800e68a:	4615      	mov	r5, r2
 800e68c:	4698      	mov	r8, r3
 800e68e:	d53d      	bpl.n	800e70c <_FillRect+0x98>
 800e690:	454d      	cmp	r5, r9
 800e692:	dc61      	bgt.n	800e758 <_FillRect+0xe4>
 800e694:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 800e698:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800e69a:	f1bc 0f00 	cmp.w	ip, #0
 800e69e:	d101      	bne.n	800e6a4 <_FillRect+0x30>
 800e6a0:	46b3      	mov	fp, r6
 800e6a2:	e007      	b.n	800e6b4 <_FillRect+0x40>
 800e6a4:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800e6a8:	4650      	mov	r0, sl
 800e6aa:	4631      	mov	r1, r6
 800e6ac:	462a      	mov	r2, r5
 800e6ae:	4643      	mov	r3, r8
 800e6b0:	47e0      	blx	ip
 800e6b2:	e00d      	b.n	800e6d0 <_FillRect+0x5c>
 800e6b4:	45c3      	cmp	fp, r8
 800e6b6:	dc0a      	bgt.n	800e6ce <_FillRect+0x5a>
 800e6b8:	4659      	mov	r1, fp
 800e6ba:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e6be:	4650      	mov	r0, sl
 800e6c0:	462a      	mov	r2, r5
 800e6c2:	4798      	blx	r3
 800e6c4:	f10b 0b01 	add.w	fp, fp, #1
 800e6c8:	f827 0b02 	strh.w	r0, [r7], #2
 800e6cc:	e7f2      	b.n	800e6b4 <_FillRect+0x40>
 800e6ce:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800e6d0:	ebc6 0108 	rsb	r1, r6, r8
 800e6d4:	f101 0b01 	add.w	fp, r1, #1
 800e6d8:	3f02      	subs	r7, #2
 800e6da:	465b      	mov	r3, fp
 800e6dc:	b13b      	cbz	r3, 800e6ee <_FillRect+0x7a>
 800e6de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e6e0:	8879      	ldrh	r1, [r7, #2]
 800e6e2:	ea81 0200 	eor.w	r2, r1, r0
 800e6e6:	f827 2f02 	strh.w	r2, [r7, #2]!
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	e7f6      	b.n	800e6dc <_FillRect+0x68>
 800e6ee:	9500      	str	r5, [sp, #0]
 800e6f0:	462a      	mov	r2, r5
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	4631      	mov	r1, r6
 800e6f6:	4643      	mov	r3, r8
 800e6f8:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800e6fc:	47b8      	blx	r7
 800e6fe:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e702:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e704:	4659      	mov	r1, fp
 800e706:	4790      	blx	r2
 800e708:	3501      	adds	r5, #1
 800e70a:	e7c1      	b.n	800e690 <_FillRect+0x1c>
 800e70c:	1a5e      	subs	r6, r3, r1
 800e70e:	ebc2 0509 	rsb	r5, r2, r9
 800e712:	1c70      	adds	r0, r6, #1
 800e714:	f8cd 9000 	str.w	r9, [sp]
 800e718:	3501      	adds	r5, #1
 800e71a:	4345      	muls	r5, r0
 800e71c:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800e720:	4620      	mov	r0, r4
 800e722:	47b0      	blx	r6
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 800e728:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e72a:	f8d1 8000 	ldr.w	r8, [r1]
 800e72e:	2001      	movs	r0, #1
 800e730:	b195      	cbz	r5, 800e758 <_FillRect+0xe4>
 800e732:	2dfa      	cmp	r5, #250	; 0xfa
 800e734:	bf34      	ite	cc
 800e736:	462e      	movcc	r6, r5
 800e738:	26fa      	movcs	r6, #250	; 0xfa
 800e73a:	b128      	cbz	r0, 800e748 <_FillRect+0xd4>
 800e73c:	4638      	mov	r0, r7
 800e73e:	fa1f f188 	uxth.w	r1, r8
 800e742:	4632      	mov	r2, r6
 800e744:	f000 fffb 	bl	800f73e <GUI__memset16>
 800e748:	4638      	mov	r0, r7
 800e74a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e74e:	4631      	mov	r1, r6
 800e750:	4790      	blx	r2
 800e752:	1bad      	subs	r5, r5, r6
 800e754:	2000      	movs	r0, #0
 800e756:	e7eb      	b.n	800e730 <_FillRect+0xbc>
 800e758:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75c:	2000027c 	.word	0x2000027c

0800e760 <GUIDRV_FlexColor_SetMode16bppC0B16>:
 800e760:	b510      	push	{r4, lr}
 800e762:	4604      	mov	r4, r0
 800e764:	f000 fa5a 	bl	800ec1c <GUIDRV_FlexColor__InitOnce>
 800e768:	68a4      	ldr	r4, [r4, #8]
 800e76a:	4b10      	ldr	r3, [pc, #64]	; (800e7ac <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 800e76c:	4810      	ldr	r0, [pc, #64]	; (800e7b0 <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 800e76e:	4911      	ldr	r1, [pc, #68]	; (800e7b4 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 800e770:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800e774:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
 800e778:	4b0f      	ldr	r3, [pc, #60]	; (800e7b8 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 800e77a:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
 800e77e:	4a0f      	ldr	r2, [pc, #60]	; (800e7bc <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 800e780:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800e784:	480e      	ldr	r0, [pc, #56]	; (800e7c0 <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 800e786:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 800e78a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800e78e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 800e792:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
 800e796:	4620      	mov	r0, r4
 800e798:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800e79c:	2110      	movs	r1, #16
 800e79e:	4790      	blx	r2
 800e7a0:	4808      	ldr	r0, [pc, #32]	; (800e7c4 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 800e7a2:	2310      	movs	r3, #16
 800e7a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7a6:	6460      	str	r0, [r4, #68]	; 0x44
 800e7a8:	bd10      	pop	{r4, pc}
 800e7aa:	bf00      	nop
 800e7ac:	0800e151 	.word	0x0800e151
 800e7b0:	0800e675 	.word	0x0800e675
 800e7b4:	0800eb67 	.word	0x0800eb67
 800e7b8:	0800e139 	.word	0x0800e139
 800e7bc:	0800ead3 	.word	0x0800ead3
 800e7c0:	0800e143 	.word	0x0800e143
 800e7c4:	0802f950 	.word	0x0802f950

0800e7c8 <_Log2PhysX_X0Y0S0>:
 800e7c8:	4608      	mov	r0, r1
 800e7ca:	4770      	bx	lr

0800e7cc <_Log2PhysX_X1Y0S0>:
 800e7cc:	6800      	ldr	r0, [r0, #0]
 800e7ce:	1a41      	subs	r1, r0, r1
 800e7d0:	1e48      	subs	r0, r1, #1
 800e7d2:	4770      	bx	lr

0800e7d4 <_Log2PhysX_X0Y1S0>:
 800e7d4:	4608      	mov	r0, r1
 800e7d6:	4770      	bx	lr

0800e7d8 <_Log2PhysX_X1Y1S0>:
 800e7d8:	6800      	ldr	r0, [r0, #0]
 800e7da:	1a41      	subs	r1, r0, r1
 800e7dc:	1e48      	subs	r0, r1, #1
 800e7de:	4770      	bx	lr

0800e7e0 <_Log2PhysX_X0Y0S1>:
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	4770      	bx	lr

0800e7e4 <_Log2PhysX_X1Y0S1>:
 800e7e4:	6840      	ldr	r0, [r0, #4]
 800e7e6:	1a81      	subs	r1, r0, r2
 800e7e8:	1e48      	subs	r0, r1, #1
 800e7ea:	4770      	bx	lr

0800e7ec <_Log2PhysX_X0Y1S1>:
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4770      	bx	lr

0800e7f0 <_Log2PhysX_X1Y1S1>:
 800e7f0:	6840      	ldr	r0, [r0, #4]
 800e7f2:	1a81      	subs	r1, r0, r2
 800e7f4:	1e48      	subs	r0, r1, #1
 800e7f6:	4770      	bx	lr

0800e7f8 <_Log2PhysY_X0Y0S0>:
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	4770      	bx	lr

0800e7fc <_Log2PhysY_X1Y0S0>:
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	4770      	bx	lr

0800e800 <_Log2PhysY_X0Y1S0>:
 800e800:	6840      	ldr	r0, [r0, #4]
 800e802:	1a81      	subs	r1, r0, r2
 800e804:	1e48      	subs	r0, r1, #1
 800e806:	4770      	bx	lr

0800e808 <_Log2PhysY_X1Y1S0>:
 800e808:	6840      	ldr	r0, [r0, #4]
 800e80a:	1a81      	subs	r1, r0, r2
 800e80c:	1e48      	subs	r0, r1, #1
 800e80e:	4770      	bx	lr

0800e810 <_Log2PhysY_X0Y0S1>:
 800e810:	4608      	mov	r0, r1
 800e812:	4770      	bx	lr

0800e814 <_Log2PhysY_X1Y0S1>:
 800e814:	4608      	mov	r0, r1
 800e816:	4770      	bx	lr

0800e818 <_Log2PhysY_X0Y1S1>:
 800e818:	6800      	ldr	r0, [r0, #0]
 800e81a:	1a41      	subs	r1, r0, r1
 800e81c:	1e48      	subs	r0, r1, #1
 800e81e:	4770      	bx	lr

0800e820 <_Log2PhysY_X1Y1S1>:
 800e820:	6800      	ldr	r0, [r0, #0]
 800e822:	1a41      	subs	r1, r0, r1
 800e824:	1e48      	subs	r0, r1, #1
 800e826:	4770      	bx	lr

0800e828 <_SetPixelIndex>:
 800e828:	b510      	push	{r4, lr}
 800e82a:	6884      	ldr	r4, [r0, #8]
 800e82c:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800e830:	47a0      	blx	r4
 800e832:	bd10      	pop	{r4, pc}

0800e834 <_GetPixelIndex>:
 800e834:	b508      	push	{r3, lr}
 800e836:	6883      	ldr	r3, [r0, #8]
 800e838:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e83c:	4798      	blx	r3
 800e83e:	bd08      	pop	{r3, pc}

0800e840 <_XorPixel>:
 800e840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e842:	4604      	mov	r4, r0
 800e844:	460f      	mov	r7, r1
 800e846:	4616      	mov	r6, r2
 800e848:	6885      	ldr	r5, [r0, #8]
 800e84a:	f7ff fff3 	bl	800e834 <_GetPixelIndex>
 800e84e:	9001      	str	r0, [sp, #4]
 800e850:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e854:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e856:	4620      	mov	r0, r4
 800e858:	4639      	mov	r1, r7
 800e85a:	4632      	mov	r2, r6
 800e85c:	ea8e 0303 	eor.w	r3, lr, r3
 800e860:	f7ff ffe2 	bl	800e828 <_SetPixelIndex>
 800e864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800e866 <_DrawHLine>:
 800e866:	b513      	push	{r0, r1, r4, lr}
 800e868:	6884      	ldr	r4, [r0, #8]
 800e86a:	9200      	str	r2, [sp, #0]
 800e86c:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800e870:	47a0      	blx	r4
 800e872:	bd1c      	pop	{r2, r3, r4, pc}

0800e874 <_DrawVLine>:
 800e874:	b513      	push	{r0, r1, r4, lr}
 800e876:	6884      	ldr	r4, [r0, #8]
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800e87e:	460b      	mov	r3, r1
 800e880:	47a0      	blx	r4
 800e882:	bd1c      	pop	{r2, r3, r4, pc}

0800e884 <_FillRect>:
 800e884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e886:	9c06      	ldr	r4, [sp, #24]
 800e888:	6885      	ldr	r5, [r0, #8]
 800e88a:	9400      	str	r4, [sp, #0]
 800e88c:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800e890:	47a0      	blx	r4
 800e892:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800e894 <_DrawBitmap>:
 800e894:	b530      	push	{r4, r5, lr}
 800e896:	b087      	sub	sp, #28
 800e898:	6885      	ldr	r5, [r0, #8]
 800e89a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e89c:	9400      	str	r4, [sp, #0]
 800e89e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e8a0:	9401      	str	r4, [sp, #4]
 800e8a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e8a4:	9402      	str	r4, [sp, #8]
 800e8a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e8a8:	9403      	str	r4, [sp, #12]
 800e8aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e8ac:	9404      	str	r4, [sp, #16]
 800e8ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e8b0:	9405      	str	r4, [sp, #20]
 800e8b2:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 800e8b6:	47a0      	blx	r4
 800e8b8:	b007      	add	sp, #28
 800e8ba:	bd30      	pop	{r4, r5, pc}

0800e8bc <_GetDevFunc_SetRect>:
 800e8bc:	4770      	bx	lr
	...

0800e8c0 <_GetDevFunc_SetRectOutside>:
 800e8c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8c2:	9e07      	ldr	r6, [sp, #28]
 800e8c4:	6884      	ldr	r4, [r0, #8]
 800e8c6:	4d0b      	ldr	r5, [pc, #44]	; (800e8f4 <_GetDevFunc_SetRectOutside+0x34>)
 800e8c8:	b176      	cbz	r6, 800e8e8 <_GetDevFunc_SetRectOutside+0x28>
 800e8ca:	6828      	ldr	r0, [r5, #0]
 800e8cc:	b988      	cbnz	r0, 800e8f2 <_GetDevFunc_SetRectOutside+0x32>
 800e8ce:	9e06      	ldr	r6, [sp, #24]
 800e8d0:	9600      	str	r6, [sp, #0]
 800e8d2:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	47b0      	blx	r6
 800e8da:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800e8de:	4a06      	ldr	r2, [pc, #24]	; (800e8f8 <_GetDevFunc_SetRectOutside+0x38>)
 800e8e0:	6029      	str	r1, [r5, #0]
 800e8e2:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 800e8e6:	e004      	b.n	800e8f2 <_GetDevFunc_SetRectOutside+0x32>
 800e8e8:	682b      	ldr	r3, [r5, #0]
 800e8ea:	b113      	cbz	r3, 800e8f2 <_GetDevFunc_SetRectOutside+0x32>
 800e8ec:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800e8f0:	602e      	str	r6, [r5, #0]
 800e8f2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800e8f4:	20016e24 	.word	0x20016e24
 800e8f8:	0800e8bd 	.word	0x0800e8bd

0800e8fc <_ReadPixelCust_16bpp>:
 800e8fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e8fe:	b508      	push	{r3, lr}
 800e900:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 800e904:	6990      	ldr	r0, [r2, #24]
 800e906:	4798      	blx	r3
 800e908:	bd08      	pop	{r3, pc}

0800e90a <_ReadPixelCust_18bpp>:
 800e90a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e90c:	b508      	push	{r3, lr}
 800e90e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800e912:	6990      	ldr	r0, [r2, #24]
 800e914:	4798      	blx	r3
 800e916:	bd08      	pop	{r3, pc}

0800e918 <_ReadRectCust_16bpp>:
 800e918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e91c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e91e:	6884      	ldr	r4, [r0, #8]
 800e920:	9500      	str	r5, [sp, #0]
 800e922:	4688      	mov	r8, r1
 800e924:	4617      	mov	r7, r2
 800e926:	4699      	mov	r9, r3
 800e928:	4620      	mov	r0, r4
 800e92a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800e92e:	47b0      	blx	r6
 800e930:	1bed      	subs	r5, r5, r7
 800e932:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e934:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800e938:	ebc8 0009 	rsb	r0, r8, r9
 800e93c:	f100 0801 	add.w	r8, r0, #1
 800e940:	1c6a      	adds	r2, r5, #1
 800e942:	6988      	ldr	r0, [r1, #24]
 800e944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e946:	fb02 f208 	mul.w	r2, r2, r8
 800e94a:	4798      	blx	r3
 800e94c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800e950 <_ReadRectCust_18bpp>:
 800e950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e954:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e956:	6884      	ldr	r4, [r0, #8]
 800e958:	9500      	str	r5, [sp, #0]
 800e95a:	4688      	mov	r8, r1
 800e95c:	4617      	mov	r7, r2
 800e95e:	4699      	mov	r9, r3
 800e960:	4620      	mov	r0, r4
 800e962:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800e966:	47b0      	blx	r6
 800e968:	1bed      	subs	r5, r5, r7
 800e96a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e96c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e970:	ebc8 0009 	rsb	r0, r8, r9
 800e974:	f100 0801 	add.w	r8, r0, #1
 800e978:	1c6a      	adds	r2, r5, #1
 800e97a:	6988      	ldr	r0, [r1, #24]
 800e97c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e97e:	fb02 f208 	mul.w	r2, r2, r8
 800e982:	4798      	blx	r3
 800e984:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800e988 <_GetDevFunc>:
 800e988:	3901      	subs	r1, #1
 800e98a:	2917      	cmp	r1, #23
 800e98c:	d824      	bhi.n	800e9d8 <_GetDevFunc+0x50>
 800e98e:	e8df f001 	tbb	[pc, r1]
 800e992:	2310      	.short	0x2310
 800e994:	23232323 	.word	0x23232323
 800e998:	0c232323 	.word	0x0c232323
 800e99c:	23150e25 	.word	0x23150e25
 800e9a0:	23232323 	.word	0x23232323
 800e9a4:	1f232323 	.word	0x1f232323
 800e9a8:	211a      	.short	0x211a
 800e9aa:	480d      	ldr	r0, [pc, #52]	; (800e9e0 <_GetDevFunc+0x58>)
 800e9ac:	4770      	bx	lr
 800e9ae:	480d      	ldr	r0, [pc, #52]	; (800e9e4 <_GetDevFunc+0x5c>)
 800e9b0:	4770      	bx	lr
 800e9b2:	6803      	ldr	r3, [r0, #0]
 800e9b4:	6898      	ldr	r0, [r3, #8]
 800e9b6:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800e9ba:	4770      	bx	lr
 800e9bc:	6802      	ldr	r2, [r0, #0]
 800e9be:	6891      	ldr	r1, [r2, #8]
 800e9c0:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
 800e9c4:	4770      	bx	lr
 800e9c6:	6803      	ldr	r3, [r0, #0]
 800e9c8:	6898      	ldr	r0, [r3, #8]
 800e9ca:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 800e9ce:	4770      	bx	lr
 800e9d0:	4805      	ldr	r0, [pc, #20]	; (800e9e8 <_GetDevFunc+0x60>)
 800e9d2:	4770      	bx	lr
 800e9d4:	4805      	ldr	r0, [pc, #20]	; (800e9ec <_GetDevFunc+0x64>)
 800e9d6:	4770      	bx	lr
 800e9d8:	2000      	movs	r0, #0
 800e9da:	4770      	bx	lr
 800e9dc:	4804      	ldr	r0, [pc, #16]	; (800e9f0 <_GetDevFunc+0x68>)
 800e9de:	4770      	bx	lr
 800e9e0:	0800ed4b 	.word	0x0800ed4b
 800e9e4:	0800eced 	.word	0x0800eced
 800e9e8:	0800ec51 	.word	0x0800ec51
 800e9ec:	0800e8c1 	.word	0x0800e8c1
 800e9f0:	0800ed37 	.word	0x0800ed37

0800e9f4 <_GetDevProp>:
 800e9f4:	3901      	subs	r1, #1
 800e9f6:	6880      	ldr	r0, [r0, #8]
 800e9f8:	290d      	cmp	r1, #13
 800e9fa:	d826      	bhi.n	800ea4a <_GetDevProp+0x56>
 800e9fc:	e8df f001 	tbb	[pc, r1]
 800ea00:	0f0d0b09 	.word	0x0f0d0b09
 800ea04:	11252525 	.word	0x11252525
 800ea08:	13282807 	.word	0x13282807
 800ea0c:	1f19      	.short	0x1f19
 800ea0e:	2000      	movs	r0, #0
 800ea10:	4770      	bx	lr
 800ea12:	6800      	ldr	r0, [r0, #0]
 800ea14:	4770      	bx	lr
 800ea16:	6840      	ldr	r0, [r0, #4]
 800ea18:	4770      	bx	lr
 800ea1a:	6880      	ldr	r0, [r0, #8]
 800ea1c:	4770      	bx	lr
 800ea1e:	68c0      	ldr	r0, [r0, #12]
 800ea20:	4770      	bx	lr
 800ea22:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ea24:	4770      	bx	lr
 800ea26:	b1a0      	cbz	r0, 800ea52 <_GetDevProp+0x5e>
 800ea28:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ea2a:	f012 0001 	ands.w	r0, r2, #1
 800ea2e:	d010      	beq.n	800ea52 <_GetDevProp+0x5e>
 800ea30:	e00e      	b.n	800ea50 <_GetDevProp+0x5c>
 800ea32:	b170      	cbz	r0, 800ea52 <_GetDevProp+0x5e>
 800ea34:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ea36:	f010 0002 	ands.w	r0, r0, #2
 800ea3a:	d109      	bne.n	800ea50 <_GetDevProp+0x5c>
 800ea3c:	4770      	bx	lr
 800ea3e:	b140      	cbz	r0, 800ea52 <_GetDevProp+0x5e>
 800ea40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea42:	f013 0004 	ands.w	r0, r3, #4
 800ea46:	d103      	bne.n	800ea50 <_GetDevProp+0x5c>
 800ea48:	4770      	bx	lr
 800ea4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea4e:	4770      	bx	lr
 800ea50:	2001      	movs	r0, #1
 800ea52:	4770      	bx	lr

0800ea54 <_GetDevData>:
 800ea54:	6883      	ldr	r3, [r0, #8]
 800ea56:	2901      	cmp	r1, #1
 800ea58:	bf0c      	ite	eq
 800ea5a:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800ea5c:	2000      	movne	r0, #0
 800ea5e:	4770      	bx	lr

0800ea60 <_GetRect>:
 800ea60:	6883      	ldr	r3, [r0, #8]
 800ea62:	6818      	ldr	r0, [r3, #0]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	800a      	strh	r2, [r1, #0]
 800ea6a:	804a      	strh	r2, [r1, #2]
 800ea6c:	1e42      	subs	r2, r0, #1
 800ea6e:	1e58      	subs	r0, r3, #1
 800ea70:	808a      	strh	r2, [r1, #4]
 800ea72:	80c8      	strh	r0, [r1, #6]
 800ea74:	4770      	bx	lr
	...

0800ea78 <GUIDRV_FlexColor__SetLog2Phys>:
 800ea78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea7a:	4d10      	ldr	r5, [pc, #64]	; (800eabc <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800ea7c:	462e      	mov	r6, r5
 800ea7e:	4607      	mov	r7, r0
 800ea80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea82:	b091      	sub	sp, #68	; 0x44
 800ea84:	466c      	mov	r4, sp
 800ea86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea88:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800ea8c:	3520      	adds	r5, #32
 800ea8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ea92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea94:	ac08      	add	r4, sp, #32
 800ea96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ea9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaa2:	aa10      	add	r2, sp, #64	; 0x40
 800eaa4:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 800eaa8:	f850 1c40 	ldr.w	r1, [r0, #-64]
 800eaac:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800eab0:	f850 3c20 	ldr.w	r3, [r0, #-32]
 800eab4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800eab8:	b011      	add	sp, #68	; 0x44
 800eaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eabc:	0801b120 	.word	0x0801b120

0800eac0 <_SetOrg>:
 800eac0:	b507      	push	{r0, r1, r2, lr}
 800eac2:	6980      	ldr	r0, [r0, #24]
 800eac4:	e88d 0006 	stmia.w	sp, {r1, r2}
 800eac8:	2103      	movs	r1, #3
 800eaca:	466a      	mov	r2, sp
 800eacc:	f7f4 f82c 	bl	8002b28 <LCD_X_DisplayDriver>
 800ead0:	bd0e      	pop	{r1, r2, r3, pc}

0800ead2 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800ead2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ead6:	6884      	ldr	r4, [r0, #8]
 800ead8:	4698      	mov	r8, r3
 800eada:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800eadc:	f003 0002 	and.w	r0, r3, #2
 800eae0:	b285      	uxth	r5, r0
 800eae2:	4689      	mov	r9, r1
 800eae4:	4617      	mov	r7, r2
 800eae6:	2d00      	cmp	r5, #0
 800eae8:	d032      	beq.n	800eb50 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x7e>
 800eaea:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 800eaee:	4620      	mov	r0, r4
 800eaf0:	47b0      	blx	r6
 800eaf2:	463a      	mov	r2, r7
 800eaf4:	4606      	mov	r6, r0
 800eaf6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800eafa:	4649      	mov	r1, r9
 800eafc:	4620      	mov	r0, r4
 800eafe:	4798      	blx	r3
 800eb00:	6921      	ldr	r1, [r4, #16]
 800eb02:	69a2      	ldr	r2, [r4, #24]
 800eb04:	428e      	cmp	r6, r1
 800eb06:	4605      	mov	r5, r0
 800eb08:	bfac      	ite	ge
 800eb0a:	2100      	movge	r1, #0
 800eb0c:	2101      	movlt	r1, #1
 800eb0e:	6960      	ldr	r0, [r4, #20]
 800eb10:	4296      	cmp	r6, r2
 800eb12:	bfd4      	ite	le
 800eb14:	460f      	movle	r7, r1
 800eb16:	f041 0701 	orrgt.w	r7, r1, #1
 800eb1a:	4285      	cmp	r5, r0
 800eb1c:	bfac      	ite	ge
 800eb1e:	463b      	movge	r3, r7
 800eb20:	f047 0301 	orrlt.w	r3, r7, #1
 800eb24:	b913      	cbnz	r3, 800eb2c <GUIDRV_FlexColor__SetPixelIndexNoCache+0x5a>
 800eb26:	69e2      	ldr	r2, [r4, #28]
 800eb28:	4295      	cmp	r5, r2
 800eb2a:	dd0a      	ble.n	800eb42 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 800eb2c:	6861      	ldr	r1, [r4, #4]
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	1e4f      	subs	r7, r1, #1
 800eb32:	9700      	str	r7, [sp, #0]
 800eb34:	2100      	movs	r1, #0
 800eb36:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	460a      	mov	r2, r1
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	47b8      	blx	r7
 800eb42:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800eb46:	4620      	mov	r0, r4
 800eb48:	4631      	mov	r1, r6
 800eb4a:	462a      	mov	r2, r5
 800eb4c:	47b8      	blx	r7
 800eb4e:	e003      	b.n	800eb58 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x86>
 800eb50:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800eb54:	4620      	mov	r0, r4
 800eb56:	47a8      	blx	r5
 800eb58:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	4641      	mov	r1, r8
 800eb60:	4790      	blx	r2
 800eb62:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800eb66 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800eb66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb68:	6884      	ldr	r4, [r0, #8]
 800eb6a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800eb6c:	f003 0002 	and.w	r0, r3, #2
 800eb70:	b285      	uxth	r5, r0
 800eb72:	460f      	mov	r7, r1
 800eb74:	4616      	mov	r6, r2
 800eb76:	2d00      	cmp	r5, #0
 800eb78:	d045      	beq.n	800ec06 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa0>
 800eb7a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 800eb7e:	4620      	mov	r0, r4
 800eb80:	47a8      	blx	r5
 800eb82:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800eb86:	4632      	mov	r2, r6
 800eb88:	4605      	mov	r5, r0
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	4798      	blx	r3
 800eb90:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800eb94:	4606      	mov	r6, r0
 800eb96:	b11b      	cbz	r3, 800eba0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x3a>
 800eb98:	4620      	mov	r0, r4
 800eb9a:	2101      	movs	r1, #1
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	4798      	blx	r3
 800eba0:	6920      	ldr	r0, [r4, #16]
 800eba2:	69a2      	ldr	r2, [r4, #24]
 800eba4:	6963      	ldr	r3, [r4, #20]
 800eba6:	4285      	cmp	r5, r0
 800eba8:	bfac      	ite	ge
 800ebaa:	2000      	movge	r0, #0
 800ebac:	2001      	movlt	r0, #1
 800ebae:	4295      	cmp	r5, r2
 800ebb0:	bfd4      	ite	le
 800ebb2:	4601      	movle	r1, r0
 800ebb4:	f040 0101 	orrgt.w	r1, r0, #1
 800ebb8:	429e      	cmp	r6, r3
 800ebba:	bfac      	ite	ge
 800ebbc:	460a      	movge	r2, r1
 800ebbe:	f041 0201 	orrlt.w	r2, r1, #1
 800ebc2:	b912      	cbnz	r2, 800ebca <GUIDRV_FlexColor__GetPixelIndexNoCache+0x64>
 800ebc4:	69e0      	ldr	r0, [r4, #28]
 800ebc6:	4286      	cmp	r6, r0
 800ebc8:	dd0a      	ble.n	800ebe0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x7a>
 800ebca:	6867      	ldr	r7, [r4, #4]
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	1e79      	subs	r1, r7, #1
 800ebd0:	9100      	str	r1, [sp, #0]
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800ebd8:	4620      	mov	r0, r4
 800ebda:	460a      	mov	r2, r1
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	47b8      	blx	r7
 800ebe0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	4632      	mov	r2, r6
 800ebea:	4798      	blx	r3
 800ebec:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	47a8      	blx	r5
 800ebf4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	b16b      	cbz	r3, 800ec18 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xb2>
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	2100      	movs	r1, #0
 800ec00:	2201      	movs	r2, #1
 800ec02:	4798      	blx	r3
 800ec04:	e008      	b.n	800ec18 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xb2>
 800ec06:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	4798      	blx	r3
 800ec0e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800ec12:	4620      	mov	r0, r4
 800ec14:	4788      	blx	r1
 800ec16:	4605      	mov	r5, r0
 800ec18:	4628      	mov	r0, r5
 800ec1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800ec1c <GUIDRV_FlexColor__InitOnce>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	6885      	ldr	r5, [r0, #8]
 800ec20:	4604      	mov	r4, r0
 800ec22:	b995      	cbnz	r5, 800ec4a <GUIDRV_FlexColor__InitOnce+0x2e>
 800ec24:	f44f 70ba 	mov.w	r0, #372	; 0x174
 800ec28:	f002 ffde 	bl	8011be8 <GUI_ALLOC_GetFixedBlock>
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	60a0      	str	r0, [r4, #8]
 800ec30:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800ec34:	f000 fdb0 	bl	800f798 <GUI__memset>
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	4904      	ldr	r1, [pc, #16]	; (800ec4c <GUIDRV_FlexColor__InitOnce+0x30>)
 800ec3c:	641c      	str	r4, [r3, #64]	; 0x40
 800ec3e:	2202      	movs	r2, #2
 800ec40:	2001      	movs	r0, #1
 800ec42:	84da      	strh	r2, [r3, #38]	; 0x26
 800ec44:	6218      	str	r0, [r3, #32]
 800ec46:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 800ec4a:	bd38      	pop	{r3, r4, r5, pc}
 800ec4c:	0800ea79 	.word	0x0800ea79

0800ec50 <_SetDevFunc>:
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	4606      	mov	r6, r0
 800ec54:	460d      	mov	r5, r1
 800ec56:	4614      	mov	r4, r2
 800ec58:	f7ff ffe0 	bl	800ec1c <GUIDRV_FlexColor__InitOnce>
 800ec5c:	68b3      	ldr	r3, [r6, #8]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d03a      	beq.n	800ecd8 <_SetDevFunc+0x88>
 800ec62:	2d26      	cmp	r5, #38	; 0x26
 800ec64:	d002      	beq.n	800ec6c <_SetDevFunc+0x1c>
 800ec66:	2d27      	cmp	r5, #39	; 0x27
 800ec68:	d136      	bne.n	800ecd8 <_SetDevFunc+0x88>
 800ec6a:	e014      	b.n	800ec96 <_SetDevFunc+0x46>
 800ec6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec6e:	2a10      	cmp	r2, #16
 800ec70:	d009      	beq.n	800ec86 <_SetDevFunc+0x36>
 800ec72:	2a12      	cmp	r2, #18
 800ec74:	d130      	bne.n	800ecd8 <_SetDevFunc+0x88>
 800ec76:	4819      	ldr	r0, [pc, #100]	; (800ecdc <_SetDevFunc+0x8c>)
 800ec78:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800ec7c:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
 800ec80:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 800ec84:	bd70      	pop	{r4, r5, r6, pc}
 800ec86:	4916      	ldr	r1, [pc, #88]	; (800ece0 <_SetDevFunc+0x90>)
 800ec88:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800ec8c:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
 800ec90:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800ec94:	bd70      	pop	{r4, r5, r6, pc}
 800ec96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec98:	2a10      	cmp	r2, #16
 800ec9a:	d002      	beq.n	800eca2 <_SetDevFunc+0x52>
 800ec9c:	2a12      	cmp	r2, #18
 800ec9e:	d11b      	bne.n	800ecd8 <_SetDevFunc+0x88>
 800eca0:	e00d      	b.n	800ecbe <_SetDevFunc+0x6e>
 800eca2:	b13c      	cbz	r4, 800ecb4 <_SetDevFunc+0x64>
 800eca4:	490f      	ldr	r1, [pc, #60]	; (800ece4 <_SetDevFunc+0x94>)
 800eca6:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800ecaa:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 800ecae:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 800ecb2:	bd70      	pop	{r4, r5, r6, pc}
 800ecb4:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800ecb8:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 800ecbc:	bd70      	pop	{r4, r5, r6, pc}
 800ecbe:	b13c      	cbz	r4, 800ecd0 <_SetDevFunc+0x80>
 800ecc0:	4809      	ldr	r0, [pc, #36]	; (800ece8 <_SetDevFunc+0x98>)
 800ecc2:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800ecc6:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 800ecca:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
 800ecce:	bd70      	pop	{r4, r5, r6, pc}
 800ecd0:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800ecd4:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800ecd8:	bd70      	pop	{r4, r5, r6, pc}
 800ecda:	bf00      	nop
 800ecdc:	0800e90b 	.word	0x0800e90b
 800ece0:	0800e8fd 	.word	0x0800e8fd
 800ece4:	0800e919 	.word	0x0800e919
 800ece8:	0800e951 	.word	0x0800e951

0800ecec <_GetDevFunc_Init>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4605      	mov	r5, r0
 800ecf0:	f7ff ff94 	bl	800ec1c <GUIDRV_FlexColor__InitOnce>
 800ecf4:	68ac      	ldr	r4, [r5, #8]
 800ecf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ecfa:	f002 ff75 	bl	8011be8 <GUI_ALLOC_GetFixedBlock>
 800ecfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed00:	6821      	ldr	r1, [r4, #0]
 800ed02:	66a0      	str	r0, [r4, #104]	; 0x68
 800ed04:	1dd8      	adds	r0, r3, #7
 800ed06:	10c0      	asrs	r0, r0, #3
 800ed08:	4348      	muls	r0, r1
 800ed0a:	f002 ff6d 	bl	8011be8 <GUI_ALLOC_GetFixedBlock>
 800ed0e:	2101      	movs	r1, #1
 800ed10:	66e0      	str	r0, [r4, #108]	; 0x6c
 800ed12:	2200      	movs	r2, #0
 800ed14:	69a8      	ldr	r0, [r5, #24]
 800ed16:	f7f3 ff07 	bl	8002b28 <LCD_X_DisplayDriver>
 800ed1a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 800ed1e:	4605      	mov	r5, r0
 800ed20:	4620      	mov	r0, r4
 800ed22:	4790      	blx	r2
 800ed24:	4620      	mov	r0, r4
 800ed26:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800ed2a:	4798      	blx	r3
 800ed2c:	2d00      	cmp	r5, #0
 800ed2e:	bfd4      	ite	le
 800ed30:	2000      	movle	r0, #0
 800ed32:	2001      	movgt	r0, #1
 800ed34:	bd38      	pop	{r3, r4, r5, pc}

0800ed36 <_GetDevFunc_SetSize>:
 800ed36:	b570      	push	{r4, r5, r6, lr}
 800ed38:	4604      	mov	r4, r0
 800ed3a:	460d      	mov	r5, r1
 800ed3c:	4616      	mov	r6, r2
 800ed3e:	f7ff ff6d 	bl	800ec1c <GUIDRV_FlexColor__InitOnce>
 800ed42:	68a3      	ldr	r3, [r4, #8]
 800ed44:	e883 0060 	stmia.w	r3, {r5, r6}
 800ed48:	bd70      	pop	{r4, r5, r6, pc}

0800ed4a <_GetDevFunc_SetVSize>:
 800ed4a:	b570      	push	{r4, r5, r6, lr}
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	460d      	mov	r5, r1
 800ed50:	4616      	mov	r6, r2
 800ed52:	f7ff ff63 	bl	800ec1c <GUIDRV_FlexColor__InitOnce>
 800ed56:	68a3      	ldr	r3, [r4, #8]
 800ed58:	609d      	str	r5, [r3, #8]
 800ed5a:	60de      	str	r6, [r3, #12]
 800ed5c:	bd70      	pop	{r4, r5, r6, pc}

0800ed5e <GUIDRV_FlexColor_Config>:
 800ed5e:	b538      	push	{r3, r4, r5, lr}
 800ed60:	460c      	mov	r4, r1
 800ed62:	4605      	mov	r5, r0
 800ed64:	f7ff ff5a 	bl	800ec1c <GUIDRV_FlexColor__InitOnce>
 800ed68:	6822      	ldr	r2, [r4, #0]
 800ed6a:	68ab      	ldr	r3, [r5, #8]
 800ed6c:	68a1      	ldr	r1, [r4, #8]
 800ed6e:	6860      	ldr	r0, [r4, #4]
 800ed70:	62da      	str	r2, [r3, #44]	; 0x2c
 800ed72:	074a      	lsls	r2, r1, #29
 800ed74:	6318      	str	r0, [r3, #48]	; 0x30
 800ed76:	6359      	str	r1, [r3, #52]	; 0x34
 800ed78:	d507      	bpl.n	800ed8a <GUIDRV_FlexColor_Config+0x2c>
 800ed7a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ed7e:	6898      	ldr	r0, [r3, #8]
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	68da      	ldr	r2, [r3, #12]
 800ed84:	6059      	str	r1, [r3, #4]
 800ed86:	609a      	str	r2, [r3, #8]
 800ed88:	60d8      	str	r0, [r3, #12]
 800ed8a:	89a1      	ldrh	r1, [r4, #12]
 800ed8c:	6920      	ldr	r0, [r4, #16]
 800ed8e:	8499      	strh	r1, [r3, #36]	; 0x24
 800ed90:	b110      	cbz	r0, 800ed98 <GUIDRV_FlexColor_Config+0x3a>
 800ed92:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 800ed96:	621a      	str	r2, [r3, #32]
 800ed98:	bd38      	pop	{r3, r4, r5, pc}

0800ed9a <GUIDRV_FlexColor_SetFunc>:
 800ed9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed9e:	4604      	mov	r4, r0
 800eda0:	461f      	mov	r7, r3
 800eda2:	4616      	mov	r6, r2
 800eda4:	4688      	mov	r8, r1
 800eda6:	f7ff ff39 	bl	800ec1c <GUIDRV_FlexColor__InitOnce>
 800edaa:	68a5      	ldr	r5, [r4, #8]
 800edac:	4641      	mov	r1, r8
 800edae:	2268      	movs	r2, #104	; 0x68
 800edb0:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 800edb4:	f7f1 f9e8 	bl	8000188 <memcpy>
 800edb8:	4620      	mov	r0, r4
 800edba:	47b0      	blx	r6
 800edbc:	4620      	mov	r0, r4
 800edbe:	47b8      	blx	r7
 800edc0:	6923      	ldr	r3, [r4, #16]
 800edc2:	6898      	ldr	r0, [r3, #8]
 800edc4:	4780      	blx	r0
 800edc6:	62a8      	str	r0, [r5, #40]	; 0x28
 800edc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800edcc <LCD_UpdateColorIndices>:
 800edcc:	b510      	push	{r4, lr}
 800edce:	4c07      	ldr	r4, [pc, #28]	; (800edec <LCD_UpdateColorIndices+0x20>)
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800edd4:	f000 fc3e 	bl	800f654 <LCD_Color2Index>
 800edd8:	f000 fc5c 	bl	800f694 <LCD_SetColorIndex>
 800eddc:	6820      	ldr	r0, [r4, #0]
 800edde:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ede0:	f000 fc38 	bl	800f654 <LCD_Color2Index>
 800ede4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede8:	f000 bc72 	b.w	800f6d0 <LCD_SetBkColorIndex>
 800edec:	2000027c 	.word	0x2000027c

0800edf0 <LCD_SetClipRectEx>:
 800edf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edf2:	4c09      	ldr	r4, [pc, #36]	; (800ee18 <LCD_SetClipRectEx+0x28>)
 800edf4:	6823      	ldr	r3, [r4, #0]
 800edf6:	4605      	mov	r5, r0
 800edf8:	7c5a      	ldrb	r2, [r3, #17]
 800edfa:	4808      	ldr	r0, [pc, #32]	; (800ee1c <LCD_SetClipRectEx+0x2c>)
 800edfc:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ee00:	68c1      	ldr	r1, [r0, #12]
 800ee02:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800ee04:	4669      	mov	r1, sp
 800ee06:	4798      	blx	r3
 800ee08:	6820      	ldr	r0, [r4, #0]
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	3008      	adds	r0, #8
 800ee0e:	466a      	mov	r2, sp
 800ee10:	f000 fda8 	bl	800f964 <GUI__IntersectRects>
 800ee14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800ee16:	bf00      	nop
 800ee18:	2000027c 	.word	0x2000027c
 800ee1c:	20017a04 	.word	0x20017a04

0800ee20 <LCD_SetVSizeEx>:
 800ee20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee22:	460d      	mov	r5, r1
 800ee24:	4614      	mov	r4, r2
 800ee26:	f002 f835 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800ee2a:	9001      	str	r0, [sp, #4]
 800ee2c:	b908      	cbnz	r0, 800ee32 <LCD_SetVSizeEx+0x12>
 800ee2e:	2001      	movs	r0, #1
 800ee30:	e00c      	b.n	800ee4c <LCD_SetVSizeEx+0x2c>
 800ee32:	68c3      	ldr	r3, [r0, #12]
 800ee34:	210a      	movs	r1, #10
 800ee36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee38:	a801      	add	r0, sp, #4
 800ee3a:	4790      	blx	r2
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d0f5      	beq.n	800ee2e <LCD_SetVSizeEx+0xe>
 800ee42:	9801      	ldr	r0, [sp, #4]
 800ee44:	4629      	mov	r1, r5
 800ee46:	4622      	mov	r2, r4
 800ee48:	4798      	blx	r3
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800ee4e <LCD_SetSizeEx>:
 800ee4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee50:	460d      	mov	r5, r1
 800ee52:	4614      	mov	r4, r2
 800ee54:	f002 f81e 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800ee58:	9001      	str	r0, [sp, #4]
 800ee5a:	b908      	cbnz	r0, 800ee60 <LCD_SetSizeEx+0x12>
 800ee5c:	2001      	movs	r0, #1
 800ee5e:	e00c      	b.n	800ee7a <LCD_SetSizeEx+0x2c>
 800ee60:	68c3      	ldr	r3, [r0, #12]
 800ee62:	210b      	movs	r1, #11
 800ee64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee66:	a801      	add	r0, sp, #4
 800ee68:	4790      	blx	r2
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d0f5      	beq.n	800ee5c <LCD_SetSizeEx+0xe>
 800ee70:	9801      	ldr	r0, [sp, #4]
 800ee72:	4629      	mov	r1, r5
 800ee74:	4622      	mov	r2, r4
 800ee76:	4798      	blx	r3
 800ee78:	2000      	movs	r0, #0
 800ee7a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800ee7c <LCD_SetLUTEntryEx>:
 800ee7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee7e:	460d      	mov	r5, r1
 800ee80:	4614      	mov	r4, r2
 800ee82:	f002 f807 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800ee86:	9001      	str	r0, [sp, #4]
 800ee88:	b908      	cbnz	r0, 800ee8e <LCD_SetLUTEntryEx+0x12>
 800ee8a:	2001      	movs	r0, #1
 800ee8c:	e00c      	b.n	800eea8 <LCD_SetLUTEntryEx+0x2c>
 800ee8e:	68c3      	ldr	r3, [r0, #12]
 800ee90:	2110      	movs	r1, #16
 800ee92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee94:	a801      	add	r0, sp, #4
 800ee96:	4790      	blx	r2
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d0f5      	beq.n	800ee8a <LCD_SetLUTEntryEx+0xe>
 800ee9e:	9801      	ldr	r0, [sp, #4]
 800eea0:	4629      	mov	r1, r5
 800eea2:	4622      	mov	r2, r4
 800eea4:	4798      	blx	r3
 800eea6:	2000      	movs	r0, #0
 800eea8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800eeaa <_GetDevProp>:
 800eeaa:	2801      	cmp	r0, #1
 800eeac:	b510      	push	{r4, lr}
 800eeae:	460c      	mov	r4, r1
 800eeb0:	dc08      	bgt.n	800eec4 <_GetDevProp+0x1a>
 800eeb2:	f001 ffef 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800eeb6:	b120      	cbz	r0, 800eec2 <_GetDevProp+0x18>
 800eeb8:	68c1      	ldr	r1, [r0, #12]
 800eeba:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800eebc:	4621      	mov	r1, r4
 800eebe:	4790      	blx	r2
 800eec0:	bd10      	pop	{r4, pc}
 800eec2:	bd10      	pop	{r4, pc}
 800eec4:	2000      	movs	r0, #0
 800eec6:	bd10      	pop	{r4, pc}

0800eec8 <_GetMaxValue>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4604      	mov	r4, r0
 800eecc:	4621      	mov	r1, r4
 800eece:	2001      	movs	r0, #1
 800eed0:	f7ff ffeb 	bl	800eeaa <_GetDevProp>
 800eed4:	4621      	mov	r1, r4
 800eed6:	4605      	mov	r5, r0
 800eed8:	2000      	movs	r0, #0
 800eeda:	f7ff ffe6 	bl	800eeaa <_GetDevProp>
 800eede:	42a8      	cmp	r0, r5
 800eee0:	bfb8      	it	lt
 800eee2:	4628      	movlt	r0, r5
 800eee4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800eee8:	bd38      	pop	{r3, r4, r5, pc}

0800eeea <LCD_GetXSizeEx>:
 800eeea:	2101      	movs	r1, #1
 800eeec:	f7ff bfdd 	b.w	800eeaa <_GetDevProp>

0800eef0 <LCD_GetYSizeEx>:
 800eef0:	2102      	movs	r1, #2
 800eef2:	f7ff bfda 	b.w	800eeaa <_GetDevProp>

0800eef6 <LCD_GetVXSizeEx>:
 800eef6:	2103      	movs	r1, #3
 800eef8:	f7ff bfd7 	b.w	800eeaa <_GetDevProp>

0800eefc <LCD_GetVYSizeEx>:
 800eefc:	2104      	movs	r1, #4
 800eefe:	f7ff bfd4 	b.w	800eeaa <_GetDevProp>

0800ef02 <LCD_GetBitsPerPixelEx>:
 800ef02:	2108      	movs	r1, #8
 800ef04:	f7ff bfd1 	b.w	800eeaa <_GetDevProp>

0800ef08 <LCD_GetNumColorsEx>:
 800ef08:	2109      	movs	r1, #9
 800ef0a:	f7ff bfce 	b.w	800eeaa <_GetDevProp>
	...

0800ef10 <LCD_GetXSize>:
 800ef10:	4b02      	ldr	r3, [pc, #8]	; (800ef1c <LCD_GetXSize+0xc>)
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	7c40      	ldrb	r0, [r0, #17]
 800ef16:	f7ff bfe8 	b.w	800eeea <LCD_GetXSizeEx>
 800ef1a:	bf00      	nop
 800ef1c:	2000027c 	.word	0x2000027c

0800ef20 <LCD_GetYSize>:
 800ef20:	4b02      	ldr	r3, [pc, #8]	; (800ef2c <LCD_GetYSize+0xc>)
 800ef22:	6818      	ldr	r0, [r3, #0]
 800ef24:	7c40      	ldrb	r0, [r0, #17]
 800ef26:	f7ff bfe3 	b.w	800eef0 <LCD_GetYSizeEx>
 800ef2a:	bf00      	nop
 800ef2c:	2000027c 	.word	0x2000027c

0800ef30 <LCD_GetNumColors>:
 800ef30:	4b02      	ldr	r3, [pc, #8]	; (800ef3c <LCD_GetNumColors+0xc>)
 800ef32:	6818      	ldr	r0, [r3, #0]
 800ef34:	7c40      	ldrb	r0, [r0, #17]
 800ef36:	f7ff bfe7 	b.w	800ef08 <LCD_GetNumColorsEx>
 800ef3a:	bf00      	nop
 800ef3c:	2000027c 	.word	0x2000027c

0800ef40 <GUI_GetBitsPerPixelEx>:
 800ef40:	b508      	push	{r3, lr}
 800ef42:	4b04      	ldr	r3, [pc, #16]	; (800ef54 <GUI_GetBitsPerPixelEx+0x14>)
 800ef44:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ef48:	68c1      	ldr	r1, [r0, #12]
 800ef4a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800ef4c:	2108      	movs	r1, #8
 800ef4e:	4790      	blx	r2
 800ef50:	bd08      	pop	{r3, pc}
 800ef52:	bf00      	nop
 800ef54:	20017a04 	.word	0x20017a04

0800ef58 <LCD_GetPaletteEx>:
 800ef58:	b508      	push	{r3, lr}
 800ef5a:	f001 ff9b 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800ef5e:	b120      	cbz	r0, 800ef6a <LCD_GetPaletteEx+0x12>
 800ef60:	68c1      	ldr	r1, [r0, #12]
 800ef62:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ef64:	2102      	movs	r1, #2
 800ef66:	4790      	blx	r2
 800ef68:	bd08      	pop	{r3, pc}
 800ef6a:	bd08      	pop	{r3, pc}

0800ef6c <LCD_GetPalette>:
 800ef6c:	4b02      	ldr	r3, [pc, #8]	; (800ef78 <LCD_GetPalette+0xc>)
 800ef6e:	6818      	ldr	r0, [r3, #0]
 800ef70:	7c40      	ldrb	r0, [r0, #17]
 800ef72:	f7ff bff1 	b.w	800ef58 <LCD_GetPaletteEx>
 800ef76:	bf00      	nop
 800ef78:	2000027c 	.word	0x2000027c

0800ef7c <GUI_GetpfIndex2ColorEx>:
 800ef7c:	4b02      	ldr	r3, [pc, #8]	; (800ef88 <GUI_GetpfIndex2ColorEx+0xc>)
 800ef7e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ef82:	6901      	ldr	r1, [r0, #16]
 800ef84:	6848      	ldr	r0, [r1, #4]
 800ef86:	4770      	bx	lr
 800ef88:	20017a04 	.word	0x20017a04

0800ef8c <GUI_GetpfColor2IndexEx>:
 800ef8c:	4b02      	ldr	r3, [pc, #8]	; (800ef98 <GUI_GetpfColor2IndexEx+0xc>)
 800ef8e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ef92:	6901      	ldr	r1, [r0, #16]
 800ef94:	6808      	ldr	r0, [r1, #0]
 800ef96:	4770      	bx	lr
 800ef98:	20017a04 	.word	0x20017a04

0800ef9c <LCD_GetVXSizeMax>:
 800ef9c:	2003      	movs	r0, #3
 800ef9e:	f7ff bf93 	b.w	800eec8 <_GetMaxValue>

0800efa2 <LCD__GetBPP>:
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d03d      	beq.n	800f022 <LCD__GetBPP+0x80>
 800efa6:	f030 0301 	bics.w	r3, r0, #1
 800efaa:	d02b      	beq.n	800f004 <LCD__GetBPP+0x62>
 800efac:	f030 0303 	bics.w	r3, r0, #3
 800efb0:	d02a      	beq.n	800f008 <LCD__GetBPP+0x66>
 800efb2:	f030 0307 	bics.w	r3, r0, #7
 800efb6:	d029      	beq.n	800f00c <LCD__GetBPP+0x6a>
 800efb8:	f030 030f 	bics.w	r3, r0, #15
 800efbc:	d028      	beq.n	800f010 <LCD__GetBPP+0x6e>
 800efbe:	f030 031f 	bics.w	r3, r0, #31
 800efc2:	d027      	beq.n	800f014 <LCD__GetBPP+0x72>
 800efc4:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800efc8:	d026      	beq.n	800f018 <LCD__GetBPP+0x76>
 800efca:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800efce:	f023 0101 	bic.w	r1, r3, #1
 800efd2:	2900      	cmp	r1, #0
 800efd4:	d022      	beq.n	800f01c <LCD__GetBPP+0x7a>
 800efd6:	f420 627f 	bic.w	r2, r0, #4080	; 0xff0
 800efda:	f022 030f 	bic.w	r3, r2, #15
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d01c      	beq.n	800f01c <LCD__GetBPP+0x7a>
 800efe2:	f420 41ff 	bic.w	r1, r0, #32640	; 0x7f80
 800efe6:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 800efea:	b1ba      	cbz	r2, 800f01c <LCD__GetBPP+0x7a>
 800efec:	0c03      	lsrs	r3, r0, #16
 800efee:	0419      	lsls	r1, r3, #16
 800eff0:	b1a1      	cbz	r1, 800f01c <LCD__GetBPP+0x7a>
 800eff2:	0c82      	lsrs	r2, r0, #18
 800eff4:	0493      	lsls	r3, r2, #18
 800eff6:	b19b      	cbz	r3, 800f020 <LCD__GetBPP+0x7e>
 800eff8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800effc:	bf0c      	ite	eq
 800effe:	2018      	moveq	r0, #24
 800f000:	2020      	movne	r0, #32
 800f002:	4770      	bx	lr
 800f004:	2001      	movs	r0, #1
 800f006:	4770      	bx	lr
 800f008:	2002      	movs	r0, #2
 800f00a:	4770      	bx	lr
 800f00c:	2003      	movs	r0, #3
 800f00e:	4770      	bx	lr
 800f010:	2004      	movs	r0, #4
 800f012:	4770      	bx	lr
 800f014:	2005      	movs	r0, #5
 800f016:	4770      	bx	lr
 800f018:	2008      	movs	r0, #8
 800f01a:	4770      	bx	lr
 800f01c:	2010      	movs	r0, #16
 800f01e:	4770      	bx	lr
 800f020:	2012      	movs	r0, #18
 800f022:	4770      	bx	lr

0800f024 <LCD__GetBPPDevice>:
 800f024:	b508      	push	{r3, lr}
 800f026:	f7ff ffbc 	bl	800efa2 <LCD__GetBPP>
 800f02a:	2801      	cmp	r0, #1
 800f02c:	d00f      	beq.n	800f04e <LCD__GetBPPDevice+0x2a>
 800f02e:	1e83      	subs	r3, r0, #2
 800f030:	2b06      	cmp	r3, #6
 800f032:	d909      	bls.n	800f048 <LCD__GetBPPDevice+0x24>
 800f034:	f1a0 0109 	sub.w	r1, r0, #9
 800f038:	2907      	cmp	r1, #7
 800f03a:	d907      	bls.n	800f04c <LCD__GetBPPDevice+0x28>
 800f03c:	3811      	subs	r0, #17
 800f03e:	280f      	cmp	r0, #15
 800f040:	bf94      	ite	ls
 800f042:	2020      	movls	r0, #32
 800f044:	2000      	movhi	r0, #0
 800f046:	bd08      	pop	{r3, pc}
 800f048:	2008      	movs	r0, #8
 800f04a:	bd08      	pop	{r3, pc}
 800f04c:	2010      	movs	r0, #16
 800f04e:	bd08      	pop	{r3, pc}

0800f050 <_SetDrawMode>:
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	4b08      	ldr	r3, [pc, #32]	; (800f074 <_SetDrawMode+0x24>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	7c1a      	ldrb	r2, [r3, #16]
 800f058:	ea80 0102 	eor.w	r1, r0, r2
 800f05c:	0749      	lsls	r1, r1, #29
 800f05e:	d505      	bpl.n	800f06c <_SetDrawMode+0x1c>
 800f060:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800f062:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f064:	6826      	ldr	r6, [r4, #0]
 800f066:	680d      	ldr	r5, [r1, #0]
 800f068:	6025      	str	r5, [r4, #0]
 800f06a:	600e      	str	r6, [r1, #0]
 800f06c:	7418      	strb	r0, [r3, #16]
 800f06e:	4610      	mov	r0, r2
 800f070:	bd70      	pop	{r4, r5, r6, pc}
 800f072:	bf00      	nop
 800f074:	2000027c 	.word	0x2000027c

0800f078 <LCD_SetDrawMode>:
 800f078:	b508      	push	{r3, lr}
 800f07a:	4b02      	ldr	r3, [pc, #8]	; (800f084 <LCD_SetDrawMode+0xc>)
 800f07c:	6819      	ldr	r1, [r3, #0]
 800f07e:	688a      	ldr	r2, [r1, #8]
 800f080:	4790      	blx	r2
 800f082:	bd08      	pop	{r3, pc}
 800f084:	20000270 	.word	0x20000270

0800f088 <LCD_DrawPixel>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4b14      	ldr	r3, [pc, #80]	; (800f0dc <LCD_DrawPixel+0x54>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	460a      	mov	r2, r1
 800f090:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800f094:	428a      	cmp	r2, r1
 800f096:	4604      	mov	r4, r0
 800f098:	db1e      	blt.n	800f0d8 <LCD_DrawPixel+0x50>
 800f09a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f09e:	4282      	cmp	r2, r0
 800f0a0:	dc1a      	bgt.n	800f0d8 <LCD_DrawPixel+0x50>
 800f0a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800f0a6:	428c      	cmp	r4, r1
 800f0a8:	db16      	blt.n	800f0d8 <LCD_DrawPixel+0x50>
 800f0aa:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f0ae:	4284      	cmp	r4, r0
 800f0b0:	dc12      	bgt.n	800f0d8 <LCD_DrawPixel+0x50>
 800f0b2:	7c19      	ldrb	r1, [r3, #16]
 800f0b4:	7c58      	ldrb	r0, [r3, #17]
 800f0b6:	f011 0f01 	tst.w	r1, #1
 800f0ba:	4909      	ldr	r1, [pc, #36]	; (800f0e0 <LCD_DrawPixel+0x58>)
 800f0bc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800f0c0:	d004      	beq.n	800f0cc <LCD_DrawPixel+0x44>
 800f0c2:	68c1      	ldr	r1, [r0, #12]
 800f0c4:	69cb      	ldr	r3, [r1, #28]
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	4798      	blx	r3
 800f0ca:	bd38      	pop	{r3, r4, r5, pc}
 800f0cc:	68c5      	ldr	r5, [r0, #12]
 800f0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0d0:	69ad      	ldr	r5, [r5, #24]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	47a8      	blx	r5
 800f0d8:	bd38      	pop	{r3, r4, r5, pc}
 800f0da:	bf00      	nop
 800f0dc:	2000027c 	.word	0x2000027c
 800f0e0:	20017a04 	.word	0x20017a04

0800f0e4 <LCD_DrawHLine>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	4b10      	ldr	r3, [pc, #64]	; (800f128 <LCD_DrawHLine+0x44>)
 800f0e8:	681c      	ldr	r4, [r3, #0]
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 800f0f0:	428d      	cmp	r5, r1
 800f0f2:	db17      	blt.n	800f124 <LCD_DrawHLine+0x40>
 800f0f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800f0f8:	429d      	cmp	r5, r3
 800f0fa:	dc13      	bgt.n	800f124 <LCD_DrawHLine+0x40>
 800f0fc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800f100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f104:	4288      	cmp	r0, r1
 800f106:	bfa8      	it	ge
 800f108:	4601      	movge	r1, r0
 800f10a:	429a      	cmp	r2, r3
 800f10c:	bfb8      	it	lt
 800f10e:	4613      	movlt	r3, r2
 800f110:	428b      	cmp	r3, r1
 800f112:	db07      	blt.n	800f124 <LCD_DrawHLine+0x40>
 800f114:	7c60      	ldrb	r0, [r4, #17]
 800f116:	4a05      	ldr	r2, [pc, #20]	; (800f12c <LCD_DrawHLine+0x48>)
 800f118:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800f11c:	68c4      	ldr	r4, [r0, #12]
 800f11e:	462a      	mov	r2, r5
 800f120:	68a4      	ldr	r4, [r4, #8]
 800f122:	47a0      	blx	r4
 800f124:	bd38      	pop	{r3, r4, r5, pc}
 800f126:	bf00      	nop
 800f128:	2000027c 	.word	0x2000027c
 800f12c:	20017a04 	.word	0x20017a04

0800f130 <LCD_DrawVLine>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	4b10      	ldr	r3, [pc, #64]	; (800f174 <LCD_DrawVLine+0x44>)
 800f134:	681c      	ldr	r4, [r3, #0]
 800f136:	4605      	mov	r5, r0
 800f138:	4610      	mov	r0, r2
 800f13a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800f13e:	4295      	cmp	r5, r2
 800f140:	db17      	blt.n	800f172 <LCD_DrawVLine+0x42>
 800f142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f146:	429d      	cmp	r5, r3
 800f148:	dc13      	bgt.n	800f172 <LCD_DrawVLine+0x42>
 800f14a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800f14e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800f152:	4291      	cmp	r1, r2
 800f154:	bfa8      	it	ge
 800f156:	460a      	movge	r2, r1
 800f158:	4298      	cmp	r0, r3
 800f15a:	bfb8      	it	lt
 800f15c:	4603      	movlt	r3, r0
 800f15e:	4293      	cmp	r3, r2
 800f160:	db07      	blt.n	800f172 <LCD_DrawVLine+0x42>
 800f162:	7c64      	ldrb	r4, [r4, #17]
 800f164:	4904      	ldr	r1, [pc, #16]	; (800f178 <LCD_DrawVLine+0x48>)
 800f166:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800f16a:	68c4      	ldr	r4, [r0, #12]
 800f16c:	4629      	mov	r1, r5
 800f16e:	68e4      	ldr	r4, [r4, #12]
 800f170:	47a0      	blx	r4
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	2000027c 	.word	0x2000027c
 800f178:	20017a04 	.word	0x20017a04

0800f17c <LCD_FillRect>:
 800f17c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f17e:	460e      	mov	r6, r1
 800f180:	4911      	ldr	r1, [pc, #68]	; (800f1c8 <LCD_FillRect+0x4c>)
 800f182:	680c      	ldr	r4, [r1, #0]
 800f184:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800f188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f18c:	4288      	cmp	r0, r1
 800f18e:	bfa8      	it	ge
 800f190:	4601      	movge	r1, r0
 800f192:	42aa      	cmp	r2, r5
 800f194:	bfb8      	it	lt
 800f196:	4615      	movlt	r5, r2
 800f198:	428d      	cmp	r5, r1
 800f19a:	db14      	blt.n	800f1c6 <LCD_FillRect+0x4a>
 800f19c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800f1a0:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800f1a4:	4296      	cmp	r6, r2
 800f1a6:	bfa8      	it	ge
 800f1a8:	4632      	movge	r2, r6
 800f1aa:	4283      	cmp	r3, r0
 800f1ac:	bfa8      	it	ge
 800f1ae:	4603      	movge	r3, r0
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	db08      	blt.n	800f1c6 <LCD_FillRect+0x4a>
 800f1b4:	7c64      	ldrb	r4, [r4, #17]
 800f1b6:	4805      	ldr	r0, [pc, #20]	; (800f1cc <LCD_FillRect+0x50>)
 800f1b8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f1bc:	68c4      	ldr	r4, [r0, #12]
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	6924      	ldr	r4, [r4, #16]
 800f1c2:	462b      	mov	r3, r5
 800f1c4:	47a0      	blx	r4
 800f1c6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800f1c8:	2000027c 	.word	0x2000027c
 800f1cc:	20017a04 	.word	0x20017a04

0800f1d0 <LCD__DrawBitmap_1bpp>:
 800f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	4e69      	ldr	r6, [pc, #420]	; (800f37c <LCD__DrawBitmap_1bpp+0x1ac>)
 800f1d6:	b08f      	sub	sp, #60	; 0x3c
 800f1d8:	6836      	ldr	r6, [r6, #0]
 800f1da:	9008      	str	r0, [sp, #32]
 800f1dc:	4688      	mov	r8, r1
 800f1de:	4615      	mov	r5, r2
 800f1e0:	469b      	mov	fp, r3
 800f1e2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f1e4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800f1e6:	b166      	cbz	r6, 800f202 <LCD__DrawBitmap_1bpp+0x32>
 800f1e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800f1ea:	9404      	str	r4, [sp, #16]
 800f1ec:	9500      	str	r5, [sp, #0]
 800f1ee:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f1f0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800f1f2:	9501      	str	r5, [sp, #4]
 800f1f4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f1f6:	9405      	str	r4, [sp, #20]
 800f1f8:	9502      	str	r5, [sp, #8]
 800f1fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f1fc:	9503      	str	r5, [sp, #12]
 800f1fe:	6834      	ldr	r4, [r6, #0]
 800f200:	e054      	b.n	800f2ac <LCD__DrawBitmap_1bpp+0xdc>
 800f202:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f204:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f206:	430b      	orrs	r3, r1
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d151      	bne.n	800f2b0 <LCD__DrawBitmap_1bpp+0xe0>
 800f20c:	485c      	ldr	r0, [pc, #368]	; (800f380 <LCD__DrawBitmap_1bpp+0x1b0>)
 800f20e:	6800      	ldr	r0, [r0, #0]
 800f210:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f214:	ebc8 0102 	rsb	r1, r8, r2
 800f218:	2900      	cmp	r1, #0
 800f21a:	dd08      	ble.n	800f22e <LCD__DrawBitmap_1bpp+0x5e>
 800f21c:	ebc1 030b 	rsb	r3, r1, fp
 800f220:	2b00      	cmp	r3, #0
 800f222:	f340 80a8 	ble.w	800f376 <LCD__DrawBitmap_1bpp+0x1a6>
 800f226:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f228:	fb01 4406 	mla	r4, r1, r6, r4
 800f22c:	e001      	b.n	800f232 <LCD__DrawBitmap_1bpp+0x62>
 800f22e:	465b      	mov	r3, fp
 800f230:	4642      	mov	r2, r8
 800f232:	44d8      	add	r8, fp
 800f234:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800f238:	f108 3cff 	add.w	ip, r8, #4294967295
 800f23c:	ebc1 080c 	rsb	r8, r1, ip
 800f240:	f1b8 0f00 	cmp.w	r8, #0
 800f244:	dd04      	ble.n	800f250 <LCD__DrawBitmap_1bpp+0x80>
 800f246:	ebc8 0303 	rsb	r3, r8, r3
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f340 8093 	ble.w	800f376 <LCD__DrawBitmap_1bpp+0x1a6>
 800f250:	9e08      	ldr	r6, [sp, #32]
 800f252:	1971      	adds	r1, r6, r5
 800f254:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800f258:	3901      	subs	r1, #1
 800f25a:	1b89      	subs	r1, r1, r6
 800f25c:	9e08      	ldr	r6, [sp, #32]
 800f25e:	2900      	cmp	r1, #0
 800f260:	bfc8      	it	gt
 800f262:	ebc1 0505 	rsbgt	r5, r1, r5
 800f266:	1bf1      	subs	r1, r6, r7
 800f268:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800f26c:	42b1      	cmp	r1, r6
 800f26e:	da0b      	bge.n	800f288 <LCD__DrawBitmap_1bpp+0xb8>
 800f270:	ebc1 0c06 	rsb	ip, r1, r6
 800f274:	4467      	add	r7, ip
 800f276:	1b8e      	subs	r6, r1, r6
 800f278:	f02c 0c07 	bic.w	ip, ip, #7
 800f27c:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800f280:	19ad      	adds	r5, r5, r6
 800f282:	4461      	add	r1, ip
 800f284:	f007 0707 	and.w	r7, r7, #7
 800f288:	2d00      	cmp	r5, #0
 800f28a:	dd74      	ble.n	800f376 <LCD__DrawBitmap_1bpp+0x1a6>
 800f28c:	7c46      	ldrb	r6, [r0, #17]
 800f28e:	483d      	ldr	r0, [pc, #244]	; (800f384 <LCD__DrawBitmap_1bpp+0x1b4>)
 800f290:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800f294:	68c6      	ldr	r6, [r0, #12]
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f29a:	9403      	str	r4, [sp, #12]
 800f29c:	9301      	str	r3, [sp, #4]
 800f29e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800f2a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f2a2:	9704      	str	r7, [sp, #16]
 800f2a4:	9302      	str	r3, [sp, #8]
 800f2a6:	9405      	str	r4, [sp, #20]
 800f2a8:	6874      	ldr	r4, [r6, #4]
 800f2aa:	462b      	mov	r3, r5
 800f2ac:	47a0      	blx	r4
 800f2ae:	e062      	b.n	800f376 <LCD__DrawBitmap_1bpp+0x1a6>
 800f2b0:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f2b2:	f1c0 0208 	rsb	r2, r0, #8
 800f2b6:	920c      	str	r2, [sp, #48]	; 0x30
 800f2b8:	4637      	mov	r7, r6
 800f2ba:	455e      	cmp	r6, fp
 800f2bc:	da5b      	bge.n	800f376 <LCD__DrawBitmap_1bpp+0x1a6>
 800f2be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f2c0:	4a2f      	ldr	r2, [pc, #188]	; (800f380 <LCD__DrawBitmap_1bpp+0x1b0>)
 800f2c2:	eb08 0103 	add.w	r1, r8, r3
 800f2c6:	1e48      	subs	r0, r1, #1
 800f2c8:	6813      	ldr	r3, [r2, #0]
 800f2ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800f2cc:	910a      	str	r1, [sp, #40]	; 0x28
 800f2ce:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800f2d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2d4:	4281      	cmp	r1, r0
 800f2d6:	db48      	blt.n	800f36a <LCD__DrawBitmap_1bpp+0x19a>
 800f2d8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f2dc:	4590      	cmp	r8, r2
 800f2de:	dc44      	bgt.n	800f36a <LCD__DrawBitmap_1bpp+0x19a>
 800f2e0:	f04f 0900 	mov.w	r9, #0
 800f2e4:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f2e8:	9409      	str	r4, [sp, #36]	; 0x24
 800f2ea:	46cc      	mov	ip, r9
 800f2ec:	45a9      	cmp	r9, r5
 800f2ee:	da3c      	bge.n	800f36a <LCD__DrawBitmap_1bpp+0x19a>
 800f2f0:	f1bc 0f00 	cmp.w	ip, #0
 800f2f4:	d105      	bne.n	800f302 <LCD__DrawBitmap_1bpp+0x132>
 800f2f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2f8:	f810 7b01 	ldrb.w	r7, [r0], #1
 800f2fc:	f04f 0c08 	mov.w	ip, #8
 800f300:	9009      	str	r0, [sp, #36]	; 0x24
 800f302:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f304:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f306:	fa47 f201 	asr.w	r2, r7, r1
 800f30a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800f30e:	fa07 f703 	lsl.w	r7, r7, r3
 800f312:	b2ff      	uxtb	r7, r7
 800f314:	ebc3 0c0c 	rsb	ip, r3, ip
 800f318:	d106      	bne.n	800f328 <LCD__DrawBitmap_1bpp+0x158>
 800f31a:	4819      	ldr	r0, [pc, #100]	; (800f380 <LCD__DrawBitmap_1bpp+0x1b0>)
 800f31c:	6801      	ldr	r1, [r0, #0]
 800f31e:	7c0b      	ldrb	r3, [r1, #16]
 800f320:	f003 0002 	and.w	r0, r3, #2
 800f324:	b2c1      	uxtb	r1, r0
 800f326:	b9d9      	cbnz	r1, 800f360 <LCD__DrawBitmap_1bpp+0x190>
 800f328:	4b15      	ldr	r3, [pc, #84]	; (800f380 <LCD__DrawBitmap_1bpp+0x1b0>)
 800f32a:	6818      	ldr	r0, [r3, #0]
 800f32c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f32e:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f330:	6819      	ldr	r1, [r3, #0]
 800f332:	b2d2      	uxtb	r2, r2
 800f334:	910d      	str	r1, [sp, #52]	; 0x34
 800f336:	b108      	cbz	r0, 800f33c <LCD__DrawBitmap_1bpp+0x16c>
 800f338:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f340:	f8cd c01c 	str.w	ip, [sp, #28]
 800f344:	1e5a      	subs	r2, r3, #1
 800f346:	4650      	mov	r0, sl
 800f348:	4641      	mov	r1, r8
 800f34a:	4452      	add	r2, sl
 800f34c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f34e:	f7ff ff15 	bl	800f17c <LCD_FillRect>
 800f352:	490b      	ldr	r1, [pc, #44]	; (800f380 <LCD__DrawBitmap_1bpp+0x1b0>)
 800f354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f356:	6808      	ldr	r0, [r1, #0]
 800f358:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f35c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f362:	f109 0901 	add.w	r9, r9, #1
 800f366:	448a      	add	sl, r1
 800f368:	e7c0      	b.n	800f2ec <LCD__DrawBitmap_1bpp+0x11c>
 800f36a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f36c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800f370:	3601      	adds	r6, #1
 800f372:	18e4      	adds	r4, r4, r3
 800f374:	e7a1      	b.n	800f2ba <LCD__DrawBitmap_1bpp+0xea>
 800f376:	b00f      	add	sp, #60	; 0x3c
 800f378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37c:	200179e4 	.word	0x200179e4
 800f380:	2000027c 	.word	0x2000027c
 800f384:	20017a04 	.word	0x20017a04

0800f388 <LCD_DrawBitmap>:
 800f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38c:	f8df c210 	ldr.w	ip, [pc, #528]	; 800f5a0 <LCD_DrawBitmap+0x218>
 800f390:	b091      	sub	sp, #68	; 0x44
 800f392:	f8dc c000 	ldr.w	ip, [ip]
 800f396:	9207      	str	r2, [sp, #28]
 800f398:	4605      	mov	r5, r0
 800f39a:	4688      	mov	r8, r1
 800f39c:	469b      	mov	fp, r3
 800f39e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800f3a0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800f3a2:	f1bc 0f00 	cmp.w	ip, #0
 800f3a6:	d00c      	beq.n	800f3c2 <LCD_DrawBitmap+0x3a>
 800f3a8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f3aa:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f3ac:	9500      	str	r5, [sp, #0]
 800f3ae:	9701      	str	r7, [sp, #4]
 800f3b0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800f3b2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800f3b4:	9602      	str	r6, [sp, #8]
 800f3b6:	9503      	str	r5, [sp, #12]
 800f3b8:	9404      	str	r4, [sp, #16]
 800f3ba:	9705      	str	r7, [sp, #20]
 800f3bc:	f8dc 4000 	ldr.w	r4, [ip]
 800f3c0:	e081      	b.n	800f4c6 <LCD_DrawBitmap+0x13e>
 800f3c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800f3c6:	433b      	orrs	r3, r7
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d17e      	bne.n	800f4ca <LCD_DrawBitmap+0x142>
 800f3cc:	4872      	ldr	r0, [pc, #456]	; (800f598 <LCD_DrawBitmap+0x210>)
 800f3ce:	6800      	ldr	r0, [r0, #0]
 800f3d0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f3d4:	1a53      	subs	r3, r2, r1
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	dd08      	ble.n	800f3ec <LCD_DrawBitmap+0x64>
 800f3da:	ebc3 010b 	rsb	r1, r3, fp
 800f3de:	2900      	cmp	r1, #0
 800f3e0:	f340 80d6 	ble.w	800f590 <LCD_DrawBitmap+0x208>
 800f3e4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800f3e6:	fb03 4407 	mla	r4, r3, r7, r4
 800f3ea:	e001      	b.n	800f3f0 <LCD_DrawBitmap+0x68>
 800f3ec:	4659      	mov	r1, fp
 800f3ee:	4642      	mov	r2, r8
 800f3f0:	eb08 0c0b 	add.w	ip, r8, fp
 800f3f4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800f3f8:	f10c 38ff 	add.w	r8, ip, #4294967295
 800f3fc:	ebc3 0808 	rsb	r8, r3, r8
 800f400:	f1b8 0f00 	cmp.w	r8, #0
 800f404:	dd04      	ble.n	800f410 <LCD_DrawBitmap+0x88>
 800f406:	ebc8 0101 	rsb	r1, r8, r1
 800f40a:	2900      	cmp	r1, #0
 800f40c:	f340 80c0 	ble.w	800f590 <LCD_DrawBitmap+0x208>
 800f410:	9f07      	ldr	r7, [sp, #28]
 800f412:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800f416:	19eb      	adds	r3, r5, r7
 800f418:	3b01      	subs	r3, #1
 800f41a:	ebcc 0303 	rsb	r3, ip, r3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800f424:	bfc4      	itt	gt
 800f426:	ebc3 0707 	rsbgt	r7, r3, r7
 800f42a:	9707      	strgt	r7, [sp, #28]
 800f42c:	4565      	cmp	r5, ip
 800f42e:	da33      	bge.n	800f498 <LCD_DrawBitmap+0x110>
 800f430:	9f07      	ldr	r7, [sp, #28]
 800f432:	ebc5 030c 	rsb	r3, r5, ip
 800f436:	1aff      	subs	r7, r7, r3
 800f438:	2e08      	cmp	r6, #8
 800f43a:	9707      	str	r7, [sp, #28]
 800f43c:	d027      	beq.n	800f48e <LCD_DrawBitmap+0x106>
 800f43e:	dc0d      	bgt.n	800f45c <LCD_DrawBitmap+0xd4>
 800f440:	2e02      	cmp	r6, #2
 800f442:	d014      	beq.n	800f46e <LCD_DrawBitmap+0xe6>
 800f444:	2e04      	cmp	r6, #4
 800f446:	d01a      	beq.n	800f47e <LCD_DrawBitmap+0xf6>
 800f448:	2e01      	cmp	r6, #1
 800f44a:	d126      	bne.n	800f49a <LCD_DrawBitmap+0x112>
 800f44c:	f023 0c07 	bic.w	ip, r3, #7
 800f450:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800f454:	4465      	add	r5, ip
 800f456:	f003 0307 	and.w	r3, r3, #7
 800f45a:	e01e      	b.n	800f49a <LCD_DrawBitmap+0x112>
 800f45c:	2e18      	cmp	r6, #24
 800f45e:	d018      	beq.n	800f492 <LCD_DrawBitmap+0x10a>
 800f460:	2e20      	cmp	r6, #32
 800f462:	d016      	beq.n	800f492 <LCD_DrawBitmap+0x10a>
 800f464:	2e10      	cmp	r6, #16
 800f466:	d118      	bne.n	800f49a <LCD_DrawBitmap+0x112>
 800f468:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f46c:	e013      	b.n	800f496 <LCD_DrawBitmap+0x10e>
 800f46e:	f023 0c03 	bic.w	ip, r3, #3
 800f472:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800f476:	4465      	add	r5, ip
 800f478:	f003 0303 	and.w	r3, r3, #3
 800f47c:	e00d      	b.n	800f49a <LCD_DrawBitmap+0x112>
 800f47e:	f023 0701 	bic.w	r7, r3, #1
 800f482:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800f486:	19ed      	adds	r5, r5, r7
 800f488:	f003 0301 	and.w	r3, r3, #1
 800f48c:	e005      	b.n	800f49a <LCD_DrawBitmap+0x112>
 800f48e:	18e4      	adds	r4, r4, r3
 800f490:	e001      	b.n	800f496 <LCD_DrawBitmap+0x10e>
 800f492:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f496:	4665      	mov	r5, ip
 800f498:	2300      	movs	r3, #0
 800f49a:	9f07      	ldr	r7, [sp, #28]
 800f49c:	2f00      	cmp	r7, #0
 800f49e:	dd77      	ble.n	800f590 <LCD_DrawBitmap+0x208>
 800f4a0:	f890 e011 	ldrb.w	lr, [r0, #17]
 800f4a4:	483d      	ldr	r0, [pc, #244]	; (800f59c <LCD_DrawBitmap+0x214>)
 800f4a6:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800f4a8:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800f4ac:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800f4b0:	9403      	str	r4, [sp, #12]
 800f4b2:	e88d 0042 	stmia.w	sp, {r1, r6}
 800f4b6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800f4b8:	9304      	str	r3, [sp, #16]
 800f4ba:	9702      	str	r7, [sp, #8]
 800f4bc:	9405      	str	r4, [sp, #20]
 800f4be:	f8de 4004 	ldr.w	r4, [lr, #4]
 800f4c2:	9b07      	ldr	r3, [sp, #28]
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	47a0      	blx	r4
 800f4c8:	e062      	b.n	800f590 <LCD_DrawBitmap+0x208>
 800f4ca:	f1c6 0708 	rsb	r7, r6, #8
 800f4ce:	970e      	str	r7, [sp, #56]	; 0x38
 800f4d0:	46e0      	mov	r8, ip
 800f4d2:	460f      	mov	r7, r1
 800f4d4:	45dc      	cmp	ip, fp
 800f4d6:	da5b      	bge.n	800f590 <LCD_DrawBitmap+0x208>
 800f4d8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f4da:	4b2f      	ldr	r3, [pc, #188]	; (800f598 <LCD_DrawBitmap+0x210>)
 800f4dc:	1878      	adds	r0, r7, r1
 800f4de:	1e42      	subs	r2, r0, #1
 800f4e0:	900c      	str	r0, [sp, #48]	; 0x30
 800f4e2:	6818      	ldr	r0, [r3, #0]
 800f4e4:	920d      	str	r2, [sp, #52]	; 0x34
 800f4e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f4e8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f4ec:	4291      	cmp	r1, r2
 800f4ee:	db49      	blt.n	800f584 <LCD_DrawBitmap+0x1fc>
 800f4f0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800f4f4:	429f      	cmp	r7, r3
 800f4f6:	dc45      	bgt.n	800f584 <LCD_DrawBitmap+0x1fc>
 800f4f8:	f04f 0900 	mov.w	r9, #0
 800f4fc:	940b      	str	r4, [sp, #44]	; 0x2c
 800f4fe:	46aa      	mov	sl, r5
 800f500:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800f504:	9807      	ldr	r0, [sp, #28]
 800f506:	4581      	cmp	r9, r0
 800f508:	da3c      	bge.n	800f584 <LCD_DrawBitmap+0x1fc>
 800f50a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f50c:	b92a      	cbnz	r2, 800f51a <LCD_DrawBitmap+0x192>
 800f50e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f510:	f811 8b01 	ldrb.w	r8, [r1], #1
 800f514:	2308      	movs	r3, #8
 800f516:	910b      	str	r1, [sp, #44]	; 0x2c
 800f518:	930a      	str	r3, [sp, #40]	; 0x28
 800f51a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f51c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f51e:	fa48 f200 	asr.w	r2, r8, r0
 800f522:	1b8b      	subs	r3, r1, r6
 800f524:	fa08 f806 	lsl.w	r8, r8, r6
 800f528:	f012 0fff 	tst.w	r2, #255	; 0xff
 800f52c:	fa5f f888 	uxtb.w	r8, r8
 800f530:	930a      	str	r3, [sp, #40]	; 0x28
 800f532:	d106      	bne.n	800f542 <LCD_DrawBitmap+0x1ba>
 800f534:	4818      	ldr	r0, [pc, #96]	; (800f598 <LCD_DrawBitmap+0x210>)
 800f536:	6801      	ldr	r1, [r0, #0]
 800f538:	7c0b      	ldrb	r3, [r1, #16]
 800f53a:	f003 0002 	and.w	r0, r3, #2
 800f53e:	b2c1      	uxtb	r1, r0
 800f540:	b9d9      	cbnz	r1, 800f57a <LCD_DrawBitmap+0x1f2>
 800f542:	4b15      	ldr	r3, [pc, #84]	; (800f598 <LCD_DrawBitmap+0x210>)
 800f544:	6818      	ldr	r0, [r3, #0]
 800f546:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f548:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800f54a:	6819      	ldr	r1, [r3, #0]
 800f54c:	b2d2      	uxtb	r2, r2
 800f54e:	910f      	str	r1, [sp, #60]	; 0x3c
 800f550:	b108      	cbz	r0, 800f556 <LCD_DrawBitmap+0x1ce>
 800f552:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800f556:	601a      	str	r2, [r3, #0]
 800f558:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f55a:	f8cd c020 	str.w	ip, [sp, #32]
 800f55e:	1e5a      	subs	r2, r3, #1
 800f560:	4650      	mov	r0, sl
 800f562:	4639      	mov	r1, r7
 800f564:	4452      	add	r2, sl
 800f566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f568:	f7ff fe08 	bl	800f17c <LCD_FillRect>
 800f56c:	490a      	ldr	r1, [pc, #40]	; (800f598 <LCD_DrawBitmap+0x210>)
 800f56e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f570:	6808      	ldr	r0, [r1, #0]
 800f572:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f576:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f578:	601a      	str	r2, [r3, #0]
 800f57a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f57c:	f109 0901 	add.w	r9, r9, #1
 800f580:	448a      	add	sl, r1
 800f582:	e7bf      	b.n	800f504 <LCD_DrawBitmap+0x17c>
 800f584:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800f586:	f10c 0c01 	add.w	ip, ip, #1
 800f58a:	19e4      	adds	r4, r4, r7
 800f58c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f58e:	e7a1      	b.n	800f4d4 <LCD_DrawBitmap+0x14c>
 800f590:	b011      	add	sp, #68	; 0x44
 800f592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f596:	bf00      	nop
 800f598:	2000027c 	.word	0x2000027c
 800f59c:	20017a04 	.word	0x20017a04
 800f5a0:	200179e4 	.word	0x200179e4

0800f5a4 <LCD_SetClipRectMax>:
 800f5a4:	b508      	push	{r3, lr}
 800f5a6:	4b05      	ldr	r3, [pc, #20]	; (800f5bc <LCD_SetClipRectMax+0x18>)
 800f5a8:	4805      	ldr	r0, [pc, #20]	; (800f5c0 <LCD_SetClipRectMax+0x1c>)
 800f5aa:	6819      	ldr	r1, [r3, #0]
 800f5ac:	7c4a      	ldrb	r2, [r1, #17]
 800f5ae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f5b2:	68c3      	ldr	r3, [r0, #12]
 800f5b4:	3108      	adds	r1, #8
 800f5b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5b8:	4790      	blx	r2
 800f5ba:	bd08      	pop	{r3, pc}
 800f5bc:	2000027c 	.word	0x2000027c
 800f5c0:	20017a04 	.word	0x20017a04

0800f5c4 <emWin_LCD_Init>:
 800f5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5c6:	f7ff ffed 	bl	800f5a4 <LCD_SetClipRectMax>
 800f5ca:	f005 fa65 	bl	8014a98 <LCD_InitColors>
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d13c      	bne.n	800f64e <emWin_LCD_Init+0x8a>
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	f001 fc5c 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800f5dc:	9001      	str	r0, [sp, #4]
 800f5de:	b148      	cbz	r0, 800f5f4 <emWin_LCD_Init+0x30>
 800f5e0:	68c3      	ldr	r3, [r0, #12]
 800f5e2:	210c      	movs	r1, #12
 800f5e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5e6:	a801      	add	r0, sp, #4
 800f5e8:	4790      	blx	r2
 800f5ea:	4601      	mov	r1, r0
 800f5ec:	b370      	cbz	r0, 800f64c <emWin_LCD_Init+0x88>
 800f5ee:	9801      	ldr	r0, [sp, #4]
 800f5f0:	4788      	blx	r1
 800f5f2:	4304      	orrs	r4, r0
 800f5f4:	3501      	adds	r5, #1
 800f5f6:	2d02      	cmp	r5, #2
 800f5f8:	d1ed      	bne.n	800f5d6 <emWin_LCD_Init+0x12>
 800f5fa:	bb44      	cbnz	r4, 800f64e <emWin_LCD_Init+0x8a>
 800f5fc:	f005 fa90 	bl	8014b20 <LCD_InitLUT>
 800f600:	2401      	movs	r4, #1
 800f602:	4620      	mov	r0, r4
 800f604:	f001 fc46 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800f608:	9001      	str	r0, [sp, #4]
 800f60a:	b1d0      	cbz	r0, 800f642 <emWin_LCD_Init+0x7e>
 800f60c:	4620      	mov	r0, r4
 800f60e:	f000 fe4f 	bl	80102b0 <GUI_SelectLayer>
 800f612:	2004      	movs	r0, #4
 800f614:	f7ff fd30 	bl	800f078 <LCD_SetDrawMode>
 800f618:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800f61c:	2000      	movs	r0, #0
 800f61e:	4601      	mov	r1, r0
 800f620:	4613      	mov	r3, r2
 800f622:	f7ff fdab 	bl	800f17c <LCD_FillRect>
 800f626:	2000      	movs	r0, #0
 800f628:	f7ff fd26 	bl	800f078 <LCD_SetDrawMode>
 800f62c:	a802      	add	r0, sp, #8
 800f62e:	210e      	movs	r1, #14
 800f630:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800f634:	68da      	ldr	r2, [r3, #12]
 800f636:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f638:	4798      	blx	r3
 800f63a:	4601      	mov	r1, r0
 800f63c:	b108      	cbz	r0, 800f642 <emWin_LCD_Init+0x7e>
 800f63e:	9801      	ldr	r0, [sp, #4]
 800f640:	4788      	blx	r1
 800f642:	f114 34ff 	adds.w	r4, r4, #4294967295
 800f646:	d2dc      	bcs.n	800f602 <emWin_LCD_Init+0x3e>
 800f648:	2400      	movs	r4, #0
 800f64a:	e000      	b.n	800f64e <emWin_LCD_Init+0x8a>
 800f64c:	2401      	movs	r4, #1
 800f64e:	4620      	mov	r0, r4
 800f650:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0800f654 <LCD_Color2Index>:
 800f654:	b508      	push	{r3, lr}
 800f656:	4b05      	ldr	r3, [pc, #20]	; (800f66c <LCD_Color2Index+0x18>)
 800f658:	6819      	ldr	r1, [r3, #0]
 800f65a:	4b05      	ldr	r3, [pc, #20]	; (800f670 <LCD_Color2Index+0x1c>)
 800f65c:	7c4a      	ldrb	r2, [r1, #17]
 800f65e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f662:	690a      	ldr	r2, [r1, #16]
 800f664:	6813      	ldr	r3, [r2, #0]
 800f666:	4798      	blx	r3
 800f668:	bd08      	pop	{r3, pc}
 800f66a:	bf00      	nop
 800f66c:	2000027c 	.word	0x2000027c
 800f670:	20017a04 	.word	0x20017a04

0800f674 <LCD_Index2Color>:
 800f674:	b508      	push	{r3, lr}
 800f676:	4b05      	ldr	r3, [pc, #20]	; (800f68c <LCD_Index2Color+0x18>)
 800f678:	6819      	ldr	r1, [r3, #0]
 800f67a:	4b05      	ldr	r3, [pc, #20]	; (800f690 <LCD_Index2Color+0x1c>)
 800f67c:	7c4a      	ldrb	r2, [r1, #17]
 800f67e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f682:	690a      	ldr	r2, [r1, #16]
 800f684:	6853      	ldr	r3, [r2, #4]
 800f686:	4798      	blx	r3
 800f688:	bd08      	pop	{r3, pc}
 800f68a:	bf00      	nop
 800f68c:	2000027c 	.word	0x2000027c
 800f690:	20017a04 	.word	0x20017a04

0800f694 <LCD_SetColorIndex>:
 800f694:	4b05      	ldr	r3, [pc, #20]	; (800f6ac <LCD_SetColorIndex+0x18>)
 800f696:	6819      	ldr	r1, [r3, #0]
 800f698:	7c0a      	ldrb	r2, [r1, #16]
 800f69a:	f002 0304 	and.w	r3, r2, #4
 800f69e:	b2da      	uxtb	r2, r3
 800f6a0:	b10a      	cbz	r2, 800f6a6 <LCD_SetColorIndex+0x12>
 800f6a2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800f6a4:	e000      	b.n	800f6a8 <LCD_SetColorIndex+0x14>
 800f6a6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800f6a8:	6008      	str	r0, [r1, #0]
 800f6aa:	4770      	bx	lr
 800f6ac:	2000027c 	.word	0x2000027c

0800f6b0 <_SetColor>:
 800f6b0:	b508      	push	{r3, lr}
 800f6b2:	4b06      	ldr	r3, [pc, #24]	; (800f6cc <_SetColor+0x1c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f6b8:	4281      	cmp	r1, r0
 800f6ba:	d006      	beq.n	800f6ca <_SetColor+0x1a>
 800f6bc:	6318      	str	r0, [r3, #48]	; 0x30
 800f6be:	f7ff ffc9 	bl	800f654 <LCD_Color2Index>
 800f6c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f6c6:	f7ff bfe5 	b.w	800f694 <LCD_SetColorIndex>
 800f6ca:	bd08      	pop	{r3, pc}
 800f6cc:	2000027c 	.word	0x2000027c

0800f6d0 <LCD_SetBkColorIndex>:
 800f6d0:	4b05      	ldr	r3, [pc, #20]	; (800f6e8 <LCD_SetBkColorIndex+0x18>)
 800f6d2:	6819      	ldr	r1, [r3, #0]
 800f6d4:	7c0a      	ldrb	r2, [r1, #16]
 800f6d6:	f002 0304 	and.w	r3, r2, #4
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	b10a      	cbz	r2, 800f6e2 <LCD_SetBkColorIndex+0x12>
 800f6de:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800f6e0:	e000      	b.n	800f6e4 <LCD_SetBkColorIndex+0x14>
 800f6e2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800f6e4:	6008      	str	r0, [r1, #0]
 800f6e6:	4770      	bx	lr
 800f6e8:	2000027c 	.word	0x2000027c

0800f6ec <_SetBkColor>:
 800f6ec:	b508      	push	{r3, lr}
 800f6ee:	4b06      	ldr	r3, [pc, #24]	; (800f708 <_SetBkColor+0x1c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f6f4:	4281      	cmp	r1, r0
 800f6f6:	d006      	beq.n	800f706 <_SetBkColor+0x1a>
 800f6f8:	6358      	str	r0, [r3, #52]	; 0x34
 800f6fa:	f7ff ffab 	bl	800f654 <LCD_Color2Index>
 800f6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f702:	f7ff bfe5 	b.w	800f6d0 <LCD_SetBkColorIndex>
 800f706:	bd08      	pop	{r3, pc}
 800f708:	2000027c 	.word	0x2000027c

0800f70c <LCD_SetBkColor>:
 800f70c:	b508      	push	{r3, lr}
 800f70e:	4b02      	ldr	r3, [pc, #8]	; (800f718 <LCD_SetBkColor+0xc>)
 800f710:	6819      	ldr	r1, [r3, #0]
 800f712:	684a      	ldr	r2, [r1, #4]
 800f714:	4790      	blx	r2
 800f716:	bd08      	pop	{r3, pc}
 800f718:	20000270 	.word	0x20000270

0800f71c <LCD_SetColor>:
 800f71c:	b508      	push	{r3, lr}
 800f71e:	4b02      	ldr	r3, [pc, #8]	; (800f728 <LCD_SetColor+0xc>)
 800f720:	6819      	ldr	r1, [r3, #0]
 800f722:	680a      	ldr	r2, [r1, #0]
 800f724:	4790      	blx	r2
 800f726:	bd08      	pop	{r3, pc}
 800f728:	20000270 	.word	0x20000270

0800f72c <GUI__strlen>:
 800f72c:	f04f 33ff 	mov.w	r3, #4294967295
 800f730:	b118      	cbz	r0, 800f73a <GUI__strlen+0xe>
 800f732:	3301      	adds	r3, #1
 800f734:	5cc2      	ldrb	r2, [r0, r3]
 800f736:	2a00      	cmp	r2, #0
 800f738:	d1fb      	bne.n	800f732 <GUI__strlen+0x6>
 800f73a:	4618      	mov	r0, r3
 800f73c:	4770      	bx	lr

0800f73e <GUI__memset16>:
 800f73e:	0783      	lsls	r3, r0, #30
 800f740:	b570      	push	{r4, r5, r6, lr}
 800f742:	bf44      	itt	mi
 800f744:	f820 1b02 	strhmi.w	r1, [r0], #2
 800f748:	3a01      	submi	r2, #1
 800f74a:	0853      	lsrs	r3, r2, #1
 800f74c:	d020      	beq.n	800f790 <GUI__memset16+0x52>
 800f74e:	f04f 1501 	mov.w	r5, #65537	; 0x10001
 800f752:	434d      	muls	r5, r1
 800f754:	2b03      	cmp	r3, #3
 800f756:	dc02      	bgt.n	800f75e <GUI__memset16+0x20>
 800f758:	4606      	mov	r6, r0
 800f75a:	461c      	mov	r4, r3
 800f75c:	e011      	b.n	800f782 <GUI__memset16+0x44>
 800f75e:	4604      	mov	r4, r0
 800f760:	461e      	mov	r6, r3
 800f762:	3e04      	subs	r6, #4
 800f764:	6025      	str	r5, [r4, #0]
 800f766:	6065      	str	r5, [r4, #4]
 800f768:	60a5      	str	r5, [r4, #8]
 800f76a:	60e5      	str	r5, [r4, #12]
 800f76c:	3410      	adds	r4, #16
 800f76e:	2e03      	cmp	r6, #3
 800f770:	dcf7      	bgt.n	800f762 <GUI__memset16+0x24>
 800f772:	3b04      	subs	r3, #4
 800f774:	089c      	lsrs	r4, r3, #2
 800f776:	1c66      	adds	r6, r4, #1
 800f778:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800f77c:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 800f780:	e7ea      	b.n	800f758 <GUI__memset16+0x1a>
 800f782:	b11c      	cbz	r4, 800f78c <GUI__memset16+0x4e>
 800f784:	f846 5b04 	str.w	r5, [r6], #4
 800f788:	3c01      	subs	r4, #1
 800f78a:	e7fa      	b.n	800f782 <GUI__memset16+0x44>
 800f78c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f790:	07d3      	lsls	r3, r2, #31
 800f792:	bf48      	it	mi
 800f794:	8001      	strhmi	r1, [r0, #0]
 800f796:	bd70      	pop	{r4, r5, r6, pc}

0800f798 <GUI__memset>:
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	b12a      	cbz	r2, 800f7a8 <GUI__memset+0x10>
 800f79c:	0783      	lsls	r3, r0, #30
 800f79e:	d003      	beq.n	800f7a8 <GUI__memset+0x10>
 800f7a0:	f800 1b01 	strb.w	r1, [r0], #1
 800f7a4:	3a01      	subs	r2, #1
 800f7a6:	e7f8      	b.n	800f79a <GUI__memset+0x2>
 800f7a8:	0893      	lsrs	r3, r2, #2
 800f7aa:	d101      	bne.n	800f7b0 <GUI__memset+0x18>
 800f7ac:	1882      	adds	r2, r0, r2
 800f7ae:	e017      	b.n	800f7e0 <GUI__memset+0x48>
 800f7b0:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800f7b4:	f002 0203 	and.w	r2, r2, #3
 800f7b8:	434c      	muls	r4, r1
 800f7ba:	2b03      	cmp	r3, #3
 800f7bc:	dd06      	ble.n	800f7cc <GUI__memset+0x34>
 800f7be:	6004      	str	r4, [r0, #0]
 800f7c0:	6044      	str	r4, [r0, #4]
 800f7c2:	6084      	str	r4, [r0, #8]
 800f7c4:	60c4      	str	r4, [r0, #12]
 800f7c6:	3b04      	subs	r3, #4
 800f7c8:	3010      	adds	r0, #16
 800f7ca:	e7f6      	b.n	800f7ba <GUI__memset+0x22>
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	461e      	mov	r6, r3
 800f7d0:	b11b      	cbz	r3, 800f7da <GUI__memset+0x42>
 800f7d2:	f840 4b04 	str.w	r4, [r0], #4
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	e7fa      	b.n	800f7d0 <GUI__memset+0x38>
 800f7da:	eb05 0086 	add.w	r0, r5, r6, lsl #2
 800f7de:	e7e5      	b.n	800f7ac <GUI__memset+0x14>
 800f7e0:	4290      	cmp	r0, r2
 800f7e2:	d002      	beq.n	800f7ea <GUI__memset+0x52>
 800f7e4:	f800 1b01 	strb.w	r1, [r0], #1
 800f7e8:	e7fa      	b.n	800f7e0 <GUI__memset+0x48>
 800f7ea:	bd70      	pop	{r4, r5, r6, pc}

0800f7ec <GUI__SetText>:
 800f7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7ee:	6807      	ldr	r7, [r0, #0]
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	460e      	mov	r6, r1
 800f7f6:	f005 f9eb 	bl	8014bd0 <GUI__strcmp_hp>
 800f7fa:	b908      	cbnz	r0, 800f800 <GUI__SetText+0x14>
 800f7fc:	2000      	movs	r0, #0
 800f7fe:	e02e      	b.n	800f85e <GUI__SetText+0x72>
 800f800:	4630      	mov	r0, r6
 800f802:	f7ff ff93 	bl	800f72c <GUI__strlen>
 800f806:	1c44      	adds	r4, r0, #1
 800f808:	4638      	mov	r0, r7
 800f80a:	f002 f895 	bl	8011938 <GUI_ALLOC_GetSize>
 800f80e:	4284      	cmp	r4, r0
 800f810:	d10f      	bne.n	800f832 <GUI__SetText+0x46>
 800f812:	2c00      	cmp	r4, #0
 800f814:	d0f2      	beq.n	800f7fc <GUI__SetText+0x10>
 800f816:	4638      	mov	r0, r7
 800f818:	f002 f860 	bl	80118dc <GUI_ALLOC_LockH>
 800f81c:	ad02      	add	r5, sp, #8
 800f81e:	4631      	mov	r1, r6
 800f820:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f824:	4622      	mov	r2, r4
 800f826:	f7f0 fcaf 	bl	8000188 <memcpy>
 800f82a:	4628      	mov	r0, r5
 800f82c:	f002 f864 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800f830:	e014      	b.n	800f85c <GUI__SetText+0x70>
 800f832:	4620      	mov	r0, r4
 800f834:	f002 faa0 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 800f838:	4607      	mov	r7, r0
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d0de      	beq.n	800f7fc <GUI__SetText+0x10>
 800f83e:	f002 f84d 	bl	80118dc <GUI_ALLOC_LockH>
 800f842:	ac02      	add	r4, sp, #8
 800f844:	4631      	mov	r1, r6
 800f846:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f84a:	f006 fbcf 	bl	8015fec <strcpy>
 800f84e:	4620      	mov	r0, r4
 800f850:	f002 f852 	bl	80118f8 <GUI_ALLOC_UnlockH>
 800f854:	4628      	mov	r0, r5
 800f856:	f002 fa93 	bl	8011d80 <GUI_ALLOC_FreePtr>
 800f85a:	602f      	str	r7, [r5, #0]
 800f85c:	2001      	movs	r0, #1
 800f85e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800f860 <GUI__ReduceRect>:
 800f860:	880b      	ldrh	r3, [r1, #0]
 800f862:	b292      	uxth	r2, r2
 800f864:	18d3      	adds	r3, r2, r3
 800f866:	8003      	strh	r3, [r0, #0]
 800f868:	888b      	ldrh	r3, [r1, #4]
 800f86a:	1a9b      	subs	r3, r3, r2
 800f86c:	8083      	strh	r3, [r0, #4]
 800f86e:	884b      	ldrh	r3, [r1, #2]
 800f870:	88c9      	ldrh	r1, [r1, #6]
 800f872:	18d3      	adds	r3, r2, r3
 800f874:	1a8a      	subs	r2, r1, r2
 800f876:	8043      	strh	r3, [r0, #2]
 800f878:	80c2      	strh	r2, [r0, #6]
 800f87a:	4770      	bx	lr

0800f87c <GUI__ManageCacheEx>:
 800f87c:	2801      	cmp	r0, #1
 800f87e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f880:	4604      	mov	r4, r0
 800f882:	460d      	mov	r5, r1
 800f884:	dc5f      	bgt.n	800f946 <GUI__ManageCacheEx+0xca>
 800f886:	2901      	cmp	r1, #1
 800f888:	d004      	beq.n	800f894 <GUI__ManageCacheEx+0x18>
 800f88a:	2902      	cmp	r1, #2
 800f88c:	d020      	beq.n	800f8d0 <GUI__ManageCacheEx+0x54>
 800f88e:	2900      	cmp	r1, #0
 800f890:	d034      	beq.n	800f8fc <GUI__ManageCacheEx+0x80>
 800f892:	e058      	b.n	800f946 <GUI__ManageCacheEx+0xca>
 800f894:	4e2d      	ldr	r6, [pc, #180]	; (800f94c <GUI__ManageCacheEx+0xd0>)
 800f896:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 800f89a:	b9af      	cbnz	r7, 800f8c8 <GUI__ManageCacheEx+0x4c>
 800f89c:	f001 fafa 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800f8a0:	9001      	str	r0, [sp, #4]
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	d04f      	beq.n	800f946 <GUI__ManageCacheEx+0xca>
 800f8a6:	68c2      	ldr	r2, [r0, #12]
 800f8a8:	210d      	movs	r1, #13
 800f8aa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f8ac:	a801      	add	r0, sp, #4
 800f8ae:	4798      	blx	r3
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	d047      	beq.n	800f946 <GUI__ManageCacheEx+0xca>
 800f8b6:	4629      	mov	r1, r5
 800f8b8:	9801      	ldr	r0, [sp, #4]
 800f8ba:	4790      	blx	r2
 800f8bc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f8c0:	1c41      	adds	r1, r0, #1
 800f8c2:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 800f8c6:	e017      	b.n	800f8f8 <GUI__ManageCacheEx+0x7c>
 800f8c8:	3701      	adds	r7, #1
 800f8ca:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 800f8ce:	e03a      	b.n	800f946 <GUI__ManageCacheEx+0xca>
 800f8d0:	f001 fae0 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800f8d4:	9001      	str	r0, [sp, #4]
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d035      	beq.n	800f946 <GUI__ManageCacheEx+0xca>
 800f8da:	68c4      	ldr	r4, [r0, #12]
 800f8dc:	210d      	movs	r1, #13
 800f8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8e0:	a801      	add	r0, sp, #4
 800f8e2:	4798      	blx	r3
 800f8e4:	4604      	mov	r4, r0
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d02d      	beq.n	800f946 <GUI__ManageCacheEx+0xca>
 800f8ea:	4819      	ldr	r0, [pc, #100]	; (800f950 <GUI__ManageCacheEx+0xd4>)
 800f8ec:	6801      	ldr	r1, [r0, #0]
 800f8ee:	b101      	cbz	r1, 800f8f2 <GUI__ManageCacheEx+0x76>
 800f8f0:	4788      	blx	r1
 800f8f2:	9801      	ldr	r0, [sp, #4]
 800f8f4:	2102      	movs	r1, #2
 800f8f6:	47a0      	blx	r4
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	e025      	b.n	800f948 <GUI__ManageCacheEx+0xcc>
 800f8fc:	4b13      	ldr	r3, [pc, #76]	; (800f94c <GUI__ManageCacheEx+0xd0>)
 800f8fe:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800f902:	2901      	cmp	r1, #1
 800f904:	d001      	beq.n	800f90a <GUI__ManageCacheEx+0x8e>
 800f906:	2001      	movs	r0, #1
 800f908:	e014      	b.n	800f934 <GUI__ManageCacheEx+0xb8>
 800f90a:	f001 fac3 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 800f90e:	9001      	str	r0, [sp, #4]
 800f910:	2800      	cmp	r0, #0
 800f912:	d0f8      	beq.n	800f906 <GUI__ManageCacheEx+0x8a>
 800f914:	68c0      	ldr	r0, [r0, #12]
 800f916:	210d      	movs	r1, #13
 800f918:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800f91a:	a801      	add	r0, sp, #4
 800f91c:	4790      	blx	r2
 800f91e:	4605      	mov	r5, r0
 800f920:	2800      	cmp	r0, #0
 800f922:	d0f0      	beq.n	800f906 <GUI__ManageCacheEx+0x8a>
 800f924:	4b0a      	ldr	r3, [pc, #40]	; (800f950 <GUI__ManageCacheEx+0xd4>)
 800f926:	6819      	ldr	r1, [r3, #0]
 800f928:	b101      	cbz	r1, 800f92c <GUI__ManageCacheEx+0xb0>
 800f92a:	4788      	blx	r1
 800f92c:	9801      	ldr	r0, [sp, #4]
 800f92e:	2100      	movs	r1, #0
 800f930:	47a8      	blx	r5
 800f932:	2000      	movs	r0, #0
 800f934:	4b05      	ldr	r3, [pc, #20]	; (800f94c <GUI__ManageCacheEx+0xd0>)
 800f936:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800f93a:	2a00      	cmp	r2, #0
 800f93c:	bf18      	it	ne
 800f93e:	3a01      	subne	r2, #1
 800f940:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800f944:	e000      	b.n	800f948 <GUI__ManageCacheEx+0xcc>
 800f946:	2001      	movs	r0, #1
 800f948:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f94a:	bf00      	nop
 800f94c:	20016e2c 	.word	0x20016e2c
 800f950:	20016e28 	.word	0x20016e28

0800f954 <GUI__ManageCache>:
 800f954:	4b02      	ldr	r3, [pc, #8]	; (800f960 <GUI__ManageCache+0xc>)
 800f956:	4601      	mov	r1, r0
 800f958:	6818      	ldr	r0, [r3, #0]
 800f95a:	7c40      	ldrb	r0, [r0, #17]
 800f95c:	f7ff bf8e 	b.w	800f87c <GUI__ManageCacheEx>
 800f960:	2000027c 	.word	0x2000027c

0800f964 <GUI__IntersectRects>:
 800f964:	b570      	push	{r4, r5, r6, lr}
 800f966:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f96a:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 800f96e:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f972:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f976:	42b5      	cmp	r5, r6
 800f978:	bfa8      	it	ge
 800f97a:	462e      	movge	r6, r5
 800f97c:	429c      	cmp	r4, r3
 800f97e:	bfb8      	it	lt
 800f980:	461c      	movlt	r4, r3
 800f982:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800f986:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f98a:	b2b3      	uxth	r3, r6
 800f98c:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800f990:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800f994:	8043      	strh	r3, [r0, #2]
 800f996:	42ae      	cmp	r6, r5
 800f998:	bfb8      	it	lt
 800f99a:	4635      	movlt	r5, r6
 800f99c:	b2a4      	uxth	r4, r4
 800f99e:	b2ad      	uxth	r5, r5
 800f9a0:	4291      	cmp	r1, r2
 800f9a2:	bfb8      	it	lt
 800f9a4:	460a      	movlt	r2, r1
 800f9a6:	8004      	strh	r4, [r0, #0]
 800f9a8:	8085      	strh	r5, [r0, #4]
 800f9aa:	b224      	sxth	r4, r4
 800f9ac:	b22d      	sxth	r5, r5
 800f9ae:	b291      	uxth	r1, r2
 800f9b0:	42a5      	cmp	r5, r4
 800f9b2:	80c1      	strh	r1, [r0, #6]
 800f9b4:	db06      	blt.n	800f9c4 <GUI__IntersectRects+0x60>
 800f9b6:	b208      	sxth	r0, r1
 800f9b8:	b21b      	sxth	r3, r3
 800f9ba:	4298      	cmp	r0, r3
 800f9bc:	bfb4      	ite	lt
 800f9be:	2000      	movlt	r0, #0
 800f9c0:	2001      	movge	r0, #1
 800f9c2:	bd70      	pop	{r4, r5, r6, pc}
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}

0800f9c8 <GUI__IntersectRect>:
 800f9c8:	880b      	ldrh	r3, [r1, #0]
 800f9ca:	b510      	push	{r4, lr}
 800f9cc:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f9d0:	b21a      	sxth	r2, r3
 800f9d2:	4294      	cmp	r4, r2
 800f9d4:	bfb8      	it	lt
 800f9d6:	8003      	strhlt	r3, [r0, #0]
 800f9d8:	884b      	ldrh	r3, [r1, #2]
 800f9da:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800f9de:	b21a      	sxth	r2, r3
 800f9e0:	4294      	cmp	r4, r2
 800f9e2:	bfb8      	it	lt
 800f9e4:	8043      	strhlt	r3, [r0, #2]
 800f9e6:	888b      	ldrh	r3, [r1, #4]
 800f9e8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f9ec:	b21a      	sxth	r2, r3
 800f9ee:	4294      	cmp	r4, r2
 800f9f0:	bfc8      	it	gt
 800f9f2:	8083      	strhgt	r3, [r0, #4]
 800f9f4:	88cb      	ldrh	r3, [r1, #6]
 800f9f6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f9fa:	b21a      	sxth	r2, r3
 800f9fc:	4291      	cmp	r1, r2
 800f9fe:	bfc8      	it	gt
 800fa00:	80c3      	strhgt	r3, [r0, #6]
 800fa02:	bd10      	pop	{r4, pc}

0800fa04 <_GetTwinArcPara>:
 800fa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa08:	fb01 f901 	mul.w	r9, r1, r1
 800fa0c:	1e47      	subs	r7, r0, #1
 800fa0e:	4604      	mov	r4, r0
 800fa10:	fb00 f000 	mul.w	r0, r0, r0
 800fa14:	ebc9 0000 	rsb	r0, r9, r0
 800fa18:	460d      	mov	r5, r1
 800fa1a:	4692      	mov	sl, r2
 800fa1c:	4698      	mov	r8, r3
 800fa1e:	9e08      	ldr	r6, [sp, #32]
 800fa20:	f005 f8e9 	bl	8014bf6 <GUI__sqrt32>
 800fa24:	42bd      	cmp	r5, r7
 800fa26:	f8ca 0000 	str.w	r0, [sl]
 800fa2a:	da10      	bge.n	800fa4e <_GetTwinArcPara+0x4a>
 800fa2c:	fb07 f107 	mul.w	r1, r7, r7
 800fa30:	ebc9 0001 	rsb	r0, r9, r1
 800fa34:	f005 f8df 	bl	8014bf6 <GUI__sqrt32>
 800fa38:	3c02      	subs	r4, #2
 800fa3a:	42a5      	cmp	r5, r4
 800fa3c:	f8c8 0000 	str.w	r0, [r8]
 800fa40:	da03      	bge.n	800fa4a <_GetTwinArcPara+0x46>
 800fa42:	1e42      	subs	r2, r0, #1
 800fa44:	6032      	str	r2, [r6, #0]
 800fa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	e002      	b.n	800fa54 <_GetTwinArcPara+0x50>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	f8c8 3000 	str.w	r3, [r8]
 800fa54:	6033      	str	r3, [r6, #0]
 800fa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800fa5c <GUI__DrawTwinArc2>:
 800fa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa60:	461c      	mov	r4, r3
 800fa62:	4b50      	ldr	r3, [pc, #320]	; (800fba4 <GUI__DrawTwinArc2+0x148>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800fa68:	eb00 0805 	add.w	r8, r0, r5
 800fa6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fa6e:	eb01 0905 	add.w	r9, r1, r5
 800fa72:	1815      	adds	r5, r2, r0
 800fa74:	b08b      	sub	sp, #44	; 0x2c
 800fa76:	1929      	adds	r1, r5, r4
 800fa78:	1e4a      	subs	r2, r1, #1
 800fa7a:	a808      	add	r0, sp, #32
 800fa7c:	f8ad 8020 	strh.w	r8, [sp, #32]
 800fa80:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 800fa84:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 800fa88:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800fa8c:	f7fc feaa 	bl	800c7e4 <WM__InitIVRSearch>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	f000 8083 	beq.w	800fb9c <GUI__DrawTwinArc2+0x140>
 800fa96:	2c00      	cmp	r4, #0
 800fa98:	dc02      	bgt.n	800faa0 <GUI__DrawTwinArc2+0x44>
 800fa9a:	f7fc fde3 	bl	800c664 <WM__GetNextIVR>
 800fa9e:	e7f7      	b.n	800fa90 <GUI__DrawTwinArc2+0x34>
 800faa0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800faa2:	f000 fbf1 	bl	8010288 <GUI_SetColor>
 800faa6:	1e67      	subs	r7, r4, #1
 800faa8:	462e      	mov	r6, r5
 800faaa:	3601      	adds	r6, #1
 800faac:	b317      	cbz	r7, 800faf4 <GUI__DrawTwinArc2+0x98>
 800faae:	ab07      	add	r3, sp, #28
 800fab0:	4639      	mov	r1, r7
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	4620      	mov	r0, r4
 800fab6:	aa05      	add	r2, sp, #20
 800fab8:	ab06      	add	r3, sp, #24
 800faba:	f7ff ffa3 	bl	800fa04 <_GetTwinArcPara>
 800fabe:	f8dd b018 	ldr.w	fp, [sp, #24]
 800fac2:	9905      	ldr	r1, [sp, #20]
 800fac4:	eb08 0004 	add.w	r0, r8, r4
 800fac8:	ebc4 0309 	rsb	r3, r4, r9
 800facc:	ebcb 0200 	rsb	r2, fp, r0
 800fad0:	eb03 0a01 	add.w	sl, r3, r1
 800fad4:	1a40      	subs	r0, r0, r1
 800fad6:	3a01      	subs	r2, #1
 800fad8:	4631      	mov	r1, r6
 800fada:	9303      	str	r3, [sp, #12]
 800fadc:	f7ff fb02 	bl	800f0e4 <LCD_DrawHLine>
 800fae0:	9803      	ldr	r0, [sp, #12]
 800fae2:	eb00 010b 	add.w	r1, r0, fp
 800fae6:	1c48      	adds	r0, r1, #1
 800fae8:	4652      	mov	r2, sl
 800faea:	4631      	mov	r1, r6
 800faec:	f7ff fafa 	bl	800f0e4 <LCD_DrawHLine>
 800faf0:	3f01      	subs	r7, #1
 800faf2:	e7da      	b.n	800faaa <GUI__DrawTwinArc2+0x4e>
 800faf4:	2c01      	cmp	r4, #1
 800faf6:	d0d0      	beq.n	800fa9a <GUI__DrawTwinArc2+0x3e>
 800faf8:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fafa:	f000 fbc5 	bl	8010288 <GUI_SetColor>
 800fafe:	1ea6      	subs	r6, r4, #2
 800fb00:	b326      	cbz	r6, 800fb4c <GUI__DrawTwinArc2+0xf0>
 800fb02:	1961      	adds	r1, r4, r5
 800fb04:	aa07      	add	r2, sp, #28
 800fb06:	ebc6 0a01 	rsb	sl, r6, r1
 800fb0a:	9200      	str	r2, [sp, #0]
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	4620      	mov	r0, r4
 800fb10:	aa05      	add	r2, sp, #20
 800fb12:	ab06      	add	r3, sp, #24
 800fb14:	f7ff ff76 	bl	800fa04 <_GetTwinArcPara>
 800fb18:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800fb1c:	9906      	ldr	r1, [sp, #24]
 800fb1e:	eb08 0004 	add.w	r0, r8, r4
 800fb22:	ebc4 0309 	rsb	r3, r4, r9
 800fb26:	ebcb 0200 	rsb	r2, fp, r0
 800fb2a:	185f      	adds	r7, r3, r1
 800fb2c:	1a40      	subs	r0, r0, r1
 800fb2e:	3a01      	subs	r2, #1
 800fb30:	4651      	mov	r1, sl
 800fb32:	9303      	str	r3, [sp, #12]
 800fb34:	f7ff fad6 	bl	800f0e4 <LCD_DrawHLine>
 800fb38:	9803      	ldr	r0, [sp, #12]
 800fb3a:	eb00 010b 	add.w	r1, r0, fp
 800fb3e:	1c48      	adds	r0, r1, #1
 800fb40:	463a      	mov	r2, r7
 800fb42:	4651      	mov	r1, sl
 800fb44:	f7ff face 	bl	800f0e4 <LCD_DrawHLine>
 800fb48:	3e01      	subs	r6, #1
 800fb4a:	e7d9      	b.n	800fb00 <GUI__DrawTwinArc2+0xa4>
 800fb4c:	2c02      	cmp	r4, #2
 800fb4e:	d0a4      	beq.n	800fa9a <GUI__DrawTwinArc2+0x3e>
 800fb50:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fb52:	f000 fb99 	bl	8010288 <GUI_SetColor>
 800fb56:	1ee6      	subs	r6, r4, #3
 800fb58:	2e00      	cmp	r6, #0
 800fb5a:	d09e      	beq.n	800fa9a <GUI__DrawTwinArc2+0x3e>
 800fb5c:	af07      	add	r7, sp, #28
 800fb5e:	4631      	mov	r1, r6
 800fb60:	9700      	str	r7, [sp, #0]
 800fb62:	4620      	mov	r0, r4
 800fb64:	aa05      	add	r2, sp, #20
 800fb66:	ab06      	add	r3, sp, #24
 800fb68:	f7ff ff4c 	bl	800fa04 <_GetTwinArcPara>
 800fb6c:	eb04 0a05 	add.w	sl, r4, r5
 800fb70:	9807      	ldr	r0, [sp, #28]
 800fb72:	eb08 0304 	add.w	r3, r8, r4
 800fb76:	ebc6 0a0a 	rsb	sl, r6, sl
 800fb7a:	ebc4 0b09 	rsb	fp, r4, r9
 800fb7e:	1e5a      	subs	r2, r3, #1
 800fb80:	eb0b 0700 	add.w	r7, fp, r0
 800fb84:	4651      	mov	r1, sl
 800fb86:	1a18      	subs	r0, r3, r0
 800fb88:	f7ff faac 	bl	800f0e4 <LCD_DrawHLine>
 800fb8c:	f10b 0001 	add.w	r0, fp, #1
 800fb90:	4651      	mov	r1, sl
 800fb92:	463a      	mov	r2, r7
 800fb94:	f7ff faa6 	bl	800f0e4 <LCD_DrawHLine>
 800fb98:	3e01      	subs	r6, #1
 800fb9a:	e7dd      	b.n	800fb58 <GUI__DrawTwinArc2+0xfc>
 800fb9c:	b00b      	add	sp, #44	; 0x2c
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba2:	bf00      	nop
 800fba4:	2000027c 	.word	0x2000027c

0800fba8 <GUI__DrawTwinArc4>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	4d73      	ldr	r5, [pc, #460]	; (800fd7c <GUI__DrawTwinArc4+0x1d4>)
 800fbae:	682f      	ldr	r7, [r5, #0]
 800fbb0:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800fbb2:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fbb4:	b08d      	sub	sp, #52	; 0x34
 800fbb6:	1980      	adds	r0, r0, r6
 800fbb8:	1949      	adds	r1, r1, r5
 800fbba:	195f      	adds	r7, r3, r5
 800fbbc:	9004      	str	r0, [sp, #16]
 800fbbe:	1996      	adds	r6, r2, r6
 800fbc0:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 800fbc4:	a80a      	add	r0, sp, #40	; 0x28
 800fbc6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800fbc8:	9105      	str	r1, [sp, #20]
 800fbca:	460d      	mov	r5, r1
 800fbcc:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 800fbd0:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 800fbd4:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 800fbd8:	f7fc fe04 	bl	800c7e4 <WM__InitIVRSearch>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	f000 80ca 	beq.w	800fd76 <GUI__DrawTwinArc4+0x1ce>
 800fbe2:	2c00      	cmp	r4, #0
 800fbe4:	dc02      	bgt.n	800fbec <GUI__DrawTwinArc4+0x44>
 800fbe6:	f7fc fd3d 	bl	800c664 <WM__GetNextIVR>
 800fbea:	e7f7      	b.n	800fbdc <GUI__DrawTwinArc4+0x34>
 800fbec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fbee:	f000 fb4b 	bl	8010288 <GUI_SetColor>
 800fbf2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fbf6:	1e65      	subs	r5, r4, #1
 800fbf8:	f108 0801 	add.w	r8, r8, #1
 800fbfc:	2d00      	cmp	r5, #0
 800fbfe:	d035      	beq.n	800fc6c <GUI__DrawTwinArc4+0xc4>
 800fc00:	1b39      	subs	r1, r7, r4
 800fc02:	ab09      	add	r3, sp, #36	; 0x24
 800fc04:	eb01 0a05 	add.w	sl, r1, r5
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	4629      	mov	r1, r5
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	aa07      	add	r2, sp, #28
 800fc10:	ab08      	add	r3, sp, #32
 800fc12:	f7ff fef7 	bl	800fa04 <_GetTwinArcPara>
 800fc16:	9804      	ldr	r0, [sp, #16]
 800fc18:	9a08      	ldr	r2, [sp, #32]
 800fc1a:	9907      	ldr	r1, [sp, #28]
 800fc1c:	1903      	adds	r3, r0, r4
 800fc1e:	1a98      	subs	r0, r3, r2
 800fc20:	ebc4 0b06 	rsb	fp, r4, r6
 800fc24:	ebc1 0c03 	rsb	ip, r1, r3
 800fc28:	eb0b 0901 	add.w	r9, fp, r1
 800fc2c:	1e43      	subs	r3, r0, #1
 800fc2e:	eb0b 0102 	add.w	r1, fp, r2
 800fc32:	4660      	mov	r0, ip
 800fc34:	461a      	mov	r2, r3
 800fc36:	f101 0b01 	add.w	fp, r1, #1
 800fc3a:	4641      	mov	r1, r8
 800fc3c:	9302      	str	r3, [sp, #8]
 800fc3e:	f8cd c00c 	str.w	ip, [sp, #12]
 800fc42:	f7ff fa4f 	bl	800f0e4 <LCD_DrawHLine>
 800fc46:	4658      	mov	r0, fp
 800fc48:	4641      	mov	r1, r8
 800fc4a:	464a      	mov	r2, r9
 800fc4c:	f7ff fa4a 	bl	800f0e4 <LCD_DrawHLine>
 800fc50:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fc54:	9a02      	ldr	r2, [sp, #8]
 800fc56:	4660      	mov	r0, ip
 800fc58:	4651      	mov	r1, sl
 800fc5a:	f7ff fa43 	bl	800f0e4 <LCD_DrawHLine>
 800fc5e:	4658      	mov	r0, fp
 800fc60:	4651      	mov	r1, sl
 800fc62:	464a      	mov	r2, r9
 800fc64:	f7ff fa3e 	bl	800f0e4 <LCD_DrawHLine>
 800fc68:	3d01      	subs	r5, #1
 800fc6a:	e7c5      	b.n	800fbf8 <GUI__DrawTwinArc4+0x50>
 800fc6c:	2c01      	cmp	r4, #1
 800fc6e:	d0ba      	beq.n	800fbe6 <GUI__DrawTwinArc4+0x3e>
 800fc70:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fc72:	f000 fb09 	bl	8010288 <GUI_SetColor>
 800fc76:	1ea5      	subs	r5, r4, #2
 800fc78:	2d00      	cmp	r5, #0
 800fc7a:	d03b      	beq.n	800fcf4 <GUI__DrawTwinArc4+0x14c>
 800fc7c:	9805      	ldr	r0, [sp, #20]
 800fc7e:	a909      	add	r1, sp, #36	; 0x24
 800fc80:	ebc4 0e07 	rsb	lr, r4, r7
 800fc84:	eb04 0800 	add.w	r8, r4, r0
 800fc88:	9100      	str	r1, [sp, #0]
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	aa07      	add	r2, sp, #28
 800fc90:	ab08      	add	r3, sp, #32
 800fc92:	eb0e 0905 	add.w	r9, lr, r5
 800fc96:	f7ff feb5 	bl	800fa04 <_GetTwinArcPara>
 800fc9a:	9b04      	ldr	r3, [sp, #16]
 800fc9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc9e:	9908      	ldr	r1, [sp, #32]
 800fca0:	1918      	adds	r0, r3, r4
 800fca2:	1a83      	subs	r3, r0, r2
 800fca4:	ebc4 0a06 	rsb	sl, r4, r6
 800fca8:	ebc1 0c00 	rsb	ip, r1, r0
 800fcac:	3b01      	subs	r3, #1
 800fcae:	ebc5 0b08 	rsb	fp, r5, r8
 800fcb2:	eb0a 0002 	add.w	r0, sl, r2
 800fcb6:	eb0a 0801 	add.w	r8, sl, r1
 800fcba:	461a      	mov	r2, r3
 800fcbc:	f100 0a01 	add.w	sl, r0, #1
 800fcc0:	4659      	mov	r1, fp
 800fcc2:	4660      	mov	r0, ip
 800fcc4:	9302      	str	r3, [sp, #8]
 800fcc6:	f8cd c00c 	str.w	ip, [sp, #12]
 800fcca:	f7ff fa0b 	bl	800f0e4 <LCD_DrawHLine>
 800fcce:	4650      	mov	r0, sl
 800fcd0:	4659      	mov	r1, fp
 800fcd2:	4642      	mov	r2, r8
 800fcd4:	f7ff fa06 	bl	800f0e4 <LCD_DrawHLine>
 800fcd8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fcdc:	9a02      	ldr	r2, [sp, #8]
 800fcde:	4660      	mov	r0, ip
 800fce0:	4649      	mov	r1, r9
 800fce2:	f7ff f9ff 	bl	800f0e4 <LCD_DrawHLine>
 800fce6:	4650      	mov	r0, sl
 800fce8:	4649      	mov	r1, r9
 800fcea:	4642      	mov	r2, r8
 800fcec:	f7ff f9fa 	bl	800f0e4 <LCD_DrawHLine>
 800fcf0:	3d01      	subs	r5, #1
 800fcf2:	e7c1      	b.n	800fc78 <GUI__DrawTwinArc4+0xd0>
 800fcf4:	2c02      	cmp	r4, #2
 800fcf6:	f43f af76 	beq.w	800fbe6 <GUI__DrawTwinArc4+0x3e>
 800fcfa:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fcfc:	f000 fac4 	bl	8010288 <GUI_SetColor>
 800fd00:	1ee5      	subs	r5, r4, #3
 800fd02:	2d00      	cmp	r5, #0
 800fd04:	f43f af6f 	beq.w	800fbe6 <GUI__DrawTwinArc4+0x3e>
 800fd08:	9b05      	ldr	r3, [sp, #20]
 800fd0a:	aa09      	add	r2, sp, #36	; 0x24
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	eb04 0b03 	add.w	fp, r4, r3
 800fd12:	9200      	str	r2, [sp, #0]
 800fd14:	4620      	mov	r0, r4
 800fd16:	aa07      	add	r2, sp, #28
 800fd18:	ab08      	add	r3, sp, #32
 800fd1a:	f7ff fe73 	bl	800fa04 <_GetTwinArcPara>
 800fd1e:	9804      	ldr	r0, [sp, #16]
 800fd20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd22:	1901      	adds	r1, r0, r4
 800fd24:	ebc2 0c01 	rsb	ip, r2, r1
 800fd28:	1e4b      	subs	r3, r1, #1
 800fd2a:	ebc5 0b0b 	rsb	fp, r5, fp
 800fd2e:	ebc4 0a06 	rsb	sl, r4, r6
 800fd32:	eb0a 0802 	add.w	r8, sl, r2
 800fd36:	4660      	mov	r0, ip
 800fd38:	461a      	mov	r2, r3
 800fd3a:	f10a 0a01 	add.w	sl, sl, #1
 800fd3e:	4659      	mov	r1, fp
 800fd40:	9302      	str	r3, [sp, #8]
 800fd42:	f8cd c00c 	str.w	ip, [sp, #12]
 800fd46:	f7ff f9cd 	bl	800f0e4 <LCD_DrawHLine>
 800fd4a:	4650      	mov	r0, sl
 800fd4c:	4659      	mov	r1, fp
 800fd4e:	4642      	mov	r2, r8
 800fd50:	f7ff f9c8 	bl	800f0e4 <LCD_DrawHLine>
 800fd54:	ebc4 0907 	rsb	r9, r4, r7
 800fd58:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fd5c:	9a02      	ldr	r2, [sp, #8]
 800fd5e:	44a9      	add	r9, r5
 800fd60:	4660      	mov	r0, ip
 800fd62:	4649      	mov	r1, r9
 800fd64:	f7ff f9be 	bl	800f0e4 <LCD_DrawHLine>
 800fd68:	4650      	mov	r0, sl
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	4642      	mov	r2, r8
 800fd6e:	f7ff f9b9 	bl	800f0e4 <LCD_DrawHLine>
 800fd72:	3d01      	subs	r5, #1
 800fd74:	e7c5      	b.n	800fd02 <GUI__DrawTwinArc4+0x15a>
 800fd76:	b00d      	add	sp, #52	; 0x34
 800fd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7c:	2000027c 	.word	0x2000027c

0800fd80 <GUI__MixColors>:
 800fd80:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800fd84:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800fd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd8a:	d027      	beq.n	800fddc <GUI__MixColors+0x5c>
 800fd8c:	43d5      	mvns	r5, r2
 800fd8e:	b2eb      	uxtb	r3, r5
 800fd90:	b2cd      	uxtb	r5, r1
 800fd92:	b2c6      	uxtb	r6, r0
 800fd94:	435d      	muls	r5, r3
 800fd96:	fb06 5502 	mla	r5, r6, r2, r5
 800fd9a:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800fd9e:	435e      	muls	r6, r3
 800fda0:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800fda4:	fb04 6402 	mla	r4, r4, r2, r6
 800fda8:	0a26      	lsrs	r6, r4, #8
 800fdaa:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800fdae:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800fdb2:	435c      	muls	r4, r3
 800fdb4:	0e09      	lsrs	r1, r1, #24
 800fdb6:	434b      	muls	r3, r1
 800fdb8:	0e00      	lsrs	r0, r0, #24
 800fdba:	fb07 4402 	mla	r4, r7, r2, r4
 800fdbe:	0a24      	lsrs	r4, r4, #8
 800fdc0:	fb00 3202 	mla	r2, r0, r2, r3
 800fdc4:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800fdc8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800fdcc:	0411      	lsls	r1, r2, #16
 800fdce:	4318      	orrs	r0, r3
 800fdd0:	f404 027f 	and.w	r2, r4, #16711680	; 0xff0000
 800fdd4:	4310      	orrs	r0, r2
 800fdd6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800fdda:	4308      	orrs	r0, r1
 800fddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800fde0 <_OnExit>:
 800fde0:	b570      	push	{r4, r5, r6, lr}
 800fde2:	4c0a      	ldr	r4, [pc, #40]	; (800fe0c <_OnExit+0x2c>)
 800fde4:	4d0a      	ldr	r5, [pc, #40]	; (800fe10 <_OnExit+0x30>)
 800fde6:	6820      	ldr	r0, [r4, #0]
 800fde8:	4e0a      	ldr	r6, [pc, #40]	; (800fe14 <_OnExit+0x34>)
 800fdea:	f001 fd63 	bl	80118b4 <GUI_ALLOC_FreeFixedBlock>
 800fdee:	6828      	ldr	r0, [r5, #0]
 800fdf0:	f001 fd60 	bl	80118b4 <GUI_ALLOC_FreeFixedBlock>
 800fdf4:	6830      	ldr	r0, [r6, #0]
 800fdf6:	f001 fd5d 	bl	80118b4 <GUI_ALLOC_FreeFixedBlock>
 800fdfa:	4a07      	ldr	r2, [pc, #28]	; (800fe18 <_OnExit+0x38>)
 800fdfc:	4807      	ldr	r0, [pc, #28]	; (800fe1c <_OnExit+0x3c>)
 800fdfe:	2300      	movs	r3, #0
 800fe00:	6033      	str	r3, [r6, #0]
 800fe02:	602b      	str	r3, [r5, #0]
 800fe04:	6023      	str	r3, [r4, #0]
 800fe06:	6013      	str	r3, [r2, #0]
 800fe08:	6003      	str	r3, [r0, #0]
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	20016e38 	.word	0x20016e38
 800fe10:	20016e34 	.word	0x20016e34
 800fe14:	20016e3c 	.word	0x20016e3c
 800fe18:	20016e40 	.word	0x20016e40
 800fe1c:	20016e50 	.word	0x20016e50

0800fe20 <GUI__GetAlphaBuffer>:
 800fe20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe24:	4698      	mov	r8, r3
 800fe26:	4b2a      	ldr	r3, [pc, #168]	; (800fed0 <GUI__GetAlphaBuffer+0xb0>)
 800fe28:	4616      	mov	r6, r2
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	460f      	mov	r7, r1
 800fe30:	b932      	cbnz	r2, 800fe40 <GUI__GetAlphaBuffer+0x20>
 800fe32:	2001      	movs	r0, #1
 800fe34:	6018      	str	r0, [r3, #0]
 800fe36:	4927      	ldr	r1, [pc, #156]	; (800fed4 <GUI__GetAlphaBuffer+0xb4>)
 800fe38:	4827      	ldr	r0, [pc, #156]	; (800fed8 <GUI__GetAlphaBuffer+0xb8>)
 800fe3a:	6001      	str	r1, [r0, #0]
 800fe3c:	f001 f94c 	bl	80110d8 <GUI__RegisterExit>
 800fe40:	4c26      	ldr	r4, [pc, #152]	; (800fedc <GUI__GetAlphaBuffer+0xbc>)
 800fe42:	6823      	ldr	r3, [r4, #0]
 800fe44:	b933      	cbnz	r3, 800fe54 <GUI__GetAlphaBuffer+0x34>
 800fe46:	4a26      	ldr	r2, [pc, #152]	; (800fee0 <GUI__GetAlphaBuffer+0xc0>)
 800fe48:	6810      	ldr	r0, [r2, #0]
 800fe4a:	6020      	str	r0, [r4, #0]
 800fe4c:	b910      	cbnz	r0, 800fe54 <GUI__GetAlphaBuffer+0x34>
 800fe4e:	f7ff f8a5 	bl	800ef9c <LCD_GetVXSizeMax>
 800fe52:	6020      	str	r0, [r4, #0]
 800fe54:	f1b8 0f00 	cmp.w	r8, #0
 800fe58:	d002      	beq.n	800fe60 <GUI__GetAlphaBuffer+0x40>
 800fe5a:	6821      	ldr	r1, [r4, #0]
 800fe5c:	f8c8 1000 	str.w	r1, [r8]
 800fe60:	b195      	cbz	r5, 800fe88 <GUI__GetAlphaBuffer+0x68>
 800fe62:	4c20      	ldr	r4, [pc, #128]	; (800fee4 <GUI__GetAlphaBuffer+0xc4>)
 800fe64:	6823      	ldr	r3, [r4, #0]
 800fe66:	b953      	cbnz	r3, 800fe7e <GUI__GetAlphaBuffer+0x5e>
 800fe68:	4a1c      	ldr	r2, [pc, #112]	; (800fedc <GUI__GetAlphaBuffer+0xbc>)
 800fe6a:	6810      	ldr	r0, [r2, #0]
 800fe6c:	0080      	lsls	r0, r0, #2
 800fe6e:	f001 febb 	bl	8011be8 <GUI_ALLOC_GetFixedBlock>
 800fe72:	6020      	str	r0, [r4, #0]
 800fe74:	f1d0 0401 	rsbs	r4, r0, #1
 800fe78:	bf38      	it	cc
 800fe7a:	2400      	movcc	r4, #0
 800fe7c:	e000      	b.n	800fe80 <GUI__GetAlphaBuffer+0x60>
 800fe7e:	2400      	movs	r4, #0
 800fe80:	4918      	ldr	r1, [pc, #96]	; (800fee4 <GUI__GetAlphaBuffer+0xc4>)
 800fe82:	680b      	ldr	r3, [r1, #0]
 800fe84:	602b      	str	r3, [r5, #0]
 800fe86:	e000      	b.n	800fe8a <GUI__GetAlphaBuffer+0x6a>
 800fe88:	462c      	mov	r4, r5
 800fe8a:	b177      	cbz	r7, 800feaa <GUI__GetAlphaBuffer+0x8a>
 800fe8c:	4d16      	ldr	r5, [pc, #88]	; (800fee8 <GUI__GetAlphaBuffer+0xc8>)
 800fe8e:	682a      	ldr	r2, [r5, #0]
 800fe90:	b942      	cbnz	r2, 800fea4 <GUI__GetAlphaBuffer+0x84>
 800fe92:	4812      	ldr	r0, [pc, #72]	; (800fedc <GUI__GetAlphaBuffer+0xbc>)
 800fe94:	6801      	ldr	r1, [r0, #0]
 800fe96:	0088      	lsls	r0, r1, #2
 800fe98:	f001 fea6 	bl	8011be8 <GUI_ALLOC_GetFixedBlock>
 800fe9c:	6028      	str	r0, [r5, #0]
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	bf08      	it	eq
 800fea2:	2401      	moveq	r4, #1
 800fea4:	4b10      	ldr	r3, [pc, #64]	; (800fee8 <GUI__GetAlphaBuffer+0xc8>)
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	603a      	str	r2, [r7, #0]
 800feaa:	b176      	cbz	r6, 800feca <GUI__GetAlphaBuffer+0xaa>
 800feac:	4d0f      	ldr	r5, [pc, #60]	; (800feec <GUI__GetAlphaBuffer+0xcc>)
 800feae:	6828      	ldr	r0, [r5, #0]
 800feb0:	b940      	cbnz	r0, 800fec4 <GUI__GetAlphaBuffer+0xa4>
 800feb2:	490a      	ldr	r1, [pc, #40]	; (800fedc <GUI__GetAlphaBuffer+0xbc>)
 800feb4:	680b      	ldr	r3, [r1, #0]
 800feb6:	0098      	lsls	r0, r3, #2
 800feb8:	f001 fe96 	bl	8011be8 <GUI_ALLOC_GetFixedBlock>
 800febc:	6028      	str	r0, [r5, #0]
 800febe:	2800      	cmp	r0, #0
 800fec0:	bf08      	it	eq
 800fec2:	2401      	moveq	r4, #1
 800fec4:	4a09      	ldr	r2, [pc, #36]	; (800feec <GUI__GetAlphaBuffer+0xcc>)
 800fec6:	6810      	ldr	r0, [r2, #0]
 800fec8:	6030      	str	r0, [r6, #0]
 800feca:	4620      	mov	r0, r4
 800fecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed0:	20016e50 	.word	0x20016e50
 800fed4:	0800fde1 	.word	0x0800fde1
 800fed8:	20016e48 	.word	0x20016e48
 800fedc:	20016e40 	.word	0x20016e40
 800fee0:	20017a0c 	.word	0x20017a0c
 800fee4:	20016e38 	.word	0x20016e38
 800fee8:	20016e34 	.word	0x20016e34
 800feec:	20016e3c 	.word	0x20016e3c

0800fef0 <GUI__DoAlphaBlending>:
 800fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef4:	b093      	sub	sp, #76	; 0x4c
 800fef6:	2400      	movs	r4, #0
 800fef8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fefa:	900a      	str	r0, [sp, #40]	; 0x28
 800fefc:	910b      	str	r1, [sp, #44]	; 0x2c
 800fefe:	4617      	mov	r7, r2
 800ff00:	4698      	mov	r8, r3
 800ff02:	6034      	str	r4, [r6, #0]
 800ff04:	a80f      	add	r0, sp, #60	; 0x3c
 800ff06:	a910      	add	r1, sp, #64	; 0x40
 800ff08:	4622      	mov	r2, r4
 800ff0a:	ab11      	add	r3, sp, #68	; 0x44
 800ff0c:	f7ff ff88 	bl	800fe20 <GUI__GetAlphaBuffer>
 800ff10:	4605      	mov	r5, r0
 800ff12:	2800      	cmp	r0, #0
 800ff14:	f040 80c4 	bne.w	80100a0 <GUI__DoAlphaBlending+0x1b0>
 800ff18:	4c63      	ldr	r4, [pc, #396]	; (80100a8 <GUI__DoAlphaBlending+0x1b8>)
 800ff1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	4963      	ldr	r1, [pc, #396]	; (80100ac <GUI__DoAlphaBlending+0x1bc>)
 800ff20:	7c58      	ldrb	r0, [r3, #17]
 800ff22:	4590      	cmp	r8, r2
 800ff24:	bfa8      	it	ge
 800ff26:	4690      	movge	r8, r2
 800ff28:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 800ff2c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800ff30:	6913      	ldr	r3, [r2, #16]
 800ff32:	9206      	str	r2, [sp, #24]
 800ff34:	930c      	str	r3, [sp, #48]	; 0x30
 800ff36:	f7ff f803 	bl	800ef40 <GUI_GetBitsPerPixelEx>
 800ff3a:	9007      	str	r0, [sp, #28]
 800ff3c:	6820      	ldr	r0, [r4, #0]
 800ff3e:	4c5c      	ldr	r4, [pc, #368]	; (80100b0 <GUI__DoAlphaBlending+0x1c0>)
 800ff40:	7c40      	ldrb	r0, [r0, #17]
 800ff42:	f7ff f81b 	bl	800ef7c <GUI_GetpfIndex2ColorEx>
 800ff46:	42a0      	cmp	r0, r4
 800ff48:	9004      	str	r0, [sp, #16]
 800ff4a:	d005      	beq.n	800ff58 <GUI__DoAlphaBlending+0x68>
 800ff4c:	4d59      	ldr	r5, [pc, #356]	; (80100b4 <GUI__DoAlphaBlending+0x1c4>)
 800ff4e:	1b41      	subs	r1, r0, r5
 800ff50:	bf18      	it	ne
 800ff52:	2101      	movne	r1, #1
 800ff54:	9105      	str	r1, [sp, #20]
 800ff56:	e000      	b.n	800ff5a <GUI__DoAlphaBlending+0x6a>
 800ff58:	9505      	str	r5, [sp, #20]
 800ff5a:	2500      	movs	r5, #0
 800ff5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ff5e:	46ab      	mov	fp, r5
 800ff60:	1d3a      	adds	r2, r7, #4
 800ff62:	6838      	ldr	r0, [r7, #0]
 800ff64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ff66:	920d      	str	r2, [sp, #52]	; 0x34
 800ff68:	4798      	blx	r3
 800ff6a:	4681      	mov	r9, r0
 800ff6c:	0e00      	lsrs	r0, r0, #24
 800ff6e:	9008      	str	r0, [sp, #32]
 800ff70:	f000 8088 	beq.w	8010084 <GUI__DoAlphaBlending+0x194>
 800ff74:	f1bb 0f00 	cmp.w	fp, #0
 800ff78:	d142      	bne.n	8010000 <GUI__DoAlphaBlending+0x110>
 800ff7a:	4a4b      	ldr	r2, [pc, #300]	; (80100a8 <GUI__DoAlphaBlending+0x1b8>)
 800ff7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ff7e:	6813      	ldr	r3, [r2, #0]
 800ff80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff82:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800ff86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff88:	eb05 0801 	add.w	r8, r5, r1
 800ff8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ff8e:	4540      	cmp	r0, r8
 800ff90:	bfc8      	it	gt
 800ff92:	ebc8 0b00 	rsbgt	fp, r8, r0
 800ff96:	eb01 0c02 	add.w	ip, r1, r2
 800ff9a:	9906      	ldr	r1, [sp, #24]
 800ff9c:	f8cd c00c 	str.w	ip, [sp, #12]
 800ffa0:	eb0b 0a05 	add.w	sl, fp, r5
 800ffa4:	9101      	str	r1, [sp, #4]
 800ffa6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800ffaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ffac:	bfc8      	it	gt
 800ffae:	4680      	movgt	r8, r0
 800ffb0:	eb03 000a 	add.w	r0, r3, sl
 800ffb4:	f10c 32ff 	add.w	r2, ip, #4294967295
 800ffb8:	9000      	str	r0, [sp, #0]
 800ffba:	460b      	mov	r3, r1
 800ffbc:	4640      	mov	r0, r8
 800ffbe:	f004 fd31 	bl	8014a24 <GUI_ReadRectEx>
 800ffc2:	9a07      	ldr	r2, [sp, #28]
 800ffc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ffc6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800ffca:	2a17      	cmp	r2, #23
 800ffcc:	dc06      	bgt.n	800ffdc <GUI__DoAlphaBlending+0xec>
 800ffce:	4450      	add	r0, sl
 800ffd0:	ebcb 0104 	rsb	r1, fp, r4
 800ffd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffd6:	f004 fedf 	bl	8014d98 <GUI__ExpandPixelIndicesEx>
 800ffda:	e001      	b.n	800ffe0 <GUI__DoAlphaBlending+0xf0>
 800ffdc:	9a05      	ldr	r2, [sp, #20]
 800ffde:	b912      	cbnz	r2, 800ffe6 <GUI__DoAlphaBlending+0xf6>
 800ffe0:	f04f 0b01 	mov.w	fp, #1
 800ffe4:	e00c      	b.n	8010000 <GUI__DoAlphaBlending+0x110>
 800ffe6:	ebc8 0b0c 	rsb	fp, r8, ip
 800ffea:	4482      	add	sl, r0
 800ffec:	f8da 0000 	ldr.w	r0, [sl]
 800fff0:	9b04      	ldr	r3, [sp, #16]
 800fff2:	4798      	blx	r3
 800fff4:	f1bb 0b01 	subs.w	fp, fp, #1
 800fff8:	f84a 0b04 	str.w	r0, [sl], #4
 800fffc:	d1f6      	bne.n	800ffec <GUI__DoAlphaBlending+0xfc>
 800fffe:	e7ef      	b.n	800ffe0 <GUI__DoAlphaBlending+0xf0>
 8010000:	492d      	ldr	r1, [pc, #180]	; (80100b8 <GUI__DoAlphaBlending+0x1c8>)
 8010002:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010006:	f8d1 c000 	ldr.w	ip, [r1]
 801000a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801000c:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8010010:	f1bc 0f00 	cmp.w	ip, #0
 8010014:	d023      	beq.n	801005e <GUI__DoAlphaBlending+0x16e>
 8010016:	4451      	add	r1, sl
 8010018:	eb08 020a 	add.w	r2, r8, sl
 801001c:	910f      	str	r1, [sp, #60]	; 0x3c
 801001e:	9210      	str	r2, [sp, #64]	; 0x40
 8010020:	4623      	mov	r3, r4
 8010022:	4638      	mov	r0, r7
 8010024:	47e0      	blx	ip
 8010026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010028:	9910      	ldr	r1, [sp, #64]	; 0x40
 801002a:	2300      	movs	r3, #0
 801002c:	58fd      	ldr	r5, [r7, r3]
 801002e:	f005 407f 	and.w	r0, r5, #4278190080	; 0xff000000
 8010032:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8010036:	58d0      	ldr	r0, [r2, r3]
 8010038:	d101      	bne.n	801003e <GUI__DoAlphaBlending+0x14e>
 801003a:	50c8      	str	r0, [r1, r3]
 801003c:	e005      	b.n	801004a <GUI__DoAlphaBlending+0x15a>
 801003e:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8010042:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8010046:	bf08      	it	eq
 8010048:	50cd      	streq	r5, [r1, r3]
 801004a:	3304      	adds	r3, #4
 801004c:	3c01      	subs	r4, #1
 801004e:	d1ed      	bne.n	801002c <GUI__DoAlphaBlending+0x13c>
 8010050:	6832      	ldr	r2, [r6, #0]
 8010052:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010056:	f042 0101 	orr.w	r1, r2, #1
 801005a:	6031      	str	r1, [r6, #0]
 801005c:	e01e      	b.n	801009c <GUI__DoAlphaBlending+0x1ac>
 801005e:	9f08      	ldr	r7, [sp, #32]
 8010060:	2fff      	cmp	r7, #255	; 0xff
 8010062:	d104      	bne.n	801006e <GUI__DoAlphaBlending+0x17e>
 8010064:	f851 700a 	ldr.w	r7, [r1, sl]
 8010068:	f848 700a 	str.w	r7, [r8, sl]
 801006c:	e011      	b.n	8010092 <GUI__DoAlphaBlending+0x1a2>
 801006e:	9808      	ldr	r0, [sp, #32]
 8010070:	f851 100a 	ldr.w	r1, [r1, sl]
 8010074:	43c2      	mvns	r2, r0
 8010076:	b2d2      	uxtb	r2, r2
 8010078:	4648      	mov	r0, r9
 801007a:	f7ff fe81 	bl	800fd80 <GUI__MixColors>
 801007e:	f848 000a 	str.w	r0, [r8, sl]
 8010082:	e002      	b.n	801008a <GUI__DoAlphaBlending+0x19a>
 8010084:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010086:	f847 9025 	str.w	r9, [r7, r5, lsl #2]
 801008a:	6833      	ldr	r3, [r6, #0]
 801008c:	f043 0101 	orr.w	r1, r3, #1
 8010090:	6031      	str	r1, [r6, #0]
 8010092:	3501      	adds	r5, #1
 8010094:	3c01      	subs	r4, #1
 8010096:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010098:	f47f af62 	bne.w	800ff60 <GUI__DoAlphaBlending+0x70>
 801009c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801009e:	e000      	b.n	80100a2 <GUI__DoAlphaBlending+0x1b2>
 80100a0:	4620      	mov	r0, r4
 80100a2:	b013      	add	sp, #76	; 0x4c
 80100a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a8:	2000027c 	.word	0x2000027c
 80100ac:	20017a04 	.word	0x20017a04
 80100b0:	08011ea7 	.word	0x08011ea7
 80100b4:	08011ea5 	.word	0x08011ea5
 80100b8:	20016e44 	.word	0x20016e44

080100bc <GUI__AllocAlphaBuffer>:
 80100bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100be:	b108      	cbz	r0, 80100c4 <GUI__AllocAlphaBuffer+0x8>
 80100c0:	aa03      	add	r2, sp, #12
 80100c2:	e000      	b.n	80100c6 <GUI__AllocAlphaBuffer+0xa>
 80100c4:	4602      	mov	r2, r0
 80100c6:	a801      	add	r0, sp, #4
 80100c8:	a902      	add	r1, sp, #8
 80100ca:	2300      	movs	r3, #0
 80100cc:	f7ff fea8 	bl	800fe20 <GUI__GetAlphaBuffer>
 80100d0:	b005      	add	sp, #20
 80100d2:	bd00      	pop	{pc}

080100d4 <GUI_SignalEvent>:
 80100d4:	b508      	push	{r3, lr}
 80100d6:	4b02      	ldr	r3, [pc, #8]	; (80100e0 <GUI_SignalEvent+0xc>)
 80100d8:	6818      	ldr	r0, [r3, #0]
 80100da:	b100      	cbz	r0, 80100de <GUI_SignalEvent+0xa>
 80100dc:	4780      	blx	r0
 80100de:	bd08      	pop	{r3, pc}
 80100e0:	20016e54 	.word	0x20016e54

080100e4 <_Unlink>:
 80100e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100e6:	4605      	mov	r5, r0
 80100e8:	b1f0      	cbz	r0, 8010128 <_Unlink+0x44>
 80100ea:	f001 fbf7 	bl	80118dc <GUI_ALLOC_LockH>
 80100ee:	4b0f      	ldr	r3, [pc, #60]	; (801012c <_Unlink+0x48>)
 80100f0:	9000      	str	r0, [sp, #0]
 80100f2:	681c      	ldr	r4, [r3, #0]
 80100f4:	42ac      	cmp	r4, r5
 80100f6:	d104      	bne.n	8010102 <_Unlink+0x1e>
 80100f8:	6840      	ldr	r0, [r0, #4]
 80100fa:	6018      	str	r0, [r3, #0]
 80100fc:	e011      	b.n	8010122 <_Unlink+0x3e>
 80100fe:	f001 fbfb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8010102:	b174      	cbz	r4, 8010122 <_Unlink+0x3e>
 8010104:	4620      	mov	r0, r4
 8010106:	f001 fbe9 	bl	80118dc <GUI_ALLOC_LockH>
 801010a:	4601      	mov	r1, r0
 801010c:	a802      	add	r0, sp, #8
 801010e:	684c      	ldr	r4, [r1, #4]
 8010110:	f840 1d04 	str.w	r1, [r0, #-4]!
 8010114:	42ac      	cmp	r4, r5
 8010116:	d1f2      	bne.n	80100fe <_Unlink+0x1a>
 8010118:	9a00      	ldr	r2, [sp, #0]
 801011a:	6853      	ldr	r3, [r2, #4]
 801011c:	604b      	str	r3, [r1, #4]
 801011e:	f001 fbeb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8010122:	4668      	mov	r0, sp
 8010124:	f001 fbe8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8010128:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801012a:	bf00      	nop
 801012c:	20016e5c 	.word	0x20016e5c

08010130 <GUI_TIMER__GetFirstTimer>:
 8010130:	2300      	movs	r3, #0
 8010132:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010134:	6003      	str	r3, [r0, #0]
 8010136:	4605      	mov	r5, r0
 8010138:	4807      	ldr	r0, [pc, #28]	; (8010158 <GUI_TIMER__GetFirstTimer+0x28>)
 801013a:	6804      	ldr	r4, [r0, #0]
 801013c:	b154      	cbz	r4, 8010154 <GUI_TIMER__GetFirstTimer+0x24>
 801013e:	4620      	mov	r0, r4
 8010140:	f001 fbcc 	bl	80118dc <GUI_ALLOC_LockH>
 8010144:	a902      	add	r1, sp, #8
 8010146:	6902      	ldr	r2, [r0, #16]
 8010148:	f841 0d04 	str.w	r0, [r1, #-4]!
 801014c:	602a      	str	r2, [r5, #0]
 801014e:	4608      	mov	r0, r1
 8010150:	f001 fbd2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8010154:	4620      	mov	r0, r4
 8010156:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8010158:	20016e58 	.word	0x20016e58

0801015c <GUI_TIMER__GetNextTimerLin>:
 801015c:	2300      	movs	r3, #0
 801015e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010160:	600b      	str	r3, [r1, #0]
 8010162:	460d      	mov	r5, r1
 8010164:	4604      	mov	r4, r0
 8010166:	b180      	cbz	r0, 801018a <GUI_TIMER__GetNextTimerLin+0x2e>
 8010168:	f001 fbb8 	bl	80118dc <GUI_ALLOC_LockH>
 801016c:	6884      	ldr	r4, [r0, #8]
 801016e:	9001      	str	r0, [sp, #4]
 8010170:	b144      	cbz	r4, 8010184 <GUI_TIMER__GetNextTimerLin+0x28>
 8010172:	a801      	add	r0, sp, #4
 8010174:	f001 fbc0 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8010178:	4620      	mov	r0, r4
 801017a:	f001 fbaf 	bl	80118dc <GUI_ALLOC_LockH>
 801017e:	9001      	str	r0, [sp, #4]
 8010180:	6900      	ldr	r0, [r0, #16]
 8010182:	6028      	str	r0, [r5, #0]
 8010184:	a801      	add	r0, sp, #4
 8010186:	f001 fbb7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 801018a:	4620      	mov	r0, r4
 801018c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

08010190 <GUI_TIMER_Delete>:
 8010190:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010192:	4604      	mov	r4, r0
 8010194:	b348      	cbz	r0, 80101ea <GUI_TIMER_Delete+0x5a>
 8010196:	4e15      	ldr	r6, [pc, #84]	; (80101ec <GUI_TIMER_Delete+0x5c>)
 8010198:	6835      	ldr	r5, [r6, #0]
 801019a:	4285      	cmp	r5, r0
 801019c:	d10b      	bne.n	80101b6 <GUI_TIMER_Delete+0x26>
 801019e:	f001 fb9d 	bl	80118dc <GUI_ALLOC_LockH>
 80101a2:	a902      	add	r1, sp, #8
 80101a4:	f841 0d04 	str.w	r0, [r1, #-4]!
 80101a8:	6880      	ldr	r0, [r0, #8]
 80101aa:	6030      	str	r0, [r6, #0]
 80101ac:	4608      	mov	r0, r1
 80101ae:	e014      	b.n	80101da <GUI_TIMER_Delete+0x4a>
 80101b0:	4668      	mov	r0, sp
 80101b2:	f001 fba1 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80101b6:	4628      	mov	r0, r5
 80101b8:	f001 fb90 	bl	80118dc <GUI_ALLOC_LockH>
 80101bc:	6885      	ldr	r5, [r0, #8]
 80101be:	9000      	str	r0, [sp, #0]
 80101c0:	42a5      	cmp	r5, r4
 80101c2:	d1f5      	bne.n	80101b0 <GUI_TIMER_Delete+0x20>
 80101c4:	4620      	mov	r0, r4
 80101c6:	f001 fb89 	bl	80118dc <GUI_ALLOC_LockH>
 80101ca:	9b00      	ldr	r3, [sp, #0]
 80101cc:	6882      	ldr	r2, [r0, #8]
 80101ce:	9001      	str	r0, [sp, #4]
 80101d0:	609a      	str	r2, [r3, #8]
 80101d2:	a801      	add	r0, sp, #4
 80101d4:	f001 fb90 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80101d8:	4668      	mov	r0, sp
 80101da:	f001 fb8d 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80101de:	4620      	mov	r0, r4
 80101e0:	f7ff ff80 	bl	80100e4 <_Unlink>
 80101e4:	4620      	mov	r0, r4
 80101e6:	f001 fbb3 	bl	8011950 <GUI_ALLOC_Free>
 80101ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80101ec:	20016e58 	.word	0x20016e58

080101f0 <GUI_TIMER_GetFlag>:
 80101f0:	b513      	push	{r0, r1, r4, lr}
 80101f2:	460c      	mov	r4, r1
 80101f4:	b168      	cbz	r0, 8010212 <GUI_TIMER_GetFlag+0x22>
 80101f6:	f001 fb71 	bl	80118dc <GUI_ALLOC_LockH>
 80101fa:	ab02      	add	r3, sp, #8
 80101fc:	8982      	ldrh	r2, [r0, #12]
 80101fe:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010202:	4214      	tst	r4, r2
 8010204:	4618      	mov	r0, r3
 8010206:	bf0c      	ite	eq
 8010208:	2400      	moveq	r4, #0
 801020a:	2401      	movne	r4, #1
 801020c:	f001 fb74 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8010210:	e000      	b.n	8010214 <GUI_TIMER_GetFlag+0x24>
 8010212:	2401      	movs	r4, #1
 8010214:	4620      	mov	r0, r4
 8010216:	bd1c      	pop	{r2, r3, r4, pc}

08010218 <GUI_SetTextMode>:
 8010218:	4b03      	ldr	r3, [pc, #12]	; (8010228 <GUI_SetTextMode+0x10>)
 801021a:	6819      	ldr	r1, [r3, #0]
 801021c:	f9b1 202a 	ldrsh.w	r2, [r1, #42]	; 0x2a
 8010220:	8548      	strh	r0, [r1, #42]	; 0x2a
 8010222:	4610      	mov	r0, r2
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	2000027c 	.word	0x2000027c

0801022c <GUI_SetFont>:
 801022c:	4b03      	ldr	r3, [pc, #12]	; (801023c <GUI_SetFont+0x10>)
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	69d1      	ldr	r1, [r2, #28]
 8010232:	b100      	cbz	r0, 8010236 <GUI_SetFont+0xa>
 8010234:	61d0      	str	r0, [r2, #28]
 8010236:	4608      	mov	r0, r1
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	2000027c 	.word	0x2000027c

08010240 <GUI_SetDrawMode>:
 8010240:	f7fe bf1a 	b.w	800f078 <LCD_SetDrawMode>

08010244 <GL_SetDefault>:
 8010244:	b508      	push	{r3, lr}
 8010246:	2000      	movs	r0, #0
 8010248:	f000 f81c 	bl	8010284 <GUI_SetBkColor>
 801024c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010250:	f000 f81a 	bl	8010288 <GUI_SetColor>
 8010254:	2001      	movs	r0, #1
 8010256:	f000 f8a3 	bl	80103a0 <GUI_SetPenSize>
 801025a:	2000      	movs	r0, #0
 801025c:	f005 f95a 	bl	8015514 <GUI_SetTextAlign>
 8010260:	2000      	movs	r0, #0
 8010262:	f7ff ffd9 	bl	8010218 <GUI_SetTextMode>
 8010266:	2000      	movs	r0, #0
 8010268:	f7ff ffea 	bl	8010240 <GUI_SetDrawMode>
 801026c:	4b04      	ldr	r3, [pc, #16]	; (8010280 <GL_SetDefault+0x3c>)
 801026e:	6818      	ldr	r0, [r3, #0]
 8010270:	f7ff ffdc 	bl	801022c <GUI_SetFont>
 8010274:	2000      	movs	r0, #0
 8010276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801027a:	f005 b96f 	b.w	801555c <GUI_SetLineStyle>
 801027e:	bf00      	nop
 8010280:	20000280 	.word	0x20000280

08010284 <GUI_SetBkColor>:
 8010284:	f7ff ba42 	b.w	800f70c <LCD_SetBkColor>

08010288 <GUI_SetColor>:
 8010288:	f7ff ba48 	b.w	800f71c <LCD_SetColor>

0801028c <GUI__AlphaSuppressMixing>:
 801028c:	4b07      	ldr	r3, [pc, #28]	; (80102ac <GUI__AlphaSuppressMixing+0x20>)
 801028e:	b510      	push	{r4, lr}
 8010290:	681c      	ldr	r4, [r3, #0]
 8010292:	b120      	cbz	r0, 801029e <GUI__AlphaSuppressMixing+0x12>
 8010294:	2201      	movs	r2, #1
 8010296:	601a      	str	r2, [r3, #0]
 8010298:	f04f 30ff 	mov.w	r0, #4294967295
 801029c:	e002      	b.n	80102a4 <GUI__AlphaSuppressMixing+0x18>
 801029e:	6018      	str	r0, [r3, #0]
 80102a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80102a4:	f004 fc76 	bl	8014b94 <LCD_AA_SetAndMask>
 80102a8:	4620      	mov	r0, r4
 80102aa:	bd10      	pop	{r4, pc}
 80102ac:	20016e60 	.word	0x20016e60

080102b0 <GUI_SelectLayer>:
 80102b0:	b538      	push	{r3, r4, r5, lr}
 80102b2:	4b06      	ldr	r3, [pc, #24]	; (80102cc <GUI_SelectLayer+0x1c>)
 80102b4:	4604      	mov	r4, r0
 80102b6:	6818      	ldr	r0, [r3, #0]
 80102b8:	2c01      	cmp	r4, #1
 80102ba:	7c45      	ldrb	r5, [r0, #17]
 80102bc:	d802      	bhi.n	80102c4 <GUI_SelectLayer+0x14>
 80102be:	7444      	strb	r4, [r0, #17]
 80102c0:	f000 f808 	bl	80102d4 <GUI_SelectLCD>
 80102c4:	4902      	ldr	r1, [pc, #8]	; (80102d0 <GUI_SelectLayer+0x20>)
 80102c6:	4628      	mov	r0, r5
 80102c8:	600c      	str	r4, [r1, #0]
 80102ca:	bd38      	pop	{r3, r4, r5, pc}
 80102cc:	2000027c 	.word	0x2000027c
 80102d0:	200179b4 	.word	0x200179b4

080102d4 <GUI_SelectLCD>:
 80102d4:	b508      	push	{r3, lr}
 80102d6:	f004 fa95 	bl	8014804 <LCD_SelectLCD>
 80102da:	f7fe fd77 	bl	800edcc <LCD_UpdateColorIndices>
 80102de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80102e2:	f7fc bc57 	b.w	800cb94 <WM_Activate>
	...

080102e8 <GUI_SaveContext_W>:
 80102e8:	b508      	push	{r3, lr}
 80102ea:	4b03      	ldr	r3, [pc, #12]	; (80102f8 <GUI_SaveContext_W+0x10>)
 80102ec:	2270      	movs	r2, #112	; 0x70
 80102ee:	6819      	ldr	r1, [r3, #0]
 80102f0:	f7ef ff4a 	bl	8000188 <memcpy>
 80102f4:	bd08      	pop	{r3, pc}
 80102f6:	bf00      	nop
 80102f8:	2000027c 	.word	0x2000027c

080102fc <GUI_RestoreContext>:
 80102fc:	b508      	push	{r3, lr}
 80102fe:	4b03      	ldr	r3, [pc, #12]	; (801030c <GUI_RestoreContext+0x10>)
 8010300:	4601      	mov	r1, r0
 8010302:	2270      	movs	r2, #112	; 0x70
 8010304:	6818      	ldr	r0, [r3, #0]
 8010306:	f7ef ff3f 	bl	8000188 <memcpy>
 801030a:	bd08      	pop	{r3, pc}
 801030c:	2000027c 	.word	0x2000027c

08010310 <GUI_RectsIntersect>:
 8010310:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010314:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010318:	429a      	cmp	r2, r3
 801031a:	dc14      	bgt.n	8010346 <GUI_RectsIntersect+0x36>
 801031c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8010320:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010324:	429a      	cmp	r2, r3
 8010326:	dc0e      	bgt.n	8010346 <GUI_RectsIntersect+0x36>
 8010328:	f9b0 2000 	ldrsh.w	r2, [r0]
 801032c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010330:	429a      	cmp	r2, r3
 8010332:	dc08      	bgt.n	8010346 <GUI_RectsIntersect+0x36>
 8010334:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8010338:	f9b1 1000 	ldrsh.w	r1, [r1]
 801033c:	4291      	cmp	r1, r2
 801033e:	bfcc      	ite	gt
 8010340:	2000      	movgt	r0, #0
 8010342:	2001      	movle	r0, #1
 8010344:	4770      	bx	lr
 8010346:	2000      	movs	r0, #0
 8010348:	4770      	bx	lr

0801034a <GUI_ALLOC_Realloc>:
 801034a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801034c:	4604      	mov	r4, r0
 801034e:	4608      	mov	r0, r1
 8010350:	460e      	mov	r6, r1
 8010352:	f001 fd11 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 8010356:	4605      	mov	r5, r0
 8010358:	b1f8      	cbz	r0, 801039a <GUI_ALLOC_Realloc+0x50>
 801035a:	b1f4      	cbz	r4, 801039a <GUI_ALLOC_Realloc+0x50>
 801035c:	4620      	mov	r0, r4
 801035e:	f001 faeb 	bl	8011938 <GUI_ALLOC_GetSize>
 8010362:	42b0      	cmp	r0, r6
 8010364:	bfb4      	ite	lt
 8010366:	4607      	movlt	r7, r0
 8010368:	4637      	movge	r7, r6
 801036a:	4628      	mov	r0, r5
 801036c:	f001 fab6 	bl	80118dc <GUI_ALLOC_LockH>
 8010370:	9000      	str	r0, [sp, #0]
 8010372:	4620      	mov	r0, r4
 8010374:	f001 fab2 	bl	80118dc <GUI_ALLOC_LockH>
 8010378:	ae02      	add	r6, sp, #8
 801037a:	4601      	mov	r1, r0
 801037c:	463a      	mov	r2, r7
 801037e:	9001      	str	r0, [sp, #4]
 8010380:	f856 0d08 	ldr.w	r0, [r6, #-8]!
 8010384:	f7ef ff00 	bl	8000188 <memcpy>
 8010388:	4668      	mov	r0, sp
 801038a:	f001 fab5 	bl	80118f8 <GUI_ALLOC_UnlockH>
 801038e:	a801      	add	r0, sp, #4
 8010390:	f001 fab2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8010394:	4620      	mov	r0, r4
 8010396:	f001 fadb 	bl	8011950 <GUI_ALLOC_Free>
 801039a:	4628      	mov	r0, r5
 801039c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

080103a0 <GUI_SetPenSize>:
 80103a0:	4b02      	ldr	r3, [pc, #8]	; (80103ac <GUI_SetPenSize+0xc>)
 80103a2:	6819      	ldr	r1, [r3, #0]
 80103a4:	7e0a      	ldrb	r2, [r1, #24]
 80103a6:	7608      	strb	r0, [r1, #24]
 80103a8:	4610      	mov	r0, r2
 80103aa:	4770      	bx	lr
 80103ac:	2000027c 	.word	0x2000027c

080103b0 <GUI_StoreKey>:
 80103b0:	4b02      	ldr	r3, [pc, #8]	; (80103bc <GUI_StoreKey+0xc>)
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	b902      	cbnz	r2, 80103b8 <GUI_StoreKey+0x8>
 80103b6:	6018      	str	r0, [r3, #0]
 80103b8:	f7ff be8c 	b.w	80100d4 <GUI_SignalEvent>
 80103bc:	20016e64 	.word	0x20016e64

080103c0 <GUI_PollKeyMsg>:
 80103c0:	4a0a      	ldr	r2, [pc, #40]	; (80103ec <GUI_PollKeyMsg+0x2c>)
 80103c2:	490b      	ldr	r1, [pc, #44]	; (80103f0 <GUI_PollKeyMsg+0x30>)
 80103c4:	6813      	ldr	r3, [r2, #0]
 80103c6:	6808      	ldr	r0, [r1, #0]
 80103c8:	4283      	cmp	r3, r0
 80103ca:	b510      	push	{r4, lr}
 80103cc:	d00c      	beq.n	80103e8 <GUI_PollKeyMsg+0x28>
 80103ce:	4c09      	ldr	r4, [pc, #36]	; (80103f4 <GUI_PollKeyMsg+0x34>)
 80103d0:	42a3      	cmp	r3, r4
 80103d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80103d6:	d001      	beq.n	80103dc <GUI_PollKeyMsg+0x1c>
 80103d8:	3308      	adds	r3, #8
 80103da:	e000      	b.n	80103de <GUI_PollKeyMsg+0x1e>
 80103dc:	4b06      	ldr	r3, [pc, #24]	; (80103f8 <GUI_PollKeyMsg+0x38>)
 80103de:	6013      	str	r3, [r2, #0]
 80103e0:	f002 fea2 	bl	8013128 <WM_OnKey>
 80103e4:	2001      	movs	r0, #1
 80103e6:	bd10      	pop	{r4, pc}
 80103e8:	2000      	movs	r0, #0
 80103ea:	bd10      	pop	{r4, pc}
 80103ec:	20000278 	.word	0x20000278
 80103f0:	20000274 	.word	0x20000274
 80103f4:	20016eb8 	.word	0x20016eb8
 80103f8:	20016e68 	.word	0x20016e68

080103fc <GUI_MoveRect>:
 80103fc:	b168      	cbz	r0, 801041a <GUI_MoveRect+0x1e>
 80103fe:	8803      	ldrh	r3, [r0, #0]
 8010400:	b289      	uxth	r1, r1
 8010402:	18cb      	adds	r3, r1, r3
 8010404:	8003      	strh	r3, [r0, #0]
 8010406:	8883      	ldrh	r3, [r0, #4]
 8010408:	18c9      	adds	r1, r1, r3
 801040a:	8843      	ldrh	r3, [r0, #2]
 801040c:	8081      	strh	r1, [r0, #4]
 801040e:	b292      	uxth	r2, r2
 8010410:	18d1      	adds	r1, r2, r3
 8010412:	88c3      	ldrh	r3, [r0, #6]
 8010414:	8041      	strh	r1, [r0, #2]
 8010416:	18d2      	adds	r2, r2, r3
 8010418:	80c2      	strh	r2, [r0, #6]
 801041a:	4770      	bx	lr

0801041c <GUI_MergeRect>:
 801041c:	b510      	push	{r4, lr}
 801041e:	b338      	cbz	r0, 8010470 <GUI_MergeRect+0x54>
 8010420:	b309      	cbz	r1, 8010466 <GUI_MergeRect+0x4a>
 8010422:	b30a      	cbz	r2, 8010468 <GUI_MergeRect+0x4c>
 8010424:	f9b1 4000 	ldrsh.w	r4, [r1]
 8010428:	f9b2 3000 	ldrsh.w	r3, [r2]
 801042c:	429c      	cmp	r4, r3
 801042e:	bfb8      	it	lt
 8010430:	4623      	movlt	r3, r4
 8010432:	8003      	strh	r3, [r0, #0]
 8010434:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8010438:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801043c:	429c      	cmp	r4, r3
 801043e:	bfb8      	it	lt
 8010440:	4623      	movlt	r3, r4
 8010442:	8043      	strh	r3, [r0, #2]
 8010444:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8010448:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801044c:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8010450:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010454:	429c      	cmp	r4, r3
 8010456:	bfa8      	it	ge
 8010458:	4623      	movge	r3, r4
 801045a:	4291      	cmp	r1, r2
 801045c:	bfa8      	it	ge
 801045e:	460a      	movge	r2, r1
 8010460:	8083      	strh	r3, [r0, #4]
 8010462:	80c2      	strh	r2, [r0, #6]
 8010464:	bd10      	pop	{r4, pc}
 8010466:	4611      	mov	r1, r2
 8010468:	680b      	ldr	r3, [r1, #0]
 801046a:	6003      	str	r3, [r0, #0]
 801046c:	6849      	ldr	r1, [r1, #4]
 801046e:	6041      	str	r1, [r0, #4]
 8010470:	bd10      	pop	{r4, pc}
	...

08010474 <GUI_GotoXY>:
 8010474:	4b02      	ldr	r3, [pc, #8]	; (8010480 <GUI_GotoXY+0xc>)
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	8450      	strh	r0, [r2, #34]	; 0x22
 801047a:	8491      	strh	r1, [r2, #36]	; 0x24
 801047c:	2000      	movs	r0, #0
 801047e:	4770      	bx	lr
 8010480:	2000027c 	.word	0x2000027c

08010484 <GUI_GetYSizeOfFont>:
 8010484:	7e02      	ldrb	r2, [r0, #24]
 8010486:	7ec0      	ldrb	r0, [r0, #27]
 8010488:	4350      	muls	r0, r2
 801048a:	4770      	bx	lr

0801048c <GUI_GetStringDistX>:
 801048c:	b510      	push	{r4, lr}
 801048e:	4604      	mov	r4, r0
 8010490:	f004 fc6a 	bl	8014d68 <GUI__GetNumChars>
 8010494:	4601      	mov	r1, r0
 8010496:	4620      	mov	r0, r4
 8010498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801049c:	f001 b87a 	b.w	8011594 <GUI__GetLineDistX>

080104a0 <GUI_GetOrg>:
 80104a0:	4b04      	ldr	r3, [pc, #16]	; (80104b4 <GUI_GetOrg+0x14>)
 80104a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80104a6:	6002      	str	r2, [r0, #0]
 80104a8:	4803      	ldr	r0, [pc, #12]	; (80104b8 <GUI_GetOrg+0x18>)
 80104aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80104ae:	600b      	str	r3, [r1, #0]
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	200179f4 	.word	0x200179f4
 80104b8:	200179ec 	.word	0x200179ec

080104bc <GUI_GetFontSizeY>:
 80104bc:	f004 bc62 	b.w	8014d84 <GUI__GetFontSizeY>

080104c0 <GUI_GetClientRect>:
 80104c0:	b108      	cbz	r0, 80104c6 <GUI_GetClientRect+0x6>
 80104c2:	f7fb ba5f 	b.w	800b984 <WM_GetClientRect>
 80104c6:	4770      	bx	lr

080104c8 <GUI_FillRectEx>:
 80104c8:	4603      	mov	r3, r0
 80104ca:	f9b0 0000 	ldrsh.w	r0, [r0]
 80104ce:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80104d2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80104d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80104da:	f000 b801 	b.w	80104e0 <GUI_FillRect>
	...

080104e0 <GUI_FillRect>:
 80104e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104e2:	4c0f      	ldr	r4, [pc, #60]	; (8010520 <GUI_FillRect+0x40>)
 80104e4:	6826      	ldr	r6, [r4, #0]
 80104e6:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
 80104e8:	1947      	adds	r7, r0, r5
 80104ea:	6d30      	ldr	r0, [r6, #80]	; 0x50
 80104ec:	f8ad 7000 	strh.w	r7, [sp]
 80104f0:	180e      	adds	r6, r1, r0
 80104f2:	181c      	adds	r4, r3, r0
 80104f4:	1955      	adds	r5, r2, r5
 80104f6:	4668      	mov	r0, sp
 80104f8:	f8ad 5004 	strh.w	r5, [sp, #4]
 80104fc:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010500:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010504:	f7fc f96e 	bl	800c7e4 <WM__InitIVRSearch>
 8010508:	b140      	cbz	r0, 801051c <GUI_FillRect+0x3c>
 801050a:	4638      	mov	r0, r7
 801050c:	4631      	mov	r1, r6
 801050e:	462a      	mov	r2, r5
 8010510:	4623      	mov	r3, r4
 8010512:	f7fe fe33 	bl	800f17c <LCD_FillRect>
 8010516:	f7fc f8a5 	bl	800c664 <WM__GetNextIVR>
 801051a:	e7f5      	b.n	8010508 <GUI_FillRect+0x28>
 801051c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801051e:	bf00      	nop
 8010520:	2000027c 	.word	0x2000027c

08010524 <GUI_Exec1>:
 8010524:	4b08      	ldr	r3, [pc, #32]	; (8010548 <GUI_Exec1+0x24>)
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	b510      	push	{r4, lr}
 801052a:	b120      	cbz	r0, 8010536 <GUI_Exec1+0x12>
 801052c:	4780      	blx	r0
 801052e:	1c04      	adds	r4, r0, #0
 8010530:	bf18      	it	ne
 8010532:	2401      	movne	r4, #1
 8010534:	e000      	b.n	8010538 <GUI_Exec1+0x14>
 8010536:	4604      	mov	r4, r0
 8010538:	f7fc fa80 	bl	800ca3c <WM_Exec>
 801053c:	2800      	cmp	r0, #0
 801053e:	bf0c      	ite	eq
 8010540:	4620      	moveq	r0, r4
 8010542:	2001      	movne	r0, #1
 8010544:	bd10      	pop	{r4, pc}
 8010546:	bf00      	nop
 8010548:	200179f0 	.word	0x200179f0

0801054c <GUI_Exec>:
 801054c:	b510      	push	{r4, lr}
 801054e:	2400      	movs	r4, #0
 8010550:	f7ff ffe8 	bl	8010524 <GUI_Exec1>
 8010554:	b108      	cbz	r0, 801055a <GUI_Exec+0xe>
 8010556:	2401      	movs	r4, #1
 8010558:	e7fa      	b.n	8010550 <GUI_Exec+0x4>
 801055a:	4620      	mov	r0, r4
 801055c:	bd10      	pop	{r4, pc}
	...

08010560 <GUI_DrawVLine>:
 8010560:	4b0e      	ldr	r3, [pc, #56]	; (801059c <GUI_DrawVLine+0x3c>)
 8010562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010564:	681c      	ldr	r4, [r3, #0]
 8010566:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8010568:	1986      	adds	r6, r0, r6
 801056a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801056c:	180d      	adds	r5, r1, r0
 801056e:	1814      	adds	r4, r2, r0
 8010570:	b2b1      	uxth	r1, r6
 8010572:	4668      	mov	r0, sp
 8010574:	f8ad 1000 	strh.w	r1, [sp]
 8010578:	f8ad 1004 	strh.w	r1, [sp, #4]
 801057c:	f8ad 5002 	strh.w	r5, [sp, #2]
 8010580:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010584:	f7fc f92e 	bl	800c7e4 <WM__InitIVRSearch>
 8010588:	b138      	cbz	r0, 801059a <GUI_DrawVLine+0x3a>
 801058a:	4630      	mov	r0, r6
 801058c:	4629      	mov	r1, r5
 801058e:	4622      	mov	r2, r4
 8010590:	f7fe fdce 	bl	800f130 <LCD_DrawVLine>
 8010594:	f7fc f866 	bl	800c664 <WM__GetNextIVR>
 8010598:	e7f6      	b.n	8010588 <GUI_DrawVLine+0x28>
 801059a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 801059c:	2000027c 	.word	0x2000027c

080105a0 <GUI_DrawPixel>:
 80105a0:	4b0f      	ldr	r3, [pc, #60]	; (80105e0 <GUI_DrawPixel+0x40>)
 80105a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 80105a8:	6d14      	ldr	r4, [r2, #80]	; 0x50
 80105aa:	1945      	adds	r5, r0, r5
 80105ac:	b2a8      	uxth	r0, r5
 80105ae:	190c      	adds	r4, r1, r4
 80105b0:	b2a1      	uxth	r1, r4
 80105b2:	f8ad 0004 	strh.w	r0, [sp, #4]
 80105b6:	f8ad 0000 	strh.w	r0, [sp]
 80105ba:	4668      	mov	r0, sp
 80105bc:	f8ad 1006 	strh.w	r1, [sp, #6]
 80105c0:	f8ad 1002 	strh.w	r1, [sp, #2]
 80105c4:	f7fc f90e 	bl	800c7e4 <WM__InitIVRSearch>
 80105c8:	b148      	cbz	r0, 80105de <GUI_DrawPixel+0x3e>
 80105ca:	4b05      	ldr	r3, [pc, #20]	; (80105e0 <GUI_DrawPixel+0x40>)
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80105d0:	4621      	mov	r1, r4
 80105d2:	6843      	ldr	r3, [r0, #4]
 80105d4:	4628      	mov	r0, r5
 80105d6:	4798      	blx	r3
 80105d8:	f7fc f844 	bl	800c664 <WM__GetNextIVR>
 80105dc:	e7f4      	b.n	80105c8 <GUI_DrawPixel+0x28>
 80105de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80105e0:	2000027c 	.word	0x2000027c

080105e4 <GUI_DrawHLine>:
 80105e4:	4b10      	ldr	r3, [pc, #64]	; (8010628 <GUI_DrawHLine+0x44>)
 80105e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105e8:	681d      	ldr	r5, [r3, #0]
 80105ea:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 80105ec:	190e      	adds	r6, r1, r4
 80105ee:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80105f0:	f8ad 6000 	strh.w	r6, [sp]
 80105f4:	1845      	adds	r5, r0, r1
 80105f6:	b2a8      	uxth	r0, r5
 80105f8:	1914      	adds	r4, r2, r4
 80105fa:	f8ad 0002 	strh.w	r0, [sp, #2]
 80105fe:	f8ad 0006 	strh.w	r0, [sp, #6]
 8010602:	4668      	mov	r0, sp
 8010604:	f8ad 4004 	strh.w	r4, [sp, #4]
 8010608:	f7fc f8ec 	bl	800c7e4 <WM__InitIVRSearch>
 801060c:	b150      	cbz	r0, 8010624 <GUI_DrawHLine+0x40>
 801060e:	4a06      	ldr	r2, [pc, #24]	; (8010628 <GUI_DrawHLine+0x44>)
 8010610:	6813      	ldr	r3, [r2, #0]
 8010612:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8010614:	4630      	mov	r0, r6
 8010616:	680b      	ldr	r3, [r1, #0]
 8010618:	4622      	mov	r2, r4
 801061a:	4629      	mov	r1, r5
 801061c:	4798      	blx	r3
 801061e:	f7fc f821 	bl	800c664 <WM__GetNextIVR>
 8010622:	e7f3      	b.n	801060c <GUI_DrawHLine+0x28>
 8010624:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8010626:	bf00      	nop
 8010628:	2000027c 	.word	0x2000027c

0801062c <_DrawGradient>:
 801062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010630:	b091      	sub	sp, #68	; 0x44
 8010632:	4688      	mov	r8, r1
 8010634:	4614      	mov	r4, r2
 8010636:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010638:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801063a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801063c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8010640:	9102      	str	r1, [sp, #8]
 8010642:	4605      	mov	r5, r0
 8010644:	461e      	mov	r6, r3
 8010646:	9201      	str	r2, [sp, #4]
 8010648:	f004 ffab 	bl	80155a2 <GUI_GetColor>
 801064c:	4557      	cmp	r7, sl
 801064e:	900b      	str	r0, [sp, #44]	; 0x2c
 8010650:	d109      	bne.n	8010666 <_DrawGradient+0x3a>
 8010652:	4638      	mov	r0, r7
 8010654:	f7ff f862 	bl	800f71c <LCD_SetColor>
 8010658:	9901      	ldr	r1, [sp, #4]
 801065a:	b111      	cbz	r1, 8010662 <_DrawGradient+0x36>
 801065c:	4628      	mov	r0, r5
 801065e:	4641      	mov	r1, r8
 8010660:	e0b6      	b.n	80107d0 <_DrawGradient+0x1a4>
 8010662:	4640      	mov	r0, r8
 8010664:	e0ba      	b.n	80107dc <_DrawGradient+0x1b0>
 8010666:	fa5f fc87 	uxtb.w	ip, r7
 801066a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801066e:	f8cd c01c 	str.w	ip, [sp, #28]
 8010672:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8010676:	ea4f 6c17 	mov.w	ip, r7, lsr #24
 801067a:	f8cd 9020 	str.w	r9, [sp, #32]
 801067e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010682:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8010686:	fa5f f08a 	uxtb.w	r0, sl
 801068a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 801068e:	ebc9 0100 	rsb	r1, r9, r0
 8010692:	ebb6 0308 	subs.w	r3, r6, r8
 8010696:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801069a:	f8dd e020 	ldr.w	lr, [sp, #32]
 801069e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80106a2:	910d      	str	r1, [sp, #52]	; 0x34
 80106a4:	bf08      	it	eq
 80106a6:	2301      	moveq	r3, #1
 80106a8:	f3ca 4007 	ubfx	r0, sl, #16, #8
 80106ac:	f3ca 2207 	ubfx	r2, sl, #8, #8
 80106b0:	ebcc 0100 	rsb	r1, ip, r0
 80106b4:	ebc9 6a1a 	rsb	sl, r9, sl, lsr #24
 80106b8:	9303      	str	r3, [sp, #12]
 80106ba:	4638      	mov	r0, r7
 80106bc:	ebce 0302 	rsb	r3, lr, r2
 80106c0:	2700      	movs	r7, #0
 80106c2:	930c      	str	r3, [sp, #48]	; 0x30
 80106c4:	910e      	str	r1, [sp, #56]	; 0x38
 80106c6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80106ca:	f108 33ff 	add.w	r3, r8, #4294967295
 80106ce:	9706      	str	r7, [sp, #24]
 80106d0:	9705      	str	r7, [sp, #20]
 80106d2:	9704      	str	r7, [sp, #16]
 80106d4:	f04f 0901 	mov.w	r9, #1
 80106d8:	f103 0a01 	add.w	sl, r3, #1
 80106dc:	45b2      	cmp	sl, r6
 80106de:	dc6c      	bgt.n	80107ba <_DrawGradient+0x18e>
 80106e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80106e4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80106e8:	f8dd c018 	ldr.w	ip, [sp, #24]
 80106ec:	fb97 f2fb 	sdiv	r2, r7, fp
 80106f0:	eb0e 0102 	add.w	r1, lr, r2
 80106f4:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80106f8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80106fc:	fb9c f2fe 	sdiv	r2, ip, lr
 8010700:	445a      	add	r2, fp
 8010702:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010706:	b2d2      	uxtb	r2, r2
 8010708:	0412      	lsls	r2, r2, #16
 801070a:	ea42 6b01 	orr.w	fp, r2, r1, lsl #24
 801070e:	fb9c f1fe 	sdiv	r1, ip, lr
 8010712:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010716:	eb0c 0201 	add.w	r2, ip, r1
 801071a:	f8dd c010 	ldr.w	ip, [sp, #16]
 801071e:	b2d1      	uxtb	r1, r2
 8010720:	fb9c f2fe 	sdiv	r2, ip, lr
 8010724:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8010728:	4472      	add	r2, lr
 801072a:	b2d2      	uxtb	r2, r2
 801072c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8010730:	45c2      	cmp	sl, r8
 8010732:	ea4b 0b01 	orr.w	fp, fp, r1
 8010736:	dd25      	ble.n	8010784 <_DrawGradient+0x158>
 8010738:	4583      	cmp	fp, r0
 801073a:	d102      	bne.n	8010742 <_DrawGradient+0x116>
 801073c:	f109 0901 	add.w	r9, r9, #1
 8010740:	e020      	b.n	8010784 <_DrawGradient+0x158>
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	f7fe ffea 	bl	800f71c <LCD_SetColor>
 8010748:	f1b9 0f01 	cmp.w	r9, #1
 801074c:	9b00      	ldr	r3, [sp, #0]
 801074e:	d00f      	beq.n	8010770 <_DrawGradient+0x144>
 8010750:	9a01      	ldr	r2, [sp, #4]
 8010752:	ebc9 010a 	rsb	r1, r9, sl
 8010756:	b112      	cbz	r2, 801075e <_DrawGradient+0x132>
 8010758:	4628      	mov	r0, r5
 801075a:	4622      	mov	r2, r4
 801075c:	e003      	b.n	8010766 <_DrawGradient+0x13a>
 801075e:	4608      	mov	r0, r1
 8010760:	461a      	mov	r2, r3
 8010762:	4629      	mov	r1, r5
 8010764:	4623      	mov	r3, r4
 8010766:	f7fe fd09 	bl	800f17c <LCD_FillRect>
 801076a:	f04f 0901 	mov.w	r9, #1
 801076e:	e009      	b.n	8010784 <_DrawGradient+0x158>
 8010770:	9801      	ldr	r0, [sp, #4]
 8010772:	b110      	cbz	r0, 801077a <_DrawGradient+0x14e>
 8010774:	4628      	mov	r0, r5
 8010776:	4619      	mov	r1, r3
 8010778:	e001      	b.n	801077e <_DrawGradient+0x152>
 801077a:	4618      	mov	r0, r3
 801077c:	4629      	mov	r1, r5
 801077e:	4622      	mov	r2, r4
 8010780:	9b02      	ldr	r3, [sp, #8]
 8010782:	4798      	blx	r3
 8010784:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010788:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801078c:	44f4      	add	ip, lr
 801078e:	f8cd c010 	str.w	ip, [sp, #16]
 8010792:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8010796:	f8dd c014 	ldr.w	ip, [sp, #20]
 801079a:	44f4      	add	ip, lr
 801079c:	f8cd c014 	str.w	ip, [sp, #20]
 80107a0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80107a4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80107a8:	44f4      	add	ip, lr
 80107aa:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 80107ae:	f8cd c018 	str.w	ip, [sp, #24]
 80107b2:	4477      	add	r7, lr
 80107b4:	4658      	mov	r0, fp
 80107b6:	4653      	mov	r3, sl
 80107b8:	e78e      	b.n	80106d8 <_DrawGradient+0xac>
 80107ba:	f7fe ffaf 	bl	800f71c <LCD_SetColor>
 80107be:	f1b9 0f01 	cmp.w	r9, #1
 80107c2:	d00f      	beq.n	80107e4 <_DrawGradient+0x1b8>
 80107c4:	9801      	ldr	r0, [sp, #4]
 80107c6:	ebc9 0106 	rsb	r1, r9, r6
 80107ca:	b130      	cbz	r0, 80107da <_DrawGradient+0x1ae>
 80107cc:	4628      	mov	r0, r5
 80107ce:	3101      	adds	r1, #1
 80107d0:	4622      	mov	r2, r4
 80107d2:	4633      	mov	r3, r6
 80107d4:	f7fe fcd2 	bl	800f17c <LCD_FillRect>
 80107d8:	e00e      	b.n	80107f8 <_DrawGradient+0x1cc>
 80107da:	1c48      	adds	r0, r1, #1
 80107dc:	4629      	mov	r1, r5
 80107de:	4632      	mov	r2, r6
 80107e0:	4623      	mov	r3, r4
 80107e2:	e7f7      	b.n	80107d4 <_DrawGradient+0x1a8>
 80107e4:	9a01      	ldr	r2, [sp, #4]
 80107e6:	b112      	cbz	r2, 80107ee <_DrawGradient+0x1c2>
 80107e8:	4628      	mov	r0, r5
 80107ea:	4631      	mov	r1, r6
 80107ec:	e001      	b.n	80107f2 <_DrawGradient+0x1c6>
 80107ee:	4630      	mov	r0, r6
 80107f0:	4629      	mov	r1, r5
 80107f2:	4622      	mov	r2, r4
 80107f4:	9b02      	ldr	r3, [sp, #8]
 80107f6:	4798      	blx	r3
 80107f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80107fa:	b011      	add	sp, #68	; 0x44
 80107fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010800:	f7fe bf8c 	b.w	800f71c <LCD_SetColor>

08010804 <GUI_DrawGradientV>:
 8010804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010808:	4c15      	ldr	r4, [pc, #84]	; (8010860 <GUI_DrawGradientV+0x5c>)
 801080a:	6824      	ldr	r4, [r4, #0]
 801080c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801080e:	eb00 0905 	add.w	r9, r0, r5
 8010812:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010814:	b087      	sub	sp, #28
 8010816:	eb01 0800 	add.w	r8, r1, r0
 801081a:	181c      	adds	r4, r3, r0
 801081c:	1955      	adds	r5, r2, r5
 801081e:	a804      	add	r0, sp, #16
 8010820:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010822:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010824:	f8ad 9010 	strh.w	r9, [sp, #16]
 8010828:	f8ad 5014 	strh.w	r5, [sp, #20]
 801082c:	f8ad 8012 	strh.w	r8, [sp, #18]
 8010830:	f8ad 4016 	strh.w	r4, [sp, #22]
 8010834:	f7fb ffd6 	bl	800c7e4 <WM__InitIVRSearch>
 8010838:	b170      	cbz	r0, 8010858 <GUI_DrawGradientV+0x54>
 801083a:	4b0a      	ldr	r3, [pc, #40]	; (8010864 <GUI_DrawGradientV+0x60>)
 801083c:	9700      	str	r7, [sp, #0]
 801083e:	2101      	movs	r1, #1
 8010840:	9302      	str	r3, [sp, #8]
 8010842:	9103      	str	r1, [sp, #12]
 8010844:	4648      	mov	r0, r9
 8010846:	4641      	mov	r1, r8
 8010848:	462a      	mov	r2, r5
 801084a:	4623      	mov	r3, r4
 801084c:	9601      	str	r6, [sp, #4]
 801084e:	f7ff feed 	bl	801062c <_DrawGradient>
 8010852:	f7fb ff07 	bl	800c664 <WM__GetNextIVR>
 8010856:	e7ef      	b.n	8010838 <GUI_DrawGradientV+0x34>
 8010858:	b007      	add	sp, #28
 801085a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801085e:	bf00      	nop
 8010860:	2000027c 	.word	0x2000027c
 8010864:	0800f0e5 	.word	0x0800f0e5

08010868 <GUI_DrawGradientH>:
 8010868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801086c:	4c15      	ldr	r4, [pc, #84]	; (80108c4 <GUI_DrawGradientH+0x5c>)
 801086e:	6825      	ldr	r5, [r4, #0]
 8010870:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8010872:	eb00 0804 	add.w	r8, r0, r4
 8010876:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8010878:	b087      	sub	sp, #28
 801087a:	eb01 0900 	add.w	r9, r1, r0
 801087e:	181d      	adds	r5, r3, r0
 8010880:	1914      	adds	r4, r2, r4
 8010882:	a804      	add	r0, sp, #16
 8010884:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010886:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010888:	f8ad 8010 	strh.w	r8, [sp, #16]
 801088c:	f8ad 4014 	strh.w	r4, [sp, #20]
 8010890:	f8ad 9012 	strh.w	r9, [sp, #18]
 8010894:	f8ad 5016 	strh.w	r5, [sp, #22]
 8010898:	f7fb ffa4 	bl	800c7e4 <WM__InitIVRSearch>
 801089c:	b170      	cbz	r0, 80108bc <GUI_DrawGradientH+0x54>
 801089e:	4b0a      	ldr	r3, [pc, #40]	; (80108c8 <GUI_DrawGradientH+0x60>)
 80108a0:	9700      	str	r7, [sp, #0]
 80108a2:	2100      	movs	r1, #0
 80108a4:	9302      	str	r3, [sp, #8]
 80108a6:	9103      	str	r1, [sp, #12]
 80108a8:	4648      	mov	r0, r9
 80108aa:	4641      	mov	r1, r8
 80108ac:	462a      	mov	r2, r5
 80108ae:	4623      	mov	r3, r4
 80108b0:	9601      	str	r6, [sp, #4]
 80108b2:	f7ff febb 	bl	801062c <_DrawGradient>
 80108b6:	f7fb fed5 	bl	800c664 <WM__GetNextIVR>
 80108ba:	e7ef      	b.n	801089c <GUI_DrawGradientH+0x34>
 80108bc:	b007      	add	sp, #28
 80108be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108c2:	bf00      	nop
 80108c4:	2000027c 	.word	0x2000027c
 80108c8:	0800f131 	.word	0x0800f131

080108cc <_DrawBitmap>:
 80108cc:	b510      	push	{r4, lr}
 80108ce:	b086      	sub	sp, #24
 80108d0:	9c08      	ldr	r4, [sp, #32]
 80108d2:	9400      	str	r4, [sp, #0]
 80108d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80108d6:	9401      	str	r4, [sp, #4]
 80108d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80108da:	9402      	str	r4, [sp, #8]
 80108dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80108de:	9403      	str	r4, [sp, #12]
 80108e0:	4c03      	ldr	r4, [pc, #12]	; (80108f0 <_DrawBitmap+0x24>)
 80108e2:	9404      	str	r4, [sp, #16]
 80108e4:	4c03      	ldr	r4, [pc, #12]	; (80108f4 <_DrawBitmap+0x28>)
 80108e6:	9405      	str	r4, [sp, #20]
 80108e8:	f004 fb0e 	bl	8014f08 <GUI__DrawBitmap16bpp>
 80108ec:	b006      	add	sp, #24
 80108ee:	bd10      	pop	{r4, pc}
 80108f0:	08011ed1 	.word	0x08011ed1
 80108f4:	0802f764 	.word	0x0802f764

080108f8 <GL_DrawBitmap>:
 80108f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108fc:	68c6      	ldr	r6, [r0, #12]
 80108fe:	b087      	sub	sp, #28
 8010900:	4604      	mov	r4, r0
 8010902:	2000      	movs	r0, #0
 8010904:	4688      	mov	r8, r1
 8010906:	4617      	mov	r7, r2
 8010908:	f7ff fc9a 	bl	8010240 <GUI_SetDrawMode>
 801090c:	4605      	mov	r5, r0
 801090e:	b126      	cbz	r6, 801091a <GL_DrawBitmap+0x22>
 8010910:	7933      	ldrb	r3, [r6, #4]
 8010912:	b113      	cbz	r3, 801091a <GL_DrawBitmap+0x22>
 8010914:	f040 0002 	orr.w	r0, r0, #2
 8010918:	e001      	b.n	801091e <GL_DrawBitmap+0x26>
 801091a:	f025 0002 	bic.w	r0, r5, #2
 801091e:	f7ff fc8f 	bl	8010240 <GUI_SetDrawMode>
 8010922:	6921      	ldr	r1, [r4, #16]
 8010924:	b169      	cbz	r1, 8010942 <GL_DrawBitmap+0x4a>
 8010926:	68a0      	ldr	r0, [r4, #8]
 8010928:	8822      	ldrh	r2, [r4, #0]
 801092a:	8863      	ldrh	r3, [r4, #2]
 801092c:	9000      	str	r0, [sp, #0]
 801092e:	68e4      	ldr	r4, [r4, #12]
 8010930:	2001      	movs	r0, #1
 8010932:	9002      	str	r0, [sp, #8]
 8010934:	9003      	str	r0, [sp, #12]
 8010936:	9401      	str	r4, [sp, #4]
 8010938:	680c      	ldr	r4, [r1, #0]
 801093a:	4640      	mov	r0, r8
 801093c:	4639      	mov	r1, r7
 801093e:	47a0      	blx	r4
 8010940:	e020      	b.n	8010984 <GL_DrawBitmap+0x8c>
 8010942:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8010994 <GL_DrawBitmap+0x9c>
 8010946:	4a12      	ldr	r2, [pc, #72]	; (8010990 <GL_DrawBitmap+0x98>)
 8010948:	f8d9 3000 	ldr.w	r3, [r9]
 801094c:	6816      	ldr	r6, [r2, #0]
 801094e:	68e0      	ldr	r0, [r4, #12]
 8010950:	7c5a      	ldrb	r2, [r3, #17]
 8010952:	4621      	mov	r1, r4
 8010954:	47b0      	blx	r6
 8010956:	b928      	cbnz	r0, 8010964 <GL_DrawBitmap+0x6c>
 8010958:	88e1      	ldrh	r1, [r4, #6]
 801095a:	2901      	cmp	r1, #1
 801095c:	bf04      	itt	eq
 801095e:	f8d9 1000 	ldreq.w	r1, [r9]
 8010962:	6b88      	ldreq	r0, [r1, #56]	; 0x38
 8010964:	2101      	movs	r1, #1
 8010966:	8822      	ldrh	r2, [r4, #0]
 8010968:	8863      	ldrh	r3, [r4, #2]
 801096a:	9100      	str	r1, [sp, #0]
 801096c:	9101      	str	r1, [sp, #4]
 801096e:	88e1      	ldrh	r1, [r4, #6]
 8010970:	9102      	str	r1, [sp, #8]
 8010972:	88a1      	ldrh	r1, [r4, #4]
 8010974:	9103      	str	r1, [sp, #12]
 8010976:	68a1      	ldr	r1, [r4, #8]
 8010978:	9005      	str	r0, [sp, #20]
 801097a:	9104      	str	r1, [sp, #16]
 801097c:	4640      	mov	r0, r8
 801097e:	4639      	mov	r1, r7
 8010980:	f7fe fd02 	bl	800f388 <LCD_DrawBitmap>
 8010984:	4628      	mov	r0, r5
 8010986:	b007      	add	sp, #28
 8010988:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801098c:	f7ff bc58 	b.w	8010240 <GUI_SetDrawMode>
 8010990:	20000284 	.word	0x20000284
 8010994:	2000027c 	.word	0x2000027c

08010998 <GUI_DrawBitmap>:
 8010998:	4b11      	ldr	r3, [pc, #68]	; (80109e0 <GUI_DrawBitmap+0x48>)
 801099a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801099c:	4606      	mov	r6, r0
 801099e:	6818      	ldr	r0, [r3, #0]
 80109a0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80109a2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80109a4:	8870      	ldrh	r0, [r6, #2]
 80109a6:	194d      	adds	r5, r1, r5
 80109a8:	8831      	ldrh	r1, [r6, #0]
 80109aa:	f8ad 5000 	strh.w	r5, [sp]
 80109ae:	1914      	adds	r4, r2, r4
 80109b0:	1e4a      	subs	r2, r1, #1
 80109b2:	1e41      	subs	r1, r0, #1
 80109b4:	1953      	adds	r3, r2, r5
 80109b6:	4668      	mov	r0, sp
 80109b8:	190a      	adds	r2, r1, r4
 80109ba:	f8ad 3004 	strh.w	r3, [sp, #4]
 80109be:	f8ad 4002 	strh.w	r4, [sp, #2]
 80109c2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80109c6:	f7fb ff0d 	bl	800c7e4 <WM__InitIVRSearch>
 80109ca:	b138      	cbz	r0, 80109dc <GUI_DrawBitmap+0x44>
 80109cc:	4630      	mov	r0, r6
 80109ce:	4629      	mov	r1, r5
 80109d0:	4622      	mov	r2, r4
 80109d2:	f7ff ff91 	bl	80108f8 <GL_DrawBitmap>
 80109d6:	f7fb fe45 	bl	800c664 <WM__GetNextIVR>
 80109da:	e7f6      	b.n	80109ca <GUI_DrawBitmap+0x32>
 80109dc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80109de:	bf00      	nop
 80109e0:	2000027c 	.word	0x2000027c

080109e4 <GUI_WrapGetNumLines>:
 80109e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e6:	4605      	mov	r5, r0
 80109e8:	460e      	mov	r6, r1
 80109ea:	4617      	mov	r7, r2
 80109ec:	2400      	movs	r4, #0
 80109ee:	4628      	mov	r0, r5
 80109f0:	4631      	mov	r1, r6
 80109f2:	463a      	mov	r2, r7
 80109f4:	f004 f9a2 	bl	8014d3c <GUI__WrapGetNumBytesToNextLine>
 80109f8:	b110      	cbz	r0, 8010a00 <GUI_WrapGetNumLines+0x1c>
 80109fa:	182d      	adds	r5, r5, r0
 80109fc:	3401      	adds	r4, #1
 80109fe:	e7f6      	b.n	80109ee <GUI_WrapGetNumLines+0xa>
 8010a00:	4620      	mov	r0, r4
 8010a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a04 <GUI_DispStringInRectWrap>:
 8010a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a08:	b089      	sub	sp, #36	; 0x24
 8010a0a:	460c      	mov	r4, r1
 8010a0c:	9202      	str	r2, [sp, #8]
 8010a0e:	9303      	str	r3, [sp, #12]
 8010a10:	4605      	mov	r5, r0
 8010a12:	2800      	cmp	r0, #0
 8010a14:	f000 808e 	beq.w	8010b34 <GUI_DispStringInRectWrap+0x130>
 8010a18:	f8b1 9000 	ldrh.w	r9, [r1]
 8010a1c:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8010a20:	884e      	ldrh	r6, [r1, #2]
 8010a22:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 8010a26:	fa0f f28a 	sxth.w	r2, sl
 8010a2a:	fa0f f389 	sxth.w	r3, r9
 8010a2e:	1ad0      	subs	r0, r2, r3
 8010a30:	1c41      	adds	r1, r0, #1
 8010a32:	9101      	str	r1, [sp, #4]
 8010a34:	f000 fe48 	bl	80116c8 <GUI_GetFontDistY>
 8010a38:	9a02      	ldr	r2, [sp, #8]
 8010a3a:	f012 080c 	ands.w	r8, r2, #12
 8010a3e:	4607      	mov	r7, r0
 8010a40:	d01e      	beq.n	8010a80 <GUI_DispStringInRectWrap+0x7c>
 8010a42:	4628      	mov	r0, r5
 8010a44:	9901      	ldr	r1, [sp, #4]
 8010a46:	9a03      	ldr	r2, [sp, #12]
 8010a48:	f7ff ffcc 	bl	80109e4 <GUI_WrapGetNumLines>
 8010a4c:	f1b8 0f08 	cmp.w	r8, #8
 8010a50:	d005      	beq.n	8010a5e <GUI_DispStringInRectWrap+0x5a>
 8010a52:	f1b8 0f0c 	cmp.w	r8, #12
 8010a56:	d007      	beq.n	8010a68 <GUI_DispStringInRectWrap+0x64>
 8010a58:	f1b8 0f04 	cmp.w	r8, #4
 8010a5c:	d110      	bne.n	8010a80 <GUI_DispStringInRectWrap+0x7c>
 8010a5e:	f10b 0101 	add.w	r1, fp, #1
 8010a62:	fb07 1610 	mls	r6, r7, r0, r1
 8010a66:	e00a      	b.n	8010a7e <GUI_DispStringInRectWrap+0x7a>
 8010a68:	b233      	sxth	r3, r6
 8010a6a:	fa0f f18b 	sxth.w	r1, fp
 8010a6e:	1aca      	subs	r2, r1, r3
 8010a70:	1c51      	adds	r1, r2, #1
 8010a72:	fb07 1010 	mls	r0, r7, r0, r1
 8010a76:	2302      	movs	r3, #2
 8010a78:	fb90 f2f3 	sdiv	r2, r0, r3
 8010a7c:	1996      	adds	r6, r2, r6
 8010a7e:	b2b6      	uxth	r6, r6
 8010a80:	4620      	mov	r0, r4
 8010a82:	f7fa fb6b 	bl	800b15c <WM_SetUserClipRect>
 8010a86:	4680      	mov	r8, r0
 8010a88:	b178      	cbz	r0, 8010aaa <GUI_DispStringInRectWrap+0xa6>
 8010a8a:	a804      	add	r0, sp, #16
 8010a8c:	4621      	mov	r1, r4
 8010a8e:	4642      	mov	r2, r8
 8010a90:	f8ad 9010 	strh.w	r9, [sp, #16]
 8010a94:	f8ad 6012 	strh.w	r6, [sp, #18]
 8010a98:	f8ad a014 	strh.w	sl, [sp, #20]
 8010a9c:	f8ad b016 	strh.w	fp, [sp, #22]
 8010aa0:	f7fe ff60 	bl	800f964 <GUI__IntersectRects>
 8010aa4:	a804      	add	r0, sp, #16
 8010aa6:	f7fa fb59 	bl	800b15c <WM_SetUserClipRect>
 8010aaa:	9a03      	ldr	r2, [sp, #12]
 8010aac:	9901      	ldr	r1, [sp, #4]
 8010aae:	4628      	mov	r0, r5
 8010ab0:	f004 f914 	bl	8014cdc <GUI__WrapGetNumCharsDisp>
 8010ab4:	4683      	mov	fp, r0
 8010ab6:	1e78      	subs	r0, r7, #1
 8010ab8:	1983      	adds	r3, r0, r6
 8010aba:	4659      	mov	r1, fp
 8010abc:	4628      	mov	r0, r5
 8010abe:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010ac2:	f8ad 9018 	strh.w	r9, [sp, #24]
 8010ac6:	f8ad 601a 	strh.w	r6, [sp, #26]
 8010aca:	f8ad a01c 	strh.w	sl, [sp, #28]
 8010ace:	f000 fd61 	bl	8011594 <GUI__GetLineDistX>
 8010ad2:	9a02      	ldr	r2, [sp, #8]
 8010ad4:	f002 0303 	and.w	r3, r2, #3
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d013      	beq.n	8010b04 <GUI_DispStringInRectWrap+0x100>
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	d004      	beq.n	8010aea <GUI_DispStringInRectWrap+0xe6>
 8010ae0:	b9ab      	cbnz	r3, 8010b0e <GUI_DispStringInRectWrap+0x10a>
 8010ae2:	8821      	ldrh	r1, [r4, #0]
 8010ae4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8010ae8:	e011      	b.n	8010b0e <GUI_DispStringInRectWrap+0x10a>
 8010aea:	8822      	ldrh	r2, [r4, #0]
 8010aec:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8010af0:	b211      	sxth	r1, r2
 8010af2:	ebc1 010e 	rsb	r1, r1, lr
 8010af6:	1a08      	subs	r0, r1, r0
 8010af8:	fb90 f3f3 	sdiv	r3, r0, r3
 8010afc:	189a      	adds	r2, r3, r2
 8010afe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8010b02:	e004      	b.n	8010b0e <GUI_DispStringInRectWrap+0x10a>
 8010b04:	88a1      	ldrh	r1, [r4, #4]
 8010b06:	1c4b      	adds	r3, r1, #1
 8010b08:	1a18      	subs	r0, r3, r0
 8010b0a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8010b0e:	4628      	mov	r0, r5
 8010b10:	4659      	mov	r1, fp
 8010b12:	aa06      	add	r2, sp, #24
 8010b14:	f000 fd6c 	bl	80115f0 <GUI__DispLine>
 8010b18:	4628      	mov	r0, r5
 8010b1a:	9a03      	ldr	r2, [sp, #12]
 8010b1c:	9901      	ldr	r1, [sp, #4]
 8010b1e:	f004 f90d 	bl	8014d3c <GUI__WrapGetNumBytesToNextLine>
 8010b22:	182d      	adds	r5, r5, r0
 8010b24:	19f6      	adds	r6, r6, r7
 8010b26:	782a      	ldrb	r2, [r5, #0]
 8010b28:	b2b6      	uxth	r6, r6
 8010b2a:	2a00      	cmp	r2, #0
 8010b2c:	d1bd      	bne.n	8010aaa <GUI_DispStringInRectWrap+0xa6>
 8010b2e:	4640      	mov	r0, r8
 8010b30:	f7fa fb14 	bl	800b15c <WM_SetUserClipRect>
 8010b34:	b009      	add	sp, #36	; 0x24
 8010b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010b3c <GUI__DispStringInRect>:
 8010b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b40:	b087      	sub	sp, #28
 8010b42:	460c      	mov	r4, r1
 8010b44:	9001      	str	r0, [sp, #4]
 8010b46:	4691      	mov	r9, r2
 8010b48:	461e      	mov	r6, r3
 8010b4a:	f000 fdbd 	bl	80116c8 <GUI_GetFontDistY>
 8010b4e:	9f01      	ldr	r7, [sp, #4]
 8010b50:	4680      	mov	r8, r0
 8010b52:	b124      	cbz	r4, 8010b5e <GUI__DispStringInRect+0x22>
 8010b54:	6820      	ldr	r0, [r4, #0]
 8010b56:	6861      	ldr	r1, [r4, #4]
 8010b58:	aa04      	add	r2, sp, #16
 8010b5a:	c203      	stmia	r2!, {r0, r1}
 8010b5c:	e002      	b.n	8010b64 <GUI__DispStringInRect+0x28>
 8010b5e:	a804      	add	r0, sp, #16
 8010b60:	f7ff fcae 	bl	80104c0 <GUI_GetClientRect>
 8010b64:	f019 0a0c 	ands.w	sl, r9, #12
 8010b68:	d102      	bne.n	8010b70 <GUI__DispStringInRect+0x34>
 8010b6a:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 8010b6e:	e034      	b.n	8010bda <GUI__DispStringInRect+0x9e>
 8010b70:	4634      	mov	r4, r6
 8010b72:	2500      	movs	r5, #0
 8010b74:	b1a4      	cbz	r4, 8010ba0 <GUI__DispStringInRect+0x64>
 8010b76:	4621      	mov	r1, r4
 8010b78:	9801      	ldr	r0, [sp, #4]
 8010b7a:	f000 fce1 	bl	8011540 <GUI__GetLineNumChars>
 8010b7e:	f8dd b004 	ldr.w	fp, [sp, #4]
 8010b82:	4601      	mov	r1, r0
 8010b84:	1a24      	subs	r4, r4, r0
 8010b86:	4658      	mov	r0, fp
 8010b88:	f004 fcb2 	bl	80154f0 <GUI_UC__NumChars2NumBytes>
 8010b8c:	eb0b 0300 	add.w	r3, fp, r0
 8010b90:	a806      	add	r0, sp, #24
 8010b92:	3501      	adds	r5, #1
 8010b94:	f840 3d14 	str.w	r3, [r0, #-20]!
 8010b98:	f004 f8da 	bl	8014d50 <GUI__HandleEOLine>
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	d0e9      	beq.n	8010b74 <GUI__DispStringInRect+0x38>
 8010ba0:	f1ba 0f08 	cmp.w	sl, #8
 8010ba4:	d005      	beq.n	8010bb2 <GUI__DispStringInRect+0x76>
 8010ba6:	f1ba 0f0c 	cmp.w	sl, #12
 8010baa:	d008      	beq.n	8010bbe <GUI__DispStringInRect+0x82>
 8010bac:	f1ba 0f04 	cmp.w	sl, #4
 8010bb0:	d112      	bne.n	8010bd8 <GUI__DispStringInRect+0x9c>
 8010bb2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8010bb6:	fb08 0215 	mls	r2, r8, r5, r0
 8010bba:	1c54      	adds	r4, r2, #1
 8010bbc:	e00d      	b.n	8010bda <GUI__DispStringInRect+0x9e>
 8010bbe:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8010bc2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8010bc6:	1a0a      	subs	r2, r1, r0
 8010bc8:	1c54      	adds	r4, r2, #1
 8010bca:	fb08 4515 	mls	r5, r8, r5, r4
 8010bce:	2302      	movs	r3, #2
 8010bd0:	fb95 f1f3 	sdiv	r1, r5, r3
 8010bd4:	1844      	adds	r4, r0, r1
 8010bd6:	e000      	b.n	8010bda <GUI__DispStringInRect+0x9e>
 8010bd8:	2400      	movs	r4, #0
 8010bda:	9701      	str	r7, [sp, #4]
 8010bdc:	2500      	movs	r5, #0
 8010bde:	2e00      	cmp	r6, #0
 8010be0:	d04b      	beq.n	8010c7a <GUI__DispStringInRect+0x13e>
 8010be2:	4631      	mov	r1, r6
 8010be4:	9801      	ldr	r0, [sp, #4]
 8010be6:	f000 fcab 	bl	8011540 <GUI__GetLineNumChars>
 8010bea:	4607      	mov	r7, r0
 8010bec:	1a36      	subs	r6, r6, r0
 8010bee:	4639      	mov	r1, r7
 8010bf0:	9801      	ldr	r0, [sp, #4]
 8010bf2:	f000 fccf 	bl	8011594 <GUI__GetLineDistX>
 8010bf6:	f009 0303 	and.w	r3, r9, #3
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d00f      	beq.n	8010c1e <GUI__DispStringInRect+0xe2>
 8010bfe:	2b02      	cmp	r3, #2
 8010c00:	d003      	beq.n	8010c0a <GUI__DispStringInRect+0xce>
 8010c02:	b983      	cbnz	r3, 8010c26 <GUI__DispStringInRect+0xea>
 8010c04:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8010c08:	e00d      	b.n	8010c26 <GUI__DispStringInRect+0xea>
 8010c0a:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8010c0e:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8010c12:	1a6a      	subs	r2, r5, r1
 8010c14:	1a15      	subs	r5, r2, r0
 8010c16:	fb95 f3f3 	sdiv	r3, r5, r3
 8010c1a:	18cd      	adds	r5, r1, r3
 8010c1c:	e003      	b.n	8010c26 <GUI__DispStringInRect+0xea>
 8010c1e:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8010c22:	1a0a      	subs	r2, r1, r0
 8010c24:	1c55      	adds	r5, r2, #1
 8010c26:	4b16      	ldr	r3, [pc, #88]	; (8010c80 <GUI__DispStringInRect+0x144>)
 8010c28:	6819      	ldr	r1, [r3, #0]
 8010c2a:	b2aa      	uxth	r2, r5
 8010c2c:	b2a3      	uxth	r3, r4
 8010c2e:	3801      	subs	r0, #1
 8010c30:	844a      	strh	r2, [r1, #34]	; 0x22
 8010c32:	848b      	strh	r3, [r1, #36]	; 0x24
 8010c34:	f8ad 2008 	strh.w	r2, [sp, #8]
 8010c38:	1941      	adds	r1, r0, r5
 8010c3a:	f108 32ff 	add.w	r2, r8, #4294967295
 8010c3e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8010c42:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010c46:	4639      	mov	r1, r7
 8010c48:	1913      	adds	r3, r2, r4
 8010c4a:	9801      	ldr	r0, [sp, #4]
 8010c4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010c50:	aa02      	add	r2, sp, #8
 8010c52:	f000 fccd 	bl	80115f0 <GUI__DispLine>
 8010c56:	f8dd a004 	ldr.w	sl, [sp, #4]
 8010c5a:	4639      	mov	r1, r7
 8010c5c:	4650      	mov	r0, sl
 8010c5e:	f004 fc47 	bl	80154f0 <GUI_UC__NumChars2NumBytes>
 8010c62:	af06      	add	r7, sp, #24
 8010c64:	4450      	add	r0, sl
 8010c66:	f847 0d14 	str.w	r0, [r7, #-20]!
 8010c6a:	f000 fd2d 	bl	80116c8 <GUI_GetFontDistY>
 8010c6e:	1824      	adds	r4, r4, r0
 8010c70:	4638      	mov	r0, r7
 8010c72:	f004 f86d 	bl	8014d50 <GUI__HandleEOLine>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d0b1      	beq.n	8010bde <GUI__DispStringInRect+0xa2>
 8010c7a:	b007      	add	sp, #28
 8010c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c80:	2000027c 	.word	0x2000027c

08010c84 <GUI_DispStringInRectMax>:
 8010c84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010c88:	460d      	mov	r5, r1
 8010c8a:	4690      	mov	r8, r2
 8010c8c:	461f      	mov	r7, r3
 8010c8e:	4606      	mov	r6, r0
 8010c90:	b1c8      	cbz	r0, 8010cc6 <GUI_DispStringInRectMax+0x42>
 8010c92:	b909      	cbnz	r1, 8010c98 <GUI_DispStringInRectMax+0x14>
 8010c94:	2400      	movs	r4, #0
 8010c96:	e00d      	b.n	8010cb4 <GUI_DispStringInRectMax+0x30>
 8010c98:	4608      	mov	r0, r1
 8010c9a:	f7fa fa5f 	bl	800b15c <WM_SetUserClipRect>
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	d0f7      	beq.n	8010c94 <GUI_DispStringInRectMax+0x10>
 8010ca4:	4668      	mov	r0, sp
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	4622      	mov	r2, r4
 8010caa:	f7fe fe5b 	bl	800f964 <GUI__IntersectRects>
 8010cae:	4668      	mov	r0, sp
 8010cb0:	f7fa fa54 	bl	800b15c <WM_SetUserClipRect>
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	4629      	mov	r1, r5
 8010cb8:	4642      	mov	r2, r8
 8010cba:	463b      	mov	r3, r7
 8010cbc:	f7ff ff3e 	bl	8010b3c <GUI__DispStringInRect>
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f7fa fa4b 	bl	800b15c <WM_SetUserClipRect>
 8010cc6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

08010cca <GUI_DispStringInRect>:
 8010cca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010cce:	f7ff bfd9 	b.w	8010c84 <GUI_DispStringInRectMax>
	...

08010cd4 <GUI_DispStringHCenterAt>:
 8010cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cd6:	4b0b      	ldr	r3, [pc, #44]	; (8010d04 <GUI_DispStringHCenterAt+0x30>)
 8010cd8:	4605      	mov	r5, r0
 8010cda:	6818      	ldr	r0, [r3, #0]
 8010cdc:	460f      	mov	r7, r1
 8010cde:	f9b0 102c 	ldrsh.w	r1, [r0, #44]	; 0x2c
 8010ce2:	f041 0002 	orr.w	r0, r1, #2
 8010ce6:	4616      	mov	r6, r2
 8010ce8:	f004 fc14 	bl	8015514 <GUI_SetTextAlign>
 8010cec:	4639      	mov	r1, r7
 8010cee:	4604      	mov	r4, r0
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	f000 f810 	bl	8010d18 <GUI_DispStringAt>
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010cfe:	f004 bc09 	b.w	8015514 <GUI_SetTextAlign>
 8010d02:	bf00      	nop
 8010d04:	2000027c 	.word	0x2000027c

08010d08 <GUI_DispStringAtCEOL>:
 8010d08:	b508      	push	{r3, lr}
 8010d0a:	f000 f805 	bl	8010d18 <GUI_DispStringAt>
 8010d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010d12:	f000 b891 	b.w	8010e38 <GUI_DispCEOL>
	...

08010d18 <GUI_DispStringAt>:
 8010d18:	4b02      	ldr	r3, [pc, #8]	; (8010d24 <GUI_DispStringAt+0xc>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	8459      	strh	r1, [r3, #34]	; 0x22
 8010d1e:	849a      	strh	r2, [r3, #36]	; 0x24
 8010d20:	f000 b802 	b.w	8010d28 <GUI_DispString>
 8010d24:	2000027c 	.word	0x2000027c

08010d28 <GUI_DispString>:
 8010d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d07d      	beq.n	8010e2e <GUI_DispString+0x106>
 8010d32:	4d40      	ldr	r5, [pc, #256]	; (8010e34 <GUI_DispString+0x10c>)
 8010d34:	f000 fcc8 	bl	80116c8 <GUI_GetFontDistY>
 8010d38:	682b      	ldr	r3, [r5, #0]
 8010d3a:	4680      	mov	r8, r0
 8010d3c:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 8010d40:	f000 fcaa 	bl	8011698 <GUI_GetYAdjust>
 8010d44:	6829      	ldr	r1, [r5, #0]
 8010d46:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
 8010d48:	b287      	uxth	r7, r0
 8010d4a:	1bd0      	subs	r0, r2, r7
 8010d4c:	8488      	strh	r0, [r1, #36]	; 0x24
 8010d4e:	7823      	ldrb	r3, [r4, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d060      	beq.n	8010e16 <GUI_DispString+0xee>
 8010d54:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010d58:	4620      	mov	r0, r4
 8010d5a:	f000 fbf1 	bl	8011540 <GUI__GetLineNumChars>
 8010d5e:	4e35      	ldr	r6, [pc, #212]	; (8010e34 <GUI_DispString+0x10c>)
 8010d60:	4605      	mov	r5, r0
 8010d62:	4629      	mov	r1, r5
 8010d64:	4620      	mov	r0, r4
 8010d66:	f000 fc15 	bl	8011594 <GUI__GetLineDistX>
 8010d6a:	6833      	ldr	r3, [r6, #0]
 8010d6c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8010d6e:	f001 0203 	and.w	r2, r1, #3
 8010d72:	2a01      	cmp	r2, #1
 8010d74:	d006      	beq.n	8010d84 <GUI_DispString+0x5c>
 8010d76:	2a02      	cmp	r2, #2
 8010d78:	d001      	beq.n	8010d7e <GUI_DispString+0x56>
 8010d7a:	2600      	movs	r6, #0
 8010d7c:	e003      	b.n	8010d86 <GUI_DispString+0x5e>
 8010d7e:	fb90 f6f2 	sdiv	r6, r0, r2
 8010d82:	e000      	b.n	8010d86 <GUI_DispString+0x5e>
 8010d84:	4606      	mov	r6, r0
 8010d86:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8010d88:	1b8a      	subs	r2, r1, r6
 8010d8a:	b296      	uxth	r6, r2
 8010d8c:	b2b1      	uxth	r1, r6
 8010d8e:	8459      	strh	r1, [r3, #34]	; 0x22
 8010d90:	fa1f fa80 	uxth.w	sl, r0
 8010d94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010d96:	f8ad 1000 	strh.w	r1, [sp]
 8010d9a:	f10a 30ff 	add.w	r0, sl, #4294967295
 8010d9e:	1832      	adds	r2, r6, r0
 8010da0:	fa1f fb88 	uxth.w	fp, r8
 8010da4:	1e5e      	subs	r6, r3, #1
 8010da6:	eb0b 0106 	add.w	r1, fp, r6
 8010daa:	4e22      	ldr	r6, [pc, #136]	; (8010e34 <GUI_DispString+0x10c>)
 8010dac:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010db0:	f8ad 1006 	strh.w	r1, [sp, #6]
 8010db4:	4620      	mov	r0, r4
 8010db6:	4629      	mov	r1, r5
 8010db8:	466a      	mov	r2, sp
 8010dba:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010dbe:	f000 fc17 	bl	80115f0 <GUI__DispLine>
 8010dc2:	6830      	ldr	r0, [r6, #0]
 8010dc4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010dc8:	4629      	mov	r1, r5
 8010dca:	8482      	strh	r2, [r0, #36]	; 0x24
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f004 fb8f 	bl	80154f0 <GUI_UC__NumChars2NumBytes>
 8010dd2:	5c23      	ldrb	r3, [r4, r0]
 8010dd4:	2b0a      	cmp	r3, #10
 8010dd6:	eb04 0200 	add.w	r2, r4, r0
 8010dda:	d001      	beq.n	8010de0 <GUI_DispString+0xb8>
 8010ddc:	2b0d      	cmp	r3, #13
 8010dde:	d112      	bne.n	8010e06 <GUI_DispString+0xde>
 8010de0:	6833      	ldr	r3, [r6, #0]
 8010de2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8010de4:	f001 0003 	and.w	r0, r1, #3
 8010de8:	1e41      	subs	r1, r0, #1
 8010dea:	2901      	cmp	r1, #1
 8010dec:	bf8a      	itet	hi
 8010dee:	8c19      	ldrhhi	r1, [r3, #32]
 8010df0:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 8010df4:	8459      	strhhi	r1, [r3, #34]	; 0x22
 8010df6:	7810      	ldrb	r0, [r2, #0]
 8010df8:	280a      	cmp	r0, #10
 8010dfa:	d10a      	bne.n	8010e12 <GUI_DispString+0xea>
 8010dfc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8010dfe:	448b      	add	fp, r1
 8010e00:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 8010e04:	e005      	b.n	8010e12 <GUI_DispString+0xea>
 8010e06:	f8bd 0000 	ldrh.w	r0, [sp]
 8010e0a:	6831      	ldr	r1, [r6, #0]
 8010e0c:	4482      	add	sl, r0
 8010e0e:	f8a1 a022 	strh.w	sl, [r1, #34]	; 0x22
 8010e12:	7813      	ldrb	r3, [r2, #0]
 8010e14:	b94b      	cbnz	r3, 8010e2a <GUI_DispString+0x102>
 8010e16:	4a07      	ldr	r2, [pc, #28]	; (8010e34 <GUI_DispString+0x10c>)
 8010e18:	6810      	ldr	r0, [r2, #0]
 8010e1a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8010e1c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8010e1e:	187f      	adds	r7, r7, r1
 8010e20:	f023 0203 	bic.w	r2, r3, #3
 8010e24:	8487      	strh	r7, [r0, #36]	; 0x24
 8010e26:	8582      	strh	r2, [r0, #44]	; 0x2c
 8010e28:	e001      	b.n	8010e2e <GUI_DispString+0x106>
 8010e2a:	1c54      	adds	r4, r2, #1
 8010e2c:	e78f      	b.n	8010d4e <GUI_DispString+0x26>
 8010e2e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e32:	bf00      	nop
 8010e34:	2000027c 	.word	0x2000027c

08010e38 <GUI_DispCEOL>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	4c0a      	ldr	r4, [pc, #40]	; (8010e64 <GUI_DispCEOL+0x2c>)
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	f9b3 5024 	ldrsh.w	r5, [r3, #36]	; 0x24
 8010e42:	f000 fc29 	bl	8011698 <GUI_GetYAdjust>
 8010e46:	6822      	ldr	r2, [r4, #0]
 8010e48:	1a29      	subs	r1, r5, r0
 8010e4a:	69d0      	ldr	r0, [r2, #28]
 8010e4c:	7e43      	ldrb	r3, [r0, #25]
 8010e4e:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 8010e52:	18cb      	adds	r3, r1, r3
 8010e54:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8010e58:	3b01      	subs	r3, #1
 8010e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e5e:	f000 b8f9 	b.w	8011054 <GUI_ClearRect>
 8010e62:	bf00      	nop
 8010e64:	2000027c 	.word	0x2000027c

08010e68 <_UnlinkDevice>:
 8010e68:	4b09      	ldr	r3, [pc, #36]	; (8010e90 <_UnlinkDevice+0x28>)
 8010e6a:	6982      	ldr	r2, [r0, #24]
 8010e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e70:	4281      	cmp	r1, r0
 8010e72:	bf04      	itt	eq
 8010e74:	6801      	ldreq	r1, [r0, #0]
 8010e76:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 8010e7a:	6843      	ldr	r3, [r0, #4]
 8010e7c:	b10b      	cbz	r3, 8010e82 <_UnlinkDevice+0x1a>
 8010e7e:	6802      	ldr	r2, [r0, #0]
 8010e80:	601a      	str	r2, [r3, #0]
 8010e82:	6801      	ldr	r1, [r0, #0]
 8010e84:	b101      	cbz	r1, 8010e88 <_UnlinkDevice+0x20>
 8010e86:	604b      	str	r3, [r1, #4]
 8010e88:	2300      	movs	r3, #0
 8010e8a:	6003      	str	r3, [r0, #0]
 8010e8c:	6043      	str	r3, [r0, #4]
 8010e8e:	4770      	bx	lr
 8010e90:	20017a04 	.word	0x20017a04

08010e94 <GUI_DEVICE__GetpDriver>:
 8010e94:	2801      	cmp	r0, #1
 8010e96:	dc09      	bgt.n	8010eac <GUI_DEVICE__GetpDriver+0x18>
 8010e98:	4b05      	ldr	r3, [pc, #20]	; (8010eb0 <GUI_DEVICE__GetpDriver+0x1c>)
 8010e9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8010e9e:	b120      	cbz	r0, 8010eaa <GUI_DEVICE__GetpDriver+0x16>
 8010ea0:	68c1      	ldr	r1, [r0, #12]
 8010ea2:	680a      	ldr	r2, [r1, #0]
 8010ea4:	b11a      	cbz	r2, 8010eae <GUI_DEVICE__GetpDriver+0x1a>
 8010ea6:	6800      	ldr	r0, [r0, #0]
 8010ea8:	e7f9      	b.n	8010e9e <GUI_DEVICE__GetpDriver+0xa>
 8010eaa:	4770      	bx	lr
 8010eac:	2000      	movs	r0, #0
 8010eae:	4770      	bx	lr
 8010eb0:	20017a04 	.word	0x20017a04

08010eb4 <GUI_DEVICE_Delete>:
 8010eb4:	f000 bcfe 	b.w	80118b4 <GUI_ALLOC_FreeFixedBlock>

08010eb8 <GUI_DEVICE_Create>:
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	460d      	mov	r5, r1
 8010ec0:	4617      	mov	r7, r2
 8010ec2:	461c      	mov	r4, r3
 8010ec4:	dd01      	ble.n	8010eca <GUI_DEVICE_Create+0x12>
 8010ec6:	2000      	movs	r0, #0
 8010ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eca:	201c      	movs	r0, #28
 8010ecc:	f000 fe8c 	bl	8011be8 <GUI_ALLOC_GetFixedBlock>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d0f8      	beq.n	8010ec6 <GUI_DEVICE_Create+0xe>
 8010ed4:	b10d      	cbz	r5, 8010eda <GUI_DEVICE_Create+0x22>
 8010ed6:	6105      	str	r5, [r0, #16]
 8010ed8:	e009      	b.n	8010eee <GUI_DEVICE_Create+0x36>
 8010eda:	4b09      	ldr	r3, [pc, #36]	; (8010f00 <GUI_DEVICE_Create+0x48>)
 8010edc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010ee0:	b12b      	cbz	r3, 8010eee <GUI_DEVICE_Create+0x36>
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	b10a      	cbz	r2, 8010eea <GUI_DEVICE_Create+0x32>
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	e7fb      	b.n	8010ee2 <GUI_DEVICE_Create+0x2a>
 8010eea:	6919      	ldr	r1, [r3, #16]
 8010eec:	6101      	str	r1, [r0, #16]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	6184      	str	r4, [r0, #24]
 8010ef2:	8287      	strh	r7, [r0, #20]
 8010ef4:	60c6      	str	r6, [r0, #12]
 8010ef6:	6002      	str	r2, [r0, #0]
 8010ef8:	6042      	str	r2, [r0, #4]
 8010efa:	6082      	str	r2, [r0, #8]
 8010efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010efe:	bf00      	nop
 8010f00:	20017a04 	.word	0x20017a04

08010f04 <GUI_DEVICE_Unlink>:
 8010f04:	f7ff bfb0 	b.w	8010e68 <_UnlinkDevice>

08010f08 <GUI_DEVICE_Link>:
 8010f08:	b510      	push	{r4, lr}
 8010f0a:	b330      	cbz	r0, 8010f5a <GUI_DEVICE_Link+0x52>
 8010f0c:	6982      	ldr	r2, [r0, #24]
 8010f0e:	2a01      	cmp	r2, #1
 8010f10:	dc23      	bgt.n	8010f5a <GUI_DEVICE_Link+0x52>
 8010f12:	4919      	ldr	r1, [pc, #100]	; (8010f78 <GUI_DEVICE_Link+0x70>)
 8010f14:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8010f18:	b913      	cbnz	r3, 8010f20 <GUI_DEVICE_Link+0x18>
 8010f1a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8010f1e:	e01a      	b.n	8010f56 <GUI_DEVICE_Link+0x4e>
 8010f20:	685c      	ldr	r4, [r3, #4]
 8010f22:	b10c      	cbz	r4, 8010f28 <GUI_DEVICE_Link+0x20>
 8010f24:	4623      	mov	r3, r4
 8010f26:	e7fb      	b.n	8010f20 <GUI_DEVICE_Link+0x18>
 8010f28:	68c1      	ldr	r1, [r0, #12]
 8010f2a:	680c      	ldr	r4, [r1, #0]
 8010f2c:	68d9      	ldr	r1, [r3, #12]
 8010f2e:	6809      	ldr	r1, [r1, #0]
 8010f30:	42a1      	cmp	r1, r4
 8010f32:	dd03      	ble.n	8010f3c <GUI_DEVICE_Link+0x34>
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1f8      	bne.n	8010f2c <GUI_DEVICE_Link+0x24>
 8010f3a:	e00e      	b.n	8010f5a <GUI_DEVICE_Link+0x52>
 8010f3c:	d102      	bne.n	8010f44 <GUI_DEVICE_Link+0x3c>
 8010f3e:	8a84      	ldrh	r4, [r0, #20]
 8010f40:	2c01      	cmp	r4, #1
 8010f42:	d011      	beq.n	8010f68 <GUI_DEVICE_Link+0x60>
 8010f44:	6859      	ldr	r1, [r3, #4]
 8010f46:	b199      	cbz	r1, 8010f70 <GUI_DEVICE_Link+0x68>
 8010f48:	6008      	str	r0, [r1, #0]
 8010f4a:	6041      	str	r1, [r0, #4]
 8010f4c:	6058      	str	r0, [r3, #4]
 8010f4e:	4298      	cmp	r0, r3
 8010f50:	bf08      	it	eq
 8010f52:	2300      	moveq	r3, #0
 8010f54:	6003      	str	r3, [r0, #0]
 8010f56:	2000      	movs	r0, #0
 8010f58:	bd10      	pop	{r4, pc}
 8010f5a:	2001      	movs	r0, #1
 8010f5c:	bd10      	pop	{r4, pc}
 8010f5e:	4623      	mov	r3, r4
 8010f60:	68e4      	ldr	r4, [r4, #12]
 8010f62:	6824      	ldr	r4, [r4, #0]
 8010f64:	428c      	cmp	r4, r1
 8010f66:	dbed      	blt.n	8010f44 <GUI_DEVICE_Link+0x3c>
 8010f68:	681c      	ldr	r4, [r3, #0]
 8010f6a:	2c00      	cmp	r4, #0
 8010f6c:	d1f7      	bne.n	8010f5e <GUI_DEVICE_Link+0x56>
 8010f6e:	e7e9      	b.n	8010f44 <GUI_DEVICE_Link+0x3c>
 8010f70:	4901      	ldr	r1, [pc, #4]	; (8010f78 <GUI_DEVICE_Link+0x70>)
 8010f72:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8010f76:	e7e9      	b.n	8010f4c <GUI_DEVICE_Link+0x44>
 8010f78:	20017a04 	.word	0x20017a04

08010f7c <GUI_DEVICE_CreateAndLink>:
 8010f7c:	b538      	push	{r3, r4, r5, lr}
 8010f7e:	461d      	mov	r5, r3
 8010f80:	f7ff ff9a 	bl	8010eb8 <GUI_DEVICE_Create>
 8010f84:	4604      	mov	r4, r0
 8010f86:	b148      	cbz	r0, 8010f9c <GUI_DEVICE_CreateAndLink+0x20>
 8010f88:	f7ff ffbe 	bl	8010f08 <GUI_DEVICE_Link>
 8010f8c:	68e3      	ldr	r3, [r4, #12]
 8010f8e:	6818      	ldr	r0, [r3, #0]
 8010f90:	b920      	cbnz	r0, 8010f9c <GUI_DEVICE_CreateAndLink+0x20>
 8010f92:	4903      	ldr	r1, [pc, #12]	; (8010fa0 <GUI_DEVICE_CreateAndLink+0x24>)
 8010f94:	3516      	adds	r5, #22
 8010f96:	680a      	ldr	r2, [r1, #0]
 8010f98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	bd38      	pop	{r3, r4, r5, pc}
 8010fa0:	2000027c 	.word	0x2000027c

08010fa4 <_OnExit>:
 8010fa4:	b510      	push	{r4, lr}
 8010fa6:	4b07      	ldr	r3, [pc, #28]	; (8010fc4 <_OnExit+0x20>)
 8010fa8:	4807      	ldr	r0, [pc, #28]	; (8010fc8 <_OnExit+0x24>)
 8010faa:	2400      	movs	r4, #0
 8010fac:	4621      	mov	r1, r4
 8010fae:	2270      	movs	r2, #112	; 0x70
 8010fb0:	601c      	str	r4, [r3, #0]
 8010fb2:	f7fe fbf1 	bl	800f798 <GUI__memset>
 8010fb6:	4805      	ldr	r0, [pc, #20]	; (8010fcc <_OnExit+0x28>)
 8010fb8:	4621      	mov	r1, r4
 8010fba:	2208      	movs	r2, #8
 8010fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fc0:	f7fe bbea 	b.w	800f798 <GUI__memset>
 8010fc4:	20016f3c 	.word	0x20016f3c
 8010fc8:	20016ec4 	.word	0x20016ec4
 8010fcc:	20017a04 	.word	0x20017a04

08010fd0 <_InitContext.constprop.0>:
 8010fd0:	b538      	push	{r3, r4, r5, lr}
 8010fd2:	4d19      	ldr	r5, [pc, #100]	; (8011038 <_InitContext.constprop.0+0x68>)
 8010fd4:	4c19      	ldr	r4, [pc, #100]	; (801103c <_InitContext.constprop.0+0x6c>)
 8010fd6:	682b      	ldr	r3, [r5, #0]
 8010fd8:	1d1a      	adds	r2, r3, #4
 8010fda:	7c59      	ldrb	r1, [r3, #17]
 8010fdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8010fde:	f103 0008 	add.w	r0, r3, #8
 8010fe2:	639b      	str	r3, [r3, #56]	; 0x38
 8010fe4:	641b      	str	r3, [r3, #64]	; 0x40
 8010fe6:	4b16      	ldr	r3, [pc, #88]	; (8011040 <_InitContext.constprop.0+0x70>)
 8010fe8:	6160      	str	r0, [r4, #20]
 8010fea:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010fee:	68c2      	ldr	r2, [r0, #12]
 8010ff0:	f104 0108 	add.w	r1, r4, #8
 8010ff4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010ff6:	4798      	blx	r3
 8010ff8:	4912      	ldr	r1, [pc, #72]	; (8011044 <_InitContext.constprop.0+0x74>)
 8010ffa:	4813      	ldr	r0, [pc, #76]	; (8011048 <_InitContext.constprop.0+0x78>)
 8010ffc:	682b      	ldr	r3, [r5, #0]
 8010ffe:	680a      	ldr	r2, [r1, #0]
 8011000:	6660      	str	r0, [r4, #100]	; 0x64
 8011002:	3308      	adds	r3, #8
 8011004:	2001      	movs	r0, #1
 8011006:	6163      	str	r3, [r4, #20]
 8011008:	61e2      	str	r2, [r4, #28]
 801100a:	7620      	strb	r0, [r4, #24]
 801100c:	f7fa fc8e 	bl	800b92c <WM_GetDesktopWindow>
 8011010:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8011014:	2103      	movs	r1, #3
 8011016:	64a0      	str	r0, [r4, #72]	; 0x48
 8011018:	2000      	movs	r0, #0
 801101a:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
 801101e:	6322      	str	r2, [r4, #48]	; 0x30
 8011020:	6362      	str	r2, [r4, #52]	; 0x34
 8011022:	f7fe fb73 	bl	800f70c <LCD_SetBkColor>
 8011026:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801102a:	f7fe fb77 	bl	800f71c <LCD_SetColor>
 801102e:	4807      	ldr	r0, [pc, #28]	; (801104c <_InitContext.constprop.0+0x7c>)
 8011030:	4b07      	ldr	r3, [pc, #28]	; (8011050 <_InitContext.constprop.0+0x80>)
 8011032:	6018      	str	r0, [r3, #0]
 8011034:	bd38      	pop	{r3, r4, r5, pc}
 8011036:	bf00      	nop
 8011038:	2000027c 	.word	0x2000027c
 801103c:	20016ec4 	.word	0x20016ec4
 8011040:	20017a04 	.word	0x20017a04
 8011044:	20000280 	.word	0x20000280
 8011048:	0802f744 	.word	0x0802f744
 801104c:	080309e4 	.word	0x080309e4
 8011050:	20017a00 	.word	0x20017a00

08011054 <GUI_ClearRect>:
 8011054:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011058:	4607      	mov	r7, r0
 801105a:	2004      	movs	r0, #4
 801105c:	469a      	mov	sl, r3
 801105e:	460e      	mov	r6, r1
 8011060:	4691      	mov	r9, r2
 8011062:	f7fe f809 	bl	800f078 <LCD_SetDrawMode>
 8011066:	4b13      	ldr	r3, [pc, #76]	; (80110b4 <GUI_ClearRect+0x60>)
 8011068:	681c      	ldr	r4, [r3, #0]
 801106a:	4680      	mov	r8, r0
 801106c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801106e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011070:	197f      	adds	r7, r7, r5
 8011072:	1836      	adds	r6, r6, r0
 8011074:	eb0a 0400 	add.w	r4, sl, r0
 8011078:	444d      	add	r5, r9
 801107a:	4668      	mov	r0, sp
 801107c:	f8ad 7000 	strh.w	r7, [sp]
 8011080:	f8ad 5004 	strh.w	r5, [sp, #4]
 8011084:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011088:	f8ad 4006 	strh.w	r4, [sp, #6]
 801108c:	f7fb fbaa 	bl	800c7e4 <WM__InitIVRSearch>
 8011090:	b920      	cbnz	r0, 801109c <GUI_ClearRect+0x48>
 8011092:	4640      	mov	r0, r8
 8011094:	f7fd fff0 	bl	800f078 <LCD_SetDrawMode>
 8011098:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 801109c:	4638      	mov	r0, r7
 801109e:	4631      	mov	r1, r6
 80110a0:	462a      	mov	r2, r5
 80110a2:	4623      	mov	r3, r4
 80110a4:	f7fe f86a 	bl	800f17c <LCD_FillRect>
 80110a8:	f7fb fadc 	bl	800c664 <WM__GetNextIVR>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d1f5      	bne.n	801109c <GUI_ClearRect+0x48>
 80110b0:	e7ef      	b.n	8011092 <GUI_ClearRect+0x3e>
 80110b2:	bf00      	nop
 80110b4:	2000027c 	.word	0x2000027c

080110b8 <GUI_Clear>:
 80110b8:	2000      	movs	r0, #0
 80110ba:	b510      	push	{r4, lr}
 80110bc:	4601      	mov	r1, r0
 80110be:	f7ff f9d9 	bl	8010474 <GUI_GotoXY>
 80110c2:	4804      	ldr	r0, [pc, #16]	; (80110d4 <GUI_Clear+0x1c>)
 80110c4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80110c8:	4601      	mov	r1, r0
 80110ca:	4613      	mov	r3, r2
 80110cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110d0:	f7ff bfc0 	b.w	8011054 <GUI_ClearRect>
 80110d4:	ffffc001 	.word	0xffffc001

080110d8 <GUI__RegisterExit>:
 80110d8:	b480      	push	{r7}
 80110da:	b083      	sub	sp, #12
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	f646 63c0 	movw	r3, #28352	; 0x6ec0
 80110e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	605a      	str	r2, [r3, #4]
 80110ee:	f646 63c0 	movw	r3, #28352	; 0x6ec0
 80110f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	601a      	str	r2, [r3, #0]
 80110fa:	f107 070c 	add.w	r7, r7, #12
 80110fe:	46bd      	mov	sp, r7
 8011100:	bc80      	pop	{r7}
 8011102:	4770      	bx	lr

08011104 <GUI__Config>:
 8011104:	b508      	push	{r3, lr}
 8011106:	4b08      	ldr	r3, [pc, #32]	; (8011128 <GUI__Config+0x24>)
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	b962      	cbnz	r2, 8011126 <GUI__Config+0x22>
 801110c:	2001      	movs	r0, #1
 801110e:	6018      	str	r0, [r3, #0]
 8011110:	f7f1 fd34 	bl	8002b7c <GUI_X_Config>
 8011114:	f7f1 fcc2 	bl	8002a9c <LCD_X_Config>
 8011118:	4804      	ldr	r0, [pc, #16]	; (801112c <GUI__Config+0x28>)
 801111a:	4905      	ldr	r1, [pc, #20]	; (8011130 <GUI__Config+0x2c>)
 801111c:	6001      	str	r1, [r0, #0]
 801111e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011122:	f7ff bfd9 	b.w	80110d8 <GUI__RegisterExit>
 8011126:	bd08      	pop	{r3, pc}
 8011128:	20016f3c 	.word	0x20016f3c
 801112c:	20016f34 	.word	0x20016f34
 8011130:	08010fa5 	.word	0x08010fa5

08011134 <GUI_Init>:
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801113e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8011142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011146:	f2ce 0200 	movt	r2, #57344	; 0xe000
 801114a:	6812      	ldr	r2, [r2, #0]
 801114c:	f022 0201 	bic.w	r2, r2, #1
 8011150:	601a      	str	r2, [r3, #0]
 8011152:	f243 0308 	movw	r3, #12296	; 0x3008
 8011156:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801115a:	f04f 0201 	mov.w	r2, #1
 801115e:	601a      	str	r2, [r3, #0]
 8011160:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8011164:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011168:	f24a 52c2 	movw	r2, #42434	; 0xa5c2
 801116c:	f2cf 4207 	movt	r2, #62471	; 0xf407
 8011170:	601a      	str	r2, [r3, #0]
 8011172:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8011176:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801117a:	681a      	ldr	r2, [r3, #0]
 801117c:	f24b 53cd 	movw	r3, #46541	; 0xb5cd
 8011180:	f2cb 53e8 	movt	r3, #46568	; 0xb5e8
 8011184:	429a      	cmp	r2, r3
 8011186:	d000      	beq.n	801118a <GUI_Init+0x56>
 8011188:	e7fe      	b.n	8011188 <GUI_Init+0x54>
 801118a:	f7ff ffbb 	bl	8011104 <GUI__Config>
 801118e:	f647 13e2 	movw	r3, #31202	; 0x79e2
 8011192:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8011196:	f04f 022e 	mov.w	r2, #46	; 0x2e
 801119a:	701a      	strb	r2, [r3, #0]
 801119c:	f7f1 fcf6 	bl	8002b8c <GUI_X_Init>
 80111a0:	f7ff ff16 	bl	8010fd0 <_InitContext.constprop.0>
 80111a4:	f7fe fa0e 	bl	800f5c4 <emWin_LCD_Init>
 80111a8:	6078      	str	r0, [r7, #4]
 80111aa:	f04f 0000 	mov.w	r0, #0
 80111ae:	f04f 0100 	mov.w	r1, #0
 80111b2:	f004 f9b9 	bl	8015528 <GUI_SetOrg>
 80111b6:	f7fb fd57 	bl	800cc68 <WM_Init>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4618      	mov	r0, r3
 80111be:	f107 0708 	add.w	r7, r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop

080111c8 <GUIPROP__FindChar>:
 80111c8:	b138      	cbz	r0, 80111da <GUIPROP__FindChar+0x12>
 80111ca:	8803      	ldrh	r3, [r0, #0]
 80111cc:	428b      	cmp	r3, r1
 80111ce:	d802      	bhi.n	80111d6 <GUIPROP__FindChar+0xe>
 80111d0:	8842      	ldrh	r2, [r0, #2]
 80111d2:	428a      	cmp	r2, r1
 80111d4:	d201      	bcs.n	80111da <GUIPROP__FindChar+0x12>
 80111d6:	6880      	ldr	r0, [r0, #8]
 80111d8:	e7f6      	b.n	80111c8 <GUIPROP__FindChar>
 80111da:	4770      	bx	lr

080111dc <GUIPROP_DispChar>:
 80111dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e0:	4c38      	ldr	r4, [pc, #224]	; (80112c4 <GUIPROP_DispChar+0xe8>)
 80111e2:	6823      	ldr	r3, [r4, #0]
 80111e4:	4605      	mov	r5, r0
 80111e6:	69d8      	ldr	r0, [r3, #28]
 80111e8:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 80111ec:	69c0      	ldr	r0, [r0, #28]
 80111ee:	b089      	sub	sp, #36	; 0x24
 80111f0:	4629      	mov	r1, r5
 80111f2:	f7ff ffe9 	bl	80111c8 <GUIPROP__FindChar>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d061      	beq.n	80112be <GUIPROP_DispChar+0xe2>
 80111fa:	f8b0 8000 	ldrh.w	r8, [r0]
 80111fe:	6847      	ldr	r7, [r0, #4]
 8011200:	ebc8 0805 	rsb	r8, r8, r5
 8011204:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 8011208:	4648      	mov	r0, r9
 801120a:	f896 b002 	ldrb.w	fp, [r6, #2]
 801120e:	f7fd ff33 	bl	800f078 <LCD_SetDrawMode>
 8011212:	6825      	ldr	r5, [r4, #0]
 8011214:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8011218:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 801121c:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8011220:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8011224:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8011228:	4682      	mov	sl, r0
 801122a:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 801122e:	f8cd c000 	str.w	ip, [sp]
 8011232:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8011236:	f8cd b00c 	str.w	fp, [sp, #12]
 801123a:	f04f 0c01 	mov.w	ip, #1
 801123e:	f8cd e004 	str.w	lr, [sp, #4]
 8011242:	f8cd c008 	str.w	ip, [sp, #8]
 8011246:	9306      	str	r3, [sp, #24]
 8011248:	6873      	ldr	r3, [r6, #4]
 801124a:	9304      	str	r3, [sp, #16]
 801124c:	6bad      	ldr	r5, [r5, #56]	; 0x38
 801124e:	9b06      	ldr	r3, [sp, #24]
 8011250:	9505      	str	r5, [sp, #20]
 8011252:	f7fe f899 	bl	800f388 <LCD_DrawBitmap>
 8011256:	6821      	ldr	r1, [r4, #0]
 8011258:	69ca      	ldr	r2, [r1, #28]
 801125a:	f892 b019 	ldrb.w	fp, [r2, #25]
 801125e:	7e10      	ldrb	r0, [r2, #24]
 8011260:	4583      	cmp	fp, r0
 8011262:	d920      	bls.n	80112a6 <GUIPROP_DispChar+0xca>
 8011264:	f1b9 0f02 	cmp.w	r9, #2
 8011268:	7ed5      	ldrb	r5, [r2, #27]
 801126a:	d01c      	beq.n	80112a6 <GUIPROP_DispChar+0xca>
 801126c:	9007      	str	r0, [sp, #28]
 801126e:	f004 f998 	bl	80155a2 <GUI_GetColor>
 8011272:	4681      	mov	r9, r0
 8011274:	f004 f98e 	bl	8015594 <GUI_GetBkColor>
 8011278:	f7ff f806 	bl	8010288 <GUI_SetColor>
 801127c:	6824      	ldr	r4, [r4, #0]
 801127e:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 8011282:	69e1      	ldr	r1, [r4, #28]
 8011284:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8011288:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801128c:	7eca      	ldrb	r2, [r1, #27]
 801128e:	9907      	ldr	r1, [sp, #28]
 8011290:	fb07 0202 	mla	r2, r7, r2, r0
 8011294:	fb01 3105 	mla	r1, r1, r5, r3
 8011298:	fb0b 3305 	mla	r3, fp, r5, r3
 801129c:	f7fd ff6e 	bl	800f17c <LCD_FillRect>
 80112a0:	4648      	mov	r0, r9
 80112a2:	f7fe fff1 	bl	8010288 <GUI_SetColor>
 80112a6:	4650      	mov	r0, sl
 80112a8:	f7fd fee6 	bl	800f078 <LCD_SetDrawMode>
 80112ac:	4805      	ldr	r0, [pc, #20]	; (80112c4 <GUIPROP_DispChar+0xe8>)
 80112ae:	6803      	ldr	r3, [r0, #0]
 80112b0:	7870      	ldrb	r0, [r6, #1]
 80112b2:	69da      	ldr	r2, [r3, #28]
 80112b4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80112b6:	7e92      	ldrb	r2, [r2, #26]
 80112b8:	fb00 1202 	mla	r2, r0, r2, r1
 80112bc:	845a      	strh	r2, [r3, #34]	; 0x22
 80112be:	b009      	add	sp, #36	; 0x24
 80112c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c4:	2000027c 	.word	0x2000027c

080112c8 <GUIPROP_GetCharDistX>:
 80112c8:	4b0d      	ldr	r3, [pc, #52]	; (8011300 <GUIPROP_GetCharDistX+0x38>)
 80112ca:	b570      	push	{r4, r5, r6, lr}
 80112cc:	4606      	mov	r6, r0
 80112ce:	6818      	ldr	r0, [r3, #0]
 80112d0:	69c5      	ldr	r5, [r0, #28]
 80112d2:	460c      	mov	r4, r1
 80112d4:	69e8      	ldr	r0, [r5, #28]
 80112d6:	4631      	mov	r1, r6
 80112d8:	f7ff ff76 	bl	80111c8 <GUIPROP__FindChar>
 80112dc:	b170      	cbz	r0, 80112fc <GUIPROP_GetCharDistX+0x34>
 80112de:	8801      	ldrh	r1, [r0, #0]
 80112e0:	6842      	ldr	r2, [r0, #4]
 80112e2:	1a76      	subs	r6, r6, r1
 80112e4:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 80112e8:	7ea9      	ldrb	r1, [r5, #26]
 80112ea:	7858      	ldrb	r0, [r3, #1]
 80112ec:	fb10 f001 	smulbb	r0, r0, r1
 80112f0:	b124      	cbz	r4, 80112fc <GUIPROP_GetCharDistX+0x34>
 80112f2:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 80112f6:	fb12 f301 	smulbb	r3, r2, r1
 80112fa:	6023      	str	r3, [r4, #0]
 80112fc:	bd70      	pop	{r4, r5, r6, pc}
 80112fe:	bf00      	nop
 8011300:	2000027c 	.word	0x2000027c

08011304 <GUIPROP_GetFontInfo>:
 8011304:	2301      	movs	r3, #1
 8011306:	800b      	strh	r3, [r1, #0]
 8011308:	4770      	bx	lr

0801130a <GUIPROP_IsInFont>:
 801130a:	b508      	push	{r3, lr}
 801130c:	69c0      	ldr	r0, [r0, #28]
 801130e:	f7ff ff5b 	bl	80111c8 <GUIPROP__FindChar>
 8011312:	3000      	adds	r0, #0
 8011314:	bf18      	it	ne
 8011316:	2001      	movne	r0, #1
 8011318:	bd08      	pop	{r3, pc}
	...

0801131c <GUIMONO_DispChar>:
 801131c:	4b52      	ldr	r3, [pc, #328]	; (8011468 <GUIMONO_DispChar+0x14c>)
 801131e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	69d9      	ldr	r1, [r3, #28]
 8011326:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8011328:	69cc      	ldr	r4, [r1, #28]
 801132a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 801132c:	89a2      	ldrh	r2, [r4, #12]
 801132e:	4290      	cmp	r0, r2
 8011330:	b08b      	sub	sp, #44	; 0x2c
 8011332:	d308      	bcc.n	8011346 <GUIMONO_DispChar+0x2a>
 8011334:	89e6      	ldrh	r6, [r4, #14]
 8011336:	4286      	cmp	r6, r0
 8011338:	d305      	bcc.n	8011346 <GUIMONO_DispChar+0x2a>
 801133a:	f8d4 9000 	ldr.w	r9, [r4]
 801133e:	1a82      	subs	r2, r0, r2
 8011340:	f04f 3bff 	mov.w	fp, #4294967295
 8011344:	e015      	b.n	8011372 <GUIMONO_DispChar+0x56>
 8011346:	68a2      	ldr	r2, [r4, #8]
 8011348:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801134c:	2a00      	cmp	r2, #0
 801134e:	f000 8081 	beq.w	8011454 <GUIMONO_DispChar+0x138>
 8011352:	8816      	ldrh	r6, [r2, #0]
 8011354:	42b0      	cmp	r0, r6
 8011356:	d37d      	bcc.n	8011454 <GUIMONO_DispChar+0x138>
 8011358:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 801135c:	4584      	cmp	ip, r0
 801135e:	d379      	bcc.n	8011454 <GUIMONO_DispChar+0x138>
 8011360:	6852      	ldr	r2, [r2, #4]
 8011362:	1b80      	subs	r0, r0, r6
 8011364:	b280      	uxth	r0, r0
 8011366:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 801136a:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 801136e:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8011372:	1c50      	adds	r0, r2, #1
 8011374:	d06e      	beq.n	8011454 <GUIMONO_DispChar+0x138>
 8011376:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 801137a:	f891 8018 	ldrb.w	r8, [r1, #24]
 801137e:	7ca6      	ldrb	r6, [r4, #18]
 8011380:	fa0f f38a 	sxth.w	r3, sl
 8011384:	fb18 f106 	smulbb	r1, r8, r6
 8011388:	4618      	mov	r0, r3
 801138a:	7c26      	ldrb	r6, [r4, #16]
 801138c:	9107      	str	r1, [sp, #28]
 801138e:	9308      	str	r3, [sp, #32]
 8011390:	9206      	str	r2, [sp, #24]
 8011392:	f7fd fe71 	bl	800f078 <LCD_SetDrawMode>
 8011396:	9009      	str	r0, [sp, #36]	; 0x24
 8011398:	4833      	ldr	r0, [pc, #204]	; (8011468 <GUIMONO_DispChar+0x14c>)
 801139a:	6803      	ldr	r3, [r0, #0]
 801139c:	69da      	ldr	r2, [r3, #28]
 801139e:	7e91      	ldrb	r1, [r2, #26]
 80113a0:	9100      	str	r1, [sp, #0]
 80113a2:	7ed0      	ldrb	r0, [r2, #27]
 80113a4:	2201      	movs	r2, #1
 80113a6:	9001      	str	r0, [sp, #4]
 80113a8:	9202      	str	r2, [sp, #8]
 80113aa:	7ca1      	ldrb	r1, [r4, #18]
 80113ac:	9806      	ldr	r0, [sp, #24]
 80113ae:	9a07      	ldr	r2, [sp, #28]
 80113b0:	9103      	str	r1, [sp, #12]
 80113b2:	fb02 9100 	mla	r1, r2, r0, r9
 80113b6:	9104      	str	r1, [sp, #16]
 80113b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ba:	b23f      	sxth	r7, r7
 80113bc:	b22d      	sxth	r5, r5
 80113be:	9305      	str	r3, [sp, #20]
 80113c0:	4638      	mov	r0, r7
 80113c2:	4629      	mov	r1, r5
 80113c4:	4632      	mov	r2, r6
 80113c6:	4643      	mov	r3, r8
 80113c8:	f7fd ffde 	bl	800f388 <LCD_DrawBitmap>
 80113cc:	f1bb 3fff 	cmp.w	fp, #4294967295
 80113d0:	d01b      	beq.n	801140a <GUIMONO_DispChar+0xee>
 80113d2:	f04a 0002 	orr.w	r0, sl, #2
 80113d6:	b200      	sxth	r0, r0
 80113d8:	f7fd fe4e 	bl	800f078 <LCD_SetDrawMode>
 80113dc:	4a22      	ldr	r2, [pc, #136]	; (8011468 <GUIMONO_DispChar+0x14c>)
 80113de:	6813      	ldr	r3, [r2, #0]
 80113e0:	69d8      	ldr	r0, [r3, #28]
 80113e2:	7e81      	ldrb	r1, [r0, #26]
 80113e4:	9100      	str	r1, [sp, #0]
 80113e6:	7ec2      	ldrb	r2, [r0, #27]
 80113e8:	2001      	movs	r0, #1
 80113ea:	9201      	str	r2, [sp, #4]
 80113ec:	9002      	str	r0, [sp, #8]
 80113ee:	9a07      	ldr	r2, [sp, #28]
 80113f0:	7ca1      	ldrb	r1, [r4, #18]
 80113f2:	fb02 900b 	mla	r0, r2, fp, r9
 80113f6:	9103      	str	r1, [sp, #12]
 80113f8:	9004      	str	r0, [sp, #16]
 80113fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113fc:	4638      	mov	r0, r7
 80113fe:	9305      	str	r3, [sp, #20]
 8011400:	4629      	mov	r1, r5
 8011402:	4632      	mov	r2, r6
 8011404:	4643      	mov	r3, r8
 8011406:	f7fd ffbf 	bl	800f388 <LCD_DrawBitmap>
 801140a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8011468 <GUIMONO_DispChar+0x14c>
 801140e:	f8d8 1000 	ldr.w	r1, [r8]
 8011412:	69c8      	ldr	r0, [r1, #28]
 8011414:	7e42      	ldrb	r2, [r0, #25]
 8011416:	7e03      	ldrb	r3, [r0, #24]
 8011418:	429a      	cmp	r2, r3
 801141a:	d917      	bls.n	801144c <GUIMONO_DispChar+0x130>
 801141c:	9908      	ldr	r1, [sp, #32]
 801141e:	2902      	cmp	r1, #2
 8011420:	d014      	beq.n	801144c <GUIMONO_DispChar+0x130>
 8011422:	f08a 0004 	eor.w	r0, sl, #4
 8011426:	b200      	sxth	r0, r0
 8011428:	f7fd fe26 	bl	800f078 <LCD_SetDrawMode>
 801142c:	f8d8 2000 	ldr.w	r2, [r8]
 8011430:	69d3      	ldr	r3, [r2, #28]
 8011432:	f893 e018 	ldrb.w	lr, [r3, #24]
 8011436:	7ed9      	ldrb	r1, [r3, #27]
 8011438:	7e9a      	ldrb	r2, [r3, #26]
 801143a:	7e5b      	ldrb	r3, [r3, #25]
 801143c:	4638      	mov	r0, r7
 801143e:	fb0e 5101 	mla	r1, lr, r1, r5
 8011442:	fb06 7202 	mla	r2, r6, r2, r7
 8011446:	18eb      	adds	r3, r5, r3
 8011448:	f7fd fe98 	bl	800f17c <LCD_FillRect>
 801144c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801144e:	b2c0      	uxtb	r0, r0
 8011450:	f7fd fe12 	bl	800f078 <LCD_SetDrawMode>
 8011454:	4904      	ldr	r1, [pc, #16]	; (8011468 <GUIMONO_DispChar+0x14c>)
 8011456:	7c60      	ldrb	r0, [r4, #17]
 8011458:	680b      	ldr	r3, [r1, #0]
 801145a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801145c:	1881      	adds	r1, r0, r2
 801145e:	8459      	strh	r1, [r3, #34]	; 0x22
 8011460:	b00b      	add	sp, #44	; 0x2c
 8011462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011466:	bf00      	nop
 8011468:	2000027c 	.word	0x2000027c

0801146c <GUIMONO_GetCharDistX>:
 801146c:	4b04      	ldr	r3, [pc, #16]	; (8011480 <GUIMONO_GetCharDistX+0x14>)
 801146e:	6818      	ldr	r0, [r3, #0]
 8011470:	69c2      	ldr	r2, [r0, #28]
 8011472:	69d3      	ldr	r3, [r2, #28]
 8011474:	b109      	cbz	r1, 801147a <GUIMONO_GetCharDistX+0xe>
 8011476:	7c18      	ldrb	r0, [r3, #16]
 8011478:	6008      	str	r0, [r1, #0]
 801147a:	7c58      	ldrb	r0, [r3, #17]
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop
 8011480:	2000027c 	.word	0x2000027c

08011484 <GUIMONO_GetFontInfo>:
 8011484:	2302      	movs	r3, #2
 8011486:	800b      	strh	r3, [r1, #0]
 8011488:	4770      	bx	lr

0801148a <GUIMONO_IsInFont>:
 801148a:	69c3      	ldr	r3, [r0, #28]
 801148c:	899a      	ldrh	r2, [r3, #12]
 801148e:	428a      	cmp	r2, r1
 8011490:	d802      	bhi.n	8011498 <GUIMONO_IsInFont+0xe>
 8011492:	89d8      	ldrh	r0, [r3, #14]
 8011494:	4288      	cmp	r0, r1
 8011496:	d20f      	bcs.n	80114b8 <GUIMONO_IsInFont+0x2e>
 8011498:	689b      	ldr	r3, [r3, #8]
 801149a:	b90b      	cbnz	r3, 80114a0 <GUIMONO_IsInFont+0x16>
 801149c:	2000      	movs	r0, #0
 801149e:	4770      	bx	lr
 80114a0:	881a      	ldrh	r2, [r3, #0]
 80114a2:	4291      	cmp	r1, r2
 80114a4:	d3fa      	bcc.n	801149c <GUIMONO_IsInFont+0x12>
 80114a6:	8858      	ldrh	r0, [r3, #2]
 80114a8:	4288      	cmp	r0, r1
 80114aa:	d3f7      	bcc.n	801149c <GUIMONO_IsInFont+0x12>
 80114ac:	1a89      	subs	r1, r1, r2
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	f933 2021 	ldrsh.w	r2, [r3, r1, lsl #2]
 80114b4:	2a00      	cmp	r2, #0
 80114b6:	dbf1      	blt.n	801149c <GUIMONO_IsInFont+0x12>
 80114b8:	2001      	movs	r0, #1
 80114ba:	4770      	bx	lr

080114bc <_Log2VisBuffered>:
 80114bc:	4770      	bx	lr
	...

080114c0 <_DispLine>:
 80114c0:	b513      	push	{r0, r1, r4, lr}
 80114c2:	4614      	mov	r4, r2
 80114c4:	ab02      	add	r3, sp, #8
 80114c6:	4a1b      	ldr	r2, [pc, #108]	; (8011534 <_DispLine+0x74>)
 80114c8:	f843 1d08 	str.w	r1, [r3, #-8]!
 80114cc:	9001      	str	r0, [sp, #4]
 80114ce:	4669      	mov	r1, sp
 80114d0:	6813      	ldr	r3, [r2, #0]
 80114d2:	4798      	blx	r3
 80114d4:	9001      	str	r0, [sp, #4]
 80114d6:	4818      	ldr	r0, [pc, #96]	; (8011538 <_DispLine+0x78>)
 80114d8:	6801      	ldr	r1, [r0, #0]
 80114da:	6948      	ldr	r0, [r1, #20]
 80114dc:	b960      	cbnz	r0, 80114f8 <_DispLine+0x38>
 80114de:	2001      	movs	r0, #1
 80114e0:	f7fe fa38 	bl	800f954 <GUI__ManageCache>
 80114e4:	4a14      	ldr	r2, [pc, #80]	; (8011538 <_DispLine+0x78>)
 80114e6:	6813      	ldr	r3, [r2, #0]
 80114e8:	69d8      	ldr	r0, [r3, #28]
 80114ea:	6941      	ldr	r1, [r0, #20]
 80114ec:	b1c1      	cbz	r1, 8011520 <_DispLine+0x60>
 80114ee:	688b      	ldr	r3, [r1, #8]
 80114f0:	9801      	ldr	r0, [sp, #4]
 80114f2:	9900      	ldr	r1, [sp, #0]
 80114f4:	4798      	blx	r3
 80114f6:	e018      	b.n	801152a <_DispLine+0x6a>
 80114f8:	4621      	mov	r1, r4
 80114fa:	f7fe ff09 	bl	8010310 <GUI_RectsIntersect>
 80114fe:	2800      	cmp	r0, #0
 8011500:	d1ed      	bne.n	80114de <_DispLine+0x1e>
 8011502:	e015      	b.n	8011530 <_DispLine+0x70>
 8011504:	a801      	add	r0, sp, #4
 8011506:	f003 ffdf 	bl	80154c8 <GUI_UC__GetCharCodeInc>
 801150a:	490b      	ldr	r1, [pc, #44]	; (8011538 <_DispLine+0x78>)
 801150c:	680a      	ldr	r2, [r1, #0]
 801150e:	69d3      	ldr	r3, [r2, #28]
 8011510:	6819      	ldr	r1, [r3, #0]
 8011512:	4604      	mov	r4, r0
 8011514:	4788      	blx	r1
 8011516:	4809      	ldr	r0, [pc, #36]	; (801153c <_DispLine+0x7c>)
 8011518:	6802      	ldr	r2, [r0, #0]
 801151a:	b10a      	cbz	r2, 8011520 <_DispLine+0x60>
 801151c:	4620      	mov	r0, r4
 801151e:	4790      	blx	r2
 8011520:	9a00      	ldr	r2, [sp, #0]
 8011522:	1e53      	subs	r3, r2, #1
 8011524:	2b00      	cmp	r3, #0
 8011526:	9300      	str	r3, [sp, #0]
 8011528:	daec      	bge.n	8011504 <_DispLine+0x44>
 801152a:	2000      	movs	r0, #0
 801152c:	f7fe fa12 	bl	800f954 <GUI__ManageCache>
 8011530:	bd1c      	pop	{r2, r3, r4, pc}
 8011532:	bf00      	nop
 8011534:	20000288 	.word	0x20000288
 8011538:	2000027c 	.word	0x2000027c
 801153c:	200179f8 	.word	0x200179f8

08011540 <GUI__GetLineNumChars>:
 8011540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011542:	460d      	mov	r5, r1
 8011544:	9001      	str	r0, [sp, #4]
 8011546:	4604      	mov	r4, r0
 8011548:	b190      	cbz	r0, 8011570 <GUI__GetLineNumChars+0x30>
 801154a:	4b0a      	ldr	r3, [pc, #40]	; (8011574 <GUI__GetLineNumChars+0x34>)
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	69d4      	ldr	r4, [r2, #28]
 8011550:	6964      	ldr	r4, [r4, #20]
 8011552:	b15c      	cbz	r4, 801156c <GUI__GetLineNumChars+0x2c>
 8011554:	6864      	ldr	r4, [r4, #4]
 8011556:	b14c      	cbz	r4, 801156c <GUI__GetLineNumChars+0x2c>
 8011558:	47a0      	blx	r4
 801155a:	4604      	mov	r4, r0
 801155c:	e008      	b.n	8011570 <GUI__GetLineNumChars+0x30>
 801155e:	a801      	add	r0, sp, #4
 8011560:	f003 ffb2 	bl	80154c8 <GUI_UC__GetCharCodeInc>
 8011564:	b120      	cbz	r0, 8011570 <GUI__GetLineNumChars+0x30>
 8011566:	280a      	cmp	r0, #10
 8011568:	d002      	beq.n	8011570 <GUI__GetLineNumChars+0x30>
 801156a:	3401      	adds	r4, #1
 801156c:	42ac      	cmp	r4, r5
 801156e:	dbf6      	blt.n	801155e <GUI__GetLineNumChars+0x1e>
 8011570:	4620      	mov	r0, r4
 8011572:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8011574:	2000027c 	.word	0x2000027c

08011578 <GUI__GetOverlap>:
 8011578:	b513      	push	{r0, r1, r4, lr}
 801157a:	a902      	add	r1, sp, #8
 801157c:	2400      	movs	r4, #0
 801157e:	f841 4d04 	str.w	r4, [r1, #-4]!
 8011582:	f000 f8b3 	bl	80116ec <GUI_GetCharDistXEx>
 8011586:	9b01      	ldr	r3, [sp, #4]
 8011588:	4283      	cmp	r3, r0
 801158a:	bfcc      	ite	gt
 801158c:	ebc0 0003 	rsbgt	r0, r0, r3
 8011590:	4620      	movle	r0, r4
 8011592:	bd1c      	pop	{r2, r3, r4, pc}

08011594 <GUI__GetLineDistX>:
 8011594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011596:	4a14      	ldr	r2, [pc, #80]	; (80115e8 <GUI__GetLineDistX+0x54>)
 8011598:	9001      	str	r0, [sp, #4]
 801159a:	ab02      	add	r3, sp, #8
 801159c:	6815      	ldr	r5, [r2, #0]
 801159e:	f843 1d08 	str.w	r1, [r3, #-8]!
 80115a2:	4669      	mov	r1, sp
 80115a4:	47a8      	blx	r5
 80115a6:	4605      	mov	r5, r0
 80115a8:	9001      	str	r0, [sp, #4]
 80115aa:	b1e0      	cbz	r0, 80115e6 <GUI__GetLineDistX+0x52>
 80115ac:	490f      	ldr	r1, [pc, #60]	; (80115ec <GUI__GetLineDistX+0x58>)
 80115ae:	680c      	ldr	r4, [r1, #0]
 80115b0:	69e3      	ldr	r3, [r4, #28]
 80115b2:	695c      	ldr	r4, [r3, #20]
 80115b4:	b124      	cbz	r4, 80115c0 <GUI__GetLineDistX+0x2c>
 80115b6:	6824      	ldr	r4, [r4, #0]
 80115b8:	b114      	cbz	r4, 80115c0 <GUI__GetLineDistX+0x2c>
 80115ba:	9900      	ldr	r1, [sp, #0]
 80115bc:	47a0      	blx	r4
 80115be:	e012      	b.n	80115e6 <GUI__GetLineDistX+0x52>
 80115c0:	4625      	mov	r5, r4
 80115c2:	9800      	ldr	r0, [sp, #0]
 80115c4:	1e42      	subs	r2, r0, #1
 80115c6:	2a00      	cmp	r2, #0
 80115c8:	9200      	str	r2, [sp, #0]
 80115ca:	db07      	blt.n	80115dc <GUI__GetLineDistX+0x48>
 80115cc:	a801      	add	r0, sp, #4
 80115ce:	f003 ff7b 	bl	80154c8 <GUI_UC__GetCharCodeInc>
 80115d2:	4604      	mov	r4, r0
 80115d4:	f000 f880 	bl	80116d8 <GUI_GetCharDistX>
 80115d8:	182d      	adds	r5, r5, r0
 80115da:	e7f2      	b.n	80115c2 <GUI__GetLineDistX+0x2e>
 80115dc:	4620      	mov	r0, r4
 80115de:	f7ff ffcb 	bl	8011578 <GUI__GetOverlap>
 80115e2:	1828      	adds	r0, r5, r0
 80115e4:	e7ff      	b.n	80115e6 <GUI__GetLineDistX+0x52>
 80115e6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80115e8:	20000288 	.word	0x20000288
 80115ec:	2000027c 	.word	0x2000027c

080115f0 <GUI__DispLine>:
 80115f0:	4b27      	ldr	r3, [pc, #156]	; (8011690 <GUI__DispLine+0xa0>)
 80115f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115f4:	4605      	mov	r5, r0
 80115f6:	6818      	ldr	r0, [r3, #0]
 80115f8:	460c      	mov	r4, r1
 80115fa:	b160      	cbz	r0, 8011616 <GUI__DispLine+0x26>
 80115fc:	2000      	movs	r0, #0
 80115fe:	f7fb f8f1 	bl	800c7e4 <WM__InitIVRSearch>
 8011602:	2800      	cmp	r0, #0
 8011604:	d042      	beq.n	801168c <GUI__DispLine+0x9c>
 8011606:	4628      	mov	r0, r5
 8011608:	4621      	mov	r1, r4
 801160a:	466a      	mov	r2, sp
 801160c:	f7ff ff58 	bl	80114c0 <_DispLine>
 8011610:	f7fb f828 	bl	800c664 <WM__GetNextIVR>
 8011614:	e7f5      	b.n	8011602 <GUI__DispLine+0x12>
 8011616:	6810      	ldr	r0, [r2, #0]
 8011618:	6851      	ldr	r1, [r2, #4]
 801161a:	466b      	mov	r3, sp
 801161c:	c303      	stmia	r3!, {r0, r1}
 801161e:	491d      	ldr	r1, [pc, #116]	; (8011694 <GUI__DispLine+0xa4>)
 8011620:	f8bd 3000 	ldrh.w	r3, [sp]
 8011624:	6808      	ldr	r0, [r1, #0]
 8011626:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801162a:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 801162e:	18d1      	adds	r1, r2, r3
 8011630:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011634:	f8ad 1000 	strh.w	r1, [sp]
 8011638:	18c1      	adds	r1, r0, r3
 801163a:	f8ad 1002 	strh.w	r1, [sp, #2]
 801163e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8011642:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011646:	1840      	adds	r0, r0, r1
 8011648:	18d2      	adds	r2, r2, r3
 801164a:	f8ad 0006 	strh.w	r0, [sp, #6]
 801164e:	4668      	mov	r0, sp
 8011650:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011654:	f7fb f8c6 	bl	800c7e4 <WM__InitIVRSearch>
 8011658:	4b0e      	ldr	r3, [pc, #56]	; (8011694 <GUI__DispLine+0xa4>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	b940      	cbnz	r0, 8011670 <GUI__DispLine+0x80>
 801165e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8011660:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011662:	1a88      	subs	r0, r1, r2
 8011664:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8011666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011668:	8458      	strh	r0, [r3, #34]	; 0x22
 801166a:	1a88      	subs	r0, r1, r2
 801166c:	8498      	strh	r0, [r3, #36]	; 0x24
 801166e:	e00d      	b.n	801168c <GUI__DispLine+0x9c>
 8011670:	f8bd 2000 	ldrh.w	r2, [sp]
 8011674:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8011678:	845a      	strh	r2, [r3, #34]	; 0x22
 801167a:	8499      	strh	r1, [r3, #36]	; 0x24
 801167c:	4628      	mov	r0, r5
 801167e:	4621      	mov	r1, r4
 8011680:	466a      	mov	r2, sp
 8011682:	f7ff ff1d 	bl	80114c0 <_DispLine>
 8011686:	f7fa ffed 	bl	800c664 <WM__GetNextIVR>
 801168a:	e7e5      	b.n	8011658 <GUI__DispLine+0x68>
 801168c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801168e:	bf00      	nop
 8011690:	200179e4 	.word	0x200179e4
 8011694:	2000027c 	.word	0x2000027c

08011698 <GUI_GetYAdjust>:
 8011698:	4b0a      	ldr	r3, [pc, #40]	; (80116c4 <GUI_GetYAdjust+0x2c>)
 801169a:	6818      	ldr	r0, [r3, #0]
 801169c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801169e:	f002 010c 	and.w	r1, r2, #12
 80116a2:	2908      	cmp	r1, #8
 80116a4:	d007      	beq.n	80116b6 <GUI_GetYAdjust+0x1e>
 80116a6:	290c      	cmp	r1, #12
 80116a8:	d005      	beq.n	80116b6 <GUI_GetYAdjust+0x1e>
 80116aa:	2904      	cmp	r1, #4
 80116ac:	d107      	bne.n	80116be <GUI_GetYAdjust+0x26>
 80116ae:	69c3      	ldr	r3, [r0, #28]
 80116b0:	7e18      	ldrb	r0, [r3, #24]
 80116b2:	3801      	subs	r0, #1
 80116b4:	4770      	bx	lr
 80116b6:	69c2      	ldr	r2, [r0, #28]
 80116b8:	7e11      	ldrb	r1, [r2, #24]
 80116ba:	0848      	lsrs	r0, r1, #1
 80116bc:	4770      	bx	lr
 80116be:	2000      	movs	r0, #0
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	2000027c 	.word	0x2000027c

080116c8 <GUI_GetFontDistY>:
 80116c8:	4b02      	ldr	r3, [pc, #8]	; (80116d4 <GUI_GetFontDistY+0xc>)
 80116ca:	6818      	ldr	r0, [r3, #0]
 80116cc:	69c1      	ldr	r1, [r0, #28]
 80116ce:	7e48      	ldrb	r0, [r1, #25]
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	2000027c 	.word	0x2000027c

080116d8 <GUI_GetCharDistX>:
 80116d8:	b508      	push	{r3, lr}
 80116da:	4b03      	ldr	r3, [pc, #12]	; (80116e8 <GUI_GetCharDistX+0x10>)
 80116dc:	6819      	ldr	r1, [r3, #0]
 80116de:	69ca      	ldr	r2, [r1, #28]
 80116e0:	2100      	movs	r1, #0
 80116e2:	6853      	ldr	r3, [r2, #4]
 80116e4:	4798      	blx	r3
 80116e6:	bd08      	pop	{r3, pc}
 80116e8:	2000027c 	.word	0x2000027c

080116ec <GUI_GetCharDistXEx>:
 80116ec:	b508      	push	{r3, lr}
 80116ee:	4b03      	ldr	r3, [pc, #12]	; (80116fc <GUI_GetCharDistXEx+0x10>)
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	69d3      	ldr	r3, [r2, #28]
 80116f4:	685a      	ldr	r2, [r3, #4]
 80116f6:	4790      	blx	r2
 80116f8:	bd08      	pop	{r3, pc}
 80116fa:	bf00      	nop
 80116fc:	2000027c 	.word	0x2000027c

08011700 <_PushFreeBlock>:
 8011700:	4b07      	ldr	r3, [pc, #28]	; (8011720 <_PushFreeBlock+0x20>)
 8011702:	685a      	ldr	r2, [r3, #4]
 8011704:	1c51      	adds	r1, r2, #1
 8011706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011708:	b510      	push	{r4, lr}
 801170a:	6059      	str	r1, [r3, #4]
 801170c:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 8011710:	6a19      	ldr	r1, [r3, #32]
 8011712:	6061      	str	r1, [r4, #4]
 8011714:	2100      	movs	r1, #0
 8011716:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 801171a:	6218      	str	r0, [r3, #32]
 801171c:	bd10      	pop	{r4, pc}
 801171e:	bf00      	nop
 8011720:	20017a14 	.word	0x20017a14

08011724 <_OnExit>:
 8011724:	b538      	push	{r3, r4, r5, lr}
 8011726:	4d0b      	ldr	r5, [pc, #44]	; (8011754 <_OnExit+0x30>)
 8011728:	2400      	movs	r4, #0
 801172a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 801172e:	4621      	mov	r1, r4
 8011730:	2280      	movs	r2, #128	; 0x80
 8011732:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8011736:	f7fe f82f 	bl	800f798 <GUI__memset>
 801173a:	4628      	mov	r0, r5
 801173c:	4621      	mov	r1, r4
 801173e:	22bc      	movs	r2, #188	; 0xbc
 8011740:	f7fe f82a 	bl	800f798 <GUI__memset>
 8011744:	4804      	ldr	r0, [pc, #16]	; (8011758 <_OnExit+0x34>)
 8011746:	4621      	mov	r1, r4
 8011748:	220c      	movs	r2, #12
 801174a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801174e:	f7fe b823 	b.w	800f798 <GUI__memset>
 8011752:	bf00      	nop
 8011754:	20017a14 	.word	0x20017a14
 8011758:	20016f40 	.word	0x20016f40

0801175c <_RemoveFreeBlock>:
 801175c:	b510      	push	{r4, lr}
 801175e:	6841      	ldr	r1, [r0, #4]
 8011760:	230f      	movs	r3, #15
 8011762:	4a0c      	ldr	r2, [pc, #48]	; (8011794 <_RemoveFreeBlock+0x38>)
 8011764:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8011768:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801176a:	42a1      	cmp	r1, r4
 801176c:	d202      	bcs.n	8011774 <_RemoveFreeBlock+0x18>
 801176e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011772:	d2f6      	bcs.n	8011762 <_RemoveFreeBlock+0x6>
 8011774:	6814      	ldr	r4, [r2, #0]
 8011776:	1a61      	subs	r1, r4, r1
 8011778:	6011      	str	r1, [r2, #0]
 801177a:	6882      	ldr	r2, [r0, #8]
 801177c:	68c0      	ldr	r0, [r0, #12]
 801177e:	b102      	cbz	r2, 8011782 <_RemoveFreeBlock+0x26>
 8011780:	6050      	str	r0, [r2, #4]
 8011782:	b108      	cbz	r0, 8011788 <_RemoveFreeBlock+0x2c>
 8011784:	6002      	str	r2, [r0, #0]
 8011786:	bd10      	pop	{r4, pc}
 8011788:	4902      	ldr	r1, [pc, #8]	; (8011794 <_RemoveFreeBlock+0x38>)
 801178a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801178e:	641a      	str	r2, [r3, #64]	; 0x40
 8011790:	bd10      	pop	{r4, pc}
 8011792:	bf00      	nop
 8011794:	20017a14 	.word	0x20017a14

08011798 <_AddFreeMemory>:
 8011798:	4b21      	ldr	r3, [pc, #132]	; (8011820 <_AddFreeMemory+0x88>)
 801179a:	689a      	ldr	r2, [r3, #8]
 801179c:	b570      	push	{r4, r5, r6, lr}
 801179e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80117a0:	4605      	mov	r5, r0
 80117a2:	460c      	mov	r4, r1
 80117a4:	1808      	adds	r0, r1, r0
 80117a6:	1e51      	subs	r1, r2, #1
 80117a8:	1872      	adds	r2, r6, r1
 80117aa:	4290      	cmp	r0, r2
 80117ac:	461e      	mov	r6, r3
 80117ae:	d805      	bhi.n	80117bc <_AddFreeMemory+0x24>
 80117b0:	5963      	ldr	r3, [r4, r5]
 80117b2:	b91b      	cbnz	r3, 80117bc <_AddFreeMemory+0x24>
 80117b4:	6841      	ldr	r1, [r0, #4]
 80117b6:	186d      	adds	r5, r5, r1
 80117b8:	f7ff ffd0 	bl	801175c <_RemoveFreeBlock>
 80117bc:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80117be:	4284      	cmp	r4, r0
 80117c0:	d90a      	bls.n	80117d8 <_AddFreeMemory+0x40>
 80117c2:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80117c6:	1ba6      	subs	r6, r4, r6
 80117c8:	6832      	ldr	r2, [r6, #0]
 80117ca:	b92a      	cbnz	r2, 80117d8 <_AddFreeMemory+0x40>
 80117cc:	4630      	mov	r0, r6
 80117ce:	6874      	ldr	r4, [r6, #4]
 80117d0:	f7ff ffc4 	bl	801175c <_RemoveFreeBlock>
 80117d4:	192d      	adds	r5, r5, r4
 80117d6:	4634      	mov	r4, r6
 80117d8:	230f      	movs	r3, #15
 80117da:	4811      	ldr	r0, [pc, #68]	; (8011820 <_AddFreeMemory+0x88>)
 80117dc:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 80117e0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80117e2:	4295      	cmp	r5, r2
 80117e4:	d202      	bcs.n	80117ec <_AddFreeMemory+0x54>
 80117e6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80117ea:	d2f6      	bcs.n	80117da <_AddFreeMemory+0x42>
 80117ec:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80117f0:	1961      	adds	r1, r4, r5
 80117f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80117f4:	6124      	str	r4, [r4, #16]
 80117f6:	2000      	movs	r0, #0
 80117f8:	e884 0021 	stmia.w	r4, {r0, r5}
 80117fc:	60a2      	str	r2, [r4, #8]
 80117fe:	f841 5c04 	str.w	r5, [r1, #-4]
 8011802:	f104 0108 	add.w	r1, r4, #8
 8011806:	b102      	cbz	r2, 801180a <_AddFreeMemory+0x72>
 8011808:	6051      	str	r1, [r2, #4]
 801180a:	60e0      	str	r0, [r4, #12]
 801180c:	4804      	ldr	r0, [pc, #16]	; (8011820 <_AddFreeMemory+0x88>)
 801180e:	6802      	ldr	r2, [r0, #0]
 8011810:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8011814:	6419      	str	r1, [r3, #64]	; 0x40
 8011816:	18a9      	adds	r1, r5, r2
 8011818:	6001      	str	r1, [r0, #0]
 801181a:	4628      	mov	r0, r5
 801181c:	bd70      	pop	{r4, r5, r6, pc}
 801181e:	bf00      	nop
 8011820:	20017a14 	.word	0x20017a14

08011824 <_RemoveHoles>:
 8011824:	4b22      	ldr	r3, [pc, #136]	; (80118b0 <_RemoveHoles+0x8c>)
 8011826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801182a:	4683      	mov	fp, r0
 801182c:	6898      	ldr	r0, [r3, #8]
 801182e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8011830:	f100 3aff 	add.w	sl, r0, #4294967295
 8011834:	44a2      	add	sl, r4
 8011836:	e894 0028 	ldmia.w	r4, {r3, r5}
 801183a:	2b00      	cmp	r3, #0
 801183c:	d130      	bne.n	80118a0 <_RemoveHoles+0x7c>
 801183e:	eb04 0805 	add.w	r8, r4, r5
 8011842:	45d0      	cmp	r8, sl
 8011844:	d22c      	bcs.n	80118a0 <_RemoveHoles+0x7c>
 8011846:	f854 9005 	ldr.w	r9, [r4, r5]
 801184a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801184e:	f1b9 0f00 	cmp.w	r9, #0
 8011852:	d025      	beq.n	80118a0 <_RemoveHoles+0x7c>
 8011854:	4e16      	ldr	r6, [pc, #88]	; (80118b0 <_RemoveHoles+0x8c>)
 8011856:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8011858:	f811 2039 	ldrb.w	r2, [r1, r9, lsl #3]
 801185c:	2a01      	cmp	r2, #1
 801185e:	d11f      	bne.n	80118a0 <_RemoveHoles+0x7c>
 8011860:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8011862:	4620      	mov	r0, r4
 8011864:	9301      	str	r3, [sp, #4]
 8011866:	f7ff ff79 	bl	801175c <_RemoveFreeBlock>
 801186a:	f8d8 0000 	ldr.w	r0, [r8]
 801186e:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8011870:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8011874:	4620      	mov	r0, r4
 8011876:	6054      	str	r4, [r2, #4]
 8011878:	4641      	mov	r1, r8
 801187a:	463a      	mov	r2, r7
 801187c:	f004 faba 	bl	8015df4 <memmove>
 8011880:	9b01      	ldr	r3, [sp, #4]
 8011882:	4599      	cmp	r9, r3
 8011884:	d102      	bne.n	801188c <_RemoveHoles+0x68>
 8011886:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8011888:	1b41      	subs	r1, r0, r5
 801188a:	6331      	str	r1, [r6, #48]	; 0x30
 801188c:	4628      	mov	r0, r5
 801188e:	19e1      	adds	r1, r4, r7
 8011890:	f7ff ff82 	bl	8011798 <_AddFreeMemory>
 8011894:	f1bb 0f00 	cmp.w	fp, #0
 8011898:	d001      	beq.n	801189e <_RemoveHoles+0x7a>
 801189a:	4583      	cmp	fp, r0
 801189c:	d905      	bls.n	80118aa <_RemoveHoles+0x86>
 801189e:	463d      	mov	r5, r7
 80118a0:	1964      	adds	r4, r4, r5
 80118a2:	4554      	cmp	r4, sl
 80118a4:	d3c7      	bcc.n	8011836 <_RemoveHoles+0x12>
 80118a6:	2001      	movs	r0, #1
 80118a8:	e000      	b.n	80118ac <_RemoveHoles+0x88>
 80118aa:	2000      	movs	r0, #0
 80118ac:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b0:	20017a14 	.word	0x20017a14

080118b4 <GUI_ALLOC_FreeFixedBlock>:
 80118b4:	b128      	cbz	r0, 80118c2 <GUI_ALLOC_FreeFixedBlock+0xe>
 80118b6:	4a03      	ldr	r2, [pc, #12]	; (80118c4 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80118b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80118ba:	6003      	str	r3, [r0, #0]
 80118bc:	b103      	cbz	r3, 80118c0 <GUI_ALLOC_FreeFixedBlock+0xc>
 80118be:	6058      	str	r0, [r3, #4]
 80118c0:	6390      	str	r0, [r2, #56]	; 0x38
 80118c2:	4770      	bx	lr
 80118c4:	20017a14 	.word	0x20017a14

080118c8 <GUI_ALLOC_h2p>:
 80118c8:	b128      	cbz	r0, 80118d6 <GUI_ALLOC_h2p+0xe>
 80118ca:	4b03      	ldr	r3, [pc, #12]	; (80118d8 <GUI_ALLOC_h2p+0x10>)
 80118cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80118ce:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80118d2:	6840      	ldr	r0, [r0, #4]
 80118d4:	3008      	adds	r0, #8
 80118d6:	4770      	bx	lr
 80118d8:	20017a14 	.word	0x20017a14

080118dc <GUI_ALLOC_LockH>:
 80118dc:	4b05      	ldr	r3, [pc, #20]	; (80118f4 <GUI_ALLOC_LockH+0x18>)
 80118de:	6999      	ldr	r1, [r3, #24]
 80118e0:	3101      	adds	r1, #1
 80118e2:	6199      	str	r1, [r3, #24]
 80118e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118e6:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 80118ea:	3101      	adds	r1, #1
 80118ec:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 80118f0:	f7ff bfea 	b.w	80118c8 <GUI_ALLOC_h2p>
 80118f4:	20017a14 	.word	0x20017a14

080118f8 <GUI_ALLOC_UnlockH>:
 80118f8:	b530      	push	{r4, r5, lr}
 80118fa:	6802      	ldr	r2, [r0, #0]
 80118fc:	4b09      	ldr	r3, [pc, #36]	; (8011924 <GUI_ALLOC_UnlockH+0x2c>)
 80118fe:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8011902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011904:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8011908:	2c01      	cmp	r4, #1
 801190a:	d903      	bls.n	8011914 <GUI_ALLOC_UnlockH+0x1c>
 801190c:	699d      	ldr	r5, [r3, #24]
 801190e:	b10d      	cbz	r5, 8011914 <GUI_ALLOC_UnlockH+0x1c>
 8011910:	3d01      	subs	r5, #1
 8011912:	619d      	str	r5, [r3, #24]
 8011914:	2300      	movs	r3, #0
 8011916:	3c01      	subs	r4, #1
 8011918:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 801191c:	6003      	str	r3, [r0, #0]
 801191e:	4618      	mov	r0, r3
 8011920:	bd30      	pop	{r4, r5, pc}
 8011922:	bf00      	nop
 8011924:	20017a14 	.word	0x20017a14

08011928 <GUI_ALLOC_AssignMemory>:
 8011928:	4b02      	ldr	r3, [pc, #8]	; (8011934 <GUI_ALLOC_AssignMemory+0xc>)
 801192a:	f021 0103 	bic.w	r1, r1, #3
 801192e:	6018      	str	r0, [r3, #0]
 8011930:	6059      	str	r1, [r3, #4]
 8011932:	4770      	bx	lr
 8011934:	20016f40 	.word	0x20016f40

08011938 <GUI_ALLOC_GetSize>:
 8011938:	b130      	cbz	r0, 8011948 <GUI_ALLOC_GetSize+0x10>
 801193a:	4b04      	ldr	r3, [pc, #16]	; (801194c <GUI_ALLOC_GetSize+0x14>)
 801193c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801193e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8011942:	6842      	ldr	r2, [r0, #4]
 8011944:	6850      	ldr	r0, [r2, #4]
 8011946:	380c      	subs	r0, #12
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop
 801194c:	20017a14 	.word	0x20017a14

08011950 <GUI_ALLOC_Free>:
 8011950:	b510      	push	{r4, lr}
 8011952:	4604      	mov	r4, r0
 8011954:	b188      	cbz	r0, 801197a <GUI_ALLOC_Free+0x2a>
 8011956:	4b09      	ldr	r3, [pc, #36]	; (801197c <GUI_ALLOC_Free+0x2c>)
 8011958:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801195a:	f810 1034 	ldrb.w	r1, [r0, r4, lsl #3]
 801195e:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 8011962:	b151      	cbz	r1, 801197a <GUI_ALLOC_Free+0x2a>
 8011964:	2901      	cmp	r1, #1
 8011966:	d808      	bhi.n	801197a <GUI_ALLOC_Free+0x2a>
 8011968:	6851      	ldr	r1, [r2, #4]
 801196a:	6848      	ldr	r0, [r1, #4]
 801196c:	f7ff ff14 	bl	8011798 <_AddFreeMemory>
 8011970:	4620      	mov	r0, r4
 8011972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011976:	f7ff bec3 	b.w	8011700 <_PushFreeBlock>
 801197a:	bd10      	pop	{r4, pc}
 801197c:	20017a14 	.word	0x20017a14

08011980 <_EnlargeBlocks>:
 8011980:	4b24      	ldr	r3, [pc, #144]	; (8011a14 <_EnlargeBlocks+0x94>)
 8011982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011988:	b93a      	cbnz	r2, 801199a <_EnlargeBlocks+0x1a>
 801198a:	4923      	ldr	r1, [pc, #140]	; (8011a18 <_EnlargeBlocks+0x98>)
 801198c:	688a      	ldr	r2, [r1, #8]
 801198e:	684b      	ldr	r3, [r1, #4]
 8011990:	3208      	adds	r2, #8
 8011992:	fbb3 f0f2 	udiv	r0, r3, r2
 8011996:	1c85      	adds	r5, r0, #2
 8011998:	e003      	b.n	80119a2 <_EnlargeBlocks+0x22>
 801199a:	68d8      	ldr	r0, [r3, #12]
 801199c:	1d05      	adds	r5, r0, #4
 801199e:	eb05 05d0 	add.w	r5, r5, r0, lsr #3
 80119a2:	00e8      	lsls	r0, r5, #3
 80119a4:	f000 f970 	bl	8011c88 <_Alloc>
 80119a8:	4680      	mov	r8, r0
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d02d      	beq.n	8011a0a <_EnlargeBlocks+0x8a>
 80119ae:	4c19      	ldr	r4, [pc, #100]	; (8011a14 <_EnlargeBlocks+0x94>)
 80119b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80119b2:	68e2      	ldr	r2, [r4, #12]
 80119b4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80119b6:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
 80119ba:	00d2      	lsls	r2, r2, #3
 80119bc:	6876      	ldr	r6, [r6, #4]
 80119be:	3608      	adds	r6, #8
 80119c0:	4630      	mov	r0, r6
 80119c2:	f7ee fbe1 	bl	8000188 <memcpy>
 80119c6:	68e2      	ldr	r2, [r4, #12]
 80119c8:	6326      	str	r6, [r4, #48]	; 0x30
 80119ca:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 80119ce:	4613      	mov	r3, r2
 80119d0:	eb06 04c2 	add.w	r4, r6, r2, lsl #3
 80119d4:	2100      	movs	r1, #0
 80119d6:	1e68      	subs	r0, r5, #1
 80119d8:	4283      	cmp	r3, r0
 80119da:	d204      	bcs.n	80119e6 <_EnlargeBlocks+0x66>
 80119dc:	1860      	adds	r0, r4, r1
 80119de:	3301      	adds	r3, #1
 80119e0:	6043      	str	r3, [r0, #4]
 80119e2:	3108      	adds	r1, #8
 80119e4:	e7f7      	b.n	80119d6 <_EnlargeBlocks+0x56>
 80119e6:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 80119ea:	2400      	movs	r4, #0
 80119ec:	4b09      	ldr	r3, [pc, #36]	; (8011a14 <_EnlargeBlocks+0x94>)
 80119ee:	604c      	str	r4, [r1, #4]
 80119f0:	6858      	ldr	r0, [r3, #4]
 80119f2:	621a      	str	r2, [r3, #32]
 80119f4:	1a82      	subs	r2, r0, r2
 80119f6:	1951      	adds	r1, r2, r5
 80119f8:	6059      	str	r1, [r3, #4]
 80119fa:	60dd      	str	r5, [r3, #12]
 80119fc:	4638      	mov	r0, r7
 80119fe:	b13f      	cbz	r7, 8011a10 <_EnlargeBlocks+0x90>
 8011a00:	f7ff ffa6 	bl	8011950 <GUI_ALLOC_Free>
 8011a04:	4620      	mov	r0, r4
 8011a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a0a:	2001      	movs	r0, #1
 8011a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a14:	20017a14 	.word	0x20017a14
 8011a18:	20016f40 	.word	0x20016f40

08011a1c <_InitOnce>:
 8011a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a1e:	4b54      	ldr	r3, [pc, #336]	; (8011b70 <_InitOnce+0x154>)
 8011a20:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8011a24:	2900      	cmp	r1, #0
 8011a26:	f040 80a2 	bne.w	8011b6e <_InitOnce+0x152>
 8011a2a:	4852      	ldr	r0, [pc, #328]	; (8011b74 <_InitOnce+0x158>)
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8011a32:	6842      	ldr	r2, [r0, #4]
 8011a34:	6803      	ldr	r3, [r0, #0]
 8011a36:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8011a3a:	bf28      	it	cs
 8011a3c:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 8011a40:	0894      	lsrs	r4, r2, #2
 8011a42:	2000      	movs	r0, #0
 8011a44:	42a0      	cmp	r0, r4
 8011a46:	d009      	beq.n	8011a5c <_InitOnce+0x40>
 8011a48:	1846      	adds	r6, r0, r1
 8011a4a:	25ff      	movs	r5, #255	; 0xff
 8011a4c:	fbb6 f7f5 	udiv	r7, r6, r5
 8011a50:	fb05 6517 	mls	r5, r5, r7, r6
 8011a54:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
 8011a58:	3001      	adds	r0, #1
 8011a5a:	e7f3      	b.n	8011a44 <_InitOnce+0x28>
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	42a0      	cmp	r0, r4
 8011a60:	d013      	beq.n	8011a8a <_InitOnce+0x6e>
 8011a62:	25ff      	movs	r5, #255	; 0xff
 8011a64:	1846      	adds	r6, r0, r1
 8011a66:	fbb6 f7f5 	udiv	r7, r6, r5
 8011a6a:	fb05 6517 	mls	r5, r5, r7, r6
 8011a6e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8011a72:	42af      	cmp	r7, r5
 8011a74:	d007      	beq.n	8011a86 <_InitOnce+0x6a>
 8011a76:	493f      	ldr	r1, [pc, #252]	; (8011b74 <_InitOnce+0x158>)
 8011a78:	688a      	ldr	r2, [r1, #8]
 8011a7a:	2a00      	cmp	r2, #0
 8011a7c:	d150      	bne.n	8011b20 <_InitOnce+0x104>
 8011a7e:	684b      	ldr	r3, [r1, #4]
 8011a80:	089c      	lsrs	r4, r3, #2
 8011a82:	608c      	str	r4, [r1, #8]
 8011a84:	e04c      	b.n	8011b20 <_InitOnce+0x104>
 8011a86:	3001      	adds	r0, #1
 8011a88:	e7e9      	b.n	8011a5e <_InitOnce+0x42>
 8011a8a:	3101      	adds	r1, #1
 8011a8c:	2902      	cmp	r1, #2
 8011a8e:	d1d8      	bne.n	8011a42 <_InitOnce+0x26>
 8011a90:	0854      	lsrs	r4, r2, #1
 8011a92:	2100      	movs	r1, #0
 8011a94:	2000      	movs	r0, #0
 8011a96:	42a0      	cmp	r0, r4
 8011a98:	d009      	beq.n	8011aae <_InitOnce+0x92>
 8011a9a:	1846      	adds	r6, r0, r1
 8011a9c:	25ff      	movs	r5, #255	; 0xff
 8011a9e:	fbb6 f7f5 	udiv	r7, r6, r5
 8011aa2:	fb05 6517 	mls	r5, r5, r7, r6
 8011aa6:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
 8011aaa:	3001      	adds	r0, #1
 8011aac:	e7f3      	b.n	8011a96 <_InitOnce+0x7a>
 8011aae:	2000      	movs	r0, #0
 8011ab0:	42a0      	cmp	r0, r4
 8011ab2:	d00c      	beq.n	8011ace <_InitOnce+0xb2>
 8011ab4:	25ff      	movs	r5, #255	; 0xff
 8011ab6:	1846      	adds	r6, r0, r1
 8011ab8:	fbb6 f7f5 	udiv	r7, r6, r5
 8011abc:	fb05 6517 	mls	r5, r5, r7, r6
 8011ac0:	f833 7010 	ldrh.w	r7, [r3, r0, lsl #1]
 8011ac4:	b2ad      	uxth	r5, r5
 8011ac6:	42af      	cmp	r7, r5
 8011ac8:	d1d5      	bne.n	8011a76 <_InitOnce+0x5a>
 8011aca:	3001      	adds	r0, #1
 8011acc:	e7f0      	b.n	8011ab0 <_InitOnce+0x94>
 8011ace:	3101      	adds	r1, #1
 8011ad0:	2902      	cmp	r1, #2
 8011ad2:	d1df      	bne.n	8011a94 <_InitOnce+0x78>
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	4290      	cmp	r0, r2
 8011ada:	d008      	beq.n	8011aee <_InitOnce+0xd2>
 8011adc:	1845      	adds	r5, r0, r1
 8011ade:	24ff      	movs	r4, #255	; 0xff
 8011ae0:	fbb5 f6f4 	udiv	r6, r5, r4
 8011ae4:	fb04 5516 	mls	r5, r4, r6, r5
 8011ae8:	541d      	strb	r5, [r3, r0]
 8011aea:	3001      	adds	r0, #1
 8011aec:	e7f4      	b.n	8011ad8 <_InitOnce+0xbc>
 8011aee:	2000      	movs	r0, #0
 8011af0:	4290      	cmp	r0, r2
 8011af2:	d00b      	beq.n	8011b0c <_InitOnce+0xf0>
 8011af4:	24ff      	movs	r4, #255	; 0xff
 8011af6:	1845      	adds	r5, r0, r1
 8011af8:	fbb5 f6f4 	udiv	r6, r5, r4
 8011afc:	fb04 5516 	mls	r5, r4, r6, r5
 8011b00:	5c1e      	ldrb	r6, [r3, r0]
 8011b02:	b2ec      	uxtb	r4, r5
 8011b04:	42a6      	cmp	r6, r4
 8011b06:	d1b6      	bne.n	8011a76 <_InitOnce+0x5a>
 8011b08:	3001      	adds	r0, #1
 8011b0a:	e7f1      	b.n	8011af0 <_InitOnce+0xd4>
 8011b0c:	3101      	adds	r1, #1
 8011b0e:	2902      	cmp	r1, #2
 8011b10:	d1e1      	bne.n	8011ad6 <_InitOnce+0xba>
 8011b12:	2500      	movs	r5, #0
 8011b14:	4295      	cmp	r5, r2
 8011b16:	d0ae      	beq.n	8011a76 <_InitOnce+0x5a>
 8011b18:	2400      	movs	r4, #0
 8011b1a:	555c      	strb	r4, [r3, r5]
 8011b1c:	3501      	adds	r5, #1
 8011b1e:	e7f9      	b.n	8011b14 <_InitOnce+0xf8>
 8011b20:	4815      	ldr	r0, [pc, #84]	; (8011b78 <_InitOnce+0x15c>)
 8011b22:	4d16      	ldr	r5, [pc, #88]	; (8011b7c <_InitOnce+0x160>)
 8011b24:	6005      	str	r5, [r0, #0]
 8011b26:	f7ff fad7 	bl	80110d8 <GUI__RegisterExit>
 8011b2a:	4911      	ldr	r1, [pc, #68]	; (8011b70 <_InitOnce+0x154>)
 8011b2c:	205a      	movs	r0, #90	; 0x5a
 8011b2e:	61c8      	str	r0, [r1, #28]
 8011b30:	2300      	movs	r3, #0
 8011b32:	4c0f      	ldr	r4, [pc, #60]	; (8011b70 <_InitOnce+0x154>)
 8011b34:	2510      	movs	r5, #16
 8011b36:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8011b3a:	fa05 f503 	lsl.w	r5, r5, r3
 8011b3e:	3301      	adds	r3, #1
 8011b40:	2b10      	cmp	r3, #16
 8011b42:	63d5      	str	r5, [r2, #60]	; 0x3c
 8011b44:	d1f5      	bne.n	8011b32 <_InitOnce+0x116>
 8011b46:	480b      	ldr	r0, [pc, #44]	; (8011b74 <_InitOnce+0x158>)
 8011b48:	6801      	ldr	r1, [r0, #0]
 8011b4a:	6840      	ldr	r0, [r0, #4]
 8011b4c:	6361      	str	r1, [r4, #52]	; 0x34
 8011b4e:	f1a0 0514 	sub.w	r5, r0, #20
 8011b52:	194b      	adds	r3, r1, r5
 8011b54:	2202      	movs	r2, #2
 8011b56:	2501      	movs	r5, #1
 8011b58:	60e2      	str	r2, [r4, #12]
 8011b5a:	6323      	str	r3, [r4, #48]	; 0x30
 8011b5c:	60a0      	str	r0, [r4, #8]
 8011b5e:	605d      	str	r5, [r3, #4]
 8011b60:	6225      	str	r5, [r4, #32]
 8011b62:	6065      	str	r5, [r4, #4]
 8011b64:	f7ff fe18 	bl	8011798 <_AddFreeMemory>
 8011b68:	f7ff ff0a 	bl	8011980 <_EnlargeBlocks>
 8011b6c:	62e5      	str	r5, [r4, #44]	; 0x2c
 8011b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b70:	20017a14 	.word	0x20017a14
 8011b74:	20016f40 	.word	0x20016f40
 8011b78:	20016f4c 	.word	0x20016f4c
 8011b7c:	08011725 	.word	0x08011725

08011b80 <GUI_ALLOC_GetMaxSize>:
 8011b80:	b508      	push	{r3, lr}
 8011b82:	f7ff ff4b 	bl	8011a1c <_InitOnce>
 8011b86:	2200      	movs	r2, #0
 8011b88:	4b0b      	ldr	r3, [pc, #44]	; (8011bb8 <GUI_ALLOC_GetMaxSize+0x38>)
 8011b8a:	18d0      	adds	r0, r2, r3
 8011b8c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8011b90:	b113      	cbz	r3, 8011b98 <GUI_ALLOC_GetMaxSize+0x18>
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	2000      	movs	r0, #0
 8011b96:	e00b      	b.n	8011bb0 <GUI_ALLOC_GetMaxSize+0x30>
 8011b98:	3a08      	subs	r2, #8
 8011b9a:	f112 0f80 	cmn.w	r2, #128	; 0x80
 8011b9e:	d1f3      	bne.n	8011b88 <GUI_ALLOC_GetMaxSize+0x8>
 8011ba0:	e7f8      	b.n	8011b94 <GUI_ALLOC_GetMaxSize+0x14>
 8011ba2:	6859      	ldr	r1, [r3, #4]
 8011ba4:	689a      	ldr	r2, [r3, #8]
 8011ba6:	4288      	cmp	r0, r1
 8011ba8:	bf38      	it	cc
 8011baa:	4608      	movcc	r0, r1
 8011bac:	b112      	cbz	r2, 8011bb4 <GUI_ALLOC_GetMaxSize+0x34>
 8011bae:	6893      	ldr	r3, [r2, #8]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1f6      	bne.n	8011ba2 <GUI_ALLOC_GetMaxSize+0x22>
 8011bb4:	380c      	subs	r0, #12
 8011bb6:	bd08      	pop	{r3, pc}
 8011bb8:	20017a14 	.word	0x20017a14

08011bbc <GUI_ALLOC_RequestSize>:
 8011bbc:	b508      	push	{r3, lr}
 8011bbe:	f7ff ffdf 	bl	8011b80 <GUI_ALLOC_GetMaxSize>
 8011bc2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8011bc6:	f04f 0364 	mov.w	r3, #100	; 0x64
 8011bca:	4a06      	ldr	r2, [pc, #24]	; (8011be4 <GUI_ALLOC_RequestSize+0x28>)
 8011bcc:	d904      	bls.n	8011bd8 <GUI_ALLOC_RequestSize+0x1c>
 8011bce:	fb90 f0f3 	sdiv	r0, r0, r3
 8011bd2:	69d3      	ldr	r3, [r2, #28]
 8011bd4:	4358      	muls	r0, r3
 8011bd6:	bd08      	pop	{r3, pc}
 8011bd8:	69d1      	ldr	r1, [r2, #28]
 8011bda:	4348      	muls	r0, r1
 8011bdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8011be0:	bd08      	pop	{r3, pc}
 8011be2:	bf00      	nop
 8011be4:	20017a14 	.word	0x20017a14

08011be8 <GUI_ALLOC_GetFixedBlock>:
 8011be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bea:	4605      	mov	r5, r0
 8011bec:	f7ff ff16 	bl	8011a1c <_InitOnce>
 8011bf0:	4b24      	ldr	r3, [pc, #144]	; (8011c84 <GUI_ALLOC_GetFixedBlock+0x9c>)
 8011bf2:	1ce8      	adds	r0, r5, #3
 8011bf4:	f020 0103 	bic.w	r1, r0, #3
 8011bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011bfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011bfc:	1d0d      	adds	r5, r1, #4
 8011bfe:	4295      	cmp	r5, r2
 8011c00:	bf38      	it	cc
 8011c02:	4615      	movcc	r5, r2
 8011c04:	4604      	mov	r4, r0
 8011c06:	b12c      	cbz	r4, 8011c14 <GUI_ALLOC_GetFixedBlock+0x2c>
 8011c08:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8011c0c:	42aa      	cmp	r2, r5
 8011c0e:	d02a      	beq.n	8011c66 <GUI_ALLOC_GetFixedBlock+0x7e>
 8011c10:	6824      	ldr	r4, [r4, #0]
 8011c12:	e7f8      	b.n	8011c06 <GUI_ALLOC_GetFixedBlock+0x1e>
 8011c14:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	18ff      	adds	r7, r7, r3
 8011c1a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8011c1e:	1bbe      	subs	r6, r7, r6
 8011c20:	6830      	ldr	r0, [r6, #0]
 8011c22:	b128      	cbz	r0, 8011c30 <GUI_ALLOC_GetFixedBlock+0x48>
 8011c24:	4620      	mov	r0, r4
 8011c26:	f7ff fdfd 	bl	8011824 <_RemoveHoles>
 8011c2a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8011c2e:	1a7e      	subs	r6, r7, r1
 8011c30:	6832      	ldr	r2, [r6, #0]
 8011c32:	bb22      	cbnz	r2, 8011c7e <GUI_ALLOC_GetFixedBlock+0x96>
 8011c34:	6873      	ldr	r3, [r6, #4]
 8011c36:	42ab      	cmp	r3, r5
 8011c38:	db21      	blt.n	8011c7e <GUI_ALLOC_GetFixedBlock+0x96>
 8011c3a:	1d1c      	adds	r4, r3, #4
 8011c3c:	1b60      	subs	r0, r4, r5
 8011c3e:	1834      	adds	r4, r6, r0
 8011c40:	4630      	mov	r0, r6
 8011c42:	f7ff fd8b 	bl	801175c <_RemoveFreeBlock>
 8011c46:	490f      	ldr	r1, [pc, #60]	; (8011c84 <GUI_ALLOC_GetFixedBlock+0x9c>)
 8011c48:	688a      	ldr	r2, [r1, #8]
 8011c4a:	6908      	ldr	r0, [r1, #16]
 8011c4c:	1b53      	subs	r3, r2, r5
 8011c4e:	182a      	adds	r2, r5, r0
 8011c50:	608b      	str	r3, [r1, #8]
 8011c52:	610a      	str	r2, [r1, #16]
 8011c54:	6871      	ldr	r1, [r6, #4]
 8011c56:	1b48      	subs	r0, r1, r5
 8011c58:	d002      	beq.n	8011c60 <GUI_ALLOC_GetFixedBlock+0x78>
 8011c5a:	4631      	mov	r1, r6
 8011c5c:	f7ff fd9c 	bl	8011798 <_AddFreeMemory>
 8011c60:	f844 5c04 	str.w	r5, [r4, #-4]
 8011c64:	e00b      	b.n	8011c7e <GUI_ALLOC_GetFixedBlock+0x96>
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	b10b      	cbz	r3, 8011c6e <GUI_ALLOC_GetFixedBlock+0x86>
 8011c6a:	6861      	ldr	r1, [r4, #4]
 8011c6c:	6059      	str	r1, [r3, #4]
 8011c6e:	6862      	ldr	r2, [r4, #4]
 8011c70:	b102      	cbz	r2, 8011c74 <GUI_ALLOC_GetFixedBlock+0x8c>
 8011c72:	6013      	str	r3, [r2, #0]
 8011c74:	42a0      	cmp	r0, r4
 8011c76:	d102      	bne.n	8011c7e <GUI_ALLOC_GetFixedBlock+0x96>
 8011c78:	6820      	ldr	r0, [r4, #0]
 8011c7a:	4b02      	ldr	r3, [pc, #8]	; (8011c84 <GUI_ALLOC_GetFixedBlock+0x9c>)
 8011c7c:	6398      	str	r0, [r3, #56]	; 0x38
 8011c7e:	4620      	mov	r0, r4
 8011c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c82:	bf00      	nop
 8011c84:	20017a14 	.word	0x20017a14

08011c88 <_Alloc>:
 8011c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	f7ff fec5 	bl	8011a1c <_InitOnce>
 8011c92:	4b38      	ldr	r3, [pc, #224]	; (8011d74 <_Alloc+0xec>)
 8011c94:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8011c96:	42b4      	cmp	r4, r6
 8011c98:	d302      	bcc.n	8011ca0 <_Alloc+0x18>
 8011c9a:	1ce6      	adds	r6, r4, #3
 8011c9c:	f026 0603 	bic.w	r6, r6, #3
 8011ca0:	6818      	ldr	r0, [r3, #0]
 8011ca2:	4c34      	ldr	r4, [pc, #208]	; (8011d74 <_Alloc+0xec>)
 8011ca4:	360c      	adds	r6, #12
 8011ca6:	4286      	cmp	r6, r0
 8011ca8:	d860      	bhi.n	8011d6c <_Alloc+0xe4>
 8011caa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011cac:	6862      	ldr	r2, [r4, #4]
 8011cae:	428a      	cmp	r2, r1
 8011cb0:	d910      	bls.n	8011cd4 <_Alloc+0x4c>
 8011cb2:	4830      	ldr	r0, [pc, #192]	; (8011d74 <_Alloc+0xec>)
 8011cb4:	6842      	ldr	r2, [r0, #4]
 8011cb6:	1e55      	subs	r5, r2, #1
 8011cb8:	6045      	str	r5, [r0, #4]
 8011cba:	6a05      	ldr	r5, [r0, #32]
 8011cbc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8011cbe:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8011cc2:	eb02 0308 	add.w	r3, r2, r8
 8011cc6:	6859      	ldr	r1, [r3, #4]
 8011cc8:	6201      	str	r1, [r0, #32]
 8011cca:	2001      	movs	r0, #1
 8011ccc:	f802 0035 	strb.w	r0, [r2, r5, lsl #3]
 8011cd0:	b955      	cbnz	r5, 8011ce8 <_Alloc+0x60>
 8011cd2:	e04b      	b.n	8011d6c <_Alloc+0xe4>
 8011cd4:	1e4d      	subs	r5, r1, #1
 8011cd6:	62e5      	str	r5, [r4, #44]	; 0x2c
 8011cd8:	f7ff fe52 	bl	8011980 <_EnlargeBlocks>
 8011cdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011cde:	1c59      	adds	r1, r3, #1
 8011ce0:	62e1      	str	r1, [r4, #44]	; 0x2c
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	d0e5      	beq.n	8011cb2 <_Alloc+0x2a>
 8011ce6:	e041      	b.n	8011d6c <_Alloc+0xe4>
 8011ce8:	230f      	movs	r3, #15
 8011cea:	4a22      	ldr	r2, [pc, #136]	; (8011d74 <_Alloc+0xec>)
 8011cec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011cf0:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 8011cf2:	4286      	cmp	r6, r0
 8011cf4:	d20b      	bcs.n	8011d0e <_Alloc+0x86>
 8011cf6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011cfa:	d2f6      	bcs.n	8011cea <_Alloc+0x62>
 8011cfc:	e007      	b.n	8011d0e <_Alloc+0x86>
 8011cfe:	688c      	ldr	r4, [r1, #8]
 8011d00:	6860      	ldr	r0, [r4, #4]
 8011d02:	4286      	cmp	r6, r0
 8011d04:	d90a      	bls.n	8011d1c <_Alloc+0x94>
 8011d06:	68a1      	ldr	r1, [r4, #8]
 8011d08:	2900      	cmp	r1, #0
 8011d0a:	d1f8      	bne.n	8011cfe <_Alloc+0x76>
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	2b0f      	cmp	r3, #15
 8011d10:	d824      	bhi.n	8011d5c <_Alloc+0xd4>
 8011d12:	4a18      	ldr	r2, [pc, #96]	; (8011d74 <_Alloc+0xec>)
 8011d14:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011d1a:	e7f5      	b.n	8011d08 <_Alloc+0x80>
 8011d1c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8011d74 <_Alloc+0xec>
 8011d20:	6867      	ldr	r7, [r4, #4]
 8011d22:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8011d26:	1bba      	subs	r2, r7, r6
 8011d28:	310c      	adds	r1, #12
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	428a      	cmp	r2, r1
 8011d2e:	bf38      	it	cc
 8011d30:	463e      	movcc	r6, r7
 8011d32:	f7ff fd13 	bl	801175c <_RemoveFreeBlock>
 8011d36:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8011d3a:	19a1      	adds	r1, r4, r6
 8011d3c:	eb03 0008 	add.w	r0, r3, r8
 8011d40:	2200      	movs	r2, #0
 8011d42:	42b7      	cmp	r7, r6
 8011d44:	6044      	str	r4, [r0, #4]
 8011d46:	e884 0060 	stmia.w	r4, {r5, r6}
 8011d4a:	60a2      	str	r2, [r4, #8]
 8011d4c:	6124      	str	r4, [r4, #16]
 8011d4e:	f841 6c04 	str.w	r6, [r1, #-4]
 8011d52:	dd0c      	ble.n	8011d6e <_Alloc+0xe6>
 8011d54:	1bb8      	subs	r0, r7, r6
 8011d56:	f7ff fd1f 	bl	8011798 <_AddFreeMemory>
 8011d5a:	e008      	b.n	8011d6e <_Alloc+0xe6>
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	f7ff fd61 	bl	8011824 <_RemoveHoles>
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d0c0      	beq.n	8011ce8 <_Alloc+0x60>
 8011d66:	4628      	mov	r0, r5
 8011d68:	f7ff fcca 	bl	8011700 <_PushFreeBlock>
 8011d6c:	2500      	movs	r5, #0
 8011d6e:	4628      	mov	r0, r5
 8011d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d74:	20017a14 	.word	0x20017a14

08011d78 <GUI_ALLOC_AllocNoInit>:
 8011d78:	b108      	cbz	r0, 8011d7e <GUI_ALLOC_AllocNoInit+0x6>
 8011d7a:	f7ff bf85 	b.w	8011c88 <_Alloc>
 8011d7e:	4770      	bx	lr

08011d80 <GUI_ALLOC_FreePtr>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	4604      	mov	r4, r0
 8011d84:	6800      	ldr	r0, [r0, #0]
 8011d86:	f7ff fde3 	bl	8011950 <GUI_ALLOC_Free>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	6023      	str	r3, [r4, #0]
 8011d8e:	bd10      	pop	{r4, pc}

08011d90 <GUI_ALLOC_FreePtrArray>:
 8011d90:	b570      	push	{r4, r5, r6, lr}
 8011d92:	4605      	mov	r5, r0
 8011d94:	460e      	mov	r6, r1
 8011d96:	2400      	movs	r4, #0
 8011d98:	42b4      	cmp	r4, r6
 8011d9a:	da05      	bge.n	8011da8 <GUI_ALLOC_FreePtrArray+0x18>
 8011d9c:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8011da0:	f7ff ffee 	bl	8011d80 <GUI_ALLOC_FreePtr>
 8011da4:	3401      	adds	r4, #1
 8011da6:	e7f7      	b.n	8011d98 <GUI_ALLOC_FreePtrArray+0x8>
 8011da8:	bd70      	pop	{r4, r5, r6, pc}

08011daa <GUI_AddDecMin>:
 8011daa:	b570      	push	{r4, r5, r6, lr}
 8011dac:	460c      	mov	r4, r1
 8011dae:	4605      	mov	r5, r0
 8011db0:	f003 fc54 	bl	801565c <GUI_Long2Len>
 8011db4:	2200      	movs	r2, #0
 8011db6:	b2c1      	uxtb	r1, r0
 8011db8:	4623      	mov	r3, r4
 8011dba:	4628      	mov	r0, r5
 8011dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011dc0:	f003 bc64 	b.w	801568c <GUI_AddDecShift>

08011dc4 <GUI_ALLOC_AllocZero>:
 8011dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	f7ff ffd6 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 8011dcc:	4606      	mov	r6, r0
 8011dce:	b158      	cbz	r0, 8011de8 <GUI_ALLOC_AllocZero+0x24>
 8011dd0:	f7ff fd84 	bl	80118dc <GUI_ALLOC_LockH>
 8011dd4:	ac02      	add	r4, sp, #8
 8011dd6:	2100      	movs	r1, #0
 8011dd8:	f844 0d04 	str.w	r0, [r4, #-4]!
 8011ddc:	462a      	mov	r2, r5
 8011dde:	f7fd fcdb 	bl	800f798 <GUI__memset>
 8011de2:	4620      	mov	r0, r4
 8011de4:	f7ff fd88 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8011de8:	4630      	mov	r0, r6
 8011dea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08011dec <GUI_ALLOC_AllocInit>:
 8011dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dee:	4605      	mov	r5, r0
 8011df0:	460c      	mov	r4, r1
 8011df2:	b909      	cbnz	r1, 8011df8 <GUI_ALLOC_AllocInit+0xc>
 8011df4:	2600      	movs	r6, #0
 8011df6:	e013      	b.n	8011e20 <GUI_ALLOC_AllocInit+0x34>
 8011df8:	4608      	mov	r0, r1
 8011dfa:	f7ff ffbd 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 8011dfe:	4606      	mov	r6, r0
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d0f7      	beq.n	8011df4 <GUI_ALLOC_AllocInit+0x8>
 8011e04:	f7ff fd6a 	bl	80118dc <GUI_ALLOC_LockH>
 8011e08:	4629      	mov	r1, r5
 8011e0a:	9001      	str	r0, [sp, #4]
 8011e0c:	4622      	mov	r2, r4
 8011e0e:	b115      	cbz	r5, 8011e16 <GUI_ALLOC_AllocInit+0x2a>
 8011e10:	f7ee f9ba 	bl	8000188 <memcpy>
 8011e14:	e001      	b.n	8011e1a <GUI_ALLOC_AllocInit+0x2e>
 8011e16:	f7fd fcbf 	bl	800f798 <GUI__memset>
 8011e1a:	a801      	add	r0, sp, #4
 8011e1c:	f7ff fd6c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8011e20:	4630      	mov	r0, r6
 8011e22:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08011e24 <GUI_DrawRect>:
 8011e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e28:	4c1d      	ldr	r4, [pc, #116]	; (8011ea0 <GUI_DrawRect+0x7c>)
 8011e2a:	f8d4 e000 	ldr.w	lr, [r4]
 8011e2e:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 8011e32:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 8011e36:	1905      	adds	r5, r0, r4
 8011e38:	1914      	adds	r4, r2, r4
 8011e3a:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8011e3e:	1e50      	subs	r0, r2, #1
 8011e40:	198f      	adds	r7, r1, r6
 8011e42:	b281      	uxth	r1, r0
 8011e44:	1a78      	subs	r0, r7, r1
 8011e46:	199e      	adds	r6, r3, r6
 8011e48:	190a      	adds	r2, r1, r4
 8011e4a:	1a6b      	subs	r3, r5, r1
 8011e4c:	f8ad 0002 	strh.w	r0, [sp, #2]
 8011e50:	1989      	adds	r1, r1, r6
 8011e52:	4668      	mov	r0, sp
 8011e54:	f8ad 3000 	strh.w	r3, [sp]
 8011e58:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011e5c:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011e60:	f7fa fcc0 	bl	800c7e4 <WM__InitIVRSearch>
 8011e64:	b1d0      	cbz	r0, 8011e9c <GUI_DrawRect+0x78>
 8011e66:	4628      	mov	r0, r5
 8011e68:	4639      	mov	r1, r7
 8011e6a:	4622      	mov	r2, r4
 8011e6c:	f7fd f93a 	bl	800f0e4 <LCD_DrawHLine>
 8011e70:	f107 0901 	add.w	r9, r7, #1
 8011e74:	4628      	mov	r0, r5
 8011e76:	4631      	mov	r1, r6
 8011e78:	4622      	mov	r2, r4
 8011e7a:	f106 38ff 	add.w	r8, r6, #4294967295
 8011e7e:	f7fd f931 	bl	800f0e4 <LCD_DrawHLine>
 8011e82:	4628      	mov	r0, r5
 8011e84:	4649      	mov	r1, r9
 8011e86:	4642      	mov	r2, r8
 8011e88:	f7fd f952 	bl	800f130 <LCD_DrawVLine>
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	4649      	mov	r1, r9
 8011e90:	4642      	mov	r2, r8
 8011e92:	f7fd f94d 	bl	800f130 <LCD_DrawVLine>
 8011e96:	f7fa fbe5 	bl	800c664 <WM__GetNextIVR>
 8011e9a:	e7e3      	b.n	8011e64 <GUI_DrawRect+0x40>
 8011e9c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8011ea0:	2000027c 	.word	0x2000027c

08011ea4 <LCD_Index2Color_888>:
 8011ea4:	4770      	bx	lr

08011ea6 <LCD_Index2Color_8888>:
 8011ea6:	4770      	bx	lr

08011ea8 <_Color2Index_8888>:
 8011ea8:	4770      	bx	lr

08011eaa <_GetIndexMask_8888>:
 8011eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8011eae:	4770      	bx	lr

08011eb0 <_Color2IndexBulk>:
 8011eb0:	b510      	push	{r4, lr}
 8011eb2:	f850 4b04 	ldr.w	r4, [r0], #4
 8011eb6:	3a01      	subs	r2, #1
 8011eb8:	600c      	str	r4, [r1, #0]
 8011eba:	4419      	add	r1, r3
 8011ebc:	d1f9      	bne.n	8011eb2 <_Color2IndexBulk+0x2>
 8011ebe:	bd10      	pop	{r4, pc}

08011ec0 <_Index2ColorBulk>:
 8011ec0:	b510      	push	{r4, lr}
 8011ec2:	6804      	ldr	r4, [r0, #0]
 8011ec4:	3a01      	subs	r2, #1
 8011ec6:	f841 4b04 	str.w	r4, [r1], #4
 8011eca:	4418      	add	r0, r3
 8011ecc:	d1f9      	bne.n	8011ec2 <_Index2ColorBulk+0x2>
 8011ece:	bd10      	pop	{r4, pc}

08011ed0 <LCD_Index2Color_565>:
 8011ed0:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8011ed4:	4a06      	ldr	r2, [pc, #24]	; (8011ef0 <LCD_Index2Color_565+0x20>)
 8011ed6:	5cd1      	ldrb	r1, [r2, r3]
 8011ed8:	4b06      	ldr	r3, [pc, #24]	; (8011ef4 <LCD_Index2Color_565+0x24>)
 8011eda:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8011ede:	f000 001f 	and.w	r0, r0, #31
 8011ee2:	5c9a      	ldrb	r2, [r3, r2]
 8011ee4:	5c1b      	ldrb	r3, [r3, r0]
 8011ee6:	0412      	lsls	r2, r2, #16
 8011ee8:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 8011eec:	18c8      	adds	r0, r1, r3
 8011eee:	4770      	bx	lr
 8011ef0:	08030784 	.word	0x08030784
 8011ef4:	080307c4 	.word	0x080307c4

08011ef8 <_Color2Index_565>:
 8011ef8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011efc:	4a06      	ldr	r2, [pc, #24]	; (8011f18 <_Color2Index_565+0x20>)
 8011efe:	5cd1      	ldrb	r1, [r2, r3]
 8011f00:	4b06      	ldr	r3, [pc, #24]	; (8011f1c <_Color2Index_565+0x24>)
 8011f02:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8011f06:	b2c0      	uxtb	r0, r0
 8011f08:	5c9a      	ldrb	r2, [r3, r2]
 8011f0a:	5c1b      	ldrb	r3, [r3, r0]
 8011f0c:	02d2      	lsls	r2, r2, #11
 8011f0e:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8011f12:	18c8      	adds	r0, r1, r3
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	080307e4 	.word	0x080307e4
 8011f1c:	080308e4 	.word	0x080308e4

08011f20 <_GetIndexMask_565>:
 8011f20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011f24:	4770      	bx	lr
	...

08011f28 <_Color2IndexBulk>:
 8011f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f2a:	f850 4b04 	ldr.w	r4, [r0], #4
 8011f2e:	4e09      	ldr	r6, [pc, #36]	; (8011f54 <_Color2IndexBulk+0x2c>)
 8011f30:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8011f34:	5d77      	ldrb	r7, [r6, r5]
 8011f36:	4d08      	ldr	r5, [pc, #32]	; (8011f58 <_Color2IndexBulk+0x30>)
 8011f38:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8011f3c:	b2e4      	uxtb	r4, r4
 8011f3e:	5dae      	ldrb	r6, [r5, r6]
 8011f40:	5d2d      	ldrb	r5, [r5, r4]
 8011f42:	02f6      	lsls	r6, r6, #11
 8011f44:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8011f48:	1974      	adds	r4, r6, r5
 8011f4a:	3a01      	subs	r2, #1
 8011f4c:	800c      	strh	r4, [r1, #0]
 8011f4e:	4419      	add	r1, r3
 8011f50:	d1eb      	bne.n	8011f2a <_Color2IndexBulk+0x2>
 8011f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f54:	080307e4 	.word	0x080307e4
 8011f58:	080308e4 	.word	0x080308e4

08011f5c <_Index2ColorBulk>:
 8011f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f5e:	1e54      	subs	r4, r2, #1
 8011f60:	fb04 0003 	mla	r0, r4, r3, r0
 8011f64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011f68:	8804      	ldrh	r4, [r0, #0]
 8011f6a:	4e0a      	ldr	r6, [pc, #40]	; (8011f94 <_Index2ColorBulk+0x38>)
 8011f6c:	f3c4 1545 	ubfx	r5, r4, #5, #6
 8011f70:	1ac0      	subs	r0, r0, r3
 8011f72:	5d77      	ldrb	r7, [r6, r5]
 8011f74:	4d08      	ldr	r5, [pc, #32]	; (8011f98 <_Index2ColorBulk+0x3c>)
 8011f76:	0ae6      	lsrs	r6, r4, #11
 8011f78:	f004 041f 	and.w	r4, r4, #31
 8011f7c:	5dae      	ldrb	r6, [r5, r6]
 8011f7e:	5d2d      	ldrb	r5, [r5, r4]
 8011f80:	0436      	lsls	r6, r6, #16
 8011f82:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8011f86:	1974      	adds	r4, r6, r5
 8011f88:	3a01      	subs	r2, #1
 8011f8a:	f841 4904 	str.w	r4, [r1], #-4
 8011f8e:	d1eb      	bne.n	8011f68 <_Index2ColorBulk+0xc>
 8011f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f92:	bf00      	nop
 8011f94:	08030784 	.word	0x08030784
 8011f98:	080307c4 	.word	0x080307c4

08011f9c <WIDGET_SetEffect>:
 8011f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8011fa4:	9103      	str	r1, [sp, #12]
 8011fa6:	4669      	mov	r1, sp
 8011fa8:	9302      	str	r3, [sp, #8]
 8011faa:	9200      	str	r2, [sp, #0]
 8011fac:	f7fa f984 	bl	800c2b8 <WM_SendMessage>
 8011fb0:	b005      	add	sp, #20
 8011fb2:	bd00      	pop	{pc}

08011fb4 <_DrawDown>:
 8011fb4:	4770      	bx	lr

08011fb6 <_DrawUp>:
 8011fb6:	4770      	bx	lr

08011fb8 <_DrawDownRect>:
 8011fb8:	4770      	bx	lr

08011fba <_DrawUpRect>:
 8011fba:	4770      	bx	lr

08011fbc <_DrawFlat>:
 8011fbc:	4770      	bx	lr

08011fbe <_EffectRequiresRedraw>:
 8011fbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fc0:	460d      	mov	r5, r1
 8011fc2:	f100 0108 	add.w	r1, r0, #8
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011fca:	c903      	ldmia	r1, {r0, r1}
 8011fcc:	681c      	ldr	r4, [r3, #0]
 8011fce:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011fd2:	4610      	mov	r0, r2
 8011fd4:	4669      	mov	r1, sp
 8011fd6:	f001 f809 	bl	8012fec <WM__Screen2Client>
 8011fda:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011fde:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011fe2:	1902      	adds	r2, r0, r4
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	dc17      	bgt.n	8012018 <_EffectRequiresRedraw+0x5a>
 8011fe8:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8011fec:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8011ff0:	1b08      	subs	r0, r1, r4
 8011ff2:	4290      	cmp	r0, r2
 8011ff4:	db10      	blt.n	8012018 <_EffectRequiresRedraw+0x5a>
 8011ff6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011ffa:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8011ffe:	1919      	adds	r1, r3, r4
 8012000:	4281      	cmp	r1, r0
 8012002:	dc09      	bgt.n	8012018 <_EffectRequiresRedraw+0x5a>
 8012004:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 8012008:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801200c:	1b04      	subs	r4, r0, r4
 801200e:	4294      	cmp	r4, r2
 8012010:	bfac      	ite	ge
 8012012:	2000      	movge	r0, #0
 8012014:	2001      	movlt	r0, #1
 8012016:	e000      	b.n	801201a <_EffectRequiresRedraw+0x5c>
 8012018:	2001      	movs	r0, #1
 801201a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0801201c <WIDGET__RotateRect90>:
 801201c:	b570      	push	{r4, r5, r6, lr}
 801201e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012022:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8012026:	8815      	ldrh	r5, [r2, #0]
 8012028:	8894      	ldrh	r4, [r2, #4]
 801202a:	1af0      	subs	r0, r6, r3
 801202c:	b283      	uxth	r3, r0
 801202e:	88d0      	ldrh	r0, [r2, #6]
 8012030:	8852      	ldrh	r2, [r2, #2]
 8012032:	80cc      	strh	r4, [r1, #6]
 8012034:	1a18      	subs	r0, r3, r0
 8012036:	1a9b      	subs	r3, r3, r2
 8012038:	8008      	strh	r0, [r1, #0]
 801203a:	808b      	strh	r3, [r1, #4]
 801203c:	804d      	strh	r5, [r1, #2]
 801203e:	bd70      	pop	{r4, r5, r6, pc}

08012040 <WIDGET__GetClientRect>:
 8012040:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8012042:	b513      	push	{r0, r1, r4, lr}
 8012044:	f003 0008 	and.w	r0, r3, #8
 8012048:	460c      	mov	r4, r1
 801204a:	b281      	uxth	r1, r0
 801204c:	b179      	cbz	r1, 801206e <WIDGET__GetClientRect+0x2e>
 801204e:	4668      	mov	r0, sp
 8012050:	f7f9 fc98 	bl	800b984 <WM_GetClientRect>
 8012054:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012058:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801205c:	f8bd 0000 	ldrh.w	r0, [sp]
 8012060:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8012064:	8022      	strh	r2, [r4, #0]
 8012066:	80a3      	strh	r3, [r4, #4]
 8012068:	8060      	strh	r0, [r4, #2]
 801206a:	80e1      	strh	r1, [r4, #6]
 801206c:	e002      	b.n	8012074 <WIDGET__GetClientRect+0x34>
 801206e:	4620      	mov	r0, r4
 8012070:	f7f9 fc88 	bl	800b984 <WM_GetClientRect>
 8012074:	bd1c      	pop	{r2, r3, r4, pc}

08012076 <WIDGET__GetBkColor>:
 8012076:	b508      	push	{r3, lr}
 8012078:	f7f9 fc03 	bl	800b882 <WM_GetParent>
 801207c:	f7f9 fc90 	bl	800b9a0 <WM_GetBkColor>
 8012080:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012084:	4298      	cmp	r0, r3
 8012086:	d103      	bne.n	8012090 <WIDGET__GetBkColor+0x1a>
 8012088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801208c:	f7f8 bb00 	b.w	800a690 <DIALOG_GetBkColor>
 8012090:	bd08      	pop	{r3, pc}

08012092 <WIDGET__GetInsideRect>:
 8012092:	b538      	push	{r3, r4, r5, lr}
 8012094:	4604      	mov	r4, r0
 8012096:	460d      	mov	r5, r1
 8012098:	f7fa f91c 	bl	800c2d4 <WM__GetClientRectWin>
 801209c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	4628      	mov	r0, r5
 80120a2:	4629      	mov	r1, r5
 80120a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120a8:	f7fd bbda 	b.w	800f860 <GUI__ReduceRect>

080120ac <WIDGET__GetWindowSizeX>:
 80120ac:	b513      	push	{r0, r1, r4, lr}
 80120ae:	4604      	mov	r4, r0
 80120b0:	f7ff fc14 	bl	80118dc <GUI_ALLOC_LockH>
 80120b4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80120b6:	9001      	str	r0, [sp, #4]
 80120b8:	f003 0008 	and.w	r0, r3, #8
 80120bc:	b281      	uxth	r1, r0
 80120be:	4620      	mov	r0, r4
 80120c0:	b111      	cbz	r1, 80120c8 <WIDGET__GetWindowSizeX+0x1c>
 80120c2:	f7f9 fbbf 	bl	800b844 <WM_GetWindowSizeY>
 80120c6:	e001      	b.n	80120cc <WIDGET__GetWindowSizeX+0x20>
 80120c8:	f7f9 fba8 	bl	800b81c <WM_GetWindowSizeX>
 80120cc:	4604      	mov	r4, r0
 80120ce:	a801      	add	r0, sp, #4
 80120d0:	f7ff fc12 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80120d4:	4620      	mov	r0, r4
 80120d6:	bd1c      	pop	{r2, r3, r4, pc}

080120d8 <WIDGET_SetState>:
 80120d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120da:	460c      	mov	r4, r1
 80120dc:	4605      	mov	r5, r0
 80120de:	f7ff fbfd 	bl	80118dc <GUI_ALLOC_LockH>
 80120e2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80120e4:	9001      	str	r0, [sp, #4]
 80120e6:	4294      	cmp	r4, r2
 80120e8:	d003      	beq.n	80120f2 <WIDGET_SetState+0x1a>
 80120ea:	8644      	strh	r4, [r0, #50]	; 0x32
 80120ec:	4628      	mov	r0, r5
 80120ee:	f7fa f939 	bl	800c364 <WM_InvalidateWindow>
 80120f2:	a801      	add	r0, sp, #4
 80120f4:	f7ff fc00 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80120f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080120fa <WIDGET_OrState>:
 80120fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120fc:	460c      	mov	r4, r1
 80120fe:	4605      	mov	r5, r0
 8012100:	b178      	cbz	r0, 8012122 <WIDGET_OrState+0x28>
 8012102:	f7ff fbeb 	bl	80118dc <GUI_ALLOC_LockH>
 8012106:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8012108:	9001      	str	r0, [sp, #4]
 801210a:	ea04 0102 	and.w	r1, r4, r2
 801210e:	428c      	cmp	r4, r1
 8012110:	d004      	beq.n	801211c <WIDGET_OrState+0x22>
 8012112:	4314      	orrs	r4, r2
 8012114:	8644      	strh	r4, [r0, #50]	; 0x32
 8012116:	4628      	mov	r0, r5
 8012118:	f7fa f924 	bl	800c364 <WM_InvalidateWindow>
 801211c:	a801      	add	r0, sp, #4
 801211e:	f7ff fbeb 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012122:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08012124 <WIDGET_AndState>:
 8012124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012126:	460d      	mov	r5, r1
 8012128:	4604      	mov	r4, r0
 801212a:	b170      	cbz	r0, 801214a <WIDGET_AndState+0x26>
 801212c:	f7ff fbd6 	bl	80118dc <GUI_ALLOC_LockH>
 8012130:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8012132:	9001      	str	r0, [sp, #4]
 8012134:	ea22 0105 	bic.w	r1, r2, r5
 8012138:	428a      	cmp	r2, r1
 801213a:	d003      	beq.n	8012144 <WIDGET_AndState+0x20>
 801213c:	8641      	strh	r1, [r0, #50]	; 0x32
 801213e:	4620      	mov	r0, r4
 8012140:	f7fa f910 	bl	800c364 <WM_InvalidateWindow>
 8012144:	a801      	add	r0, sp, #4
 8012146:	f7ff fbd7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 801214a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0801214c <WIDGET__Init>:
 801214c:	4b02      	ldr	r3, [pc, #8]	; (8012158 <WIDGET__Init+0xc>)
 801214e:	8642      	strh	r2, [r0, #50]	; 0x32
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	8601      	strh	r1, [r0, #48]	; 0x30
 8012154:	62c3      	str	r3, [r0, #44]	; 0x2c
 8012156:	4770      	bx	lr
 8012158:	2000028c 	.word	0x2000028c

0801215c <WIDGET_HandleActive>:
 801215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801215e:	460d      	mov	r5, r1
 8012160:	b085      	sub	sp, #20
 8012162:	4606      	mov	r6, r0
 8012164:	2800      	cmp	r0, #0
 8012166:	f000 8093 	beq.w	8012290 <WIDGET_HandleActive+0x134>
 801216a:	f7ff fbb7 	bl	80118dc <GUI_ALLOC_LockH>
 801216e:	682b      	ldr	r3, [r5, #0]
 8012170:	9002      	str	r0, [sp, #8]
 8012172:	2b15      	cmp	r3, #21
 8012174:	4602      	mov	r2, r0
 8012176:	d030      	beq.n	80121da <WIDGET_HandleActive+0x7e>
 8012178:	dc06      	bgt.n	8012188 <WIDGET_HandleActive+0x2c>
 801217a:	2b11      	cmp	r3, #17
 801217c:	d030      	beq.n	80121e0 <WIDGET_HandleActive+0x84>
 801217e:	2b14      	cmp	r3, #20
 8012180:	d07a      	beq.n	8012278 <WIDGET_HandleActive+0x11c>
 8012182:	2b0d      	cmp	r3, #13
 8012184:	d17d      	bne.n	8012282 <WIDGET_HandleActive+0x126>
 8012186:	e03c      	b.n	8012202 <WIDGET_HandleActive+0xa6>
 8012188:	2b1e      	cmp	r3, #30
 801218a:	d048      	beq.n	801221e <WIDGET_HandleActive+0xc2>
 801218c:	dc04      	bgt.n	8012198 <WIDGET_HandleActive+0x3c>
 801218e:	2b16      	cmp	r3, #22
 8012190:	d177      	bne.n	8012282 <WIDGET_HandleActive+0x126>
 8012192:	68eb      	ldr	r3, [r5, #12]
 8012194:	8603      	strh	r3, [r0, #48]	; 0x30
 8012196:	e072      	b.n	801227e <WIDGET_HandleActive+0x122>
 8012198:	2b1f      	cmp	r3, #31
 801219a:	d068      	beq.n	801226e <WIDGET_HandleActive+0x112>
 801219c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80121a0:	d16f      	bne.n	8012282 <WIDGET_HandleActive+0x126>
 80121a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80121a4:	68ed      	ldr	r5, [r5, #12]
 80121a6:	6801      	ldr	r1, [r0, #0]
 80121a8:	62d5      	str	r5, [r2, #44]	; 0x2c
 80121aa:	682a      	ldr	r2, [r5, #0]
 80121ac:	a802      	add	r0, sp, #8
 80121ae:	1a8d      	subs	r5, r1, r2
 80121b0:	f7ff fba2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80121b4:	4630      	mov	r0, r6
 80121b6:	f7ff fb91 	bl	80118dc <GUI_ALLOC_LockH>
 80121ba:	ac04      	add	r4, sp, #16
 80121bc:	4269      	negs	r1, r5
 80121be:	f844 0d04 	str.w	r0, [r4, #-4]!
 80121c2:	460a      	mov	r2, r1
 80121c4:	462b      	mov	r3, r5
 80121c6:	9500      	str	r5, [sp, #0]
 80121c8:	f000 fe7a 	bl	8012ec0 <WM__UpdateChildPositions>
 80121cc:	4620      	mov	r0, r4
 80121ce:	f7ff fb93 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80121d2:	4630      	mov	r0, r6
 80121d4:	f7fa f8c6 	bl	800c364 <WM_InvalidateWindow>
 80121d8:	e051      	b.n	801227e <WIDGET_HandleActive+0x122>
 80121da:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
 80121de:	e049      	b.n	8012274 <WIDGET_HandleActive+0x118>
 80121e0:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80121e2:	f002 0310 	and.w	r3, r2, #16
 80121e6:	b298      	uxth	r0, r3
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d04a      	beq.n	8012282 <WIDGET_HandleActive+0x126>
 80121ec:	68e9      	ldr	r1, [r5, #12]
 80121ee:	7a0c      	ldrb	r4, [r1, #8]
 80121f0:	2c00      	cmp	r4, #0
 80121f2:	d046      	beq.n	8012282 <WIDGET_HandleActive+0x126>
 80121f4:	a802      	add	r0, sp, #8
 80121f6:	f7ff fb7f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80121fa:	4630      	mov	r0, r6
 80121fc:	f7f9 f876 	bl	800b2ec <WM_SetFocus>
 8012200:	e03f      	b.n	8012282 <WIDGET_HandleActive+0x126>
 8012202:	68e8      	ldr	r0, [r5, #12]
 8012204:	68c1      	ldr	r1, [r0, #12]
 8012206:	2900      	cmp	r1, #0
 8012208:	d03b      	beq.n	8012282 <WIDGET_HandleActive+0x126>
 801220a:	7a0c      	ldrb	r4, [r1, #8]
 801220c:	2c00      	cmp	r4, #0
 801220e:	d038      	beq.n	8012282 <WIDGET_HandleActive+0x126>
 8012210:	a802      	add	r0, sp, #8
 8012212:	f7ff fb71 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012216:	4630      	mov	r0, r6
 8012218:	f7f9 fbd4 	bl	800b9c4 <WM_BringToTop>
 801221c:	e02f      	b.n	801227e <WIDGET_HandleActive+0x122>
 801221e:	68ef      	ldr	r7, [r5, #12]
 8012220:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 8012222:	2f01      	cmp	r7, #1
 8012224:	d10a      	bne.n	801223c <WIDGET_HandleActive+0xe0>
 8012226:	f001 0210 	and.w	r2, r1, #16
 801222a:	b294      	uxth	r4, r2
 801222c:	b16c      	cbz	r4, 801224a <WIDGET_HandleActive+0xee>
 801222e:	4630      	mov	r0, r6
 8012230:	f041 0101 	orr.w	r1, r1, #1
 8012234:	f7ff ff50 	bl	80120d8 <WIDGET_SetState>
 8012238:	2708      	movs	r7, #8
 801223a:	e008      	b.n	801224e <WIDGET_HandleActive+0xf2>
 801223c:	f021 0101 	bic.w	r1, r1, #1
 8012240:	4630      	mov	r0, r6
 8012242:	f7ff ff49 	bl	80120d8 <WIDGET_SetState>
 8012246:	2709      	movs	r7, #9
 8012248:	e001      	b.n	801224e <WIDGET_HandleActive+0xf2>
 801224a:	f04f 37ff 	mov.w	r7, #4294967295
 801224e:	a802      	add	r0, sp, #8
 8012250:	f7ff fb52 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012254:	1c7b      	adds	r3, r7, #1
 8012256:	f04f 0400 	mov.w	r4, #0
 801225a:	d005      	beq.n	8012268 <WIDGET_HandleActive+0x10c>
 801225c:	4630      	mov	r0, r6
 801225e:	4639      	mov	r1, r7
 8012260:	f7f9 f9c3 	bl	800b5ea <WM_NotifyParent>
 8012264:	60ec      	str	r4, [r5, #12]
 8012266:	e00d      	b.n	8012284 <WIDGET_HandleActive+0x128>
 8012268:	2301      	movs	r3, #1
 801226a:	60eb      	str	r3, [r5, #12]
 801226c:	e00a      	b.n	8012284 <WIDGET_HandleActive+0x128>
 801226e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8012270:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8012274:	60e8      	str	r0, [r5, #12]
 8012276:	e002      	b.n	801227e <WIDGET_HandleActive+0x122>
 8012278:	68e9      	ldr	r1, [r5, #12]
 801227a:	f7ff ff0a 	bl	8012092 <WIDGET__GetInsideRect>
 801227e:	2400      	movs	r4, #0
 8012280:	e000      	b.n	8012284 <WIDGET_HandleActive+0x128>
 8012282:	2401      	movs	r4, #1
 8012284:	9802      	ldr	r0, [sp, #8]
 8012286:	b120      	cbz	r0, 8012292 <WIDGET_HandleActive+0x136>
 8012288:	a802      	add	r0, sp, #8
 801228a:	f7ff fb35 	bl	80118f8 <GUI_ALLOC_UnlockH>
 801228e:	e000      	b.n	8012292 <WIDGET_HandleActive+0x136>
 8012290:	2401      	movs	r4, #1
 8012292:	4620      	mov	r0, r4
 8012294:	b005      	add	sp, #20
 8012296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012298 <WIDGET__DrawFocusRect>:
 8012298:	b513      	push	{r0, r1, r4, lr}
 801229a:	4614      	mov	r4, r2
 801229c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801229e:	460b      	mov	r3, r1
 80122a0:	f002 0108 	and.w	r1, r2, #8
 80122a4:	b28a      	uxth	r2, r1
 80122a6:	b122      	cbz	r2, 80122b2 <WIDGET__DrawFocusRect+0x1a>
 80122a8:	461a      	mov	r2, r3
 80122aa:	4669      	mov	r1, sp
 80122ac:	f7ff feb6 	bl	801201c <WIDGET__RotateRect90>
 80122b0:	466b      	mov	r3, sp
 80122b2:	4618      	mov	r0, r3
 80122b4:	4621      	mov	r1, r4
 80122b6:	f003 f97b 	bl	80155b0 <GUI_DrawFocusRect>
 80122ba:	bd1c      	pop	{r2, r3, r4, pc}

080122bc <WIDGET__DrawVLine>:
 80122bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122be:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80122c0:	f004 0408 	and.w	r4, r4, #8
 80122c4:	b2a4      	uxth	r4, r4
 80122c6:	b1ac      	cbz	r4, 80122f4 <WIDGET__DrawVLine+0x38>
 80122c8:	b289      	uxth	r1, r1
 80122ca:	f8ad 1000 	strh.w	r1, [sp]
 80122ce:	f8ad 1004 	strh.w	r1, [sp, #4]
 80122d2:	f8ad 2002 	strh.w	r2, [sp, #2]
 80122d6:	a902      	add	r1, sp, #8
 80122d8:	466a      	mov	r2, sp
 80122da:	f8ad 3006 	strh.w	r3, [sp, #6]
 80122de:	f7ff fe9d 	bl	801201c <WIDGET__RotateRect90>
 80122e2:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 80122e6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80122ea:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80122ee:	f7fe f979 	bl	80105e4 <GUI_DrawHLine>
 80122f2:	e004      	b.n	80122fe <WIDGET__DrawVLine+0x42>
 80122f4:	4608      	mov	r0, r1
 80122f6:	4611      	mov	r1, r2
 80122f8:	461a      	mov	r2, r3
 80122fa:	f7fe f931 	bl	8010560 <GUI_DrawVLine>
 80122fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08012300 <WIDGET__FillRectEx>:
 8012300:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8012302:	b507      	push	{r0, r1, r2, lr}
 8012304:	460a      	mov	r2, r1
 8012306:	f003 0108 	and.w	r1, r3, #8
 801230a:	b28b      	uxth	r3, r1
 801230c:	b11b      	cbz	r3, 8012316 <WIDGET__FillRectEx+0x16>
 801230e:	4669      	mov	r1, sp
 8012310:	f7ff fe84 	bl	801201c <WIDGET__RotateRect90>
 8012314:	466a      	mov	r2, sp
 8012316:	4610      	mov	r0, r2
 8012318:	f7fe f8d6 	bl	80104c8 <GUI_FillRectEx>
 801231c:	bd0e      	pop	{r1, r2, r3, pc}

0801231e <WIDGET__EFFECT_DrawDownRect>:
 801231e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012320:	4605      	mov	r5, r0
 8012322:	460c      	mov	r4, r1
 8012324:	b919      	cbnz	r1, 801232e <WIDGET__EFFECT_DrawDownRect+0x10>
 8012326:	4668      	mov	r0, sp
 8012328:	f7f9 fb2c 	bl	800b984 <WM_GetClientRect>
 801232c:	466c      	mov	r4, sp
 801232e:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8012330:	f003 0008 	and.w	r0, r3, #8
 8012334:	b281      	uxth	r1, r0
 8012336:	b129      	cbz	r1, 8012344 <WIDGET__EFFECT_DrawDownRect+0x26>
 8012338:	4622      	mov	r2, r4
 801233a:	4628      	mov	r0, r5
 801233c:	4669      	mov	r1, sp
 801233e:	f7ff fe6d 	bl	801201c <WIDGET__RotateRect90>
 8012342:	466c      	mov	r4, sp
 8012344:	4628      	mov	r0, r5
 8012346:	4621      	mov	r1, r4
 8012348:	f7ff fe39 	bl	8011fbe <_EffectRequiresRedraw>
 801234c:	b118      	cbz	r0, 8012356 <WIDGET__EFFECT_DrawDownRect+0x38>
 801234e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8012350:	4620      	mov	r0, r4
 8012352:	6913      	ldr	r3, [r2, #16]
 8012354:	4798      	blx	r3
 8012356:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08012358 <WIDGET__EFFECT_DrawUpRect>:
 8012358:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801235a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801235c:	460c      	mov	r4, r1
 801235e:	f003 0108 	and.w	r1, r3, #8
 8012362:	b28a      	uxth	r2, r1
 8012364:	4605      	mov	r5, r0
 8012366:	b122      	cbz	r2, 8012372 <WIDGET__EFFECT_DrawUpRect+0x1a>
 8012368:	4622      	mov	r2, r4
 801236a:	4669      	mov	r1, sp
 801236c:	f7ff fe56 	bl	801201c <WIDGET__RotateRect90>
 8012370:	466c      	mov	r4, sp
 8012372:	4628      	mov	r0, r5
 8012374:	4621      	mov	r1, r4
 8012376:	f7ff fe22 	bl	8011fbe <_EffectRequiresRedraw>
 801237a:	b118      	cbz	r0, 8012384 <WIDGET__EFFECT_DrawUpRect+0x2c>
 801237c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801237e:	6883      	ldr	r3, [r0, #8]
 8012380:	4620      	mov	r0, r4
 8012382:	4798      	blx	r3
 8012384:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

08012388 <WIDGET_GetDefaultEffect>:
 8012388:	4b01      	ldr	r3, [pc, #4]	; (8012390 <WIDGET_GetDefaultEffect+0x8>)
 801238a:	6818      	ldr	r0, [r3, #0]
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop
 8012390:	2000028c 	.word	0x2000028c

08012394 <_Create>:
 8012394:	4770      	bx	lr

08012396 <_Paint>:
 8012396:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801239a:	b08b      	sub	sp, #44	; 0x2c
 801239c:	4681      	mov	r9, r0
 801239e:	f7ff fa9d 	bl	80118dc <GUI_ALLOC_LockH>
 80123a2:	ae02      	add	r6, sp, #8
 80123a4:	a904      	add	r1, sp, #16
 80123a6:	9001      	str	r0, [sp, #4]
 80123a8:	f7ff fe4a 	bl	8012040 <WIDGET__GetClientRect>
 80123ac:	4630      	mov	r0, r6
 80123ae:	a904      	add	r1, sp, #16
 80123b0:	2201      	movs	r2, #1
 80123b2:	f7fd fa55 	bl	800f860 <GUI__ReduceRect>
 80123b6:	9b01      	ldr	r3, [sp, #4]
 80123b8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80123bc:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80123c0:	f9b3 1060 	ldrsh.w	r1, [r3, #96]	; 0x60
 80123c4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80123c6:	1aa8      	subs	r0, r5, r2
 80123c8:	1c47      	adds	r7, r0, #1
 80123ca:	2002      	movs	r0, #2
 80123cc:	1a7d      	subs	r5, r7, r1
 80123ce:	fb91 f7f0 	sdiv	r7, r1, r0
 80123d2:	19d7      	adds	r7, r2, r7
 80123d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80123d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123d8:	4648      	mov	r0, r9
 80123da:	ebc3 0802 	rsb	r8, r3, r2
 80123de:	f1b8 0f01 	cmp.w	r8, #1
 80123e2:	bfb8      	it	lt
 80123e4:	f04f 0801 	movlt.w	r8, #1
 80123e8:	f7f8 fee2 	bl	800b1b0 <WM_GetHasTrans>
 80123ec:	b928      	cbnz	r0, 80123fa <_Paint+0x64>
 80123ee:	9901      	ldr	r1, [sp, #4]
 80123f0:	6b88      	ldr	r0, [r1, #56]	; 0x38
 80123f2:	f7fd f98b 	bl	800f70c <LCD_SetBkColor>
 80123f6:	f7fe fe5f 	bl	80110b8 <GUI_Clear>
 80123fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80123fe:	aa06      	add	r2, sp, #24
 8012400:	e882 0003 	stmia.w	r2, {r0, r1}
 8012404:	9801      	ldr	r0, [sp, #4]
 8012406:	f8ad 7020 	strh.w	r7, [sp, #32]
 801240a:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
 801240e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8012410:	f04f 0e02 	mov.w	lr, #2
 8012414:	fa0f f98c 	sxth.w	r9, ip
 8012418:	fb99 f1fe 	sdiv	r1, r9, lr
 801241c:	b2bb      	uxth	r3, r7
 801241e:	ebc1 0903 	rsb	r9, r1, r3
 8012422:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8012424:	1a89      	subs	r1, r1, r2
 8012426:	4369      	muls	r1, r5
 8012428:	fbb1 f2f8 	udiv	r2, r1, r8
 801242c:	eb09 0102 	add.w	r1, r9, r2
 8012430:	b28a      	uxth	r2, r1
 8012432:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8012436:	f8ad 2018 	strh.w	r2, [sp, #24]
 801243a:	2605      	movs	r6, #5
 801243c:	4494      	add	ip, r2
 801243e:	195b      	adds	r3, r3, r5
 8012440:	198a      	adds	r2, r1, r6
 8012442:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012446:	fb92 f3fe 	sdiv	r3, r2, lr
 801244a:	b299      	uxth	r1, r3
 801244c:	1e4a      	subs	r2, r1, #1
 801244e:	eb01 030e 	add.w	r3, r1, lr
 8012452:	a908      	add	r1, sp, #32
 8012454:	f8ad 601a 	strh.w	r6, [sp, #26]
 8012458:	f8ad c01c 	strh.w	ip, [sp, #28]
 801245c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8012460:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012464:	f7ff ff5b 	bl	801231e <WIDGET__EFFECT_DrawDownRect>
 8012468:	2c00      	cmp	r4, #0
 801246a:	da05      	bge.n	8012478 <_Paint+0xe2>
 801246c:	f108 0401 	add.w	r4, r8, #1
 8012470:	fb95 f6f6 	sdiv	r6, r5, r6
 8012474:	42b4      	cmp	r4, r6
 8012476:	dc13      	bgt.n	80124a0 <_Paint+0x10a>
 8012478:	2c01      	cmp	r4, #1
 801247a:	dc12      	bgt.n	80124a2 <_Paint+0x10c>
 801247c:	9a01      	ldr	r2, [sp, #4]
 801247e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8012480:	f7fd f94c 	bl	800f71c <LCD_SetColor>
 8012484:	9801      	ldr	r0, [sp, #4]
 8012486:	a906      	add	r1, sp, #24
 8012488:	f7ff ff3a 	bl	8012300 <WIDGET__FillRectEx>
 801248c:	9801      	ldr	r0, [sp, #4]
 801248e:	a906      	add	r1, sp, #24
 8012490:	f7ff ff62 	bl	8012358 <WIDGET__EFFECT_DrawUpRect>
 8012494:	9b01      	ldr	r3, [sp, #4]
 8012496:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 801249a:	07c1      	lsls	r1, r0, #31
 801249c:	d416      	bmi.n	80124cc <_Paint+0x136>
 801249e:	e020      	b.n	80124e2 <_Paint+0x14c>
 80124a0:	240b      	movs	r4, #11
 80124a2:	9e01      	ldr	r6, [sp, #4]
 80124a4:	6c70      	ldr	r0, [r6, #68]	; 0x44
 80124a6:	f7fd f939 	bl	800f71c <LCD_SetColor>
 80124aa:	2600      	movs	r6, #0
 80124ac:	46b0      	mov	r8, r6
 80124ae:	1e60      	subs	r0, r4, #1
 80124b0:	fb96 f1f0 	sdiv	r1, r6, r0
 80124b4:	2201      	movs	r2, #1
 80124b6:	2303      	movs	r3, #3
 80124b8:	9801      	ldr	r0, [sp, #4]
 80124ba:	1879      	adds	r1, r7, r1
 80124bc:	f108 0801 	add.w	r8, r8, #1
 80124c0:	f7ff fefc 	bl	80122bc <WIDGET__DrawVLine>
 80124c4:	45a0      	cmp	r8, r4
 80124c6:	442e      	add	r6, r5
 80124c8:	dbf1      	blt.n	80124ae <_Paint+0x118>
 80124ca:	e7d7      	b.n	801247c <_Paint+0xe6>
 80124cc:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 80124ce:	07ca      	lsls	r2, r1, #31
 80124d0:	d507      	bpl.n	80124e2 <_Paint+0x14c>
 80124d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80124d4:	f7fd f922 	bl	800f71c <LCD_SetColor>
 80124d8:	9801      	ldr	r0, [sp, #4]
 80124da:	a904      	add	r1, sp, #16
 80124dc:	2200      	movs	r2, #0
 80124de:	f7ff fedb 	bl	8012298 <WIDGET__DrawFocusRect>
 80124e2:	a801      	add	r0, sp, #4
 80124e4:	f7ff fa08 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80124e8:	b00b      	add	sp, #44	; 0x2c
 80124ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080124ee <_Create>:
 80124ee:	4770      	bx	lr

080124f0 <_GetButtonSize>:
 80124f0:	b513      	push	{r0, r1, r4, lr}
 80124f2:	f7ff f9f3 	bl	80118dc <GUI_ALLOC_LockH>
 80124f6:	ab02      	add	r3, sp, #8
 80124f8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80124fa:	f843 0d04 	str.w	r0, [r3, #-4]!
 80124fe:	8854      	ldrh	r4, [r2, #2]
 8012500:	4618      	mov	r0, r3
 8012502:	f7ff f9f9 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012506:	4620      	mov	r0, r4
 8012508:	bd1c      	pop	{r2, r3, r4, pc}
	...

0801250c <_Paint>:
 801250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012510:	b08f      	sub	sp, #60	; 0x3c
 8012512:	2500      	movs	r5, #0
 8012514:	4681      	mov	r9, r0
 8012516:	950a      	str	r5, [sp, #40]	; 0x28
 8012518:	950b      	str	r5, [sp, #44]	; 0x2c
 801251a:	f7ff f9df 	bl	80118dc <GUI_ALLOC_LockH>
 801251e:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
 8012522:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8012524:	9102      	str	r1, [sp, #8]
 8012526:	a90a      	add	r1, sp, #40	; 0x28
 8012528:	8857      	ldrh	r7, [r2, #2]
 801252a:	9007      	str	r0, [sp, #28]
 801252c:	f7ff fd88 	bl	8012040 <WIDGET__GetClientRect>
 8012530:	9e07      	ldr	r6, [sp, #28]
 8012532:	8e70      	ldrh	r0, [r6, #50]	; 0x32
 8012534:	f000 0301 	and.w	r3, r0, #1
 8012538:	4648      	mov	r0, r9
 801253a:	9301      	str	r3, [sp, #4]
 801253c:	f7f8 fda8 	bl	800b090 <WM__IsEnabled>
 8012540:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 8012544:	9807      	ldr	r0, [sp, #28]
 8012546:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 8012548:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 801254c:	8832      	ldrh	r2, [r6, #0]
 801254e:	f8d0 804c 	ldr.w	r8, [r0, #76]	; 0x4c
 8012552:	1cd3      	adds	r3, r2, #3
 8012554:	1d3c      	adds	r4, r7, #4
 8012556:	1cfa      	adds	r2, r7, #3
 8012558:	f8b0 7064 	ldrh.w	r7, [r0, #100]	; 0x64
 801255c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8012560:	1e7b      	subs	r3, r7, #1
 8012562:	fb03 2201 	mla	r2, r3, r1, r2
 8012566:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012568:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801256c:	f7fd f8d6 	bl	800f71c <LCD_SetColor>
 8012570:	9807      	ldr	r0, [sp, #28]
 8012572:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8012574:	f7fd fe5a 	bl	801022c <GUI_SetFont>
 8012578:	2002      	movs	r0, #2
 801257a:	f7fd fe4d 	bl	8010218 <GUI_SetTextMode>
 801257e:	9f07      	ldr	r7, [sp, #28]
 8012580:	a908      	add	r1, sp, #32
 8012582:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012584:	f002 fff2 	bl	801556c <GUI_GetFontInfo>
 8012588:	f7ff f89e 	bl	80116c8 <GUI_GetFontDistY>
 801258c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012590:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 8012594:	f8b6 b000 	ldrh.w	fp, [r6]
 8012598:	1aca      	subs	r2, r1, r3
 801259a:	f10b 0106 	add.w	r1, fp, #6
 801259e:	b2d7      	uxtb	r7, r2
 80125a0:	42a3      	cmp	r3, r4
 80125a2:	b28a      	uxth	r2, r1
 80125a4:	9703      	str	r7, [sp, #12]
 80125a6:	9204      	str	r2, [sp, #16]
 80125a8:	dc04      	bgt.n	80125b4 <_Paint+0xa8>
 80125aa:	1ae5      	subs	r5, r4, r3
 80125ac:	2402      	movs	r4, #2
 80125ae:	fb95 f7f4 	sdiv	r7, r5, r4
 80125b2:	b2bd      	uxth	r5, r7
 80125b4:	3b01      	subs	r3, #1
 80125b6:	280c      	cmp	r0, #12
 80125b8:	bfcc      	ite	gt
 80125ba:	2703      	movgt	r7, #3
 80125bc:	2702      	movle	r7, #2
 80125be:	1959      	adds	r1, r3, r5
 80125c0:	b228      	sxth	r0, r5
 80125c2:	42b8      	cmp	r0, r7
 80125c4:	b28a      	uxth	r2, r1
 80125c6:	4648      	mov	r0, r9
 80125c8:	bfb8      	it	lt
 80125ca:	b2ef      	uxtblt	r7, r5
 80125cc:	9205      	str	r2, [sp, #20]
 80125ce:	f7f8 fdef 	bl	800b1b0 <WM_GetHasTrans>
 80125d2:	b950      	cbnz	r0, 80125ea <_Paint+0xde>
 80125d4:	9c07      	ldr	r4, [sp, #28]
 80125d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80125d8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80125dc:	4298      	cmp	r0, r3
 80125de:	bf08      	it	eq
 80125e0:	4841      	ldreq	r0, [pc, #260]	; (80126e8 <_Paint+0x1dc>)
 80125e2:	f7fd f893 	bl	800f70c <LCD_SetBkColor>
 80125e6:	f7fe fd67 	bl	80110b8 <GUI_Clear>
 80125ea:	2400      	movs	r4, #0
 80125ec:	ab0e      	add	r3, sp, #56	; 0x38
 80125ee:	f853 2d1c 	ldr.w	r2, [r3, #-28]!
 80125f2:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80125f6:	428c      	cmp	r4, r1
 80125f8:	da64      	bge.n	80126c4 <_Paint+0x1b8>
 80125fa:	f8b2 a062 	ldrh.w	sl, [r2, #98]	; 0x62
 80125fe:	4618      	mov	r0, r3
 8012600:	f7ff f97a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012604:	fb0a fa04 	mul.w	sl, sl, r4
 8012608:	2102      	movs	r1, #2
 801260a:	eb0a 0201 	add.w	r2, sl, r1
 801260e:	4630      	mov	r0, r6
 8012610:	f7fe f9c2 	bl	8010998 <GUI_DrawBitmap>
 8012614:	9a02      	ldr	r2, [sp, #8]
 8012616:	42a2      	cmp	r2, r4
 8012618:	d112      	bne.n	8012640 <_Paint+0x134>
 801261a:	8831      	ldrh	r1, [r6, #0]
 801261c:	f8b8 0000 	ldrh.w	r0, [r8]
 8012620:	2302      	movs	r3, #2
 8012622:	1a0a      	subs	r2, r1, r0
 8012624:	fb92 f1f3 	sdiv	r1, r2, r3
 8012628:	8870      	ldrh	r0, [r6, #2]
 801262a:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801262e:	1a80      	subs	r0, r0, r2
 8012630:	fb90 f3f3 	sdiv	r3, r0, r3
 8012634:	1c9a      	adds	r2, r3, #2
 8012636:	4640      	mov	r0, r8
 8012638:	3102      	adds	r1, #2
 801263a:	4452      	add	r2, sl
 801263c:	f7fe f9ac 	bl	8010998 <GUI_DrawBitmap>
 8012640:	4648      	mov	r0, r9
 8012642:	f7ff f94b 	bl	80118dc <GUI_ALLOC_LockH>
 8012646:	4621      	mov	r1, r4
 8012648:	9007      	str	r0, [sp, #28]
 801264a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801264c:	f7f7 f979 	bl	8009942 <GUI_ARRAY_GetpItemLocked>
 8012650:	9006      	str	r0, [sp, #24]
 8012652:	2800      	cmp	r0, #0
 8012654:	d034      	beq.n	80126c0 <_Paint+0x1b4>
 8012656:	7803      	ldrb	r3, [r0, #0]
 8012658:	b37b      	cbz	r3, 80126ba <_Paint+0x1ae>
 801265a:	9b05      	ldr	r3, [sp, #20]
 801265c:	9a04      	ldr	r2, [sp, #16]
 801265e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012662:	2100      	movs	r1, #0
 8012664:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8012668:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 801266c:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8012670:	f7fd ff0c 	bl	801048c <GUI_GetStringDistX>
 8012674:	f10b 0204 	add.w	r2, fp, #4
 8012678:	1810      	adds	r0, r2, r0
 801267a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 801267e:	2100      	movs	r1, #0
 8012680:	a80c      	add	r0, sp, #48	; 0x30
 8012682:	4652      	mov	r2, sl
 8012684:	f7fd feba 	bl	80103fc <GUI_MoveRect>
 8012688:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801268c:	9b03      	ldr	r3, [sp, #12]
 801268e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8012692:	9806      	ldr	r0, [sp, #24]
 8012694:	1ad2      	subs	r2, r2, r3
 8012696:	f7fe fb3f 	bl	8010d18 <GUI_DispStringAt>
 801269a:	9901      	ldr	r1, [sp, #4]
 801269c:	b169      	cbz	r1, 80126ba <_Paint+0x1ae>
 801269e:	9807      	ldr	r0, [sp, #28]
 80126a0:	f9b0 2060 	ldrsh.w	r2, [r0, #96]	; 0x60
 80126a4:	42a2      	cmp	r2, r4
 80126a6:	d002      	beq.n	80126ae <_Paint+0x1a2>
 80126a8:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80126ac:	b12b      	cbz	r3, 80126ba <_Paint+0x1ae>
 80126ae:	b27a      	sxtb	r2, r7
 80126b0:	a80a      	add	r0, sp, #40	; 0x28
 80126b2:	a90c      	add	r1, sp, #48	; 0x30
 80126b4:	4252      	negs	r2, r2
 80126b6:	f7fd f8d3 	bl	800f860 <GUI__ReduceRect>
 80126ba:	a806      	add	r0, sp, #24
 80126bc:	f7ff f91c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80126c0:	3401      	adds	r4, #1
 80126c2:	e793      	b.n	80125ec <_Paint+0xe0>
 80126c4:	9801      	ldr	r0, [sp, #4]
 80126c6:	b140      	cbz	r0, 80126da <_Paint+0x1ce>
 80126c8:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	f7fd f826 	bl	800f71c <LCD_SetColor>
 80126d0:	a80a      	add	r0, sp, #40	; 0x28
 80126d2:	2100      	movs	r1, #0
 80126d4:	f002 ff6c 	bl	80155b0 <GUI_DrawFocusRect>
 80126d8:	9b00      	ldr	r3, [sp, #0]
 80126da:	4618      	mov	r0, r3
 80126dc:	f7ff f90c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80126e0:	b00f      	add	sp, #60	; 0x3c
 80126e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e6:	bf00      	nop
 80126e8:	00c0c0c0 	.word	0x00c0c0c0

080126ec <_Create>:
 80126ec:	4770      	bx	lr

080126ee <_Paint>:
 80126ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f2:	b08b      	sub	sp, #44	; 0x2c
 80126f4:	f7ff f8f2 	bl	80118dc <GUI_ALLOC_LockH>
 80126f8:	9000      	str	r0, [sp, #0]
 80126fa:	a806      	add	r0, sp, #24
 80126fc:	f7f9 f942 	bl	800b984 <WM_GetClientRect>
 8012700:	9b00      	ldr	r3, [sp, #0]
 8012702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012704:	ad04      	add	r5, sp, #16
 8012706:	4628      	mov	r0, r5
 8012708:	a906      	add	r1, sp, #24
 801270a:	6812      	ldr	r2, [r2, #0]
 801270c:	f7fd f8a8 	bl	800f860 <GUI__ReduceRect>
 8012710:	9800      	ldr	r0, [sp, #0]
 8012712:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012714:	f7f6 fee5 	bl	80094e2 <PROGBAR__Value2Pos>
 8012718:	4606      	mov	r6, r0
 801271a:	9800      	ldr	r0, [sp, #0]
 801271c:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 8012720:	07cb      	lsls	r3, r1, #31
 8012722:	d526      	bpl.n	8012772 <_Paint+0x84>
 8012724:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012728:	ac02      	add	r4, sp, #8
 801272a:	e884 0003 	stmia.w	r4, {r0, r1}
 801272e:	4620      	mov	r0, r4
 8012730:	f8ad 600a 	strh.w	r6, [sp, #10]
 8012734:	f7f8 fd12 	bl	800b15c <WM_SetUserClipRect>
 8012738:	9f00      	ldr	r7, [sp, #0]
 801273a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801273c:	f7fc ffe6 	bl	800f70c <LCD_SetBkColor>
 8012740:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012742:	f7fc ffeb 	bl	800f71c <LCD_SetColor>
 8012746:	f7fe fcb7 	bl	80110b8 <GUI_Clear>
 801274a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801274e:	3e01      	subs	r6, #1
 8012750:	e884 0003 	stmia.w	r4, {r0, r1}
 8012754:	4620      	mov	r0, r4
 8012756:	f8ad 600e 	strh.w	r6, [sp, #14]
 801275a:	f7f8 fcff 	bl	800b15c <WM_SetUserClipRect>
 801275e:	9c00      	ldr	r4, [sp, #0]
 8012760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012762:	f7fc ffd3 	bl	800f70c <LCD_SetBkColor>
 8012766:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8012768:	f7fc ffd8 	bl	800f71c <LCD_SetColor>
 801276c:	f7fe fca4 	bl	80110b8 <GUI_Clear>
 8012770:	e05a      	b.n	8012828 <_Paint+0x13a>
 8012772:	f7f6 fe70 	bl	8009456 <PROGBAR__GetTextLocked>
 8012776:	9001      	str	r0, [sp, #4]
 8012778:	b140      	cbz	r0, 801278c <_Paint+0x9e>
 801277a:	9800      	ldr	r0, [sp, #0]
 801277c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801277e:	f7fd fd55 	bl	801022c <GUI_SetFont>
 8012782:	9800      	ldr	r0, [sp, #0]
 8012784:	9a01      	ldr	r2, [sp, #4]
 8012786:	a908      	add	r1, sp, #32
 8012788:	f7f6 fe68 	bl	800945c <PROGBAR__GetTextRect>
 801278c:	2002      	movs	r0, #2
 801278e:	f7fd fd43 	bl	8010218 <GUI_SetTextMode>
 8012792:	ad04      	add	r5, sp, #16
 8012794:	4681      	mov	r9, r0
 8012796:	e895 0003 	ldmia.w	r5, {r0, r1}
 801279a:	ac02      	add	r4, sp, #8
 801279c:	e884 0003 	stmia.w	r4, {r0, r1}
 80127a0:	1e77      	subs	r7, r6, #1
 80127a2:	4620      	mov	r0, r4
 80127a4:	f8ad 700c 	strh.w	r7, [sp, #12]
 80127a8:	f7f8 fcd8 	bl	800b15c <WM_SetUserClipRect>
 80127ac:	f8dd 8000 	ldr.w	r8, [sp]
 80127b0:	9f01      	ldr	r7, [sp, #4]
 80127b2:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 80127b6:	f9bd b020 	ldrsh.w	fp, [sp, #32]
 80127ba:	f9bd a022 	ldrsh.w	sl, [sp, #34]	; 0x22
 80127be:	f7fc ffa5 	bl	800f70c <LCD_SetBkColor>
 80127c2:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80127c6:	f7fc ffa9 	bl	800f71c <LCD_SetColor>
 80127ca:	f7fe fc75 	bl	80110b8 <GUI_Clear>
 80127ce:	b137      	cbz	r7, 80127de <_Paint+0xf0>
 80127d0:	4658      	mov	r0, fp
 80127d2:	4651      	mov	r1, sl
 80127d4:	f7fd fe4e 	bl	8010474 <GUI_GotoXY>
 80127d8:	4638      	mov	r0, r7
 80127da:	f7fe faa5 	bl	8010d28 <GUI_DispString>
 80127de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80127e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80127e6:	4620      	mov	r0, r4
 80127e8:	f8ad 6008 	strh.w	r6, [sp, #8]
 80127ec:	f7f8 fcb6 	bl	800b15c <WM_SetUserClipRect>
 80127f0:	9d00      	ldr	r5, [sp, #0]
 80127f2:	9c01      	ldr	r4, [sp, #4]
 80127f4:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80127f6:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80127fa:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 80127fe:	f7fc ff85 	bl	800f70c <LCD_SetBkColor>
 8012802:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8012804:	f7fc ff8a 	bl	800f71c <LCD_SetColor>
 8012808:	f7fe fc56 	bl	80110b8 <GUI_Clear>
 801280c:	b134      	cbz	r4, 801281c <_Paint+0x12e>
 801280e:	4638      	mov	r0, r7
 8012810:	4631      	mov	r1, r6
 8012812:	f7fd fe2f 	bl	8010474 <GUI_GotoXY>
 8012816:	4620      	mov	r0, r4
 8012818:	f7fe fa86 	bl	8010d28 <GUI_DispString>
 801281c:	4648      	mov	r0, r9
 801281e:	f7fd fcfb 	bl	8010218 <GUI_SetTextMode>
 8012822:	a801      	add	r0, sp, #4
 8012824:	f7ff f868 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012828:	ac0a      	add	r4, sp, #40	; 0x28
 801282a:	2000      	movs	r0, #0
 801282c:	f7f8 fc96 	bl	800b15c <WM_SetUserClipRect>
 8012830:	f854 0d28 	ldr.w	r0, [r4, #-40]!
 8012834:	a906      	add	r1, sp, #24
 8012836:	f7ff fd72 	bl	801231e <WIDGET__EFFECT_DrawDownRect>
 801283a:	4668      	mov	r0, sp
 801283c:	f7ff f85c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012840:	b00b      	add	sp, #44	; 0x2c
 8012842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012846 <GUI_DRAW__Draw>:
 8012846:	e92d 43e3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, lr}
 801284a:	4688      	mov	r8, r1
 801284c:	4617      	mov	r7, r2
 801284e:	461e      	mov	r6, r3
 8012850:	4681      	mov	r9, r0
 8012852:	b170      	cbz	r0, 8012872 <GUI_DRAW__Draw+0x2c>
 8012854:	f7ff f842 	bl	80118dc <GUI_ALLOC_LockH>
 8012858:	4605      	mov	r5, r0
 801285a:	a802      	add	r0, sp, #8
 801285c:	682b      	ldr	r3, [r5, #0]
 801285e:	f840 5d04 	str.w	r5, [r0, #-4]!
 8012862:	681d      	ldr	r5, [r3, #0]
 8012864:	f7ff f848 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012868:	4648      	mov	r0, r9
 801286a:	4641      	mov	r1, r8
 801286c:	463a      	mov	r2, r7
 801286e:	4633      	mov	r3, r6
 8012870:	47a8      	blx	r5
 8012872:	e8bd 83ec 	ldmia.w	sp!, {r2, r3, r5, r6, r7, r8, r9, pc}

08012876 <FRAMEWIN__UpdateButtons>:
 8012876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287a:	b085      	sub	sp, #20
 801287c:	4604      	mov	r4, r0
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	4693      	mov	fp, r2
 8012882:	460d      	mov	r5, r1
 8012884:	f7ff f82a 	bl	80118dc <GUI_ALLOC_LockH>
 8012888:	f10d 0810 	add.w	r8, sp, #16
 801288c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 801288e:	f848 0d08 	str.w	r0, [r8, #-8]!
 8012892:	688e      	ldr	r6, [r1, #8]
 8012894:	f7f7 fc12 	bl	800a0bc <FRAMEWIN__CalcTitleHeight>
 8012898:	4607      	mov	r7, r0
 801289a:	4640      	mov	r0, r8
 801289c:	f7ff f82c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80128a0:	6832      	ldr	r2, [r6, #0]
 80128a2:	2101      	movs	r1, #1
 80128a4:	4620      	mov	r0, r4
 80128a6:	4790      	blx	r2
 80128a8:	2103      	movs	r1, #3
 80128aa:	6833      	ldr	r3, [r6, #0]
 80128ac:	4681      	mov	r9, r0
 80128ae:	4620      	mov	r0, r4
 80128b0:	4798      	blx	r3
 80128b2:	2100      	movs	r1, #0
 80128b4:	4682      	mov	sl, r0
 80128b6:	6832      	ldr	r2, [r6, #0]
 80128b8:	4620      	mov	r0, r4
 80128ba:	4790      	blx	r2
 80128bc:	42af      	cmp	r7, r5
 80128be:	4680      	mov	r8, r0
 80128c0:	d107      	bne.n	80128d2 <FRAMEWIN__UpdateButtons+0x5c>
 80128c2:	45d9      	cmp	r9, fp
 80128c4:	d105      	bne.n	80128d2 <FRAMEWIN__UpdateButtons+0x5c>
 80128c6:	9801      	ldr	r0, [sp, #4]
 80128c8:	4582      	cmp	sl, r0
 80128ca:	d102      	bne.n	80128d2 <FRAMEWIN__UpdateButtons+0x5c>
 80128cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80128ce:	4588      	cmp	r8, r1
 80128d0:	d041      	beq.n	8012956 <FRAMEWIN__UpdateButtons+0xe0>
 80128d2:	4620      	mov	r0, r4
 80128d4:	f7f9 f800 	bl	800b8d8 <WM_GetFirstChild>
 80128d8:	2600      	movs	r6, #0
 80128da:	1b7d      	subs	r5, r7, r5
 80128dc:	4604      	mov	r4, r0
 80128de:	4637      	mov	r7, r6
 80128e0:	2c00      	cmp	r4, #0
 80128e2:	d038      	beq.n	8012956 <FRAMEWIN__UpdateButtons+0xe0>
 80128e4:	4620      	mov	r0, r4
 80128e6:	f7fe fff9 	bl	80118dc <GUI_ALLOC_LockH>
 80128ea:	9003      	str	r0, [sp, #12]
 80128ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80128ee:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80128f2:	2a80      	cmp	r2, #128	; 0x80
 80128f4:	d002      	beq.n	80128fc <FRAMEWIN__UpdateButtons+0x86>
 80128f6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80128fa:	d124      	bne.n	8012946 <FRAMEWIN__UpdateButtons+0xd0>
 80128fc:	b125      	cbz	r5, 8012908 <FRAMEWIN__UpdateButtons+0x92>
 80128fe:	4620      	mov	r0, r4
 8012900:	4629      	mov	r1, r5
 8012902:	462a      	mov	r2, r5
 8012904:	f7f8 fdf7 	bl	800b4f6 <WM_ResizeWindow>
 8012908:	9803      	ldr	r0, [sp, #12]
 801290a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801290c:	060a      	lsls	r2, r1, #24
 801290e:	d50b      	bpl.n	8012928 <FRAMEWIN__UpdateButtons+0xb2>
 8012910:	9b01      	ldr	r3, [sp, #4]
 8012912:	ebca 0203 	rsb	r2, sl, r3
 8012916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012918:	fb07 2115 	mls	r1, r7, r5, r2
 801291c:	4620      	mov	r0, r4
 801291e:	ebc3 0208 	rsb	r2, r3, r8
 8012922:	3701      	adds	r7, #1
 8012924:	f7f8 ff1d 	bl	800b762 <WM_MoveWindow>
 8012928:	9803      	ldr	r0, [sp, #12]
 801292a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801292c:	058b      	lsls	r3, r1, #22
 801292e:	d50a      	bpl.n	8012946 <FRAMEWIN__UpdateButtons+0xd0>
 8012930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012932:	ebcb 0209 	rsb	r2, fp, r9
 8012936:	fb06 2105 	mla	r1, r6, r5, r2
 801293a:	4620      	mov	r0, r4
 801293c:	ebc3 0208 	rsb	r2, r3, r8
 8012940:	3601      	adds	r6, #1
 8012942:	f7f8 ff0e 	bl	800b762 <WM_MoveWindow>
 8012946:	a803      	add	r0, sp, #12
 8012948:	f7fe ffd6 	bl	80118f8 <GUI_ALLOC_UnlockH>
 801294c:	4620      	mov	r0, r4
 801294e:	f7f8 ffa0 	bl	800b892 <WM_GetNextSibling>
 8012952:	4604      	mov	r4, r0
 8012954:	e7c4      	b.n	80128e0 <FRAMEWIN__UpdateButtons+0x6a>
 8012956:	b005      	add	sp, #20
 8012958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801295c <_GetBorderSize>:
 801295c:	b513      	push	{r0, r1, r4, lr}
 801295e:	f7fe ffbd 	bl	80118dc <GUI_ALLOC_LockH>
 8012962:	ab02      	add	r3, sp, #8
 8012964:	f9b0 4056 	ldrsh.w	r4, [r0, #86]	; 0x56
 8012968:	f843 0d04 	str.w	r0, [r3, #-4]!
 801296c:	4618      	mov	r0, r3
 801296e:	f7fe ffc3 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012972:	4620      	mov	r0, r4
 8012974:	bd1c      	pop	{r2, r3, r4, pc}
	...

08012978 <_Create>:
 8012978:	4901      	ldr	r1, [pc, #4]	; (8012980 <_Create+0x8>)
 801297a:	f000 b8f1 	b.w	8012b60 <FRAMEWIN_SetOwnerDraw>
 801297e:	bf00      	nop
 8012980:	08012aa5 	.word	0x08012aa5

08012984 <_Paint>:
 8012984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012988:	b093      	sub	sp, #76	; 0x4c
 801298a:	4604      	mov	r4, r0
 801298c:	f7fe ffa6 	bl	80118dc <GUI_ALLOC_LockH>
 8012990:	9001      	str	r0, [sp, #4]
 8012992:	4620      	mov	r0, r4
 8012994:	f7f8 ff42 	bl	800b81c <WM_GetWindowSizeX>
 8012998:	4680      	mov	r8, r0
 801299a:	4620      	mov	r0, r4
 801299c:	f7f8 ff52 	bl	800b844 <WM_GetWindowSizeY>
 80129a0:	ae04      	add	r6, sp, #16
 80129a2:	9b01      	ldr	r3, [sp, #4]
 80129a4:	4631      	mov	r1, r6
 80129a6:	4681      	mov	r9, r0
 80129a8:	4620      	mov	r0, r4
 80129aa:	f8b3 5056 	ldrh.w	r5, [r3, #86]	; 0x56
 80129ae:	f7f7 fbdc 	bl	800a16a <FRAMEWIN__CalcPositions>
 80129b2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80129b6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80129ba:	f8ad 1008 	strh.w	r1, [sp, #8]
 80129be:	b20a      	sxth	r2, r1
 80129c0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80129c4:	920d      	str	r2, [sp, #52]	; 0x34
 80129c6:	2001      	movs	r0, #1
 80129c8:	1e4a      	subs	r2, r1, #1
 80129ca:	900a      	str	r0, [sp, #40]	; 0x28
 80129cc:	b218      	sxth	r0, r3
 80129ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80129d2:	900f      	str	r0, [sp, #60]	; 0x3c
 80129d4:	b293      	uxth	r3, r2
 80129d6:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 80129da:	f8ad 300a 	strh.w	r3, [sp, #10]
 80129de:	b21a      	sxth	r2, r3
 80129e0:	b201      	sxth	r1, r0
 80129e2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80129e6:	1c53      	adds	r3, r2, #1
 80129e8:	2000      	movs	r0, #0
 80129ea:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 80129ee:	9409      	str	r4, [sp, #36]	; 0x24
 80129f0:	9611      	str	r6, [sp, #68]	; 0x44
 80129f2:	9110      	str	r1, [sp, #64]	; 0x40
 80129f4:	930e      	str	r3, [sp, #56]	; 0x38
 80129f6:	f7f9 fef5 	bl	800c7e4 <WM__InitIVRSearch>
 80129fa:	b928      	cbnz	r0, 8012a08 <_Paint+0x84>
 80129fc:	a801      	add	r0, sp, #4
 80129fe:	f7fe ff7b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012a02:	b013      	add	sp, #76	; 0x4c
 8012a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a08:	b22d      	sxth	r5, r5
 8012a0a:	fa05 f787 	sxtah	r7, r5, r7
 8012a0e:	a802      	add	r0, sp, #8
 8012a10:	f7f8 fba4 	bl	800b15c <WM_SetUserClipRect>
 8012a14:	9c01      	ldr	r4, [sp, #4]
 8012a16:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8012a18:	b10e      	cbz	r6, 8012a1e <_Paint+0x9a>
 8012a1a:	a809      	add	r0, sp, #36	; 0x24
 8012a1c:	47b0      	blx	r6
 8012a1e:	2000      	movs	r0, #0
 8012a20:	f7f8 fb9c 	bl	800b15c <WM_SetUserClipRect>
 8012a24:	481e      	ldr	r0, [pc, #120]	; (8012aa0 <_Paint+0x11c>)
 8012a26:	f7fc fe79 	bl	800f71c <LCD_SetColor>
 8012a2a:	f108 34ff 	add.w	r4, r8, #4294967295
 8012a2e:	2000      	movs	r0, #0
 8012a30:	4601      	mov	r1, r0
 8012a32:	4622      	mov	r2, r4
 8012a34:	1e6b      	subs	r3, r5, #1
 8012a36:	f7fd fd53 	bl	80104e0 <GUI_FillRect>
 8012a3a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8012a3e:	f109 36ff 	add.w	r6, r9, #4294967295
 8012a42:	2000      	movs	r0, #0
 8012a44:	4601      	mov	r1, r0
 8012a46:	3a01      	subs	r2, #1
 8012a48:	4633      	mov	r3, r6
 8012a4a:	f7fd fd49 	bl	80104e0 <GUI_FillRect>
 8012a4e:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8012a52:	2100      	movs	r1, #0
 8012a54:	3001      	adds	r0, #1
 8012a56:	4622      	mov	r2, r4
 8012a58:	4633      	mov	r3, r6
 8012a5a:	f7fd fd41 	bl	80104e0 <GUI_FillRect>
 8012a5e:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8012a62:	2000      	movs	r0, #0
 8012a64:	3101      	adds	r1, #1
 8012a66:	4622      	mov	r2, r4
 8012a68:	4633      	mov	r3, r6
 8012a6a:	f7fd fd39 	bl	80104e0 <GUI_FillRect>
 8012a6e:	9b01      	ldr	r3, [sp, #4]
 8012a70:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012a72:	f002 0020 	and.w	r0, r2, #32
 8012a76:	b281      	uxth	r1, r0
 8012a78:	b141      	cbz	r1, 8012a8c <_Paint+0x108>
 8012a7a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8012a7e:	18fb      	adds	r3, r7, r3
 8012a80:	2000      	movs	r0, #0
 8012a82:	4639      	mov	r1, r7
 8012a84:	4622      	mov	r2, r4
 8012a86:	3b01      	subs	r3, #1
 8012a88:	f7fd fd2a 	bl	80104e0 <GUI_FillRect>
 8012a8c:	2d01      	cmp	r5, #1
 8012a8e:	dd01      	ble.n	8012a94 <_Paint+0x110>
 8012a90:	f002 ffc4 	bl	8015a1c <WIDGET_EFFECT_3D_DrawUp>
 8012a94:	f7f9 fde6 	bl	800c664 <WM__GetNextIVR>
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	d1b8      	bne.n	8012a0e <_Paint+0x8a>
 8012a9c:	e7ae      	b.n	80129fc <_Paint+0x78>
 8012a9e:	bf00      	nop
 8012aa0:	00aaaaaa 	.word	0x00aaaaaa

08012aa4 <FRAMEWIN_OwnerDraw>:
 8012aa4:	b530      	push	{r4, r5, lr}
 8012aa6:	4604      	mov	r4, r0
 8012aa8:	b089      	sub	sp, #36	; 0x24
 8012aaa:	6800      	ldr	r0, [r0, #0]
 8012aac:	f7fe ff16 	bl	80118dc <GUI_ALLOC_LockH>
 8012ab0:	f8b0 507c 	ldrh.w	r5, [r0, #124]	; 0x7c
 8012ab4:	9000      	str	r0, [sp, #0]
 8012ab6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8012ab8:	6a24      	ldr	r4, [r4, #32]
 8012aba:	f3c5 05c0 	ubfx	r5, r5, #3, #1
 8012abe:	b108      	cbz	r0, 8012ac4 <FRAMEWIN_OwnerDraw+0x20>
 8012ac0:	f7fe ff0c 	bl	80118dc <GUI_ALLOC_LockH>
 8012ac4:	4622      	mov	r2, r4
 8012ac6:	9001      	str	r0, [sp, #4]
 8012ac8:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8012acc:	6851      	ldr	r1, [r2, #4]
 8012ace:	8922      	ldrh	r2, [r4, #8]
 8012ad0:	ab06      	add	r3, sp, #24
 8012ad2:	c303      	stmia	r3!, {r0, r1}
 8012ad4:	88a0      	ldrh	r0, [r4, #4]
 8012ad6:	89e3      	ldrh	r3, [r4, #14]
 8012ad8:	1e41      	subs	r1, r0, #1
 8012ada:	1c50      	adds	r0, r2, #1
 8012adc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8012ae0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012ae4:	8a61      	ldrh	r1, [r4, #18]
 8012ae6:	f8ad 000c 	strh.w	r0, [sp, #12]
 8012aea:	1c50      	adds	r0, r2, #1
 8012aec:	f8ad 100e 	strh.w	r1, [sp, #14]
 8012af0:	f8ad 0018 	strh.w	r0, [sp, #24]
 8012af4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012af8:	9800      	ldr	r0, [sp, #0]
 8012afa:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012afe:	1e4a      	subs	r2, r1, #1
 8012b00:	3301      	adds	r3, #1
 8012b02:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012b04:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012b08:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012b0c:	f7fd fb8e 	bl	801022c <GUI_SetFont>
 8012b10:	9b00      	ldr	r3, [sp, #0]
 8012b12:	9801      	ldr	r0, [sp, #4]
 8012b14:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8012b18:	a906      	add	r1, sp, #24
 8012b1a:	aa04      	add	r2, sp, #16
 8012b1c:	f002 fc81 	bl	8015422 <GUI__CalcTextRect>
 8012b20:	9a00      	ldr	r2, [sp, #0]
 8012b22:	f105 010c 	add.w	r1, r5, #12
 8012b26:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8012b2a:	350e      	adds	r5, #14
 8012b2c:	6880      	ldr	r0, [r0, #8]
 8012b2e:	f7fc fded 	bl	800f70c <LCD_SetBkColor>
 8012b32:	9b00      	ldr	r3, [sp, #0]
 8012b34:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8012b38:	6888      	ldr	r0, [r1, #8]
 8012b3a:	f7fc fdef 	bl	800f71c <LCD_SetColor>
 8012b3e:	aa06      	add	r2, sp, #24
 8012b40:	9801      	ldr	r0, [sp, #4]
 8012b42:	a902      	add	r1, sp, #8
 8012b44:	ab04      	add	r3, sp, #16
 8012b46:	f002 fe4f 	bl	80157e8 <WIDGET__FillStringInRect>
 8012b4a:	4668      	mov	r0, sp
 8012b4c:	f7fe fed4 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012b50:	9a01      	ldr	r2, [sp, #4]
 8012b52:	b112      	cbz	r2, 8012b5a <FRAMEWIN_OwnerDraw+0xb6>
 8012b54:	a801      	add	r0, sp, #4
 8012b56:	f7fe fecf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	b009      	add	sp, #36	; 0x24
 8012b5e:	bd30      	pop	{r4, r5, pc}

08012b60 <FRAMEWIN_SetOwnerDraw>:
 8012b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b62:	460c      	mov	r4, r1
 8012b64:	4605      	mov	r5, r0
 8012b66:	b158      	cbz	r0, 8012b80 <FRAMEWIN_SetOwnerDraw+0x20>
 8012b68:	f7fe feb8 	bl	80118dc <GUI_ALLOC_LockH>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	a802      	add	r0, sp, #8
 8012b70:	6614      	str	r4, [r2, #96]	; 0x60
 8012b72:	f840 2d04 	str.w	r2, [r0, #-4]!
 8012b76:	f7fe febf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	f7f9 fbf2 	bl	800c364 <WM_InvalidateWindow>
 8012b80:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08012b82 <_Create>:
 8012b82:	4770      	bx	lr

08012b84 <_GetButtonSize>:
 8012b84:	b508      	push	{r3, lr}
 8012b86:	f7ff fbff 	bl	8012388 <WIDGET_GetDefaultEffect>
 8012b8a:	4b03      	ldr	r3, [pc, #12]	; (8012b98 <_GetButtonSize+0x14>)
 8012b8c:	6800      	ldr	r0, [r0, #0]
 8012b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012b90:	880a      	ldrh	r2, [r1, #0]
 8012b92:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8012b96:	bd08      	pop	{r3, pc}
 8012b98:	20000160 	.word	0x20000160

08012b9c <_Paint>:
 8012b9c:	b570      	push	{r4, r5, r6, lr}
 8012b9e:	b088      	sub	sp, #32
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	9302      	str	r3, [sp, #8]
 8012ba6:	9303      	str	r3, [sp, #12]
 8012ba8:	f7fe fe98 	bl	80118dc <GUI_ALLOC_LockH>
 8012bac:	9000      	str	r0, [sp, #0]
 8012bae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8012bb0:	6805      	ldr	r5, [r0, #0]
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f7f8 fa6c 	bl	800b090 <WM__IsEnabled>
 8012bb8:	4606      	mov	r6, r0
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f7f8 faf8 	bl	800b1b0 <WM_GetHasTrans>
 8012bc0:	b960      	cbnz	r0, 8012bdc <_Paint+0x40>
 8012bc2:	9900      	ldr	r1, [sp, #0]
 8012bc4:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8012bc6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8012bca:	4290      	cmp	r0, r2
 8012bcc:	d102      	bne.n	8012bd4 <_Paint+0x38>
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f7ff fa51 	bl	8012076 <WIDGET__GetBkColor>
 8012bd4:	f7fc fd9a 	bl	800f70c <LCD_SetBkColor>
 8012bd8:	f7fe fa6e 	bl	80110b8 <GUI_Clear>
 8012bdc:	9b00      	ldr	r3, [sp, #0]
 8012bde:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8012be0:	8802      	ldrh	r2, [r0, #0]
 8012be2:	8840      	ldrh	r0, [r0, #2]
 8012be4:	0069      	lsls	r1, r5, #1
 8012be6:	b28b      	uxth	r3, r1
 8012be8:	1e51      	subs	r1, r2, #1
 8012bea:	185a      	adds	r2, r3, r1
 8012bec:	1e41      	subs	r1, r0, #1
 8012bee:	185b      	adds	r3, r3, r1
 8012bf0:	a802      	add	r0, sp, #8
 8012bf2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012bf6:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012bfa:	f7f8 faaf 	bl	800b15c <WM_SetUserClipRect>
 8012bfe:	9a00      	ldr	r2, [sp, #0]
 8012c00:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8012c04:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012c06:	f7fc fd81 	bl	800f70c <LCD_SetBkColor>
 8012c0a:	f7fe fa55 	bl	80110b8 <GUI_Clear>
 8012c0e:	9900      	ldr	r1, [sp, #0]
 8012c10:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
 8012c14:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8012c18:	eb01 0286 	add.w	r2, r1, r6, lsl #2
 8012c1c:	6d96      	ldr	r6, [r2, #88]	; 0x58
 8012c1e:	b15e      	cbz	r6, 8012c38 <_Paint+0x9c>
 8012c20:	4668      	mov	r0, sp
 8012c22:	f7fe fe69 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012c26:	4630      	mov	r0, r6
 8012c28:	4629      	mov	r1, r5
 8012c2a:	462a      	mov	r2, r5
 8012c2c:	f7fd feb4 	bl	8010998 <GUI_DrawBitmap>
 8012c30:	4620      	mov	r0, r4
 8012c32:	f7fe fe53 	bl	80118dc <GUI_ALLOC_LockH>
 8012c36:	9000      	str	r0, [sp, #0]
 8012c38:	a902      	add	r1, sp, #8
 8012c3a:	9800      	ldr	r0, [sp, #0]
 8012c3c:	f7ff fb6f 	bl	801231e <WIDGET__EFFECT_DrawDownRect>
 8012c40:	2000      	movs	r0, #0
 8012c42:	f7f8 fa8b 	bl	800b15c <WM_SetUserClipRect>
 8012c46:	9800      	ldr	r0, [sp, #0]
 8012c48:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8012c4a:	2900      	cmp	r1, #0
 8012c4c:	f000 8082 	beq.w	8012d54 <_Paint+0x1b8>
 8012c50:	ac04      	add	r4, sp, #16
 8012c52:	4620      	mov	r0, r4
 8012c54:	f7f8 fe96 	bl	800b984 <WM_GetClientRect>
 8012c58:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012c5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012c60:	18d0      	adds	r0, r2, r3
 8012c62:	9b00      	ldr	r3, [sp, #0]
 8012c64:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8012c68:	1c41      	adds	r1, r0, #1
 8012c6a:	1888      	adds	r0, r1, r2
 8012c6c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012c70:	2002      	movs	r0, #2
 8012c72:	f7fd fad1 	bl	8010218 <GUI_SetTextMode>
 8012c76:	9900      	ldr	r1, [sp, #0]
 8012c78:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8012c7a:	f7fc fd4f 	bl	800f71c <LCD_SetColor>
 8012c7e:	9b00      	ldr	r3, [sp, #0]
 8012c80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012c82:	f7fd fad3 	bl	801022c <GUI_SetFont>
 8012c86:	9a00      	ldr	r2, [sp, #0]
 8012c88:	6f90      	ldr	r0, [r2, #120]	; 0x78
 8012c8a:	f7fe fe27 	bl	80118dc <GUI_ALLOC_LockH>
 8012c8e:	9b00      	ldr	r3, [sp, #0]
 8012c90:	9001      	str	r0, [sp, #4]
 8012c92:	4621      	mov	r1, r4
 8012c94:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8012c98:	f7fe f817 	bl	8010cca <GUI_DispStringInRect>
 8012c9c:	9800      	ldr	r0, [sp, #0]
 8012c9e:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 8012ca0:	07cb      	lsls	r3, r1, #31
 8012ca2:	d554      	bpl.n	8012d4e <_Paint+0x1b2>
 8012ca4:	9801      	ldr	r0, [sp, #4]
 8012ca6:	f7fd fbf1 	bl	801048c <GUI_GetStringDistX>
 8012caa:	4605      	mov	r5, r0
 8012cac:	f7fd fc06 	bl	80104bc <GUI_GetFontSizeY>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012cb6:	aa08      	add	r2, sp, #32
 8012cb8:	e902 0003 	stmdb	r2, {r0, r1}
 8012cbc:	9900      	ldr	r1, [sp, #0]
 8012cbe:	f8b1 2054 	ldrh.w	r2, [r1, #84]	; 0x54
 8012cc2:	f022 0003 	bic.w	r0, r2, #3
 8012cc6:	b200      	sxth	r0, r0
 8012cc8:	2804      	cmp	r0, #4
 8012cca:	d009      	beq.n	8012ce0 <_Paint+0x144>
 8012ccc:	280c      	cmp	r0, #12
 8012cce:	d10c      	bne.n	8012cea <_Paint+0x14e>
 8012cd0:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8012cd4:	1ae0      	subs	r0, r4, r3
 8012cd6:	3001      	adds	r0, #1
 8012cd8:	2402      	movs	r4, #2
 8012cda:	fb90 f0f4 	sdiv	r0, r0, r4
 8012cde:	e002      	b.n	8012ce6 <_Paint+0x14a>
 8012ce0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012ce4:	1ac0      	subs	r0, r0, r3
 8012ce6:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012cea:	f022 020c 	bic.w	r2, r2, #12
 8012cee:	b212      	sxth	r2, r2
 8012cf0:	2a01      	cmp	r2, #1
 8012cf2:	d00d      	beq.n	8012d10 <_Paint+0x174>
 8012cf4:	2a02      	cmp	r2, #2
 8012cf6:	d116      	bne.n	8012d26 <_Paint+0x18a>
 8012cf8:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8012cfc:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8012d00:	1a20      	subs	r0, r4, r0
 8012d02:	1b40      	subs	r0, r0, r5
 8012d04:	fb90 f2f2 	sdiv	r2, r0, r2
 8012d08:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8012d0c:	1810      	adds	r0, r2, r0
 8012d0e:	e008      	b.n	8012d22 <_Paint+0x186>
 8012d10:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8012d14:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8012d18:	1882      	adds	r2, r0, r2
 8012d1a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8012d1e:	1a12      	subs	r2, r2, r0
 8012d20:	1b50      	subs	r0, r2, r5
 8012d22:	f8ad 0018 	strh.w	r0, [sp, #24]
 8012d26:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8012d2a:	1e50      	subs	r0, r2, #1
 8012d2c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012d30:	1945      	adds	r5, r0, r5
 8012d32:	1e50      	subs	r0, r2, #1
 8012d34:	18c3      	adds	r3, r0, r3
 8012d36:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8012d38:	f8ad 501c 	strh.w	r5, [sp, #28]
 8012d3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012d40:	f7fc fcec 	bl	800f71c <LCD_SetColor>
 8012d44:	a806      	add	r0, sp, #24
 8012d46:	f04f 31ff 	mov.w	r1, #4294967295
 8012d4a:	f002 fc31 	bl	80155b0 <GUI_DrawFocusRect>
 8012d4e:	a801      	add	r0, sp, #4
 8012d50:	f7fe fdd2 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012d54:	4668      	mov	r0, sp
 8012d56:	f7fe fdcf 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012d5a:	b008      	add	sp, #32
 8012d5c:	bd70      	pop	{r4, r5, r6, pc}

08012d5e <_Create>:
 8012d5e:	4770      	bx	lr

08012d60 <_Paint>:
 8012d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d64:	b088      	sub	sp, #32
 8012d66:	4604      	mov	r4, r0
 8012d68:	f7fe fdb8 	bl	80118dc <GUI_ALLOC_LockH>
 8012d6c:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
 8012d70:	9000      	str	r0, [sp, #0]
 8012d72:	4620      	mov	r0, r4
 8012d74:	f7f8 f98c 	bl	800b090 <WM__IsEnabled>
 8012d78:	9b00      	ldr	r3, [sp, #0]
 8012d7a:	f3c8 2500 	ubfx	r5, r8, #8, #1
 8012d7e:	af02      	add	r7, sp, #8
 8012d80:	2800      	cmp	r0, #0
 8012d82:	bf14      	ite	ne
 8012d84:	462e      	movne	r6, r5
 8012d86:	2602      	moveq	r6, #2
 8012d88:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8012d8a:	f7fd fa4f 	bl	801022c <GUI_SetFont>
 8012d8e:	4638      	mov	r0, r7
 8012d90:	f7fd fb96 	bl	80104c0 <GUI_GetClientRect>
 8012d94:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012d98:	aa04      	add	r2, sp, #16
 8012d9a:	e882 0003 	stmia.w	r2, {r0, r1}
 8012d9e:	9800      	ldr	r0, [sp, #0]
 8012da0:	b91d      	cbnz	r5, 8012daa <_Paint+0x4a>
 8012da2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012da4:	6850      	ldr	r0, [r2, #4]
 8012da6:	4780      	blx	r0
 8012da8:	e003      	b.n	8012db2 <_Paint+0x52>
 8012daa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012dac:	694b      	ldr	r3, [r1, #20]
 8012dae:	b123      	cbz	r3, 8012dba <_Paint+0x5a>
 8012db0:	4798      	blx	r3
 8012db2:	9900      	ldr	r1, [sp, #0]
 8012db4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	e00d      	b.n	8012dd6 <_Paint+0x76>
 8012dba:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8012dbc:	f7fc fcae 	bl	800f71c <LCD_SetColor>
 8012dc0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012dc4:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8012dc8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8012dcc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012dd0:	f7ff f828 	bl	8011e24 <GUI_DrawRect>
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	a804      	add	r0, sp, #16
 8012dd8:	4601      	mov	r1, r0
 8012dda:	f7fc fd41 	bl	800f860 <GUI__ReduceRect>
 8012dde:	9a00      	ldr	r2, [sp, #0]
 8012de0:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8012de4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012de6:	f7fc fc91 	bl	800f70c <LCD_SetBkColor>
 8012dea:	9900      	ldr	r1, [sp, #0]
 8012dec:	eb01 0386 	add.w	r3, r1, r6, lsl #2
 8012df0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8012df2:	f7fc fc93 	bl	800f71c <LCD_SetColor>
 8012df6:	a804      	add	r0, sp, #16
 8012df8:	f7f8 f9b0 	bl	800b15c <WM_SetUserClipRect>
 8012dfc:	f7fe f95c 	bl	80110b8 <GUI_Clear>
 8012e00:	2e02      	cmp	r6, #2
 8012e02:	9e00      	ldr	r6, [sp, #0]
 8012e04:	d005      	beq.n	8012e12 <_Paint+0xb2>
 8012e06:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	bf14      	ite	ne
 8012e0c:	462b      	movne	r3, r5
 8012e0e:	2300      	moveq	r3, #0
 8012e10:	e004      	b.n	8012e1c <_Paint+0xbc>
 8012e12:	6f72      	ldr	r2, [r6, #116]	; 0x74
 8012e14:	2a00      	cmp	r2, #0
 8012e16:	bf14      	ite	ne
 8012e18:	2302      	movne	r3, #2
 8012e1a:	2300      	moveq	r3, #0
 8012e1c:	ae08      	add	r6, sp, #32
 8012e1e:	4668      	mov	r0, sp
 8012e20:	f856 1d20 	ldr.w	r1, [r6, #-32]!
 8012e24:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8012e28:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 8012e2a:	f7fe fd65 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012e2e:	2200      	movs	r2, #0
 8012e30:	4613      	mov	r3, r2
 8012e32:	4630      	mov	r0, r6
 8012e34:	4621      	mov	r1, r4
 8012e36:	f7ff fd06 	bl	8012846 <GUI_DRAW__Draw>
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f7fe fd4e 	bl	80118dc <GUI_ALLOC_LockH>
 8012e40:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8012e42:	9000      	str	r0, [sp, #0]
 8012e44:	b31b      	cbz	r3, 8012e8e <_Paint+0x12e>
 8012e46:	a804      	add	r0, sp, #16
 8012e48:	c803      	ldmia	r0, {r0, r1}
 8012e4a:	ac06      	add	r4, sp, #24
 8012e4c:	e884 0003 	stmia.w	r4, {r0, r1}
 8012e50:	b125      	cbz	r5, 8012e5c <_Paint+0xfc>
 8012e52:	2101      	movs	r1, #1
 8012e54:	4620      	mov	r0, r4
 8012e56:	460a      	mov	r2, r1
 8012e58:	f7fd fad0 	bl	80103fc <GUI_MoveRect>
 8012e5c:	9a00      	ldr	r2, [sp, #0]
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f9b2 105e 	ldrsh.w	r1, [r2, #94]	; 0x5e
 8012e64:	f9b2 2060 	ldrsh.w	r2, [r2, #96]	; 0x60
 8012e68:	f7fd fac8 	bl	80103fc <GUI_MoveRect>
 8012e6c:	2002      	movs	r0, #2
 8012e6e:	f7fd f9d3 	bl	8010218 <GUI_SetTextMode>
 8012e72:	9900      	ldr	r1, [sp, #0]
 8012e74:	6e88      	ldr	r0, [r1, #104]	; 0x68
 8012e76:	f7fe fd31 	bl	80118dc <GUI_ALLOC_LockH>
 8012e7a:	9b00      	ldr	r3, [sp, #0]
 8012e7c:	9001      	str	r0, [sp, #4]
 8012e7e:	4621      	mov	r1, r4
 8012e80:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8012e84:	f7fd ff21 	bl	8010cca <GUI_DispStringInRect>
 8012e88:	a801      	add	r0, sp, #4
 8012e8a:	f7fe fd35 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012e8e:	f018 0f01 	tst.w	r8, #1
 8012e92:	d00c      	beq.n	8012eae <_Paint+0x14e>
 8012e94:	9800      	ldr	r0, [sp, #0]
 8012e96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8012e98:	f7fc fc40 	bl	800f71c <LCD_SetColor>
 8012e9c:	9a00      	ldr	r2, [sp, #0]
 8012e9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8012ea0:	6809      	ldr	r1, [r1, #0]
 8012ea2:	a802      	add	r0, sp, #8
 8012ea4:	2902      	cmp	r1, #2
 8012ea6:	bfb8      	it	lt
 8012ea8:	2102      	movlt	r1, #2
 8012eaa:	f002 fb81 	bl	80155b0 <GUI_DrawFocusRect>
 8012eae:	2000      	movs	r0, #0
 8012eb0:	f7f8 f954 	bl	800b15c <WM_SetUserClipRect>
 8012eb4:	4668      	mov	r0, sp
 8012eb6:	f7fe fd1f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012eba:	b008      	add	sp, #32
 8012ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ec0 <WM__UpdateChildPositions>:
 8012ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec4:	b089      	sub	sp, #36	; 0x24
 8012ec6:	69c4      	ldr	r4, [r0, #28]
 8012ec8:	9303      	str	r3, [sp, #12]
 8012eca:	468a      	mov	sl, r1
 8012ecc:	4693      	mov	fp, r2
 8012ece:	2c00      	cmp	r4, #0
 8012ed0:	d075      	beq.n	8012fbe <WM__UpdateChildPositions+0xfe>
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f7fe fd02 	bl	80118dc <GUI_ALLOC_LockH>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	9005      	str	r0, [sp, #20]
 8012edc:	c803      	ldmia	r0, {r0, r1}
 8012ede:	aa08      	add	r2, sp, #32
 8012ee0:	e902 0003 	stmdb	r2, {r0, r1}
 8012ee4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8012ee6:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 8012eea:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012eee:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8012ef2:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 8012ef6:	f401 7020 	and.w	r0, r1, #640	; 0x280
 8012efa:	2880      	cmp	r0, #128	; 0x80
 8012efc:	d009      	beq.n	8012f12 <WM__UpdateChildPositions+0x52>
 8012efe:	f5b0 7f20 	cmp.w	r0, #640	; 0x280
 8012f02:	d109      	bne.n	8012f18 <WM__UpdateChildPositions+0x58>
 8012f04:	9b03      	ldr	r3, [sp, #12]
 8012f06:	eb0a 0908 	add.w	r9, sl, r8
 8012f0a:	fa1f fe89 	uxth.w	lr, r9
 8012f0e:	199f      	adds	r7, r3, r6
 8012f10:	e009      	b.n	8012f26 <WM__UpdateChildPositions+0x66>
 8012f12:	9803      	ldr	r0, [sp, #12]
 8012f14:	b287      	uxth	r7, r0
 8012f16:	e001      	b.n	8012f1c <WM__UpdateChildPositions+0x5c>
 8012f18:	fa1f f78a 	uxth.w	r7, sl
 8012f1c:	eb07 0c08 	add.w	ip, r7, r8
 8012f20:	fa1f fe8c 	uxth.w	lr, ip
 8012f24:	19bf      	adds	r7, r7, r6
 8012f26:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 8012f2a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8012f2e:	b2bb      	uxth	r3, r7
 8012f30:	d009      	beq.n	8012f46 <WM__UpdateChildPositions+0x86>
 8012f32:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8012f36:	d109      	bne.n	8012f4c <WM__UpdateChildPositions+0x8c>
 8012f38:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012f3a:	eb0b 0902 	add.w	r9, fp, r2
 8012f3e:	fa1f f189 	uxth.w	r1, r9
 8012f42:	1978      	adds	r0, r7, r5
 8012f44:	e009      	b.n	8012f5a <WM__UpdateChildPositions+0x9a>
 8012f46:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012f48:	b288      	uxth	r0, r1
 8012f4a:	e001      	b.n	8012f50 <WM__UpdateChildPositions+0x90>
 8012f4c:	fa1f f08b 	uxth.w	r0, fp
 8012f50:	eb00 0c02 	add.w	ip, r0, r2
 8012f54:	fa1f f18c 	uxth.w	r1, ip
 8012f58:	1940      	adds	r0, r0, r5
 8012f5a:	fa0f f98e 	sxth.w	r9, lr
 8012f5e:	fa0f f888 	sxth.w	r8, r8
 8012f62:	fa0f fc81 	sxth.w	ip, r1
 8012f66:	b212      	sxth	r2, r2
 8012f68:	ebb9 0108 	subs.w	r1, r9, r8
 8012f6c:	9202      	str	r2, [sp, #8]
 8012f6e:	b287      	uxth	r7, r0
 8012f70:	ebc2 020c 	rsb	r2, r2, ip
 8012f74:	d100      	bne.n	8012f78 <WM__UpdateChildPositions+0xb8>
 8012f76:	b132      	cbz	r2, 8012f86 <WM__UpdateChildPositions+0xc6>
 8012f78:	4620      	mov	r0, r4
 8012f7a:	e88d 1008 	stmia.w	sp, {r3, ip}
 8012f7e:	f7f8 fbf0 	bl	800b762 <WM_MoveWindow>
 8012f82:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8012f86:	9902      	ldr	r1, [sp, #8]
 8012f88:	b21b      	sxth	r3, r3
 8012f8a:	b236      	sxth	r6, r6
 8012f8c:	ebc9 0903 	rsb	r9, r9, r3
 8012f90:	ebc6 0808 	rsb	r8, r6, r8
 8012f94:	b23f      	sxth	r7, r7
 8012f96:	b22d      	sxth	r5, r5
 8012f98:	1b4d      	subs	r5, r1, r5
 8012f9a:	ebcc 0e07 	rsb	lr, ip, r7
 8012f9e:	eb19 0108 	adds.w	r1, r9, r8
 8012fa2:	eb0e 0205 	add.w	r2, lr, r5
 8012fa6:	d100      	bne.n	8012faa <WM__UpdateChildPositions+0xea>
 8012fa8:	b112      	cbz	r2, 8012fb0 <WM__UpdateChildPositions+0xf0>
 8012faa:	4620      	mov	r0, r4
 8012fac:	f7f8 faa3 	bl	800b4f6 <WM_ResizeWindow>
 8012fb0:	a808      	add	r0, sp, #32
 8012fb2:	f850 4d0c 	ldr.w	r4, [r0, #-12]!
 8012fb6:	6a24      	ldr	r4, [r4, #32]
 8012fb8:	f7fe fc9e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8012fbc:	e787      	b.n	8012ece <WM__UpdateChildPositions+0xe>
 8012fbe:	b009      	add	sp, #36	; 0x24
 8012fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012fc4 <WM__SendMessageNoPara>:
 8012fc4:	b530      	push	{r4, r5, lr}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	4604      	mov	r4, r0
 8012fca:	2210      	movs	r2, #16
 8012fcc:	460d      	mov	r5, r1
 8012fce:	4668      	mov	r0, sp
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	f002 ff73 	bl	8015ebc <memset>
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f7fe fc76 	bl	80118c8 <GUI_ALLOC_h2p>
 8012fdc:	6903      	ldr	r3, [r0, #16]
 8012fde:	b11b      	cbz	r3, 8012fe8 <WM__SendMessageNoPara+0x24>
 8012fe0:	9401      	str	r4, [sp, #4]
 8012fe2:	9500      	str	r5, [sp, #0]
 8012fe4:	4668      	mov	r0, sp
 8012fe6:	4798      	blx	r3
 8012fe8:	b005      	add	sp, #20
 8012fea:	bd30      	pop	{r4, r5, pc}

08012fec <WM__Screen2Client>:
 8012fec:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012ff0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012ff4:	4608      	mov	r0, r1
 8012ff6:	4252      	negs	r2, r2
 8012ff8:	4259      	negs	r1, r3
 8012ffa:	f7fd b9ff 	b.w	80103fc <GUI_MoveRect>

08012ffe <WM__GetPrevSibling>:
 8012ffe:	b538      	push	{r3, r4, r5, lr}
 8013000:	4605      	mov	r5, r0
 8013002:	f000 f82d 	bl	8013060 <WM__GetFirstSibling>
 8013006:	4604      	mov	r4, r0
 8013008:	b154      	cbz	r4, 8013020 <WM__GetPrevSibling+0x22>
 801300a:	42ac      	cmp	r4, r5
 801300c:	d007      	beq.n	801301e <WM__GetPrevSibling+0x20>
 801300e:	4620      	mov	r0, r4
 8013010:	f7fe fc5a 	bl	80118c8 <GUI_ALLOC_h2p>
 8013014:	6a03      	ldr	r3, [r0, #32]
 8013016:	42ab      	cmp	r3, r5
 8013018:	d002      	beq.n	8013020 <WM__GetPrevSibling+0x22>
 801301a:	461c      	mov	r4, r3
 801301c:	e7f4      	b.n	8013008 <WM__GetPrevSibling+0xa>
 801301e:	2400      	movs	r4, #0
 8013020:	4620      	mov	r0, r4
 8013022:	bd38      	pop	{r3, r4, r5, pc}

08013024 <WM__GetLastSibling>:
 8013024:	b510      	push	{r4, lr}
 8013026:	4604      	mov	r4, r0
 8013028:	b130      	cbz	r0, 8013038 <WM__GetLastSibling+0x14>
 801302a:	4620      	mov	r0, r4
 801302c:	f7fe fc4c 	bl	80118c8 <GUI_ALLOC_h2p>
 8013030:	6a03      	ldr	r3, [r0, #32]
 8013032:	b10b      	cbz	r3, 8013038 <WM__GetLastSibling+0x14>
 8013034:	461c      	mov	r4, r3
 8013036:	e7f8      	b.n	801302a <WM__GetLastSibling+0x6>
 8013038:	4620      	mov	r0, r4
 801303a:	bd10      	pop	{r4, pc}

0801303c <WM__GetFocussedChild>:
 801303c:	b538      	push	{r3, r4, r5, lr}
 801303e:	4d06      	ldr	r5, [pc, #24]	; (8013058 <WM__GetFocussedChild+0x1c>)
 8013040:	4c06      	ldr	r4, [pc, #24]	; (801305c <WM__GetFocussedChild+0x20>)
 8013042:	682b      	ldr	r3, [r5, #0]
 8013044:	4601      	mov	r1, r0
 8013046:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801304a:	f002 fcef 	bl	8015a2c <WM__IsChild>
 801304e:	b110      	cbz	r0, 8013056 <WM__GetFocussedChild+0x1a>
 8013050:	6828      	ldr	r0, [r5, #0]
 8013052:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8013056:	bd38      	pop	{r3, r4, r5, pc}
 8013058:	200179b4 	.word	0x200179b4
 801305c:	200179a4 	.word	0x200179a4

08013060 <WM__GetFirstSibling>:
 8013060:	b508      	push	{r3, lr}
 8013062:	f7f8 fc0e 	bl	800b882 <WM_GetParent>
 8013066:	b118      	cbz	r0, 8013070 <WM__GetFirstSibling+0x10>
 8013068:	f7fe fc2e 	bl	80118c8 <GUI_ALLOC_h2p>
 801306c:	69c0      	ldr	r0, [r0, #28]
 801306e:	bd08      	pop	{r3, pc}
 8013070:	bd08      	pop	{r3, pc}
	...

08013074 <WM_ValidateWindow>:
 8013074:	b507      	push	{r0, r1, r2, lr}
 8013076:	b178      	cbz	r0, 8013098 <WM_ValidateWindow+0x24>
 8013078:	f7fe fc30 	bl	80118dc <GUI_ALLOC_LockH>
 801307c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801307e:	9001      	str	r0, [sp, #4]
 8013080:	069a      	lsls	r2, r3, #26
 8013082:	d506      	bpl.n	8013092 <WM_ValidateWindow+0x1e>
 8013084:	f023 0120 	bic.w	r1, r3, #32
 8013088:	6281      	str	r1, [r0, #40]	; 0x28
 801308a:	4804      	ldr	r0, [pc, #16]	; (801309c <WM_ValidateWindow+0x28>)
 801308c:	8802      	ldrh	r2, [r0, #0]
 801308e:	1e53      	subs	r3, r2, #1
 8013090:	8003      	strh	r3, [r0, #0]
 8013092:	a801      	add	r0, sp, #4
 8013094:	f7fe fc30 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013098:	bd0e      	pop	{r1, r2, r3, pc}
 801309a:	bf00      	nop
 801309c:	200179ac 	.word	0x200179ac

080130a0 <WM_DeleteTimer>:
 80130a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130a2:	4605      	mov	r5, r0
 80130a4:	b168      	cbz	r0, 80130c2 <WM_DeleteTimer+0x22>
 80130a6:	f7fe fc19 	bl	80118dc <GUI_ALLOC_LockH>
 80130aa:	ac02      	add	r4, sp, #8
 80130ac:	f844 0d04 	str.w	r0, [r4, #-4]!
 80130b0:	6800      	ldr	r0, [r0, #0]
 80130b2:	f7fd f86d 	bl	8010190 <GUI_TIMER_Delete>
 80130b6:	4620      	mov	r0, r4
 80130b8:	f7fe fc1e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80130bc:	4628      	mov	r0, r5
 80130be:	f7fe fc47 	bl	8011950 <GUI_ALLOC_Free>
 80130c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080130c4 <WM__DeleteAssocTimer>:
 80130c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130c6:	4605      	mov	r5, r0
 80130c8:	a801      	add	r0, sp, #4
 80130ca:	f7fd f831 	bl	8010130 <GUI_TIMER__GetFirstTimer>
 80130ce:	4604      	mov	r4, r0
 80130d0:	b1dc      	cbz	r4, 801310a <WM__DeleteAssocTimer+0x46>
 80130d2:	4620      	mov	r0, r4
 80130d4:	2101      	movs	r1, #1
 80130d6:	f7fd f88b 	bl	80101f0 <GUI_TIMER_GetFlag>
 80130da:	9b01      	ldr	r3, [sp, #4]
 80130dc:	b183      	cbz	r3, 8013100 <WM__DeleteAssocTimer+0x3c>
 80130de:	b178      	cbz	r0, 8013100 <WM__DeleteAssocTimer+0x3c>
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fe fbf1 	bl	80118c8 <GUI_ALLOC_h2p>
 80130e6:	6840      	ldr	r0, [r0, #4]
 80130e8:	42a8      	cmp	r0, r5
 80130ea:	d109      	bne.n	8013100 <WM__DeleteAssocTimer+0x3c>
 80130ec:	4620      	mov	r0, r4
 80130ee:	a901      	add	r1, sp, #4
 80130f0:	9e01      	ldr	r6, [sp, #4]
 80130f2:	f7fd f833 	bl	801015c <GUI_TIMER__GetNextTimerLin>
 80130f6:	4604      	mov	r4, r0
 80130f8:	4630      	mov	r0, r6
 80130fa:	f7ff ffd1 	bl	80130a0 <WM_DeleteTimer>
 80130fe:	e7e7      	b.n	80130d0 <WM__DeleteAssocTimer+0xc>
 8013100:	4620      	mov	r0, r4
 8013102:	a901      	add	r1, sp, #4
 8013104:	f7fd f82a 	bl	801015c <GUI_TIMER__GetNextTimerLin>
 8013108:	e7e1      	b.n	80130ce <WM__DeleteAssocTimer+0xa>
 801310a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0801310c <WM_SendToParent>:
 801310c:	b538      	push	{r3, r4, r5, lr}
 801310e:	4605      	mov	r5, r0
 8013110:	460c      	mov	r4, r1
 8013112:	b141      	cbz	r1, 8013126 <WM_SendToParent+0x1a>
 8013114:	f7f8 fbb5 	bl	800b882 <WM_GetParent>
 8013118:	b128      	cbz	r0, 8013126 <WM_SendToParent+0x1a>
 801311a:	4621      	mov	r1, r4
 801311c:	60a5      	str	r5, [r4, #8]
 801311e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013122:	f7f7 bf97 	b.w	800b054 <WM__SendMessage>
 8013126:	bd38      	pop	{r3, r4, r5, pc}

08013128 <WM_OnKey>:
 8013128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801312a:	4a09      	ldr	r2, [pc, #36]	; (8013150 <WM_OnKey+0x28>)
 801312c:	4603      	mov	r3, r0
 801312e:	6810      	ldr	r0, [r2, #0]
 8013130:	4a08      	ldr	r2, [pc, #32]	; (8013154 <WM_OnKey+0x2c>)
 8013132:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8013136:	b148      	cbz	r0, 801314c <WM_OnKey+0x24>
 8013138:	9101      	str	r1, [sp, #4]
 801313a:	210e      	movs	r1, #14
 801313c:	9300      	str	r3, [sp, #0]
 801313e:	9102      	str	r1, [sp, #8]
 8013140:	ab00      	add	r3, sp, #0
 8013142:	a902      	add	r1, sp, #8
 8013144:	9305      	str	r3, [sp, #20]
 8013146:	f7f7 ff85 	bl	800b054 <WM__SendMessage>
 801314a:	2001      	movs	r0, #1
 801314c:	b007      	add	sp, #28
 801314e:	bd00      	pop	{pc}
 8013150:	200179b4 	.word	0x200179b4
 8013154:	200179a4 	.word	0x200179a4

08013158 <WM_GetWindowOrgX>:
 8013158:	b508      	push	{r3, lr}
 801315a:	b120      	cbz	r0, 8013166 <WM_GetWindowOrgX+0xe>
 801315c:	f7fe fbb4 	bl	80118c8 <GUI_ALLOC_h2p>
 8013160:	f9b0 0000 	ldrsh.w	r0, [r0]
 8013164:	bd08      	pop	{r3, pc}
 8013166:	bd08      	pop	{r3, pc}

08013168 <WM_ForEachDesc>:
 8013168:	f002 bc74 	b.w	8015a54 <WM__ForEachDesc>

0801316c <WM__AddCriticalHandle>:
 801316c:	4b02      	ldr	r3, [pc, #8]	; (8013178 <WM__AddCriticalHandle+0xc>)
 801316e:	681a      	ldr	r2, [r3, #0]
 8013170:	6002      	str	r2, [r0, #0]
 8013172:	6018      	str	r0, [r3, #0]
 8013174:	4770      	bx	lr
 8013176:	bf00      	nop
 8013178:	200179c8 	.word	0x200179c8

0801317c <WM_BringToBottom>:
 801317c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013180:	4604      	mov	r4, r0
 8013182:	b087      	sub	sp, #28
 8013184:	2800      	cmp	r0, #0
 8013186:	d03a      	beq.n	80131fe <WM_BringToBottom+0x82>
 8013188:	f7fe fba8 	bl	80118dc <GUI_ALLOC_LockH>
 801318c:	4603      	mov	r3, r0
 801318e:	9001      	str	r0, [sp, #4]
 8013190:	c803      	ldmia	r0, {r0, r1}
 8013192:	ad04      	add	r5, sp, #16
 8013194:	e885 0003 	stmia.w	r5, {r0, r1}
 8013198:	a801      	add	r0, sp, #4
 801319a:	6a1e      	ldr	r6, [r3, #32]
 801319c:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80131a0:	f7fe fbaa 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80131a4:	4620      	mov	r0, r4
 80131a6:	f7ff ff2a 	bl	8012ffe <WM__GetPrevSibling>
 80131aa:	4607      	mov	r7, r0
 80131ac:	b338      	cbz	r0, 80131fe <WM_BringToBottom+0x82>
 80131ae:	4620      	mov	r0, r4
 80131b0:	f7f8 fb67 	bl	800b882 <WM_GetParent>
 80131b4:	f019 0f02 	tst.w	r9, #2
 80131b8:	4680      	mov	r8, r0
 80131ba:	d004      	beq.n	80131c6 <WM_BringToBottom+0x4a>
 80131bc:	4628      	mov	r0, r5
 80131be:	4641      	mov	r1, r8
 80131c0:	4632      	mov	r2, r6
 80131c2:	f7f9 f84a 	bl	800c25a <WM__InvalidateRectEx>
 80131c6:	4620      	mov	r0, r4
 80131c8:	f7fe fb88 	bl	80118dc <GUI_ALLOC_LockH>
 80131cc:	9001      	str	r0, [sp, #4]
 80131ce:	4640      	mov	r0, r8
 80131d0:	f7fe fb84 	bl	80118dc <GUI_ALLOC_LockH>
 80131d4:	9003      	str	r0, [sp, #12]
 80131d6:	4638      	mov	r0, r7
 80131d8:	f7fe fb80 	bl	80118dc <GUI_ALLOC_LockH>
 80131dc:	9b03      	ldr	r3, [sp, #12]
 80131de:	6206      	str	r6, [r0, #32]
 80131e0:	9002      	str	r0, [sp, #8]
 80131e2:	a806      	add	r0, sp, #24
 80131e4:	69da      	ldr	r2, [r3, #28]
 80131e6:	f850 1d14 	ldr.w	r1, [r0, #-20]!
 80131ea:	61dc      	str	r4, [r3, #28]
 80131ec:	620a      	str	r2, [r1, #32]
 80131ee:	f7fe fb83 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80131f2:	a803      	add	r0, sp, #12
 80131f4:	f7fe fb80 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80131f8:	a802      	add	r0, sp, #8
 80131fa:	f7fe fb7d 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80131fe:	b007      	add	sp, #28
 8013200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013204 <_Convert16>:
 8013204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013208:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801320c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8013210:	4605      	mov	r5, r0
 8013212:	460e      	mov	r6, r1
 8013214:	4690      	mov	r8, r2
 8013216:	461f      	mov	r7, r3
 8013218:	4614      	mov	r4, r2
 801321a:	4689      	mov	r9, r1
 801321c:	f835 0b02 	ldrh.w	r0, [r5], #2
 8013220:	47d8      	blx	fp
 8013222:	47d0      	blx	sl
 8013224:	3c01      	subs	r4, #1
 8013226:	f849 0b04 	str.w	r0, [r9], #4
 801322a:	d1f7      	bne.n	801321c <_Convert16+0x18>
 801322c:	2f1f      	cmp	r7, #31
 801322e:	d806      	bhi.n	801323e <_Convert16+0x3a>
 8013230:	4630      	mov	r0, r6
 8013232:	4641      	mov	r1, r8
 8013234:	463a      	mov	r2, r7
 8013236:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801323a:	f001 bf87 	b.w	801514c <GUI__CompactPixelIndices>
 801323e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013242 <_Convert8>:
 8013242:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013246:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801324a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801324e:	4605      	mov	r5, r0
 8013250:	460e      	mov	r6, r1
 8013252:	4690      	mov	r8, r2
 8013254:	461f      	mov	r7, r3
 8013256:	4689      	mov	r9, r1
 8013258:	4604      	mov	r4, r0
 801325a:	f814 0b01 	ldrb.w	r0, [r4], #1
 801325e:	47d8      	blx	fp
 8013260:	47d0      	blx	sl
 8013262:	eb05 0308 	add.w	r3, r5, r8
 8013266:	429c      	cmp	r4, r3
 8013268:	f849 0b04 	str.w	r0, [r9], #4
 801326c:	d1f5      	bne.n	801325a <_Convert8+0x18>
 801326e:	2f1f      	cmp	r7, #31
 8013270:	d806      	bhi.n	8013280 <_Convert8+0x3e>
 8013272:	4630      	mov	r0, r6
 8013274:	4641      	mov	r1, r8
 8013276:	463a      	mov	r2, r7
 8013278:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801327c:	f001 bf66 	b.w	801514c <GUI__CompactPixelIndices>
 8013280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013284 <GUI_MEMDEV__WriteToActiveOpaque>:
 8013284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013288:	b09d      	sub	sp, #116	; 0x74
 801328a:	4680      	mov	r8, r0
 801328c:	920d      	str	r2, [sp, #52]	; 0x34
 801328e:	9110      	str	r1, [sp, #64]	; 0x40
 8013290:	f7fe fb24 	bl	80118dc <GUI_ALLOC_LockH>
 8013294:	ab1c      	add	r3, sp, #112	; 0x70
 8013296:	6944      	ldr	r4, [r0, #20]
 8013298:	f843 0d1c 	str.w	r0, [r3, #-28]!
 801329c:	4618      	mov	r0, r3
 801329e:	f7fe fb2b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80132a2:	4640      	mov	r0, r8
 80132a4:	f7fa fc8a 	bl	800dbbc <GUI_MEMDEV_GetBitsPerPixel>
 80132a8:	2808      	cmp	r0, #8
 80132aa:	4602      	mov	r2, r0
 80132ac:	dd02      	ble.n	80132b4 <GUI_MEMDEV__WriteToActiveOpaque+0x30>
 80132ae:	2c00      	cmp	r4, #0
 80132b0:	f000 81b5 	beq.w	801361e <GUI_MEMDEV__WriteToActiveOpaque+0x39a>
 80132b4:	2501      	movs	r5, #1
 80132b6:	2600      	movs	r6, #0
 80132b8:	4640      	mov	r0, r8
 80132ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80132bc:	950b      	str	r5, [sp, #44]	; 0x2c
 80132be:	961a      	str	r6, [sp, #104]	; 0x68
 80132c0:	f7fe fb0c 	bl	80118dc <GUI_ALLOC_LockH>
 80132c4:	a91c      	add	r1, sp, #112	; 0x70
 80132c6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80132ca:	f841 0d10 	str.w	r0, [r1, #-16]!
 80132ce:	6904      	ldr	r4, [r0, #16]
 80132d0:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 80132d4:	6945      	ldr	r5, [r0, #20]
 80132d6:	68c7      	ldr	r7, [r0, #12]
 80132d8:	6800      	ldr	r0, [r0, #0]
 80132da:	f8df b5f4 	ldr.w	fp, [pc, #1524]	; 80138d0 <GUI_MEMDEV__WriteToActiveOpaque+0x64c>
 80132de:	6903      	ldr	r3, [r0, #16]
 80132e0:	f8db 0000 	ldr.w	r0, [fp]
 80132e4:	9212      	str	r2, [sp, #72]	; 0x48
 80132e6:	685a      	ldr	r2, [r3, #4]
 80132e8:	7c40      	ldrb	r0, [r0, #17]
 80132ea:	9211      	str	r2, [sp, #68]	; 0x44
 80132ec:	9109      	str	r1, [sp, #36]	; 0x24
 80132ee:	f7fb fe27 	bl	800ef40 <GUI_GetBitsPerPixelEx>
 80132f2:	f8db 1000 	ldr.w	r1, [fp]
 80132f6:	900e      	str	r0, [sp, #56]	; 0x38
 80132f8:	7c48      	ldrb	r0, [r1, #17]
 80132fa:	f7fb fe3f 	bl	800ef7c <GUI_GetpfIndex2ColorEx>
 80132fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013300:	4602      	mov	r2, r0
 8013302:	4618      	mov	r0, r3
 8013304:	920a      	str	r2, [sp, #40]	; 0x28
 8013306:	f7fe faf7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 801330a:	2c08      	cmp	r4, #8
 801330c:	fa0f f98a 	sxth.w	r9, sl
 8013310:	4658      	mov	r0, fp
 8013312:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013316:	d904      	bls.n	8013322 <GUI_MEMDEV__WriteToActiveOpaque+0x9e>
 8013318:	2c10      	cmp	r4, #16
 801331a:	bf8c      	ite	hi
 801331c:	2104      	movhi	r1, #4
 801331e:	2102      	movls	r1, #2
 8013320:	e004      	b.n	801332c <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8013322:	2c01      	cmp	r4, #1
 8013324:	d102      	bne.n	801332c <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8013326:	940f      	str	r4, [sp, #60]	; 0x3c
 8013328:	ae1a      	add	r6, sp, #104	; 0x68
 801332a:	e000      	b.n	801332e <GUI_MEMDEV__WriteToActiveOpaque+0xaa>
 801332c:	910f      	str	r1, [sp, #60]	; 0x3c
 801332e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013330:	4293      	cmp	r3, r2
 8013332:	f000 80d9 	beq.w	80134e8 <GUI_MEMDEV__WriteToActiveOpaque+0x264>
 8013336:	6803      	ldr	r3, [r0, #0]
 8013338:	7c58      	ldrb	r0, [r3, #17]
 801333a:	f7fb fe27 	bl	800ef8c <GUI_GetpfColor2IndexEx>
 801333e:	9013      	str	r0, [sp, #76]	; 0x4c
 8013340:	fa0f f08a 	sxth.w	r0, sl
 8013344:	0080      	lsls	r0, r0, #2
 8013346:	f7fe fd17 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 801334a:	900c      	str	r0, [sp, #48]	; 0x30
 801334c:	2800      	cmp	r0, #0
 801334e:	f000 8322 	beq.w	8013996 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8013352:	4640      	mov	r0, r8
 8013354:	f7f9 fdfe 	bl	800cf54 <GUI_MEMDEV_GetDataPtr>
 8013358:	4680      	mov	r8, r0
 801335a:	2d00      	cmp	r5, #0
 801335c:	f000 80b5 	beq.w	80134ca <GUI_MEMDEV__WriteToActiveOpaque+0x246>
 8013360:	4628      	mov	r0, r5
 8013362:	f7fe fabb 	bl	80118dc <GUI_ALLOC_LockH>
 8013366:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801336a:	9019      	str	r0, [sp, #100]	; 0x64
 801336c:	f04f 0a00 	mov.w	sl, #0
 8013370:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013372:	458a      	cmp	sl, r1
 8013374:	f280 80a5 	bge.w	80134c2 <GUI_MEMDEV__WriteToActiveOpaque+0x23e>
 8013378:	9819      	ldr	r0, [sp, #100]	; 0x64
 801337a:	6883      	ldr	r3, [r0, #8]
 801337c:	2500      	movs	r5, #0
 801337e:	9516      	str	r5, [sp, #88]	; 0x58
 8013380:	a916      	add	r1, sp, #88	; 0x58
 8013382:	695d      	ldr	r5, [r3, #20]
 8013384:	4652      	mov	r2, sl
 8013386:	47a8      	blx	r5
 8013388:	4548      	cmp	r0, r9
 801338a:	4605      	mov	r5, r0
 801338c:	d127      	bne.n	80133de <GUI_MEMDEV__WriteToActiveOpaque+0x15a>
 801338e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013390:	f7fe faa4 	bl	80118dc <GUI_ALLOC_LockH>
 8013394:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013396:	9017      	str	r0, [sp, #92]	; 0x5c
 8013398:	4601      	mov	r1, r0
 801339a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801339c:	9200      	str	r2, [sp, #0]
 801339e:	2c08      	cmp	r4, #8
 80133a0:	9001      	str	r0, [sp, #4]
 80133a2:	464a      	mov	r2, r9
 80133a4:	4640      	mov	r0, r8
 80133a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133a8:	d902      	bls.n	80133b0 <GUI_MEMDEV__WriteToActiveOpaque+0x12c>
 80133aa:	f7ff ff2b 	bl	8013204 <_Convert16>
 80133ae:	e001      	b.n	80133b4 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 80133b0:	f7ff ff47 	bl	8013242 <_Convert8>
 80133b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80133b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80133b8:	9502      	str	r5, [sp, #8]
 80133ba:	2301      	movs	r3, #1
 80133bc:	2100      	movs	r1, #0
 80133be:	ad1c      	add	r5, sp, #112	; 0x70
 80133c0:	9103      	str	r1, [sp, #12]
 80133c2:	9300      	str	r3, [sp, #0]
 80133c4:	9301      	str	r3, [sp, #4]
 80133c6:	f855 2d14 	ldr.w	r2, [r5, #-20]!
 80133ca:	9605      	str	r6, [sp, #20]
 80133cc:	9204      	str	r2, [sp, #16]
 80133ce:	4659      	mov	r1, fp
 80133d0:	464a      	mov	r2, r9
 80133d2:	f7fb ffd9 	bl	800f388 <LCD_DrawBitmap>
 80133d6:	4628      	mov	r0, r5
 80133d8:	f7fe fa8e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80133dc:	e06b      	b.n	80134b6 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80133de:	2c01      	cmp	r4, #1
 80133e0:	d15a      	bne.n	8013498 <GUI_MEMDEV__WriteToActiveOpaque+0x214>
 80133e2:	2d00      	cmp	r5, #0
 80133e4:	d067      	beq.n	80134b6 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80133e6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80133e8:	9703      	str	r7, [sp, #12]
 80133ea:	2008      	movs	r0, #8
 80133ec:	fb91 f2f0 	sdiv	r2, r1, r0
 80133f0:	eb08 0002 	add.w	r0, r8, r2
 80133f4:	9004      	str	r0, [sp, #16]
 80133f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80133f8:	9605      	str	r6, [sp, #20]
 80133fa:	2301      	movs	r3, #1
 80133fc:	f001 0207 	and.w	r2, r1, #7
 8013400:	1840      	adds	r0, r0, r1
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	9301      	str	r3, [sp, #4]
 8013406:	9302      	str	r3, [sp, #8]
 8013408:	9206      	str	r2, [sp, #24]
 801340a:	4659      	mov	r1, fp
 801340c:	462a      	mov	r2, r5
 801340e:	f7fb fedf 	bl	800f1d0 <LCD__DrawBitmap_1bpp>
 8013412:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013414:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013416:	6881      	ldr	r1, [r0, #8]
 8013418:	195d      	adds	r5, r3, r5
 801341a:	9516      	str	r5, [sp, #88]	; 0x58
 801341c:	694b      	ldr	r3, [r1, #20]
 801341e:	4652      	mov	r2, sl
 8013420:	a916      	add	r1, sp, #88	; 0x58
 8013422:	4798      	blx	r3
 8013424:	4605      	mov	r5, r0
 8013426:	e7dc      	b.n	80133e2 <GUI_MEMDEV__WriteToActiveOpaque+0x15e>
 8013428:	980c      	ldr	r0, [sp, #48]	; 0x30
 801342a:	f7fe fa57 	bl	80118dc <GUI_ALLOC_LockH>
 801342e:	2c08      	cmp	r4, #8
 8013430:	4601      	mov	r1, r0
 8013432:	9017      	str	r0, [sp, #92]	; 0x5c
 8013434:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013436:	d932      	bls.n	801349e <GUI_MEMDEV__WriteToActiveOpaque+0x21a>
 8013438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801343a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801343c:	9300      	str	r3, [sp, #0]
 801343e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013440:	9201      	str	r2, [sp, #4]
 8013442:	fb00 8003 	mla	r0, r0, r3, r8
 8013446:	462a      	mov	r2, r5
 8013448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801344a:	f7ff fedb 	bl	8013204 <_Convert16>
 801344e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013450:	2301      	movs	r3, #1
 8013452:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8013456:	2000      	movs	r0, #0
 8013458:	9300      	str	r3, [sp, #0]
 801345a:	9301      	str	r3, [sp, #4]
 801345c:	9102      	str	r1, [sp, #8]
 801345e:	9003      	str	r0, [sp, #12]
 8013460:	f85c 2d14 	ldr.w	r2, [ip, #-20]!
 8013464:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013466:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013468:	9204      	str	r2, [sp, #16]
 801346a:	1840      	adds	r0, r0, r1
 801346c:	462a      	mov	r2, r5
 801346e:	4659      	mov	r1, fp
 8013470:	9605      	str	r6, [sp, #20]
 8013472:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8013476:	f7fb ff87 	bl	800f388 <LCD_DrawBitmap>
 801347a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 801347e:	4660      	mov	r0, ip
 8013480:	f7fe fa3a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013484:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013486:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013488:	6882      	ldr	r2, [r0, #8]
 801348a:	195d      	adds	r5, r3, r5
 801348c:	9516      	str	r5, [sp, #88]	; 0x58
 801348e:	6953      	ldr	r3, [r2, #20]
 8013490:	a916      	add	r1, sp, #88	; 0x58
 8013492:	4652      	mov	r2, sl
 8013494:	4798      	blx	r3
 8013496:	4605      	mov	r5, r0
 8013498:	2d00      	cmp	r5, #0
 801349a:	d1c5      	bne.n	8013428 <GUI_MEMDEV__WriteToActiveOpaque+0x1a4>
 801349c:	e00b      	b.n	80134b6 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 801349e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80134a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80134a2:	9200      	str	r2, [sp, #0]
 80134a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80134a6:	9301      	str	r3, [sp, #4]
 80134a8:	fb00 8002 	mla	r0, r0, r2, r8
 80134ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134ae:	462a      	mov	r2, r5
 80134b0:	f7ff fec7 	bl	8013242 <_Convert8>
 80134b4:	e7cb      	b.n	801344e <GUI_MEMDEV__WriteToActiveOpaque+0x1ca>
 80134b6:	44b8      	add	r8, r7
 80134b8:	f10a 0a01 	add.w	sl, sl, #1
 80134bc:	f10b 0b01 	add.w	fp, fp, #1
 80134c0:	e756      	b.n	8013370 <GUI_MEMDEV__WriteToActiveOpaque+0xec>
 80134c2:	a819      	add	r0, sp, #100	; 0x64
 80134c4:	f7fe fa18 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80134c8:	e00c      	b.n	80134e4 <GUI_MEMDEV__WriteToActiveOpaque+0x260>
 80134ca:	2201      	movs	r2, #1
 80134cc:	9200      	str	r2, [sp, #0]
 80134ce:	9201      	str	r2, [sp, #4]
 80134d0:	9004      	str	r0, [sp, #16]
 80134d2:	9402      	str	r4, [sp, #8]
 80134d4:	9703      	str	r7, [sp, #12]
 80134d6:	9605      	str	r6, [sp, #20]
 80134d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80134da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80134dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80134de:	464a      	mov	r2, r9
 80134e0:	f7fb ff52 	bl	800f388 <LCD_DrawBitmap>
 80134e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80134e6:	e254      	b.n	8013992 <GUI_MEMDEV__WriteToActiveOpaque+0x70e>
 80134e8:	4640      	mov	r0, r8
 80134ea:	f7f9 fd33 	bl	800cf54 <GUI_MEMDEV_GetDataPtr>
 80134ee:	4680      	mov	r8, r0
 80134f0:	2d00      	cmp	r5, #0
 80134f2:	f000 8087 	beq.w	8013604 <GUI_MEMDEV__WriteToActiveOpaque+0x380>
 80134f6:	4628      	mov	r0, r5
 80134f8:	f7fe f9f0 	bl	80118dc <GUI_ALLOC_LockH>
 80134fc:	2500      	movs	r5, #0
 80134fe:	9019      	str	r0, [sp, #100]	; 0x64
 8013500:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013502:	428d      	cmp	r5, r1
 8013504:	da7a      	bge.n	80135fc <GUI_MEMDEV__WriteToActiveOpaque+0x378>
 8013506:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013508:	6883      	ldr	r3, [r0, #8]
 801350a:	2200      	movs	r2, #0
 801350c:	9216      	str	r2, [sp, #88]	; 0x58
 801350e:	695b      	ldr	r3, [r3, #20]
 8013510:	a916      	add	r1, sp, #88	; 0x58
 8013512:	462a      	mov	r2, r5
 8013514:	4798      	blx	r3
 8013516:	4548      	cmp	r0, r9
 8013518:	4682      	mov	sl, r0
 801351a:	d123      	bne.n	8013564 <GUI_MEMDEV__WriteToActiveOpaque+0x2e0>
 801351c:	46aa      	mov	sl, r5
 801351e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013520:	6881      	ldr	r1, [r0, #8]
 8013522:	f10a 0b01 	add.w	fp, sl, #1
 8013526:	694b      	ldr	r3, [r1, #20]
 8013528:	465a      	mov	r2, fp
 801352a:	a916      	add	r1, sp, #88	; 0x58
 801352c:	4798      	blx	r3
 801352e:	4548      	cmp	r0, r9
 8013530:	d101      	bne.n	8013536 <GUI_MEMDEV__WriteToActiveOpaque+0x2b2>
 8013532:	46da      	mov	sl, fp
 8013534:	e7f3      	b.n	801351e <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 8013536:	ebc5 000a 	rsb	r0, r5, sl
 801353a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801353c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013540:	f100 0b01 	add.w	fp, r0, #1
 8013544:	2201      	movs	r2, #1
 8013546:	9200      	str	r2, [sp, #0]
 8013548:	9201      	str	r2, [sp, #4]
 801354a:	1949      	adds	r1, r1, r5
 801354c:	9402      	str	r4, [sp, #8]
 801354e:	9703      	str	r7, [sp, #12]
 8013550:	9605      	str	r6, [sp, #20]
 8013552:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013554:	464a      	mov	r2, r9
 8013556:	465b      	mov	r3, fp
 8013558:	f7fb ff16 	bl	800f388 <LCD_DrawBitmap>
 801355c:	fb07 880b 	mla	r8, r7, fp, r8
 8013560:	4655      	mov	r5, sl
 8013562:	e049      	b.n	80135f8 <GUI_MEMDEV__WriteToActiveOpaque+0x374>
 8013564:	2c01      	cmp	r4, #1
 8013566:	d125      	bne.n	80135b4 <GUI_MEMDEV__WriteToActiveOpaque+0x330>
 8013568:	f1ba 0f00 	cmp.w	sl, #0
 801356c:	d043      	beq.n	80135f6 <GUI_MEMDEV__WriteToActiveOpaque+0x372>
 801356e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013570:	9703      	str	r7, [sp, #12]
 8013572:	2208      	movs	r2, #8
 8013574:	fb90 f1f2 	sdiv	r1, r0, r2
 8013578:	eb08 0201 	add.w	r2, r8, r1
 801357c:	f000 0107 	and.w	r1, r0, #7
 8013580:	9204      	str	r2, [sp, #16]
 8013582:	9106      	str	r1, [sp, #24]
 8013584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013586:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013588:	9605      	str	r6, [sp, #20]
 801358a:	2301      	movs	r3, #1
 801358c:	1810      	adds	r0, r2, r0
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	4652      	mov	r2, sl
 8013592:	9301      	str	r3, [sp, #4]
 8013594:	9302      	str	r3, [sp, #8]
 8013596:	1949      	adds	r1, r1, r5
 8013598:	f7fb fe1a 	bl	800f1d0 <LCD__DrawBitmap_1bpp>
 801359c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801359e:	eb03 000a 	add.w	r0, r3, sl
 80135a2:	9016      	str	r0, [sp, #88]	; 0x58
 80135a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80135a6:	6882      	ldr	r2, [r0, #8]
 80135a8:	a916      	add	r1, sp, #88	; 0x58
 80135aa:	6953      	ldr	r3, [r2, #20]
 80135ac:	462a      	mov	r2, r5
 80135ae:	4798      	blx	r3
 80135b0:	4682      	mov	sl, r0
 80135b2:	e7d9      	b.n	8013568 <GUI_MEMDEV__WriteToActiveOpaque+0x2e4>
 80135b4:	f1ba 0f00 	cmp.w	sl, #0
 80135b8:	d01d      	beq.n	80135f6 <GUI_MEMDEV__WriteToActiveOpaque+0x372>
 80135ba:	9816      	ldr	r0, [sp, #88]	; 0x58
 80135bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80135be:	9402      	str	r4, [sp, #8]
 80135c0:	fb00 8201 	mla	r2, r0, r1, r8
 80135c4:	9204      	str	r2, [sp, #16]
 80135c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80135c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135ca:	9703      	str	r7, [sp, #12]
 80135cc:	2301      	movs	r3, #1
 80135ce:	1808      	adds	r0, r1, r0
 80135d0:	9300      	str	r3, [sp, #0]
 80135d2:	1951      	adds	r1, r2, r5
 80135d4:	9301      	str	r3, [sp, #4]
 80135d6:	4652      	mov	r2, sl
 80135d8:	9605      	str	r6, [sp, #20]
 80135da:	f7fb fed5 	bl	800f388 <LCD_DrawBitmap>
 80135de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80135e0:	eb03 000a 	add.w	r0, r3, sl
 80135e4:	9016      	str	r0, [sp, #88]	; 0x58
 80135e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80135e8:	6881      	ldr	r1, [r0, #8]
 80135ea:	462a      	mov	r2, r5
 80135ec:	694b      	ldr	r3, [r1, #20]
 80135ee:	a916      	add	r1, sp, #88	; 0x58
 80135f0:	4798      	blx	r3
 80135f2:	4682      	mov	sl, r0
 80135f4:	e7de      	b.n	80135b4 <GUI_MEMDEV__WriteToActiveOpaque+0x330>
 80135f6:	44b8      	add	r8, r7
 80135f8:	3501      	adds	r5, #1
 80135fa:	e781      	b.n	8013500 <GUI_MEMDEV__WriteToActiveOpaque+0x27c>
 80135fc:	a819      	add	r0, sp, #100	; 0x64
 80135fe:	f7fe f97b 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013602:	e1c8      	b.n	8013996 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8013604:	2001      	movs	r0, #1
 8013606:	9000      	str	r0, [sp, #0]
 8013608:	9001      	str	r0, [sp, #4]
 801360a:	9402      	str	r4, [sp, #8]
 801360c:	9703      	str	r7, [sp, #12]
 801360e:	f8cd 8010 	str.w	r8, [sp, #16]
 8013612:	9605      	str	r6, [sp, #20]
 8013614:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013616:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801361a:	464a      	mov	r2, r9
 801361c:	e03d      	b.n	801369a <GUI_MEMDEV__WriteToActiveOpaque+0x416>
 801361e:	4640      	mov	r0, r8
 8013620:	920a      	str	r2, [sp, #40]	; 0x28
 8013622:	f7fe f95b 	bl	80118dc <GUI_ALLOC_LockH>
 8013626:	4605      	mov	r5, r0
 8013628:	a81c      	add	r0, sp, #112	; 0x70
 801362a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801362e:	f840 5d14 	str.w	r5, [r0, #-20]!
 8013632:	682b      	ldr	r3, [r5, #0]
 8013634:	8969      	ldrh	r1, [r5, #10]
 8013636:	f8d3 9010 	ldr.w	r9, [r3, #16]
 801363a:	68ee      	ldr	r6, [r5, #12]
 801363c:	4ca4      	ldr	r4, [pc, #656]	; (80138d0 <GUI_MEMDEV__WriteToActiveOpaque+0x64c>)
 801363e:	9111      	str	r1, [sp, #68]	; 0x44
 8013640:	fa0f f78b 	sxth.w	r7, fp
 8013644:	970e      	str	r7, [sp, #56]	; 0x38
 8013646:	fa0f fa81 	sxth.w	sl, r1
 801364a:	9609      	str	r6, [sp, #36]	; 0x24
 801364c:	f7fe f954 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013650:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8013654:	6822      	ldr	r2, [r4, #0]
 8013656:	900f      	str	r0, [sp, #60]	; 0x3c
 8013658:	4f9e      	ldr	r7, [pc, #632]	; (80138d4 <GUI_MEMDEV__WriteToActiveOpaque+0x650>)
 801365a:	7c50      	ldrb	r0, [r2, #17]
 801365c:	f857 1020 	ldr.w	r1, [r7, r0, lsl #2]
 8013660:	690e      	ldr	r6, [r1, #16]
 8013662:	6837      	ldr	r7, [r6, #0]
 8013664:	f7fb fc6c 	bl	800ef40 <GUI_GetBitsPerPixelEx>
 8013668:	2808      	cmp	r0, #8
 801366a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801366c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801366e:	d904      	bls.n	801367a <GUI_MEMDEV__WriteToActiveOpaque+0x3f6>
 8013670:	2810      	cmp	r0, #16
 8013672:	bf8c      	ite	hi
 8013674:	2404      	movhi	r4, #4
 8013676:	2402      	movls	r4, #2
 8013678:	e000      	b.n	801367c <GUI_MEMDEV__WriteToActiveOpaque+0x3f8>
 801367a:	2401      	movs	r4, #1
 801367c:	45b1      	cmp	r9, r6
 801367e:	d10f      	bne.n	80136a0 <GUI_MEMDEV__WriteToActiveOpaque+0x41c>
 8013680:	2101      	movs	r1, #1
 8013682:	9100      	str	r1, [sp, #0]
 8013684:	9101      	str	r1, [sp, #4]
 8013686:	9202      	str	r2, [sp, #8]
 8013688:	9303      	str	r3, [sp, #12]
 801368a:	3518      	adds	r5, #24
 801368c:	2300      	movs	r3, #0
 801368e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013690:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013694:	9305      	str	r3, [sp, #20]
 8013696:	9504      	str	r5, [sp, #16]
 8013698:	4653      	mov	r3, sl
 801369a:	f7fb fe75 	bl	800f388 <LCD_DrawBitmap>
 801369e:	e17a      	b.n	8013996 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 80136a0:	2a20      	cmp	r2, #32
 80136a2:	f040 809c 	bne.w	80137de <GUI_MEMDEV__WriteToActiveOpaque+0x55a>
 80136a6:	fa0f f58b 	sxth.w	r5, fp
 80136aa:	fb05 f004 	mul.w	r0, r5, r4
 80136ae:	f7fe fb63 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 80136b2:	900f      	str	r0, [sp, #60]	; 0x3c
 80136b4:	2800      	cmp	r0, #0
 80136b6:	f000 816e 	beq.w	8013996 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 80136ba:	f7fe f90f 	bl	80118dc <GUI_ALLOC_LockH>
 80136be:	9019      	str	r0, [sp, #100]	; 0x64
 80136c0:	4640      	mov	r0, r8
 80136c2:	f7fe f90b 	bl	80118dc <GUI_ALLOC_LockH>
 80136c6:	9017      	str	r0, [sp, #92]	; 0x5c
 80136c8:	f100 0b18 	add.w	fp, r0, #24
 80136cc:	6930      	ldr	r0, [r6, #16]
 80136ce:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 80136d2:	b348      	cbz	r0, 8013728 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 80136d4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80136d8:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80136dc:	2c02      	cmp	r4, #2
 80136de:	d003      	beq.n	80136e8 <GUI_MEMDEV__WriteToActiveOpaque+0x464>
 80136e0:	2c04      	cmp	r4, #4
 80136e2:	d001      	beq.n	80136e8 <GUI_MEMDEV__WriteToActiveOpaque+0x464>
 80136e4:	2c01      	cmp	r4, #1
 80136e6:	d106      	bne.n	80136f6 <GUI_MEMDEV__WriteToActiveOpaque+0x472>
 80136e8:	4658      	mov	r0, fp
 80136ea:	6937      	ldr	r7, [r6, #16]
 80136ec:	9919      	ldr	r1, [sp, #100]	; 0x64
 80136ee:	462a      	mov	r2, r5
 80136f0:	4623      	mov	r3, r4
 80136f2:	47b8      	blx	r7
 80136f4:	44cb      	add	fp, r9
 80136f6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80136f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136fa:	9104      	str	r1, [sp, #16]
 80136fc:	2301      	movs	r3, #1
 80136fe:	2000      	movs	r0, #0
 8013700:	9300      	str	r3, [sp, #0]
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	9003      	str	r0, [sp, #12]
 8013706:	9005      	str	r0, [sp, #20]
 8013708:	f8cd a008 	str.w	sl, [sp, #8]
 801370c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801370e:	4641      	mov	r1, r8
 8013710:	f7fb fe3a 	bl	800f388 <LCD_DrawBitmap>
 8013714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013716:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013718:	f108 0701 	add.w	r7, r8, #1
 801371c:	fa02 f083 	sxtah	r0, r2, r3
 8013720:	42b8      	cmp	r0, r7
 8013722:	d054      	beq.n	80137ce <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 8013724:	46b8      	mov	r8, r7
 8013726:	e7d9      	b.n	80136dc <GUI_MEMDEV__WriteToActiveOpaque+0x458>
 8013728:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801372a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801372c:	2c02      	cmp	r4, #2
 801372e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013730:	d010      	beq.n	8013754 <GUI_MEMDEV__WriteToActiveOpaque+0x4d0>
 8013732:	2c04      	cmp	r4, #4
 8013734:	d01c      	beq.n	8013770 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 8013736:	2c01      	cmp	r4, #1
 8013738:	d130      	bne.n	801379c <GUI_MEMDEV__WriteToActiveOpaque+0x518>
 801373a:	4689      	mov	r9, r1
 801373c:	f04f 0800 	mov.w	r8, #0
 8013740:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 8013744:	47b8      	blx	r7
 8013746:	f809 0008 	strb.w	r0, [r9, r8]
 801374a:	f108 0801 	add.w	r8, r8, #1
 801374e:	4545      	cmp	r5, r8
 8013750:	d1f6      	bne.n	8013740 <GUI_MEMDEV__WriteToActiveOpaque+0x4bc>
 8013752:	e020      	b.n	8013796 <GUI_MEMDEV__WriteToActiveOpaque+0x512>
 8013754:	4689      	mov	r9, r1
 8013756:	465b      	mov	r3, fp
 8013758:	46a8      	mov	r8, r5
 801375a:	f853 0b04 	ldr.w	r0, [r3], #4
 801375e:	9309      	str	r3, [sp, #36]	; 0x24
 8013760:	47b8      	blx	r7
 8013762:	f1b8 0801 	subs.w	r8, r8, #1
 8013766:	f829 0b02 	strh.w	r0, [r9], #2
 801376a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801376c:	d1f5      	bne.n	801375a <GUI_MEMDEV__WriteToActiveOpaque+0x4d6>
 801376e:	e00e      	b.n	801378e <GUI_MEMDEV__WriteToActiveOpaque+0x50a>
 8013770:	46a8      	mov	r8, r5
 8013772:	f04f 0900 	mov.w	r9, #0
 8013776:	f85b 0009 	ldr.w	r0, [fp, r9]
 801377a:	9109      	str	r1, [sp, #36]	; 0x24
 801377c:	47b8      	blx	r7
 801377e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013780:	f1b8 0801 	subs.w	r8, r8, #1
 8013784:	f841 0009 	str.w	r0, [r1, r9]
 8013788:	f109 0904 	add.w	r9, r9, #4
 801378c:	d1f3      	bne.n	8013776 <GUI_MEMDEV__WriteToActiveOpaque+0x4f2>
 801378e:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 8013792:	4645      	mov	r5, r8
 8013794:	e002      	b.n	801379c <GUI_MEMDEV__WriteToActiveOpaque+0x518>
 8013796:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 801379a:	2500      	movs	r5, #0
 801379c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801379e:	f8cd a008 	str.w	sl, [sp, #8]
 80137a2:	2301      	movs	r3, #1
 80137a4:	2200      	movs	r2, #0
 80137a6:	9300      	str	r3, [sp, #0]
 80137a8:	9301      	str	r3, [sp, #4]
 80137aa:	9203      	str	r2, [sp, #12]
 80137ac:	9004      	str	r0, [sp, #16]
 80137ae:	9205      	str	r2, [sp, #20]
 80137b0:	4631      	mov	r1, r6
 80137b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80137b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80137b6:	f7fb fde7 	bl	800f388 <LCD_DrawBitmap>
 80137ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80137bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137be:	f106 0801 	add.w	r8, r6, #1
 80137c2:	fa03 f281 	sxtah	r2, r3, r1
 80137c6:	4542      	cmp	r2, r8
 80137c8:	d001      	beq.n	80137ce <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 80137ca:	4646      	mov	r6, r8
 80137cc:	e7ae      	b.n	801372c <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 80137ce:	a817      	add	r0, sp, #92	; 0x5c
 80137d0:	f7fe f892 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80137d4:	a819      	add	r0, sp, #100	; 0x64
 80137d6:	f7fe f88f 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80137da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80137dc:	e0d9      	b.n	8013992 <GUI_MEMDEV__WriteToActiveOpaque+0x70e>
 80137de:	2a10      	cmp	r2, #16
 80137e0:	f040 80d9 	bne.w	8013996 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 80137e4:	fa0f fa8b 	sxth.w	sl, fp
 80137e8:	fb0a f004 	mul.w	r0, sl, r4
 80137ec:	f7fe fac4 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 80137f0:	9012      	str	r0, [sp, #72]	; 0x48
 80137f2:	2800      	cmp	r0, #0
 80137f4:	f000 80cf 	beq.w	8013996 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 80137f8:	f7fe f870 	bl	80118dc <GUI_ALLOC_LockH>
 80137fc:	9019      	str	r0, [sp, #100]	; 0x64
 80137fe:	4640      	mov	r0, r8
 8013800:	f7fe f86c 	bl	80118dc <GUI_ALLOC_LockH>
 8013804:	9017      	str	r0, [sp, #92]	; 0x5c
 8013806:	6931      	ldr	r1, [r6, #16]
 8013808:	f100 0518 	add.w	r5, r0, #24
 801380c:	b111      	cbz	r1, 8013814 <GUI_MEMDEV__WriteToActiveOpaque+0x590>
 801380e:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8013812:	b92a      	cbnz	r2, 8013820 <GUI_MEMDEV__WriteToActiveOpaque+0x59c>
 8013814:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 8013818:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801381a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801381e:	e085      	b.n	801392c <GUI_MEMDEV__WriteToActiveOpaque+0x6a8>
 8013820:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013824:	0088      	lsls	r0, r1, #2
 8013826:	f7fe faa7 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 801382a:	900f      	str	r0, [sp, #60]	; 0x3c
 801382c:	b118      	cbz	r0, 8013836 <GUI_MEMDEV__WriteToActiveOpaque+0x5b2>
 801382e:	f7fe f855 	bl	80118dc <GUI_ALLOC_LockH>
 8013832:	9018      	str	r0, [sp, #96]	; 0x60
 8013834:	e001      	b.n	801383a <GUI_MEMDEV__WriteToActiveOpaque+0x5b6>
 8013836:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013838:	9718      	str	r7, [sp, #96]	; 0x60
 801383a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801383c:	2b00      	cmp	r3, #0
 801383e:	f000 80a1 	beq.w	8013984 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 8013842:	fa0f fb8b 	sxth.w	fp, fp
 8013846:	ea4f 084b 	mov.w	r8, fp, lsl #1
 801384a:	00e7      	lsls	r7, r4, #3
 801384c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013850:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8013854:	9713      	str	r7, [sp, #76]	; 0x4c
 8013856:	2c02      	cmp	r4, #2
 8013858:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 801385c:	d004      	beq.n	8013868 <GUI_MEMDEV__WriteToActiveOpaque+0x5e4>
 801385e:	2c04      	cmp	r4, #4
 8013860:	d007      	beq.n	8013872 <GUI_MEMDEV__WriteToActiveOpaque+0x5ee>
 8013862:	2c01      	cmp	r4, #1
 8013864:	d114      	bne.n	8013890 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 8013866:	e004      	b.n	8013872 <GUI_MEMDEV__WriteToActiveOpaque+0x5ee>
 8013868:	4628      	mov	r0, r5
 801386a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801386c:	4652      	mov	r2, sl
 801386e:	4623      	mov	r3, r4
 8013870:	e003      	b.n	801387a <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8013872:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013874:	4628      	mov	r0, r5
 8013876:	4652      	mov	r2, sl
 8013878:	2302      	movs	r3, #2
 801387a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 801387e:	47b8      	blx	r7
 8013880:	4652      	mov	r2, sl
 8013882:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013884:	6937      	ldr	r7, [r6, #16]
 8013886:	4641      	mov	r1, r8
 8013888:	4623      	mov	r3, r4
 801388a:	47b8      	blx	r7
 801388c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801388e:	18ad      	adds	r5, r5, r2
 8013890:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013892:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013894:	9002      	str	r0, [sp, #8]
 8013896:	2301      	movs	r3, #1
 8013898:	2700      	movs	r7, #0
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	9301      	str	r3, [sp, #4]
 801389e:	9703      	str	r7, [sp, #12]
 80138a0:	9104      	str	r1, [sp, #16]
 80138a2:	9705      	str	r7, [sp, #20]
 80138a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80138a8:	4659      	mov	r1, fp
 80138aa:	f7fb fd6d 	bl	800f388 <LCD_DrawBitmap>
 80138ae:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80138b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138b2:	f10b 0801 	add.w	r8, fp, #1
 80138b6:	fa03 f287 	sxtah	r2, r3, r7
 80138ba:	4542      	cmp	r2, r8
 80138bc:	d001      	beq.n	80138c2 <GUI_MEMDEV__WriteToActiveOpaque+0x63e>
 80138be:	46c3      	mov	fp, r8
 80138c0:	e7c9      	b.n	8013856 <GUI_MEMDEV__WriteToActiveOpaque+0x5d2>
 80138c2:	a818      	add	r0, sp, #96	; 0x60
 80138c4:	f7fe f818 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80138c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80138ca:	f7fe f841 	bl	8011950 <GUI_ALLOC_Free>
 80138ce:	e059      	b.n	8013984 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 80138d0:	2000027c 	.word	0x2000027c
 80138d4:	20017a04 	.word	0x20017a04
 80138d8:	4683      	mov	fp, r0
 80138da:	462b      	mov	r3, r5
 80138dc:	46b1      	mov	r9, r6
 80138de:	f833 0b02 	ldrh.w	r0, [r3], #2
 80138e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138e4:	9309      	str	r3, [sp, #36]	; 0x24
 80138e6:	4790      	blx	r2
 80138e8:	47b8      	blx	r7
 80138ea:	f1b9 0901 	subs.w	r9, r9, #1
 80138ee:	f82b 0b02 	strh.w	r0, [fp], #2
 80138f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138f4:	d1f3      	bne.n	80138de <GUI_MEMDEV__WriteToActiveOpaque+0x65a>
 80138f6:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80138fa:	464e      	mov	r6, r9
 80138fc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80138fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013900:	9104      	str	r1, [sp, #16]
 8013902:	2301      	movs	r3, #1
 8013904:	2000      	movs	r0, #0
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	9301      	str	r3, [sp, #4]
 801390a:	9003      	str	r0, [sp, #12]
 801390c:	9005      	str	r0, [sp, #20]
 801390e:	f8cd a008 	str.w	sl, [sp, #8]
 8013912:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013914:	4641      	mov	r1, r8
 8013916:	f7fb fd37 	bl	800f388 <LCD_DrawBitmap>
 801391a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801391c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801391e:	f108 0901 	add.w	r9, r8, #1
 8013922:	fa02 f083 	sxtah	r0, r2, r3
 8013926:	4548      	cmp	r0, r9
 8013928:	d02c      	beq.n	8013984 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 801392a:	46c8      	mov	r8, r9
 801392c:	2c02      	cmp	r4, #2
 801392e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013930:	d0d2      	beq.n	80138d8 <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 8013932:	2c04      	cmp	r4, #4
 8013934:	d012      	beq.n	801395c <GUI_MEMDEV__WriteToActiveOpaque+0x6d8>
 8013936:	2c01      	cmp	r4, #1
 8013938:	d1e0      	bne.n	80138fc <GUI_MEMDEV__WriteToActiveOpaque+0x678>
 801393a:	4683      	mov	fp, r0
 801393c:	4681      	mov	r9, r0
 801393e:	462a      	mov	r2, r5
 8013940:	f832 0b02 	ldrh.w	r0, [r2], #2
 8013944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013946:	9209      	str	r2, [sp, #36]	; 0x24
 8013948:	4798      	blx	r3
 801394a:	47b8      	blx	r7
 801394c:	f809 0b01 	strb.w	r0, [r9], #1
 8013950:	eb0b 0106 	add.w	r1, fp, r6
 8013954:	4589      	cmp	r9, r1
 8013956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013958:	d1f2      	bne.n	8013940 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 801395a:	e00f      	b.n	801397c <GUI_MEMDEV__WriteToActiveOpaque+0x6f8>
 801395c:	4683      	mov	fp, r0
 801395e:	4629      	mov	r1, r5
 8013960:	46b1      	mov	r9, r6
 8013962:	f831 0b02 	ldrh.w	r0, [r1], #2
 8013966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013968:	9109      	str	r1, [sp, #36]	; 0x24
 801396a:	4798      	blx	r3
 801396c:	47b8      	blx	r7
 801396e:	f1b9 0901 	subs.w	r9, r9, #1
 8013972:	f84b 0b04 	str.w	r0, [fp], #4
 8013976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013978:	d1f3      	bne.n	8013962 <GUI_MEMDEV__WriteToActiveOpaque+0x6de>
 801397a:	e7bc      	b.n	80138f6 <GUI_MEMDEV__WriteToActiveOpaque+0x672>
 801397c:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8013980:	2600      	movs	r6, #0
 8013982:	e7bb      	b.n	80138fc <GUI_MEMDEV__WriteToActiveOpaque+0x678>
 8013984:	a817      	add	r0, sp, #92	; 0x5c
 8013986:	f7fd ffb7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 801398a:	a819      	add	r0, sp, #100	; 0x64
 801398c:	f7fd ffb4 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013990:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013992:	f7fd ffdd 	bl	8011950 <GUI_ALLOC_Free>
 8013996:	b01d      	add	sp, #116	; 0x74
 8013998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801399c <GUI_MEMDEV__WriteToActiveAlpha>:
 801399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a0:	b093      	sub	sp, #76	; 0x4c
 80139a2:	460e      	mov	r6, r1
 80139a4:	4615      	mov	r5, r2
 80139a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80139a8:	f7fd ff98 	bl	80118dc <GUI_ALLOC_LockH>
 80139ac:	4603      	mov	r3, r0
 80139ae:	a812      	add	r0, sp, #72	; 0x48
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	8919      	ldrh	r1, [r3, #8]
 80139b4:	6914      	ldr	r4, [r2, #16]
 80139b6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80139ba:	895f      	ldrh	r7, [r3, #10]
 80139bc:	6863      	ldr	r3, [r4, #4]
 80139be:	4c58      	ldr	r4, [pc, #352]	; (8013b20 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 80139c0:	910a      	str	r1, [sp, #40]	; 0x28
 80139c2:	930c      	str	r3, [sp, #48]	; 0x30
 80139c4:	f7fd ff98 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80139c8:	6820      	ldr	r0, [r4, #0]
 80139ca:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8013b28 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>
 80139ce:	7c41      	ldrb	r1, [r0, #17]
 80139d0:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 80139d4:	68c2      	ldr	r2, [r0, #12]
 80139d6:	2108      	movs	r1, #8
 80139d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80139da:	4798      	blx	r3
 80139dc:	2817      	cmp	r0, #23
 80139de:	bf88      	it	hi
 80139e0:	2020      	movhi	r0, #32
 80139e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80139e4:	6820      	ldr	r0, [r4, #0]
 80139e6:	7c41      	ldrb	r1, [r0, #17]
 80139e8:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 80139ec:	6913      	ldr	r3, [r2, #16]
 80139ee:	6858      	ldr	r0, [r3, #4]
 80139f0:	6819      	ldr	r1, [r3, #0]
 80139f2:	900d      	str	r0, [sp, #52]	; 0x34
 80139f4:	2000      	movs	r0, #0
 80139f6:	9309      	str	r3, [sp, #36]	; 0x24
 80139f8:	910e      	str	r1, [sp, #56]	; 0x38
 80139fa:	f7fc fb5f 	bl	80100bc <GUI__AllocAlphaBuffer>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	f040 808a 	bne.w	8013b18 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 8013a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a06:	6823      	ldr	r3, [r4, #0]
 8013a08:	fa0f f882 	sxth.w	r8, r2
 8013a0c:	eb06 0408 	add.w	r4, r6, r8
 8013a10:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013a14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013a18:	1e60      	subs	r0, r4, #1
 8013a1a:	1a84      	subs	r4, r0, r2
 8013a1c:	2c00      	cmp	r4, #0
 8013a1e:	bfcc      	ite	gt
 8013a20:	ebc4 0408 	rsbgt	r4, r4, r8
 8013a24:	4644      	movle	r4, r8
 8013a26:	42b1      	cmp	r1, r6
 8013a28:	bfc3      	ittte	gt
 8013a2a:	ebc6 0201 	rsbgt	r2, r6, r1
 8013a2e:	ebc2 0404 	rsbgt	r4, r2, r4
 8013a32:	460e      	movgt	r6, r1
 8013a34:	2200      	movle	r2, #0
 8013a36:	2c00      	cmp	r4, #0
 8013a38:	dd6e      	ble.n	8013b18 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 8013a3a:	b23f      	sxth	r7, r7
 8013a3c:	19e8      	adds	r0, r5, r7
 8013a3e:	1e41      	subs	r1, r0, #1
 8013a40:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8013a44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013a48:	1a09      	subs	r1, r1, r0
 8013a4a:	2900      	cmp	r1, #0
 8013a4c:	bfc8      	it	gt
 8013a4e:	ebc1 0707 	rsbgt	r7, r1, r7
 8013a52:	429d      	cmp	r5, r3
 8013a54:	bfbd      	ittte	lt
 8013a56:	ebc5 0b03 	rsblt	fp, r5, r3
 8013a5a:	ebcb 0707 	rsblt	r7, fp, r7
 8013a5e:	461d      	movlt	r5, r3
 8013a60:	f04f 0b00 	movge.w	fp, #0
 8013a64:	2f00      	cmp	r7, #0
 8013a66:	dd57      	ble.n	8013b18 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 8013a68:	fb08 2b0b 	mla	fp, r8, fp, r2
 8013a6c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8013a70:	46a9      	mov	r9, r5
 8013a72:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013a74:	f7f9 fa6e 	bl	800cf54 <GUI_MEMDEV_GetDataPtr>
 8013a78:	eb00 020b 	add.w	r2, r0, fp
 8013a7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013a7e:	a911      	add	r1, sp, #68	; 0x44
 8013a80:	9000      	str	r0, [sp, #0]
 8013a82:	9101      	str	r1, [sp, #4]
 8013a84:	4630      	mov	r0, r6
 8013a86:	4649      	mov	r1, r9
 8013a88:	4623      	mov	r3, r4
 8013a8a:	f7fc fa31 	bl	800fef0 <GUI__DoAlphaBlending>
 8013a8e:	4682      	mov	sl, r0
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d041      	beq.n	8013b18 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 8013a94:	4a23      	ldr	r2, [pc, #140]	; (8013b24 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8013a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d01f      	beq.n	8013adc <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8013a9c:	4621      	mov	r1, r4
 8013a9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aa2:	f001 fbf4 	bl	801528e <GUI__CompactPixelIndicesEx>
 8013aa6:	b9c8      	cbnz	r0, 8013adc <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8013aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aaa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013aae:	f1bc 0f00 	cmp.w	ip, #0
 8013ab2:	d006      	beq.n	8013ac2 <GUI_MEMDEV__WriteToActiveAlpha+0x126>
 8013ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ab6:	4650      	mov	r0, sl
 8013ab8:	4651      	mov	r1, sl
 8013aba:	b212      	sxth	r2, r2
 8013abc:	2304      	movs	r3, #4
 8013abe:	47e0      	blx	ip
 8013ac0:	e00c      	b.n	8013adc <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8013ac2:	4652      	mov	r2, sl
 8013ac4:	4641      	mov	r1, r8
 8013ac6:	6810      	ldr	r0, [r2, #0]
 8013ac8:	9207      	str	r2, [sp, #28]
 8013aca:	9108      	str	r1, [sp, #32]
 8013acc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013ace:	4788      	blx	r1
 8013ad0:	9b08      	ldr	r3, [sp, #32]
 8013ad2:	9a07      	ldr	r2, [sp, #28]
 8013ad4:	1e59      	subs	r1, r3, #1
 8013ad6:	f842 0b04 	str.w	r0, [r2], #4
 8013ada:	d1f4      	bne.n	8013ac6 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8013adc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013ade:	f8cd a010 	str.w	sl, [sp, #16]
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	f109 0e01 	add.w	lr, r9, #1
 8013aea:	9300      	str	r3, [sp, #0]
 8013aec:	9301      	str	r3, [sp, #4]
 8013aee:	9002      	str	r0, [sp, #8]
 8013af0:	9103      	str	r1, [sp, #12]
 8013af2:	9105      	str	r1, [sp, #20]
 8013af4:	4630      	mov	r0, r6
 8013af6:	4622      	mov	r2, r4
 8013af8:	4649      	mov	r1, r9
 8013afa:	f8cd e020 	str.w	lr, [sp, #32]
 8013afe:	f7fb fc43 	bl	800f388 <LCD_DrawBitmap>
 8013b02:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b08:	1978      	adds	r0, r7, r5
 8013b0a:	2304      	movs	r3, #4
 8013b0c:	4560      	cmp	r0, ip
 8013b0e:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8013b12:	d001      	beq.n	8013b18 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 8013b14:	46e1      	mov	r9, ip
 8013b16:	e7ac      	b.n	8013a72 <GUI_MEMDEV__WriteToActiveAlpha+0xd6>
 8013b18:	b013      	add	sp, #76	; 0x4c
 8013b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b1e:	bf00      	nop
 8013b20:	2000027c 	.word	0x2000027c
 8013b24:	08011ea7 	.word	0x08011ea7
 8013b28:	20017a04 	.word	0x20017a04

08013b2c <GUI_MEMDEV_WriteAt>:
 8013b2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013b2e:	460c      	mov	r4, r1
 8013b30:	4615      	mov	r5, r2
 8013b32:	4606      	mov	r6, r0
 8013b34:	b330      	cbz	r0, 8013b84 <GUI_MEMDEV_WriteAt+0x58>
 8013b36:	f7fd fed1 	bl	80118dc <GUI_ALLOC_LockH>
 8013b3a:	4a13      	ldr	r2, [pc, #76]	; (8013b88 <GUI_MEMDEV_WriteAt+0x5c>)
 8013b3c:	8901      	ldrh	r1, [r0, #8]
 8013b3e:	9001      	str	r0, [sp, #4]
 8013b40:	4294      	cmp	r4, r2
 8013b42:	bf04      	itt	eq
 8013b44:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 8013b48:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8013b4c:	8940      	ldrh	r0, [r0, #10]
 8013b4e:	f8ad 4008 	strh.w	r4, [sp, #8]
 8013b52:	1e4b      	subs	r3, r1, #1
 8013b54:	1e41      	subs	r1, r0, #1
 8013b56:	191a      	adds	r2, r3, r4
 8013b58:	a801      	add	r0, sp, #4
 8013b5a:	194b      	adds	r3, r1, r5
 8013b5c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013b60:	f8ad 500a 	strh.w	r5, [sp, #10]
 8013b64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013b68:	f7fd fec6 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013b6c:	a802      	add	r0, sp, #8
 8013b6e:	f7f8 fe39 	bl	800c7e4 <WM__InitIVRSearch>
 8013b72:	b138      	cbz	r0, 8013b84 <GUI_MEMDEV_WriteAt+0x58>
 8013b74:	4630      	mov	r0, r6
 8013b76:	4621      	mov	r1, r4
 8013b78:	462a      	mov	r2, r5
 8013b7a:	f7f9 ff85 	bl	800da88 <GUI_MEMDEV__WriteToActiveAt>
 8013b7e:	f7f8 fd71 	bl	800c664 <WM__GetNextIVR>
 8013b82:	e7f6      	b.n	8013b72 <GUI_MEMDEV_WriteAt+0x46>
 8013b84:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8013b86:	bf00      	nop
 8013b88:	fffff001 	.word	0xfffff001

08013b8c <GUI_MEMDEV_Write>:
 8013b8c:	4901      	ldr	r1, [pc, #4]	; (8013b94 <GUI_MEMDEV_Write+0x8>)
 8013b8e:	460a      	mov	r2, r1
 8013b90:	f7ff bfcc 	b.w	8013b2c <GUI_MEMDEV_WriteAt>
 8013b94:	fffff001 	.word	0xfffff001

08013b98 <GUI_USAGE_BM_AddPixel>:
 8013b98:	4603      	mov	r3, r0
 8013b9a:	b510      	push	{r4, lr}
 8013b9c:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8013ba0:	1b09      	subs	r1, r1, r4
 8013ba2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8013ba6:	6900      	ldr	r0, [r0, #16]
 8013ba8:	1b12      	subs	r2, r2, r4
 8013baa:	fb00 3302 	mla	r3, r0, r2, r3
 8013bae:	10c8      	asrs	r0, r1, #3
 8013bb0:	2280      	movs	r2, #128	; 0x80
 8013bb2:	f001 0107 	and.w	r1, r1, #7
 8013bb6:	fa42 f101 	asr.w	r1, r2, r1
 8013bba:	5c1a      	ldrb	r2, [r3, r0]
 8013bbc:	4311      	orrs	r1, r2
 8013bbe:	5419      	strb	r1, [r3, r0]
 8013bc0:	bd10      	pop	{r4, pc}

08013bc2 <GUI_USAGE_BM_GetNextDirty>:
 8013bc2:	b570      	push	{r4, r5, r6, lr}
 8013bc4:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8013bc8:	680b      	ldr	r3, [r1, #0]
 8013bca:	8886      	ldrh	r6, [r0, #4]
 8013bcc:	42a2      	cmp	r2, r4
 8013bce:	da43      	bge.n	8013c58 <GUI_USAGE_BM_GetNextDirty+0x96>
 8013bd0:	b236      	sxth	r6, r6
 8013bd2:	42b3      	cmp	r3, r6
 8013bd4:	6905      	ldr	r5, [r0, #16]
 8013bd6:	da3f      	bge.n	8013c58 <GUI_USAGE_BM_GetNextDirty+0x96>
 8013bd8:	3014      	adds	r0, #20
 8013bda:	fb05 0202 	mla	r2, r5, r2, r0
 8013bde:	10dc      	asrs	r4, r3, #3
 8013be0:	1e70      	subs	r0, r6, #1
 8013be2:	1915      	adds	r5, r2, r4
 8013be4:	ebc4 00e0 	rsb	r0, r4, r0, asr #3
 8013be8:	5d14      	ldrb	r4, [r2, r4]
 8013bea:	f003 0207 	and.w	r2, r3, #7
 8013bee:	fa04 f402 	lsl.w	r4, r4, r2
 8013bf2:	b2e4      	uxtb	r4, r4
 8013bf4:	3501      	adds	r5, #1
 8013bf6:	b93c      	cbnz	r4, 8013c08 <GUI_USAGE_BM_GetNextDirty+0x46>
 8013bf8:	b378      	cbz	r0, 8013c5a <GUI_USAGE_BM_GetNextDirty+0x98>
 8013bfa:	3308      	adds	r3, #8
 8013bfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c00:	3801      	subs	r0, #1
 8013c02:	f023 0307 	bic.w	r3, r3, #7
 8013c06:	e7f6      	b.n	8013bf6 <GUI_USAGE_BM_GetNextDirty+0x34>
 8013c08:	0622      	lsls	r2, r4, #24
 8013c0a:	d403      	bmi.n	8013c14 <GUI_USAGE_BM_GetNextDirty+0x52>
 8013c0c:	0062      	lsls	r2, r4, #1
 8013c0e:	b2d4      	uxtb	r4, r2
 8013c10:	3301      	adds	r3, #1
 8013c12:	e7f9      	b.n	8013c08 <GUI_USAGE_BM_GetNextDirty+0x46>
 8013c14:	2cff      	cmp	r4, #255	; 0xff
 8013c16:	d008      	beq.n	8013c2a <GUI_USAGE_BM_GetNextDirty+0x68>
 8013c18:	461a      	mov	r2, r3
 8013c1a:	f004 0640 	and.w	r6, r4, #64	; 0x40
 8013c1e:	b2f6      	uxtb	r6, r6
 8013c20:	b126      	cbz	r6, 8013c2c <GUI_USAGE_BM_GetNextDirty+0x6a>
 8013c22:	0064      	lsls	r4, r4, #1
 8013c24:	b2e4      	uxtb	r4, r4
 8013c26:	3201      	adds	r2, #1
 8013c28:	e7f7      	b.n	8013c1a <GUI_USAGE_BM_GetNextDirty+0x58>
 8013c2a:	1dda      	adds	r2, r3, #7
 8013c2c:	f002 0407 	and.w	r4, r2, #7
 8013c30:	2c07      	cmp	r4, #7
 8013c32:	d10d      	bne.n	8013c50 <GUI_USAGE_BM_GetNextDirty+0x8e>
 8013c34:	3801      	subs	r0, #1
 8013c36:	d40b      	bmi.n	8013c50 <GUI_USAGE_BM_GetNextDirty+0x8e>
 8013c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c3c:	2cff      	cmp	r4, #255	; 0xff
 8013c3e:	d101      	bne.n	8013c44 <GUI_USAGE_BM_GetNextDirty+0x82>
 8013c40:	3208      	adds	r2, #8
 8013c42:	e7f7      	b.n	8013c34 <GUI_USAGE_BM_GetNextDirty+0x72>
 8013c44:	0620      	lsls	r0, r4, #24
 8013c46:	d503      	bpl.n	8013c50 <GUI_USAGE_BM_GetNextDirty+0x8e>
 8013c48:	0060      	lsls	r0, r4, #1
 8013c4a:	b2c4      	uxtb	r4, r0
 8013c4c:	3201      	adds	r2, #1
 8013c4e:	e7f9      	b.n	8013c44 <GUI_USAGE_BM_GetNextDirty+0x82>
 8013c50:	600b      	str	r3, [r1, #0]
 8013c52:	1ad1      	subs	r1, r2, r3
 8013c54:	1c48      	adds	r0, r1, #1
 8013c56:	bd70      	pop	{r4, r5, r6, pc}
 8013c58:	2000      	movs	r0, #0
 8013c5a:	bd70      	pop	{r4, r5, r6, pc}

08013c5c <_GUI_USAGE_BM_Delete>:
 8013c5c:	f7fd be78 	b.w	8011950 <GUI_ALLOC_Free>

08013c60 <GUI_USAGE_BM_Clear>:
 8013c60:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013c64:	6902      	ldr	r2, [r0, #16]
 8013c66:	2100      	movs	r1, #0
 8013c68:	3014      	adds	r0, #20
 8013c6a:	435a      	muls	r2, r3
 8013c6c:	f002 b926 	b.w	8015ebc <memset>

08013c70 <GUI_USAGE_BM_AddHLine>:
 8013c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c72:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013c76:	1b09      	subs	r1, r1, r4
 8013c78:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8013c7c:	42a1      	cmp	r1, r4
 8013c7e:	da2e      	bge.n	8013cde <GUI_USAGE_BM_AddHLine+0x6e>
 8013c80:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8013c84:	f100 0614 	add.w	r6, r0, #20
 8013c88:	18cb      	adds	r3, r1, r3
 8013c8a:	6900      	ldr	r0, [r0, #16]
 8013c8c:	1b52      	subs	r2, r2, r5
 8013c8e:	1e5d      	subs	r5, r3, #1
 8013c90:	fb00 6202 	mla	r2, r0, r2, r6
 8013c94:	10cc      	asrs	r4, r1, #3
 8013c96:	f001 0607 	and.w	r6, r1, #7
 8013c9a:	43eb      	mvns	r3, r5
 8013c9c:	21ff      	movs	r1, #255	; 0xff
 8013c9e:	fa41 f006 	asr.w	r0, r1, r6
 8013ca2:	f003 0607 	and.w	r6, r3, #7
 8013ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8013caa:	ebd4 05e5 	rsbs	r5, r4, r5, asr #3
 8013cae:	b2de      	uxtb	r6, r3
 8013cb0:	eb02 0704 	add.w	r7, r2, r4
 8013cb4:	b2c0      	uxtb	r0, r0
 8013cb6:	5d13      	ldrb	r3, [r2, r4]
 8013cb8:	d103      	bne.n	8013cc2 <GUI_USAGE_BM_AddHLine+0x52>
 8013cba:	4006      	ands	r6, r0
 8013cbc:	4333      	orrs	r3, r6
 8013cbe:	5513      	strb	r3, [r2, r4]
 8013cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cc2:	4318      	orrs	r0, r3
 8013cc4:	3d01      	subs	r5, #1
 8013cc6:	5510      	strb	r0, [r2, r4]
 8013cc8:	1c7c      	adds	r4, r7, #1
 8013cca:	2d00      	cmp	r5, #0
 8013ccc:	dd04      	ble.n	8013cd8 <GUI_USAGE_BM_AddHLine+0x68>
 8013cce:	4620      	mov	r0, r4
 8013cd0:	462a      	mov	r2, r5
 8013cd2:	f002 f8f3 	bl	8015ebc <memset>
 8013cd6:	1964      	adds	r4, r4, r5
 8013cd8:	7821      	ldrb	r1, [r4, #0]
 8013cda:	430e      	orrs	r6, r1
 8013cdc:	7026      	strb	r6, [r4, #0]
 8013cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ce0 <GUI_USAGE_BM_Create>:
 8013ce0:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 8013ce4:	f102 060f 	add.w	r6, r2, #15
 8013ce8:	4682      	mov	sl, r0
 8013cea:	1130      	asrs	r0, r6, #4
 8013cec:	0046      	lsls	r6, r0, #1
 8013cee:	fb06 f003 	mul.w	r0, r6, r3
 8013cf2:	3014      	adds	r0, #20
 8013cf4:	4689      	mov	r9, r1
 8013cf6:	4690      	mov	r8, r2
 8013cf8:	461f      	mov	r7, r3
 8013cfa:	f7fe f863 	bl	8011dc4 <GUI_ALLOC_AllocZero>
 8013cfe:	4683      	mov	fp, r0
 8013d00:	b198      	cbz	r0, 8013d2a <GUI_USAGE_BM_Create+0x4a>
 8013d02:	f7fd fdeb 	bl	80118dc <GUI_ALLOC_LockH>
 8013d06:	4b0a      	ldr	r3, [pc, #40]	; (8013d30 <GUI_USAGE_BM_Create+0x50>)
 8013d08:	4604      	mov	r4, r0
 8013d0a:	a802      	add	r0, sp, #8
 8013d0c:	2101      	movs	r1, #1
 8013d0e:	f840 4d04 	str.w	r4, [r0, #-4]!
 8013d12:	f8a4 8004 	strh.w	r8, [r4, #4]
 8013d16:	f8a4 a000 	strh.w	sl, [r4]
 8013d1a:	f8a4 9002 	strh.w	r9, [r4, #2]
 8013d1e:	80e7      	strh	r7, [r4, #6]
 8013d20:	60a3      	str	r3, [r4, #8]
 8013d22:	81a1      	strh	r1, [r4, #12]
 8013d24:	6126      	str	r6, [r4, #16]
 8013d26:	f7fd fde7 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013d2a:	4658      	mov	r0, fp
 8013d2c:	e8bd 8fdc 	ldmia.w	sp!, {r2, r3, r4, r6, r7, r8, r9, sl, fp, pc}
 8013d30:	0802f8f8 	.word	0x0802f8f8

08013d34 <GUI_USAGE_DecUseCnt>:
 8013d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d36:	4605      	mov	r5, r0
 8013d38:	f7fd fdd0 	bl	80118dc <GUI_ALLOC_LockH>
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	a802      	add	r0, sp, #8
 8013d40:	8994      	ldrh	r4, [r2, #12]
 8013d42:	f840 2d04 	str.w	r2, [r0, #-4]!
 8013d46:	1e61      	subs	r1, r4, #1
 8013d48:	b28c      	uxth	r4, r1
 8013d4a:	8194      	strh	r4, [r2, #12]
 8013d4c:	f7fd fdd4 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013d50:	b914      	cbnz	r4, 8013d58 <GUI_USAGE_DecUseCnt+0x24>
 8013d52:	4628      	mov	r0, r5
 8013d54:	f7fd fdfc 	bl	8011950 <GUI_ALLOC_Free>
 8013d58:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08013d5a <GUI_USAGE_AddRect>:
 8013d5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d5e:	4605      	mov	r5, r0
 8013d60:	4689      	mov	r9, r1
 8013d62:	4614      	mov	r4, r2
 8013d64:	4698      	mov	r8, r3
 8013d66:	68a8      	ldr	r0, [r5, #8]
 8013d68:	4649      	mov	r1, r9
 8013d6a:	6846      	ldr	r6, [r0, #4]
 8013d6c:	4643      	mov	r3, r8
 8013d6e:	4628      	mov	r0, r5
 8013d70:	1c57      	adds	r7, r2, #1
 8013d72:	47b0      	blx	r6
 8013d74:	9908      	ldr	r1, [sp, #32]
 8013d76:	190b      	adds	r3, r1, r4
 8013d78:	42bb      	cmp	r3, r7
 8013d7a:	463a      	mov	r2, r7
 8013d7c:	d1f3      	bne.n	8013d66 <GUI_USAGE_AddRect+0xc>
 8013d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08013d84 <GUI_MEMDEV_ReduceYSize>:
 8013d84:	b513      	push	{r0, r1, r4, lr}
 8013d86:	460c      	mov	r4, r1
 8013d88:	b918      	cbnz	r0, 8013d92 <GUI_MEMDEV_ReduceYSize+0xe>
 8013d8a:	4b08      	ldr	r3, [pc, #32]	; (8013dac <GUI_MEMDEV_ReduceYSize+0x28>)
 8013d8c:	6818      	ldr	r0, [r3, #0]
 8013d8e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8013d90:	b150      	cbz	r0, 8013da8 <GUI_MEMDEV_ReduceYSize+0x24>
 8013d92:	f7fd fda3 	bl	80118dc <GUI_ALLOC_LockH>
 8013d96:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8013d9a:	9001      	str	r0, [sp, #4]
 8013d9c:	428c      	cmp	r4, r1
 8013d9e:	bfb8      	it	lt
 8013da0:	8144      	strhlt	r4, [r0, #10]
 8013da2:	a801      	add	r0, sp, #4
 8013da4:	f7fd fda8 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013da8:	bd1c      	pop	{r2, r3, r4, pc}
 8013daa:	bf00      	nop
 8013dac:	2000027c 	.word	0x2000027c

08013db0 <GUI_MEMDEV_Clear>:
 8013db0:	b513      	push	{r0, r1, r4, lr}
 8013db2:	b918      	cbnz	r0, 8013dbc <GUI_MEMDEV_Clear+0xc>
 8013db4:	4b0d      	ldr	r3, [pc, #52]	; (8013dec <GUI_MEMDEV_Clear+0x3c>)
 8013db6:	6818      	ldr	r0, [r3, #0]
 8013db8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8013dba:	b1a8      	cbz	r0, 8013de8 <GUI_MEMDEV_Clear+0x38>
 8013dbc:	f7fd fd8e 	bl	80118dc <GUI_ALLOC_LockH>
 8013dc0:	a902      	add	r1, sp, #8
 8013dc2:	6944      	ldr	r4, [r0, #20]
 8013dc4:	f841 0d08 	str.w	r0, [r1, #-8]!
 8013dc8:	4668      	mov	r0, sp
 8013dca:	f7fd fd95 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013dce:	b15c      	cbz	r4, 8013de8 <GUI_MEMDEV_Clear+0x38>
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f7fd fd83 	bl	80118dc <GUI_ALLOC_LockH>
 8013dd6:	ac02      	add	r4, sp, #8
 8013dd8:	6883      	ldr	r3, [r0, #8]
 8013dda:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013dde:	6899      	ldr	r1, [r3, #8]
 8013de0:	4788      	blx	r1
 8013de2:	4620      	mov	r0, r4
 8013de4:	f7fd fd88 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013de8:	bd1c      	pop	{r2, r3, r4, pc}
 8013dea:	bf00      	nop
 8013dec:	2000027c 	.word	0x2000027c

08013df0 <_GetDevData>:
 8013df0:	4802      	ldr	r0, [pc, #8]	; (8013dfc <_GetDevData+0xc>)
 8013df2:	2901      	cmp	r1, #1
 8013df4:	bf18      	it	ne
 8013df6:	2000      	movne	r0, #0
 8013df8:	4770      	bx	lr
 8013dfa:	bf00      	nop
 8013dfc:	0802f950 	.word	0x0802f950

08013e00 <_GetDevFunc>:
 8013e00:	4802      	ldr	r0, [pc, #8]	; (8013e0c <_GetDevFunc+0xc>)
 8013e02:	2916      	cmp	r1, #22
 8013e04:	bf18      	it	ne
 8013e06:	2000      	movne	r0, #0
 8013e08:	4770      	bx	lr
 8013e0a:	bf00      	nop
 8013e0c:	08013285 	.word	0x08013285

08013e10 <_SetOrg>:
 8013e10:	6800      	ldr	r0, [r0, #0]
 8013e12:	b508      	push	{r3, lr}
 8013e14:	68c3      	ldr	r3, [r0, #12]
 8013e16:	6a1b      	ldr	r3, [r3, #32]
 8013e18:	4798      	blx	r3
 8013e1a:	bd08      	pop	{r3, pc}

08013e1c <_GetDevProp>:
 8013e1c:	6800      	ldr	r0, [r0, #0]
 8013e1e:	b508      	push	{r3, lr}
 8013e20:	68c3      	ldr	r3, [r0, #12]
 8013e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013e24:	4790      	blx	r2
 8013e26:	bd08      	pop	{r3, pc}

08013e28 <_GetRect>:
 8013e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e2a:	6880      	ldr	r0, [r0, #8]
 8013e2c:	460c      	mov	r4, r1
 8013e2e:	f7fd fd55 	bl	80118dc <GUI_ALLOC_LockH>
 8013e32:	4603      	mov	r3, r0
 8013e34:	a802      	add	r0, sp, #8
 8013e36:	8899      	ldrh	r1, [r3, #4]
 8013e38:	891d      	ldrh	r5, [r3, #8]
 8013e3a:	88da      	ldrh	r2, [r3, #6]
 8013e3c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8013e40:	895b      	ldrh	r3, [r3, #10]
 8013e42:	8021      	strh	r1, [r4, #0]
 8013e44:	1949      	adds	r1, r1, r5
 8013e46:	3901      	subs	r1, #1
 8013e48:	8062      	strh	r2, [r4, #2]
 8013e4a:	18d2      	adds	r2, r2, r3
 8013e4c:	80a1      	strh	r1, [r4, #4]
 8013e4e:	1e51      	subs	r1, r2, #1
 8013e50:	80e1      	strh	r1, [r4, #6]
 8013e52:	f7fd fd51 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013e56:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08013e58 <_XY2PTR>:
 8013e58:	4b0e      	ldr	r3, [pc, #56]	; (8013e94 <_XY2PTR+0x3c>)
 8013e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e5c:	4605      	mov	r5, r0
 8013e5e:	6818      	ldr	r0, [r3, #0]
 8013e60:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8013e62:	460e      	mov	r6, r1
 8013e64:	f7fd fd3a 	bl	80118dc <GUI_ALLOC_LockH>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	a802      	add	r0, sp, #8
 8013e6c:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8013e70:	68d3      	ldr	r3, [r2, #12]
 8013e72:	f840 2d04 	str.w	r2, [r0, #-4]!
 8013e76:	f102 0118 	add.w	r1, r2, #24
 8013e7a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8013e7e:	1b36      	subs	r6, r6, r4
 8013e80:	fb03 1106 	mla	r1, r3, r6, r1
 8013e84:	1aad      	subs	r5, r5, r2
 8013e86:	eb01 0445 	add.w	r4, r1, r5, lsl #1
 8013e8a:	f7fd fd35 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013e8e:	4620      	mov	r0, r4
 8013e90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8013e92:	bf00      	nop
 8013e94:	2000027c 	.word	0x2000027c

08013e98 <_GetPixelIndex>:
 8013e98:	b508      	push	{r3, lr}
 8013e9a:	4608      	mov	r0, r1
 8013e9c:	4611      	mov	r1, r2
 8013e9e:	f7ff ffdb 	bl	8013e58 <_XY2PTR>
 8013ea2:	8800      	ldrh	r0, [r0, #0]
 8013ea4:	bd08      	pop	{r3, pc}
	...

08013ea8 <_XorPixel>:
 8013ea8:	4b14      	ldr	r3, [pc, #80]	; (8013efc <_XorPixel+0x54>)
 8013eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013eac:	4607      	mov	r7, r0
 8013eae:	6818      	ldr	r0, [r3, #0]
 8013eb0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8013eb2:	4615      	mov	r5, r2
 8013eb4:	460e      	mov	r6, r1
 8013eb6:	f7fd fd11 	bl	80118dc <GUI_ALLOC_LockH>
 8013eba:	4629      	mov	r1, r5
 8013ebc:	9000      	str	r0, [sp, #0]
 8013ebe:	4630      	mov	r0, r6
 8013ec0:	f7ff ffca 	bl	8013e58 <_XY2PTR>
 8013ec4:	6939      	ldr	r1, [r7, #16]
 8013ec6:	4604      	mov	r4, r0
 8013ec8:	688a      	ldr	r2, [r1, #8]
 8013eca:	4790      	blx	r2
 8013ecc:	8823      	ldrh	r3, [r4, #0]
 8013ece:	4058      	eors	r0, r3
 8013ed0:	8020      	strh	r0, [r4, #0]
 8013ed2:	9800      	ldr	r0, [sp, #0]
 8013ed4:	6940      	ldr	r0, [r0, #20]
 8013ed6:	b160      	cbz	r0, 8013ef2 <_XorPixel+0x4a>
 8013ed8:	f7fd fd00 	bl	80118dc <GUI_ALLOC_LockH>
 8013edc:	ac02      	add	r4, sp, #8
 8013ede:	6882      	ldr	r2, [r0, #8]
 8013ee0:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013ee4:	6813      	ldr	r3, [r2, #0]
 8013ee6:	4631      	mov	r1, r6
 8013ee8:	462a      	mov	r2, r5
 8013eea:	4798      	blx	r3
 8013eec:	4620      	mov	r0, r4
 8013eee:	f7fd fd03 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013ef2:	4668      	mov	r0, sp
 8013ef4:	f7fd fd00 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013efa:	bf00      	nop
 8013efc:	2000027c 	.word	0x2000027c

08013f00 <_SetPixelIndex>:
 8013f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f02:	461c      	mov	r4, r3
 8013f04:	4b10      	ldr	r3, [pc, #64]	; (8013f48 <_SetPixelIndex+0x48>)
 8013f06:	6818      	ldr	r0, [r3, #0]
 8013f08:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8013f0a:	460e      	mov	r6, r1
 8013f0c:	4615      	mov	r5, r2
 8013f0e:	f7fd fce5 	bl	80118dc <GUI_ALLOC_LockH>
 8013f12:	4629      	mov	r1, r5
 8013f14:	9000      	str	r0, [sp, #0]
 8013f16:	4630      	mov	r0, r6
 8013f18:	f7ff ff9e 	bl	8013e58 <_XY2PTR>
 8013f1c:	9900      	ldr	r1, [sp, #0]
 8013f1e:	8004      	strh	r4, [r0, #0]
 8013f20:	6948      	ldr	r0, [r1, #20]
 8013f22:	b160      	cbz	r0, 8013f3e <_SetPixelIndex+0x3e>
 8013f24:	f7fd fcda 	bl	80118dc <GUI_ALLOC_LockH>
 8013f28:	ac02      	add	r4, sp, #8
 8013f2a:	6883      	ldr	r3, [r0, #8]
 8013f2c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	4631      	mov	r1, r6
 8013f34:	462a      	mov	r2, r5
 8013f36:	4798      	blx	r3
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f7fd fcdd 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013f3e:	4668      	mov	r0, sp
 8013f40:	f7fd fcda 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013f44:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8013f46:	bf00      	nop
 8013f48:	2000027c 	.word	0x2000027c

08013f4c <_DrawVLine>:
 8013f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f50:	461e      	mov	r6, r3
 8013f52:	4b2b      	ldr	r3, [pc, #172]	; (8014000 <_DrawVLine+0xb4>)
 8013f54:	4681      	mov	r9, r0
 8013f56:	6818      	ldr	r0, [r3, #0]
 8013f58:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8013f5a:	460f      	mov	r7, r1
 8013f5c:	4614      	mov	r4, r2
 8013f5e:	f7fd fcbd 	bl	80118dc <GUI_ALLOC_LockH>
 8013f62:	9000      	str	r0, [sp, #0]
 8013f64:	6940      	ldr	r0, [r0, #20]
 8013f66:	b108      	cbz	r0, 8013f6c <_DrawVLine+0x20>
 8013f68:	f7fd fcb8 	bl	80118dc <GUI_ALLOC_LockH>
 8013f6c:	9001      	str	r0, [sp, #4]
 8013f6e:	4621      	mov	r1, r4
 8013f70:	4638      	mov	r0, r7
 8013f72:	f7ff ff71 	bl	8013e58 <_XY2PTR>
 8013f76:	4a22      	ldr	r2, [pc, #136]	; (8014000 <_DrawVLine+0xb4>)
 8013f78:	9900      	ldr	r1, [sp, #0]
 8013f7a:	6813      	ldr	r3, [r2, #0]
 8013f7c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8013f80:	4605      	mov	r5, r0
 8013f82:	7c18      	ldrb	r0, [r3, #16]
 8013f84:	07c2      	lsls	r2, r0, #31
 8013f86:	d51f      	bpl.n	8013fc8 <_DrawVLine+0x7c>
 8013f88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013f8c:	6881      	ldr	r1, [r0, #8]
 8013f8e:	4788      	blx	r1
 8013f90:	fa1f f880 	uxth.w	r8, r0
 8013f94:	9801      	ldr	r0, [sp, #4]
 8013f96:	b120      	cbz	r0, 8013fa2 <_DrawVLine+0x56>
 8013f98:	6882      	ldr	r2, [r0, #8]
 8013f9a:	4639      	mov	r1, r7
 8013f9c:	6813      	ldr	r3, [r2, #0]
 8013f9e:	4622      	mov	r2, r4
 8013fa0:	4798      	blx	r3
 8013fa2:	9a00      	ldr	r2, [sp, #0]
 8013fa4:	8828      	ldrh	r0, [r5, #0]
 8013fa6:	68d3      	ldr	r3, [r2, #12]
 8013fa8:	3401      	adds	r4, #1
 8013faa:	ea88 0100 	eor.w	r1, r8, r0
 8013fae:	42b4      	cmp	r4, r6
 8013fb0:	8029      	strh	r1, [r5, #0]
 8013fb2:	441d      	add	r5, r3
 8013fb4:	ddee      	ble.n	8013f94 <_DrawVLine+0x48>
 8013fb6:	4668      	mov	r0, sp
 8013fb8:	f7fd fc9e 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013fbc:	9801      	ldr	r0, [sp, #4]
 8013fbe:	b1e8      	cbz	r0, 8013ffc <_DrawVLine+0xb0>
 8013fc0:	a801      	add	r0, sp, #4
 8013fc2:	f7fd fc99 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8013fc6:	e019      	b.n	8013ffc <_DrawVLine+0xb0>
 8013fc8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013fca:	9a01      	ldr	r2, [sp, #4]
 8013fcc:	f8d1 9000 	ldr.w	r9, [r1]
 8013fd0:	b162      	cbz	r2, 8013fec <_DrawVLine+0xa0>
 8013fd2:	9801      	ldr	r0, [sp, #4]
 8013fd4:	6883      	ldr	r3, [r0, #8]
 8013fd6:	4622      	mov	r2, r4
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	4639      	mov	r1, r7
 8013fdc:	3401      	adds	r4, #1
 8013fde:	4798      	blx	r3
 8013fe0:	42b4      	cmp	r4, r6
 8013fe2:	f8a5 9000 	strh.w	r9, [r5]
 8013fe6:	4445      	add	r5, r8
 8013fe8:	ddf3      	ble.n	8013fd2 <_DrawVLine+0x86>
 8013fea:	e7e4      	b.n	8013fb6 <_DrawVLine+0x6a>
 8013fec:	1b34      	subs	r4, r6, r4
 8013fee:	3401      	adds	r4, #1
 8013ff0:	3c01      	subs	r4, #1
 8013ff2:	f8a5 9000 	strh.w	r9, [r5]
 8013ff6:	4445      	add	r5, r8
 8013ff8:	d1fa      	bne.n	8013ff0 <_DrawVLine+0xa4>
 8013ffa:	e7dc      	b.n	8013fb6 <_DrawVLine+0x6a>
 8013ffc:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8014000:	2000027c 	.word	0x2000027c

08014004 <_FillRect>:
 8014004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014008:	461e      	mov	r6, r3
 801400a:	4b29      	ldr	r3, [pc, #164]	; (80140b0 <_FillRect+0xac>)
 801400c:	4614      	mov	r4, r2
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	460f      	mov	r7, r1
 8014012:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8014014:	b085      	sub	sp, #20
 8014016:	4683      	mov	fp, r0
 8014018:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801401a:	f8d1 9000 	ldr.w	r9, [r1]
 801401e:	f7fd fc5d 	bl	80118dc <GUI_ALLOC_LockH>
 8014022:	4621      	mov	r1, r4
 8014024:	9002      	str	r0, [sp, #8]
 8014026:	4638      	mov	r0, r7
 8014028:	f7ff ff16 	bl	8013e58 <_XY2PTR>
 801402c:	4605      	mov	r5, r0
 801402e:	9802      	ldr	r0, [sp, #8]
 8014030:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8014034:	6940      	ldr	r0, [r0, #20]
 8014036:	1bf6      	subs	r6, r6, r7
 8014038:	3601      	adds	r6, #1
 801403a:	b338      	cbz	r0, 801408c <_FillRect+0x88>
 801403c:	f7fd fc4e 	bl	80118dc <GUI_ALLOC_LockH>
 8014040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014042:	f10d 0810 	add.w	r8, sp, #16
 8014046:	1b1a      	subs	r2, r3, r4
 8014048:	f848 0d04 	str.w	r0, [r8, #-4]!
 801404c:	1c51      	adds	r1, r2, #1
 801404e:	9100      	str	r1, [sp, #0]
 8014050:	4622      	mov	r2, r4
 8014052:	4639      	mov	r1, r7
 8014054:	4633      	mov	r3, r6
 8014056:	f7ff fe80 	bl	8013d5a <GUI_USAGE_AddRect>
 801405a:	4640      	mov	r0, r8
 801405c:	f7fd fc4c 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8014060:	e014      	b.n	801408c <_FillRect+0x88>
 8014062:	4b13      	ldr	r3, [pc, #76]	; (80140b0 <_FillRect+0xac>)
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	7c11      	ldrb	r1, [r2, #16]
 8014068:	07c9      	lsls	r1, r1, #31
 801406a:	d513      	bpl.n	8014094 <_FillRect+0x90>
 801406c:	f8db 0010 	ldr.w	r0, [fp, #16]
 8014070:	6883      	ldr	r3, [r0, #8]
 8014072:	4798      	blx	r3
 8014074:	462a      	mov	r2, r5
 8014076:	b280      	uxth	r0, r0
 8014078:	4633      	mov	r3, r6
 801407a:	8811      	ldrh	r1, [r2, #0]
 801407c:	3b01      	subs	r3, #1
 801407e:	ea81 0100 	eor.w	r1, r1, r0
 8014082:	f822 1b02 	strh.w	r1, [r2], #2
 8014086:	d1f8      	bne.n	801407a <_FillRect+0x76>
 8014088:	4455      	add	r5, sl
 801408a:	3401      	adds	r4, #1
 801408c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801408e:	4284      	cmp	r4, r0
 8014090:	dde7      	ble.n	8014062 <_FillRect+0x5e>
 8014092:	e006      	b.n	80140a2 <_FillRect+0x9e>
 8014094:	4628      	mov	r0, r5
 8014096:	fa1f f189 	uxth.w	r1, r9
 801409a:	4632      	mov	r2, r6
 801409c:	f7fb fb4f 	bl	800f73e <GUI__memset16>
 80140a0:	e7f2      	b.n	8014088 <_FillRect+0x84>
 80140a2:	a802      	add	r0, sp, #8
 80140a4:	f7fd fc28 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80140a8:	b005      	add	sp, #20
 80140aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ae:	bf00      	nop
 80140b0:	2000027c 	.word	0x2000027c

080140b4 <_DrawHLine>:
 80140b4:	b507      	push	{r0, r1, r2, lr}
 80140b6:	9200      	str	r2, [sp, #0]
 80140b8:	f7ff ffa4 	bl	8014004 <_FillRect>
 80140bc:	bd0e      	pop	{r1, r2, r3, pc}
	...

080140c0 <_DrawBitmap>:
 80140c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140c4:	469b      	mov	fp, r3
 80140c6:	b095      	sub	sp, #84	; 0x54
 80140c8:	4b8c      	ldr	r3, [pc, #560]	; (80142fc <_DrawBitmap+0x23c>)
 80140ca:	900e      	str	r0, [sp, #56]	; 0x38
 80140cc:	6818      	ldr	r0, [r3, #0]
 80140ce:	920a      	str	r2, [sp, #40]	; 0x28
 80140d0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80140d2:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80140d6:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80140d8:	460c      	mov	r4, r1
 80140da:	f7fd fbff 	bl	80118dc <GUI_ALLOC_LockH>
 80140de:	9012      	str	r0, [sp, #72]	; 0x48
 80140e0:	6940      	ldr	r0, [r0, #20]
 80140e2:	b108      	cbz	r0, 80140e8 <_DrawBitmap+0x28>
 80140e4:	f7fd fbfa 	bl	80118dc <GUI_ALLOC_LockH>
 80140e8:	9013      	str	r0, [sp, #76]	; 0x4c
 80140ea:	a814      	add	r0, sp, #80	; 0x50
 80140ec:	f850 1d08 	ldr.w	r1, [r0, #-8]!
 80140f0:	68ca      	ldr	r2, [r1, #12]
 80140f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80140f4:	f7fd fc00 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80140f8:	9f22      	ldr	r7, [sp, #136]	; 0x88
 80140fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80140fc:	19e4      	adds	r4, r4, r7
 80140fe:	9406      	str	r4, [sp, #24]
 8014100:	b158      	cbz	r0, 801411a <_DrawBitmap+0x5a>
 8014102:	4b7e      	ldr	r3, [pc, #504]	; (80142fc <_DrawBitmap+0x23c>)
 8014104:	6819      	ldr	r1, [r3, #0]
 8014106:	7c0a      	ldrb	r2, [r1, #16]
 8014108:	0797      	lsls	r7, r2, #30
 801410a:	d106      	bne.n	801411a <_DrawBitmap+0x5a>
 801410c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801410e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014110:	9700      	str	r7, [sp, #0]
 8014112:	4621      	mov	r1, r4
 8014114:	465b      	mov	r3, fp
 8014116:	f7ff fe20 	bl	8013d5a <GUI_USAGE_AddRect>
 801411a:	9806      	ldr	r0, [sp, #24]
 801411c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801411e:	f7ff fe9b 	bl	8013e58 <_XY2PTR>
 8014122:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014124:	2b10      	cmp	r3, #16
 8014126:	4604      	mov	r4, r0
 8014128:	d139      	bne.n	801419e <_DrawBitmap+0xde>
 801412a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801412c:	b11e      	cbz	r6, 8014136 <_DrawBitmap+0x76>
 801412e:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8014132:	2500      	movs	r5, #0
 8014134:	e014      	b.n	8014160 <_DrawBitmap+0xa0>
 8014136:	4972      	ldr	r1, [pc, #456]	; (8014300 <_DrawBitmap+0x240>)
 8014138:	680d      	ldr	r5, [r1, #0]
 801413a:	2d00      	cmp	r5, #0
 801413c:	d0f7      	beq.n	801412e <_DrawBitmap+0x6e>
 801413e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014140:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8014142:	9600      	str	r6, [sp, #0]
 8014144:	9701      	str	r7, [sp, #4]
 8014146:	4651      	mov	r1, sl
 8014148:	465a      	mov	r2, fp
 801414a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801414c:	47a8      	blx	r5
 801414e:	e353      	b.n	80147f8 <_DrawBitmap+0x738>
 8014150:	f1ba 0f00 	cmp.w	sl, #0
 8014154:	d10a      	bne.n	801416c <_DrawBitmap+0xac>
 8014156:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801415a:	4492      	add	sl, r2
 801415c:	1864      	adds	r4, r4, r1
 801415e:	3501      	adds	r5, #1
 8014160:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8014162:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8014166:	42bd      	cmp	r5, r7
 8014168:	dbf2      	blt.n	8014150 <_DrawBitmap+0x90>
 801416a:	e013      	b.n	8014194 <_DrawBitmap+0xd4>
 801416c:	2c00      	cmp	r4, #0
 801416e:	d0f2      	beq.n	8014156 <_DrawBitmap+0x96>
 8014170:	4620      	mov	r0, r4
 8014172:	4651      	mov	r1, sl
 8014174:	4632      	mov	r2, r6
 8014176:	f7ec f807 	bl	8000188 <memcpy>
 801417a:	f1b8 0f00 	cmp.w	r8, #0
 801417e:	d0ea      	beq.n	8014156 <_DrawBitmap+0x96>
 8014180:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014186:	6847      	ldr	r7, [r0, #4]
 8014188:	9906      	ldr	r1, [sp, #24]
 801418a:	18ea      	adds	r2, r5, r3
 801418c:	4640      	mov	r0, r8
 801418e:	465b      	mov	r3, fp
 8014190:	47b8      	blx	r7
 8014192:	e7e0      	b.n	8014156 <_DrawBitmap+0x96>
 8014194:	f1b8 0f00 	cmp.w	r8, #0
 8014198:	f040 832b 	bne.w	80147f2 <_DrawBitmap+0x732>
 801419c:	e32c      	b.n	80147f8 <_DrawBitmap+0x738>
 801419e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80141a0:	2817      	cmp	r0, #23
 80141a2:	dd39      	ble.n	8014218 <_DrawBitmap+0x158>
 80141a4:	2600      	movs	r6, #0
 80141a6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80141a8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80141aa:	42be      	cmp	r6, r7
 80141ac:	f280 80a1 	bge.w	80142f2 <_DrawBitmap+0x232>
 80141b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80141b2:	eb06 0907 	add.w	r9, r6, r7
 80141b6:	f1ba 0f00 	cmp.w	sl, #0
 80141ba:	d027      	beq.n	801420c <_DrawBitmap+0x14c>
 80141bc:	b334      	cbz	r4, 801420c <_DrawBitmap+0x14c>
 80141be:	b135      	cbz	r5, 80141ce <_DrawBitmap+0x10e>
 80141c0:	68aa      	ldr	r2, [r5, #8]
 80141c2:	9906      	ldr	r1, [sp, #24]
 80141c4:	6857      	ldr	r7, [r2, #4]
 80141c6:	4628      	mov	r0, r5
 80141c8:	464a      	mov	r2, r9
 80141ca:	465b      	mov	r3, fp
 80141cc:	47b8      	blx	r7
 80141ce:	1ea3      	subs	r3, r4, #2
 80141d0:	f10a 0804 	add.w	r8, sl, #4
 80141d4:	9307      	str	r3, [sp, #28]
 80141d6:	465f      	mov	r7, fp
 80141d8:	9806      	ldr	r0, [sp, #24]
 80141da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80141dc:	eb00 010b 	add.w	r1, r0, fp
 80141e0:	6913      	ldr	r3, [r2, #16]
 80141e2:	f858 0c04 	ldr.w	r0, [r8, #-4]
 80141e6:	681a      	ldr	r2, [r3, #0]
 80141e8:	1bc9      	subs	r1, r1, r7
 80141ea:	9105      	str	r1, [sp, #20]
 80141ec:	4790      	blx	r2
 80141ee:	9907      	ldr	r1, [sp, #28]
 80141f0:	f821 0f02 	strh.w	r0, [r1, #2]!
 80141f4:	9107      	str	r1, [sp, #28]
 80141f6:	9905      	ldr	r1, [sp, #20]
 80141f8:	b125      	cbz	r5, 8014204 <_DrawBitmap+0x144>
 80141fa:	68a8      	ldr	r0, [r5, #8]
 80141fc:	464a      	mov	r2, r9
 80141fe:	6803      	ldr	r3, [r0, #0]
 8014200:	4628      	mov	r0, r5
 8014202:	4798      	blx	r3
 8014204:	3f01      	subs	r7, #1
 8014206:	f108 0804 	add.w	r8, r8, #4
 801420a:	d1e5      	bne.n	80141d8 <_DrawBitmap+0x118>
 801420c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801420e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014210:	44aa      	add	sl, r5
 8014212:	18a4      	adds	r4, r4, r2
 8014214:	3601      	adds	r6, #1
 8014216:	e7c6      	b.n	80141a6 <_DrawBitmap+0xe6>
 8014218:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801421a:	2908      	cmp	r1, #8
 801421c:	d172      	bne.n	8014304 <_DrawBitmap+0x244>
 801421e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014220:	3402      	adds	r4, #2
 8014222:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014224:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014226:	1b79      	subs	r1, r7, r5
 8014228:	1ea0      	subs	r0, r4, #2
 801422a:	4299      	cmp	r1, r3
 801422c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801422e:	da60      	bge.n	80142f2 <_DrawBitmap+0x232>
 8014230:	4a32      	ldr	r2, [pc, #200]	; (80142fc <_DrawBitmap+0x23c>)
 8014232:	6811      	ldr	r1, [r2, #0]
 8014234:	7c0b      	ldrb	r3, [r1, #16]
 8014236:	b376      	cbz	r6, 8014296 <_DrawBitmap+0x1d6>
 8014238:	f013 0303 	ands.w	r3, r3, #3
 801423c:	d005      	beq.n	801424a <_DrawBitmap+0x18a>
 801423e:	2b02      	cmp	r3, #2
 8014240:	d151      	bne.n	80142e6 <_DrawBitmap+0x226>
 8014242:	46a1      	mov	r9, r4
 8014244:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014248:	e01d      	b.n	8014286 <_DrawBitmap+0x1c6>
 801424a:	f81a 5003 	ldrb.w	r5, [sl, r3]
 801424e:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8014252:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8014256:	3301      	adds	r3, #1
 8014258:	455b      	cmp	r3, fp
 801425a:	d1f6      	bne.n	801424a <_DrawBitmap+0x18a>
 801425c:	e043      	b.n	80142e6 <_DrawBitmap+0x226>
 801425e:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8014262:	f829 1c02 	strh.w	r1, [r9, #-2]
 8014266:	b12d      	cbz	r5, 8014274 <_DrawBitmap+0x1b4>
 8014268:	68aa      	ldr	r2, [r5, #8]
 801426a:	4628      	mov	r0, r5
 801426c:	6813      	ldr	r3, [r2, #0]
 801426e:	4641      	mov	r1, r8
 8014270:	463a      	mov	r2, r7
 8014272:	4798      	blx	r3
 8014274:	9806      	ldr	r0, [sp, #24]
 8014276:	f108 0801 	add.w	r8, r8, #1
 801427a:	eb00 010b 	add.w	r1, r0, fp
 801427e:	4541      	cmp	r1, r8
 8014280:	f109 0902 	add.w	r9, r9, #2
 8014284:	d02f      	beq.n	80142e6 <_DrawBitmap+0x226>
 8014286:	9a06      	ldr	r2, [sp, #24]
 8014288:	ebc2 030a 	rsb	r3, r2, sl
 801428c:	f813 0008 	ldrb.w	r0, [r3, r8]
 8014290:	2800      	cmp	r0, #0
 8014292:	d0ef      	beq.n	8014274 <_DrawBitmap+0x1b4>
 8014294:	e7e3      	b.n	801425e <_DrawBitmap+0x19e>
 8014296:	f013 0203 	ands.w	r2, r3, #3
 801429a:	d005      	beq.n	80142a8 <_DrawBitmap+0x1e8>
 801429c:	2a02      	cmp	r2, #2
 801429e:	d122      	bne.n	80142e6 <_DrawBitmap+0x226>
 80142a0:	46a1      	mov	r9, r4
 80142a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80142a6:	e016      	b.n	80142d6 <_DrawBitmap+0x216>
 80142a8:	4651      	mov	r1, sl
 80142aa:	465a      	mov	r2, fp
 80142ac:	f7eb ff6c 	bl	8000188 <memcpy>
 80142b0:	e019      	b.n	80142e6 <_DrawBitmap+0x226>
 80142b2:	f829 3c02 	strh.w	r3, [r9, #-2]
 80142b6:	b12d      	cbz	r5, 80142c4 <_DrawBitmap+0x204>
 80142b8:	68aa      	ldr	r2, [r5, #8]
 80142ba:	4628      	mov	r0, r5
 80142bc:	6813      	ldr	r3, [r2, #0]
 80142be:	4641      	mov	r1, r8
 80142c0:	463a      	mov	r2, r7
 80142c2:	4798      	blx	r3
 80142c4:	9806      	ldr	r0, [sp, #24]
 80142c6:	f108 0801 	add.w	r8, r8, #1
 80142ca:	eb00 010b 	add.w	r1, r0, fp
 80142ce:	4541      	cmp	r1, r8
 80142d0:	f109 0902 	add.w	r9, r9, #2
 80142d4:	d007      	beq.n	80142e6 <_DrawBitmap+0x226>
 80142d6:	9806      	ldr	r0, [sp, #24]
 80142d8:	ebc0 010a 	rsb	r1, r0, sl
 80142dc:	f811 3008 	ldrb.w	r3, [r1, r8]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d0ef      	beq.n	80142c4 <_DrawBitmap+0x204>
 80142e4:	e7e5      	b.n	80142b2 <_DrawBitmap+0x1f2>
 80142e6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80142e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80142ea:	4482      	add	sl, r0
 80142ec:	3701      	adds	r7, #1
 80142ee:	1864      	adds	r4, r4, r1
 80142f0:	e797      	b.n	8014222 <_DrawBitmap+0x162>
 80142f2:	2d00      	cmp	r5, #0
 80142f4:	f040 827d 	bne.w	80147f2 <_DrawBitmap+0x732>
 80142f8:	e27e      	b.n	80147f8 <_DrawBitmap+0x738>
 80142fa:	bf00      	nop
 80142fc:	2000027c 	.word	0x2000027c
 8014300:	20016f54 	.word	0x20016f54
 8014304:	4a9c      	ldr	r2, [pc, #624]	; (8014578 <_DrawBitmap+0x4b8>)
 8014306:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014308:	990a      	ldr	r1, [sp, #40]	; 0x28
 801430a:	2e00      	cmp	r6, #0
 801430c:	bf08      	it	eq
 801430e:	4616      	moveq	r6, r2
 8014310:	9607      	str	r6, [sp, #28]
 8014312:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8014314:	9109      	str	r1, [sp, #36]	; 0x24
 8014316:	0077      	lsls	r7, r6, #1
 8014318:	0098      	lsls	r0, r3, #2
 801431a:	3402      	adds	r4, #2
 801431c:	970f      	str	r7, [sp, #60]	; 0x3c
 801431e:	9010      	str	r0, [sp, #64]	; 0x40
 8014320:	940c      	str	r4, [sp, #48]	; 0x30
 8014322:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014324:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014328:	1bf3      	subs	r3, r6, r7
 801432a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801432c:	1e94      	subs	r4, r2, #2
 801432e:	42b3      	cmp	r3, r6
 8014330:	f280 825d 	bge.w	80147ee <_DrawBitmap+0x72e>
 8014334:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8014336:	2f02      	cmp	r7, #2
 8014338:	f000 80dc 	beq.w	80144f4 <_DrawBitmap+0x434>
 801433c:	2f04      	cmp	r7, #4
 801433e:	f000 8182 	beq.w	8014646 <_DrawBitmap+0x586>
 8014342:	2f01      	cmp	r7, #1
 8014344:	f040 8249 	bne.w	80147da <_DrawBitmap+0x71a>
 8014348:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8014580 <_DrawBitmap+0x4c0>
 801434c:	f8d9 5000 	ldr.w	r5, [r9]
 8014350:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8014352:	f7fd fac3 	bl	80118dc <GUI_ALLOC_LockH>
 8014356:	f89a 3000 	ldrb.w	r3, [sl]
 801435a:	4a88      	ldr	r2, [pc, #544]	; (801457c <_DrawBitmap+0x4bc>)
 801435c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801435e:	5cd5      	ldrb	r5, [r2, r3]
 8014360:	9012      	str	r0, [sp, #72]	; 0x48
 8014362:	f8d9 0000 	ldr.w	r0, [r9]
 8014366:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8014368:	f1c1 0808 	rsb	r8, r1, #8
 801436c:	fa45 f501 	asr.w	r5, r5, r1
 8014370:	7c01      	ldrb	r1, [r0, #16]
 8014372:	f001 0303 	and.w	r3, r1, #3
 8014376:	2b02      	cmp	r3, #2
 8014378:	465e      	mov	r6, fp
 801437a:	d021      	beq.n	80143c0 <_DrawBitmap+0x300>
 801437c:	2b03      	cmp	r3, #3
 801437e:	d05f      	beq.n	8014440 <_DrawBitmap+0x380>
 8014380:	2b01      	cmp	r3, #1
 8014382:	d05d      	beq.n	8014440 <_DrawBitmap+0x380>
 8014384:	4652      	mov	r2, sl
 8014386:	4546      	cmp	r6, r8
 8014388:	bf38      	it	cc
 801438a:	46b0      	movcc	r8, r6
 801438c:	ebc8 0606 	rsb	r6, r8, r6
 8014390:	4643      	mov	r3, r8
 8014392:	4621      	mov	r1, r4
 8014394:	f005 0001 	and.w	r0, r5, #1
 8014398:	9f07      	ldr	r7, [sp, #28]
 801439a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801439e:	086d      	lsrs	r5, r5, #1
 80143a0:	3b01      	subs	r3, #1
 80143a2:	f821 0b02 	strh.w	r0, [r1], #2
 80143a6:	d1f5      	bne.n	8014394 <_DrawBitmap+0x2d4>
 80143a8:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80143ac:	2e00      	cmp	r6, #0
 80143ae:	f000 809d 	beq.w	80144ec <_DrawBitmap+0x42c>
 80143b2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80143b6:	4971      	ldr	r1, [pc, #452]	; (801457c <_DrawBitmap+0x4bc>)
 80143b8:	f04f 0808 	mov.w	r8, #8
 80143bc:	5d4d      	ldrb	r5, [r1, r5]
 80143be:	e7e2      	b.n	8014386 <_DrawBitmap+0x2c6>
 80143c0:	9a07      	ldr	r2, [sp, #28]
 80143c2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80143c6:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 80143ca:	f8cd a020 	str.w	sl, [sp, #32]
 80143ce:	4546      	cmp	r6, r8
 80143d0:	bf38      	it	cc
 80143d2:	46b0      	movcc	r8, r6
 80143d4:	ebc8 0606 	rsb	r6, r8, r6
 80143d8:	b31f      	cbz	r7, 8014422 <_DrawBitmap+0x362>
 80143da:	b91d      	cbnz	r5, 80143e4 <_DrawBitmap+0x324>
 80143dc:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80143e0:	44c1      	add	r9, r8
 80143e2:	e022      	b.n	801442a <_DrawBitmap+0x36a>
 80143e4:	07e9      	lsls	r1, r5, #31
 80143e6:	d50b      	bpl.n	8014400 <_DrawBitmap+0x340>
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	f8cd c014 	str.w	ip, [sp, #20]
 80143f2:	4638      	mov	r0, r7
 80143f4:	4649      	mov	r1, r9
 80143f6:	4798      	blx	r3
 80143f8:	f8dd c014 	ldr.w	ip, [sp, #20]
 80143fc:	f8a4 c000 	strh.w	ip, [r4]
 8014400:	3402      	adds	r4, #2
 8014402:	f1b8 0801 	subs.w	r8, r8, #1
 8014406:	f109 0901 	add.w	r9, r9, #1
 801440a:	d00e      	beq.n	801442a <_DrawBitmap+0x36a>
 801440c:	086d      	lsrs	r5, r5, #1
 801440e:	e7e4      	b.n	80143da <_DrawBitmap+0x31a>
 8014410:	07ea      	lsls	r2, r5, #31
 8014412:	bf48      	it	mi
 8014414:	f8a4 c000 	strhmi.w	ip, [r4]
 8014418:	3402      	adds	r4, #2
 801441a:	f1b8 0801 	subs.w	r8, r8, #1
 801441e:	d004      	beq.n	801442a <_DrawBitmap+0x36a>
 8014420:	086d      	lsrs	r5, r5, #1
 8014422:	2d00      	cmp	r5, #0
 8014424:	d1f4      	bne.n	8014410 <_DrawBitmap+0x350>
 8014426:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 801442a:	2e00      	cmp	r6, #0
 801442c:	d05e      	beq.n	80144ec <_DrawBitmap+0x42c>
 801442e:	9d08      	ldr	r5, [sp, #32]
 8014430:	4952      	ldr	r1, [pc, #328]	; (801457c <_DrawBitmap+0x4bc>)
 8014432:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8014436:	f04f 0808 	mov.w	r8, #8
 801443a:	9508      	str	r5, [sp, #32]
 801443c:	5c0d      	ldrb	r5, [r1, r0]
 801443e:	e7c6      	b.n	80143ce <_DrawBitmap+0x30e>
 8014440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014442:	6910      	ldr	r0, [r2, #16]
 8014444:	6883      	ldr	r3, [r0, #8]
 8014446:	4798      	blx	r3
 8014448:	f10a 0201 	add.w	r2, sl, #1
 801444c:	b281      	uxth	r1, r0
 801444e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8014452:	910d      	str	r1, [sp, #52]	; 0x34
 8014454:	9208      	str	r2, [sp, #32]
 8014456:	4546      	cmp	r6, r8
 8014458:	bf38      	it	cc
 801445a:	46b0      	movcc	r8, r6
 801445c:	ebc8 0606 	rsb	r6, r8, r6
 8014460:	1ca3      	adds	r3, r4, #2
 8014462:	b34f      	cbz	r7, 80144b8 <_DrawBitmap+0x3f8>
 8014464:	9303      	str	r3, [sp, #12]
 8014466:	46e1      	mov	r9, ip
 8014468:	07eb      	lsls	r3, r5, #31
 801446a:	d514      	bpl.n	8014496 <_DrawBitmap+0x3d6>
 801446c:	68b9      	ldr	r1, [r7, #8]
 801446e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014470:	680b      	ldr	r3, [r1, #0]
 8014472:	f8cd c014 	str.w	ip, [sp, #20]
 8014476:	9311      	str	r3, [sp, #68]	; 0x44
 8014478:	4638      	mov	r0, r7
 801447a:	4649      	mov	r1, r9
 801447c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801447e:	4798      	blx	r3
 8014480:	9a03      	ldr	r2, [sp, #12]
 8014482:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014484:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 8014488:	9b03      	ldr	r3, [sp, #12]
 801448a:	f8dd c014 	ldr.w	ip, [sp, #20]
 801448e:	ea81 0200 	eor.w	r2, r1, r0
 8014492:	f823 2c02 	strh.w	r2, [r3, #-2]
 8014496:	9803      	ldr	r0, [sp, #12]
 8014498:	f109 0901 	add.w	r9, r9, #1
 801449c:	eb0c 0208 	add.w	r2, ip, r8
 80144a0:	1c81      	adds	r1, r0, #2
 80144a2:	086d      	lsrs	r5, r5, #1
 80144a4:	454a      	cmp	r2, r9
 80144a6:	9103      	str	r1, [sp, #12]
 80144a8:	d1de      	bne.n	8014468 <_DrawBitmap+0x3a8>
 80144aa:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80144ae:	4694      	mov	ip, r2
 80144b0:	b1e6      	cbz	r6, 80144ec <_DrawBitmap+0x42c>
 80144b2:	9d08      	ldr	r5, [sp, #32]
 80144b4:	7828      	ldrb	r0, [r5, #0]
 80144b6:	e011      	b.n	80144dc <_DrawBitmap+0x41c>
 80144b8:	4642      	mov	r2, r8
 80144ba:	07e8      	lsls	r0, r5, #31
 80144bc:	d505      	bpl.n	80144ca <_DrawBitmap+0x40a>
 80144be:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 80144c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80144c4:	4041      	eors	r1, r0
 80144c6:	f823 1c02 	strh.w	r1, [r3, #-2]
 80144ca:	086d      	lsrs	r5, r5, #1
 80144cc:	3302      	adds	r3, #2
 80144ce:	3a01      	subs	r2, #1
 80144d0:	d1f3      	bne.n	80144ba <_DrawBitmap+0x3fa>
 80144d2:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80144d6:	b14e      	cbz	r6, 80144ec <_DrawBitmap+0x42c>
 80144d8:	9d08      	ldr	r5, [sp, #32]
 80144da:	7828      	ldrb	r0, [r5, #0]
 80144dc:	4b27      	ldr	r3, [pc, #156]	; (801457c <_DrawBitmap+0x4bc>)
 80144de:	5c1d      	ldrb	r5, [r3, r0]
 80144e0:	9808      	ldr	r0, [sp, #32]
 80144e2:	1c41      	adds	r1, r0, #1
 80144e4:	9108      	str	r1, [sp, #32]
 80144e6:	f04f 0808 	mov.w	r8, #8
 80144ea:	e7b4      	b.n	8014456 <_DrawBitmap+0x396>
 80144ec:	a812      	add	r0, sp, #72	; 0x48
 80144ee:	f7fd fa03 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80144f2:	e172      	b.n	80147da <_DrawBitmap+0x71a>
 80144f4:	4922      	ldr	r1, [pc, #136]	; (8014580 <_DrawBitmap+0x4c0>)
 80144f6:	9822      	ldr	r0, [sp, #136]	; 0x88
 80144f8:	680b      	ldr	r3, [r1, #0]
 80144fa:	f89a 6000 	ldrb.w	r6, [sl]
 80144fe:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014500:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8014504:	f1c0 0204 	rsb	r2, r0, #4
 8014508:	7c18      	ldrb	r0, [r3, #16]
 801450a:	b2d5      	uxtb	r5, r2
 801450c:	f000 0203 	and.w	r2, r0, #3
 8014510:	fa06 f607 	lsl.w	r6, r6, r7
 8014514:	2a01      	cmp	r2, #1
 8014516:	b2f6      	uxtb	r6, r6
 8014518:	d009      	beq.n	801452e <_DrawBitmap+0x46e>
 801451a:	d30b      	bcc.n	8014534 <_DrawBitmap+0x474>
 801451c:	2a02      	cmp	r2, #2
 801451e:	f040 815c 	bne.w	80147da <_DrawBitmap+0x71a>
 8014522:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014526:	465f      	mov	r7, fp
 8014528:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801452c:	e04b      	b.n	80145c6 <_DrawBitmap+0x506>
 801452e:	4651      	mov	r1, sl
 8014530:	465b      	mov	r3, fp
 8014532:	e081      	b.n	8014638 <_DrawBitmap+0x578>
 8014534:	4652      	mov	r2, sl
 8014536:	465b      	mov	r3, fp
 8014538:	429d      	cmp	r5, r3
 801453a:	bfc8      	it	gt
 801453c:	b2dd      	uxtbgt	r5, r3
 801453e:	1b5b      	subs	r3, r3, r5
 8014540:	4629      	mov	r1, r5
 8014542:	4620      	mov	r0, r4
 8014544:	ea4f 1e96 	mov.w	lr, r6, lsr #6
 8014548:	9f07      	ldr	r7, [sp, #28]
 801454a:	3901      	subs	r1, #1
 801454c:	f857 c02e 	ldr.w	ip, [r7, lr, lsl #2]
 8014550:	00b6      	lsls	r6, r6, #2
 8014552:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8014556:	f820 cb02 	strh.w	ip, [r0], #2
 801455a:	b2f6      	uxtb	r6, r6
 801455c:	d1f2      	bne.n	8014544 <_DrawBitmap+0x484>
 801455e:	3d01      	subs	r5, #1
 8014560:	b2e8      	uxtb	r0, r5
 8014562:	1c45      	adds	r5, r0, #1
 8014564:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8014568:	2b00      	cmp	r3, #0
 801456a:	f000 8136 	beq.w	80147da <_DrawBitmap+0x71a>
 801456e:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8014572:	2504      	movs	r5, #4
 8014574:	e7e0      	b.n	8014538 <_DrawBitmap+0x478>
 8014576:	bf00      	nop
 8014578:	0802f910 	.word	0x0802f910
 801457c:	0802f628 	.word	0x0802f628
 8014580:	2000027c 	.word	0x2000027c
 8014584:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8014588:	d125      	bne.n	80145d6 <_DrawBitmap+0x516>
 801458a:	9808      	ldr	r0, [sp, #32]
 801458c:	f109 0901 	add.w	r9, r9, #1
 8014590:	eb05 0108 	add.w	r1, r5, r8
 8014594:	1c82      	adds	r2, r0, #2
 8014596:	fa5f f389 	uxtb.w	r3, r9
 801459a:	b2c8      	uxtb	r0, r1
 801459c:	00b6      	lsls	r6, r6, #2
 801459e:	4298      	cmp	r0, r3
 80145a0:	b2f6      	uxtb	r6, r6
 80145a2:	9208      	str	r2, [sp, #32]
 80145a4:	d1ee      	bne.n	8014584 <_DrawBitmap+0x4c4>
 80145a6:	3d01      	subs	r5, #1
 80145a8:	b2ed      	uxtb	r5, r5
 80145aa:	1c6e      	adds	r6, r5, #1
 80145ac:	f108 0801 	add.w	r8, r8, #1
 80145b0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80145b4:	44a8      	add	r8, r5
 80145b6:	2f00      	cmp	r7, #0
 80145b8:	f000 810f 	beq.w	80147da <_DrawBitmap+0x71a>
 80145bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145be:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 80145c2:	2504      	movs	r5, #4
 80145c4:	920d      	str	r2, [sp, #52]	; 0x34
 80145c6:	42bd      	cmp	r5, r7
 80145c8:	bfc8      	it	gt
 80145ca:	b2fd      	uxtbgt	r5, r7
 80145cc:	1ca1      	adds	r1, r4, #2
 80145ce:	1b7f      	subs	r7, r7, r5
 80145d0:	9108      	str	r1, [sp, #32]
 80145d2:	46c1      	mov	r9, r8
 80145d4:	e7d6      	b.n	8014584 <_DrawBitmap+0x4c4>
 80145d6:	09b3      	lsrs	r3, r6, #6
 80145d8:	9807      	ldr	r0, [sp, #28]
 80145da:	9908      	ldr	r1, [sp, #32]
 80145dc:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80145e0:	f821 2c02 	strh.w	r2, [r1, #-2]
 80145e4:	f1bc 0f00 	cmp.w	ip, #0
 80145e8:	d0cf      	beq.n	801458a <_DrawBitmap+0x4ca>
 80145ea:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80145ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	f8cd c014 	str.w	ip, [sp, #20]
 80145f6:	4660      	mov	r0, ip
 80145f8:	4649      	mov	r1, r9
 80145fa:	4798      	blx	r3
 80145fc:	f8dd c014 	ldr.w	ip, [sp, #20]
 8014600:	e7c3      	b.n	801458a <_DrawBitmap+0x4ca>
 8014602:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8014606:	d005      	beq.n	8014614 <_DrawBitmap+0x554>
 8014608:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 801460c:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8014610:	f822 7c02 	strh.w	r7, [r2, #-2]
 8014614:	3801      	subs	r0, #1
 8014616:	00b6      	lsls	r6, r6, #2
 8014618:	3202      	adds	r2, #2
 801461a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 801461e:	b2f6      	uxtb	r6, r6
 8014620:	d1ef      	bne.n	8014602 <_DrawBitmap+0x542>
 8014622:	3d01      	subs	r5, #1
 8014624:	b2ef      	uxtb	r7, r5
 8014626:	1c7d      	adds	r5, r7, #1
 8014628:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801462c:	2b00      	cmp	r3, #0
 801462e:	f000 80d4 	beq.w	80147da <_DrawBitmap+0x71a>
 8014632:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8014636:	2504      	movs	r5, #4
 8014638:	429d      	cmp	r5, r3
 801463a:	bfc8      	it	gt
 801463c:	b2dd      	uxtbgt	r5, r3
 801463e:	1b5b      	subs	r3, r3, r5
 8014640:	1ca2      	adds	r2, r4, #2
 8014642:	4628      	mov	r0, r5
 8014644:	e7dd      	b.n	8014602 <_DrawBitmap+0x542>
 8014646:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8014648:	496d      	ldr	r1, [pc, #436]	; (8014800 <_DrawBitmap+0x740>)
 801464a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801464c:	f89a 0000 	ldrb.w	r0, [sl]
 8014650:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014652:	f1c7 0202 	rsb	r2, r7, #2
 8014656:	680f      	ldr	r7, [r1, #0]
 8014658:	b2d3      	uxtb	r3, r2
 801465a:	7c3a      	ldrb	r2, [r7, #16]
 801465c:	f002 0103 	and.w	r1, r2, #3
 8014660:	fa00 f005 	lsl.w	r0, r0, r5
 8014664:	2901      	cmp	r1, #1
 8014666:	b2c5      	uxtb	r5, r0
 8014668:	d004      	beq.n	8014674 <_DrawBitmap+0x5b4>
 801466a:	d306      	bcc.n	801467a <_DrawBitmap+0x5ba>
 801466c:	2902      	cmp	r1, #2
 801466e:	f040 80b4 	bne.w	80147da <_DrawBitmap+0x71a>
 8014672:	e037      	b.n	80146e4 <_DrawBitmap+0x624>
 8014674:	4650      	mov	r0, sl
 8014676:	465a      	mov	r2, fp
 8014678:	e0a8      	b.n	80147cc <_DrawBitmap+0x70c>
 801467a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801467c:	b166      	cbz	r6, 8014698 <_DrawBitmap+0x5d8>
 801467e:	092d      	lsrs	r5, r5, #4
 8014680:	9907      	ldr	r1, [sp, #28]
 8014682:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 8014686:	8020      	strh	r0, [r4, #0]
 8014688:	f10b 33ff 	add.w	r3, fp, #4294967295
 801468c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801468e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8014692:	f10a 0201 	add.w	r2, sl, #1
 8014696:	e001      	b.n	801469c <_DrawBitmap+0x5dc>
 8014698:	465b      	mov	r3, fp
 801469a:	4652      	mov	r2, sl
 801469c:	2b01      	cmp	r3, #1
 801469e:	dd18      	ble.n	80146d2 <_DrawBitmap+0x612>
 80146a0:	1058      	asrs	r0, r3, #1
 80146a2:	1d21      	adds	r1, r4, #4
 80146a4:	f003 0301 	and.w	r3, r3, #1
 80146a8:	eb02 0e00 	add.w	lr, r2, r0
 80146ac:	092f      	lsrs	r7, r5, #4
 80146ae:	9e07      	ldr	r6, [sp, #28]
 80146b0:	f005 050f 	and.w	r5, r5, #15
 80146b4:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80146b8:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 80146bc:	f821 7c04 	strh.w	r7, [r1, #-4]
 80146c0:	f821 6c02 	strh.w	r6, [r1, #-2]
 80146c4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80146c8:	3104      	adds	r1, #4
 80146ca:	4572      	cmp	r2, lr
 80146cc:	d1ee      	bne.n	80146ac <_DrawBitmap+0x5ec>
 80146ce:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	f000 8081 	beq.w	80147da <_DrawBitmap+0x71a>
 80146d8:	092d      	lsrs	r5, r5, #4
 80146da:	9a07      	ldr	r2, [sp, #28]
 80146dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80146e0:	8020      	strh	r0, [r4, #0]
 80146e2:	e07a      	b.n	80147da <_DrawBitmap+0x71a>
 80146e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80146e6:	b1c3      	cbz	r3, 801471a <_DrawBitmap+0x65a>
 80146e8:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 80146ec:	d00b      	beq.n	8014706 <_DrawBitmap+0x646>
 80146ee:	0928      	lsrs	r0, r5, #4
 80146f0:	9d07      	ldr	r5, [sp, #28]
 80146f2:	f855 7020 	ldr.w	r7, [r5, r0, lsl #2]
 80146f6:	8027      	strh	r7, [r4, #0]
 80146f8:	b12e      	cbz	r6, 8014706 <_DrawBitmap+0x646>
 80146fa:	68b4      	ldr	r4, [r6, #8]
 80146fc:	9906      	ldr	r1, [sp, #24]
 80146fe:	6823      	ldr	r3, [r4, #0]
 8014700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014702:	4630      	mov	r0, r6
 8014704:	4798      	blx	r3
 8014706:	9a06      	ldr	r2, [sp, #24]
 8014708:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801470a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801470e:	1c57      	adds	r7, r2, #1
 8014710:	f10b 39ff 	add.w	r9, fp, #4294967295
 8014714:	f10a 0801 	add.w	r8, sl, #1
 8014718:	e00f      	b.n	801473a <_DrawBitmap+0x67a>
 801471a:	46d9      	mov	r9, fp
 801471c:	46d0      	mov	r8, sl
 801471e:	9f06      	ldr	r7, [sp, #24]
 8014720:	e00b      	b.n	801473a <_DrawBitmap+0x67a>
 8014722:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8014726:	d10c      	bne.n	8014742 <_DrawBitmap+0x682>
 8014728:	f015 050f 	ands.w	r5, r5, #15
 801472c:	d117      	bne.n	801475e <_DrawBitmap+0x69e>
 801472e:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8014732:	3404      	adds	r4, #4
 8014734:	3702      	adds	r7, #2
 8014736:	f1a9 0902 	sub.w	r9, r9, #2
 801473a:	f1b9 0f01 	cmp.w	r9, #1
 801473e:	dcf0      	bgt.n	8014722 <_DrawBitmap+0x662>
 8014740:	e01a      	b.n	8014778 <_DrawBitmap+0x6b8>
 8014742:	092a      	lsrs	r2, r5, #4
 8014744:	9907      	ldr	r1, [sp, #28]
 8014746:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801474a:	8020      	strh	r0, [r4, #0]
 801474c:	2e00      	cmp	r6, #0
 801474e:	d0eb      	beq.n	8014728 <_DrawBitmap+0x668>
 8014750:	68b3      	ldr	r3, [r6, #8]
 8014752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	4630      	mov	r0, r6
 8014758:	4639      	mov	r1, r7
 801475a:	4798      	blx	r3
 801475c:	e7e4      	b.n	8014728 <_DrawBitmap+0x668>
 801475e:	9a07      	ldr	r2, [sp, #28]
 8014760:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
 8014764:	8061      	strh	r1, [r4, #2]
 8014766:	2e00      	cmp	r6, #0
 8014768:	d0e1      	beq.n	801472e <_DrawBitmap+0x66e>
 801476a:	68b0      	ldr	r0, [r6, #8]
 801476c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801476e:	6803      	ldr	r3, [r0, #0]
 8014770:	1c79      	adds	r1, r7, #1
 8014772:	4630      	mov	r0, r6
 8014774:	4798      	blx	r3
 8014776:	e7da      	b.n	801472e <_DrawBitmap+0x66e>
 8014778:	f1b9 0f00 	cmp.w	r9, #0
 801477c:	d02d      	beq.n	80147da <_DrawBitmap+0x71a>
 801477e:	092d      	lsrs	r5, r5, #4
 8014780:	d02b      	beq.n	80147da <_DrawBitmap+0x71a>
 8014782:	9907      	ldr	r1, [sp, #28]
 8014784:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 8014788:	8020      	strh	r0, [r4, #0]
 801478a:	b336      	cbz	r6, 80147da <_DrawBitmap+0x71a>
 801478c:	68b4      	ldr	r4, [r6, #8]
 801478e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014790:	6823      	ldr	r3, [r4, #0]
 8014792:	4630      	mov	r0, r6
 8014794:	4639      	mov	r1, r7
 8014796:	4798      	blx	r3
 8014798:	e01f      	b.n	80147da <_DrawBitmap+0x71a>
 801479a:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 801479e:	d005      	beq.n	80147ac <_DrawBitmap+0x6ec>
 80147a0:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 80147a4:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 80147a8:	f821 7c02 	strh.w	r7, [r1, #-2]
 80147ac:	3e01      	subs	r6, #1
 80147ae:	012d      	lsls	r5, r5, #4
 80147b0:	3102      	adds	r1, #2
 80147b2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80147b6:	b2ed      	uxtb	r5, r5
 80147b8:	d1ef      	bne.n	801479a <_DrawBitmap+0x6da>
 80147ba:	3b01      	subs	r3, #1
 80147bc:	b2df      	uxtb	r7, r3
 80147be:	1c79      	adds	r1, r7, #1
 80147c0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80147c4:	b14a      	cbz	r2, 80147da <_DrawBitmap+0x71a>
 80147c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80147ca:	2302      	movs	r3, #2
 80147cc:	4293      	cmp	r3, r2
 80147ce:	bfc8      	it	gt
 80147d0:	b2d3      	uxtbgt	r3, r2
 80147d2:	1ad2      	subs	r2, r2, r3
 80147d4:	1ca1      	adds	r1, r4, #2
 80147d6:	461e      	mov	r6, r3
 80147d8:	e7df      	b.n	801479a <_DrawBitmap+0x6da>
 80147da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80147dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80147e0:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80147e2:	1c4b      	adds	r3, r1, #1
 80147e4:	1990      	adds	r0, r2, r6
 80147e6:	44a2      	add	sl, r4
 80147e8:	9309      	str	r3, [sp, #36]	; 0x24
 80147ea:	900c      	str	r0, [sp, #48]	; 0x30
 80147ec:	e599      	b.n	8014322 <_DrawBitmap+0x262>
 80147ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80147f0:	b110      	cbz	r0, 80147f8 <_DrawBitmap+0x738>
 80147f2:	a813      	add	r0, sp, #76	; 0x4c
 80147f4:	f7fd f880 	bl	80118f8 <GUI_ALLOC_UnlockH>
 80147f8:	b015      	add	sp, #84	; 0x54
 80147fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147fe:	bf00      	nop
 8014800:	2000027c 	.word	0x2000027c

08014804 <LCD_SelectLCD>:
 8014804:	b510      	push	{r4, lr}
 8014806:	4b0d      	ldr	r3, [pc, #52]	; (801483c <LCD_SelectLCD+0x38>)
 8014808:	480d      	ldr	r0, [pc, #52]	; (8014840 <LCD_SelectLCD+0x3c>)
 801480a:	681a      	ldr	r2, [r3, #0]
 801480c:	7c51      	ldrb	r1, [r2, #17]
 801480e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8014812:	461c      	mov	r4, r3
 8014814:	b138      	cbz	r0, 8014826 <LCD_SelectLCD+0x22>
 8014816:	68c3      	ldr	r3, [r0, #12]
 8014818:	681a      	ldr	r2, [r3, #0]
 801481a:	2a04      	cmp	r2, #4
 801481c:	d001      	beq.n	8014822 <LCD_SelectLCD+0x1e>
 801481e:	6800      	ldr	r0, [r0, #0]
 8014820:	e7f8      	b.n	8014814 <LCD_SelectLCD+0x10>
 8014822:	f7fc fb6f 	bl	8010f04 <GUI_DEVICE_Unlink>
 8014826:	6821      	ldr	r1, [r4, #0]
 8014828:	2000      	movs	r0, #0
 801482a:	f101 0308 	add.w	r3, r1, #8
 801482e:	6608      	str	r0, [r1, #96]	; 0x60
 8014830:	614b      	str	r3, [r1, #20]
 8014832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014836:	f7fa beb5 	b.w	800f5a4 <LCD_SetClipRectMax>
 801483a:	bf00      	nop
 801483c:	2000027c 	.word	0x2000027c
 8014840:	20017a04 	.word	0x20017a04

08014844 <LCD_ReadRectEx>:
 8014844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014848:	b087      	sub	sp, #28
 801484a:	4690      	mov	r8, r2
 801484c:	9305      	str	r3, [sp, #20]
 801484e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014850:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014852:	68da      	ldr	r2, [r3, #12]
 8014854:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8014856:	f8d2 9014 	ldr.w	r9, [r2, #20]
 801485a:	4607      	mov	r7, r0
 801485c:	460e      	mov	r6, r1
 801485e:	b975      	cbnz	r5, 801487e <LCD_ReadRectEx+0x3a>
 8014860:	486f      	ldr	r0, [pc, #444]	; (8014a20 <LCD_ReadRectEx+0x1dc>)
 8014862:	6801      	ldr	r1, [r0, #0]
 8014864:	7c48      	ldrb	r0, [r1, #17]
 8014866:	f7fa fb6b 	bl	800ef40 <GUI_GetBitsPerPixelEx>
 801486a:	2808      	cmp	r0, #8
 801486c:	4683      	mov	fp, r0
 801486e:	dd15      	ble.n	801489c <LCD_ReadRectEx+0x58>
 8014870:	2810      	cmp	r0, #16
 8014872:	bfcc      	ite	gt
 8014874:	f04f 0a04 	movgt.w	sl, #4
 8014878:	f04f 0a02 	movle.w	sl, #2
 801487c:	e010      	b.n	80148a0 <LCD_ReadRectEx+0x5c>
 801487e:	a811      	add	r0, sp, #68	; 0x44
 8014880:	2101      	movs	r1, #1
 8014882:	47a8      	blx	r5
 8014884:	4605      	mov	r5, r0
 8014886:	2800      	cmp	r0, #0
 8014888:	d0ea      	beq.n	8014860 <LCD_ReadRectEx+0x1c>
 801488a:	9b05      	ldr	r3, [sp, #20]
 801488c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801488e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8014892:	4639      	mov	r1, r7
 8014894:	4632      	mov	r2, r6
 8014896:	4643      	mov	r3, r8
 8014898:	47a8      	blx	r5
 801489a:	e0be      	b.n	8014a1a <LCD_ReadRectEx+0x1d6>
 801489c:	f04f 0a01 	mov.w	sl, #1
 80148a0:	2500      	movs	r5, #0
 80148a2:	9b05      	ldr	r3, [sp, #20]
 80148a4:	429e      	cmp	r6, r3
 80148a6:	f300 80b8 	bgt.w	8014a1a <LCD_ReadRectEx+0x1d6>
 80148aa:	f1ba 0f02 	cmp.w	sl, #2
 80148ae:	d00a      	beq.n	80148c6 <LCD_ReadRectEx+0x82>
 80148b0:	f1ba 0f04 	cmp.w	sl, #4
 80148b4:	d004      	beq.n	80148c0 <LCD_ReadRectEx+0x7c>
 80148b6:	f1ba 0f01 	cmp.w	sl, #1
 80148ba:	f040 80ac 	bne.w	8014a16 <LCD_ReadRectEx+0x1d2>
 80148be:	e005      	b.n	80148cc <LCD_ReadRectEx+0x88>
 80148c0:	46a4      	mov	ip, r4
 80148c2:	463b      	mov	r3, r7
 80148c4:	e094      	b.n	80149f0 <LCD_ReadRectEx+0x1ac>
 80148c6:	46a4      	mov	ip, r4
 80148c8:	463b      	mov	r3, r7
 80148ca:	e07e      	b.n	80149ca <LCD_ReadRectEx+0x186>
 80148cc:	f10b 30ff 	add.w	r0, fp, #4294967295
 80148d0:	2807      	cmp	r0, #7
 80148d2:	f200 80a0 	bhi.w	8014a16 <LCD_ReadRectEx+0x1d2>
 80148d6:	e8df f000 	tbb	[pc, r0]
 80148da:	080a      	.short	0x080a
 80148dc:	04040606 	.word	0x04040606
 80148e0:	0404      	.short	0x0404
 80148e2:	463b      	mov	r3, r7
 80148e4:	e059      	b.n	801499a <LCD_ReadRectEx+0x156>
 80148e6:	463b      	mov	r3, r7
 80148e8:	e03e      	b.n	8014968 <LCD_ReadRectEx+0x124>
 80148ea:	463b      	mov	r3, r7
 80148ec:	e01e      	b.n	801492c <LCD_ReadRectEx+0xe8>
 80148ee:	463b      	mov	r3, r7
 80148f0:	4543      	cmp	r3, r8
 80148f2:	f300 8090 	bgt.w	8014a16 <LCD_ReadRectEx+0x1d2>
 80148f6:	4619      	mov	r1, r3
 80148f8:	4632      	mov	r2, r6
 80148fa:	9303      	str	r3, [sp, #12]
 80148fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80148fe:	47c8      	blx	r9
 8014900:	f1c5 0207 	rsb	r2, r5, #7
 8014904:	fa00 f302 	lsl.w	r3, r0, r2
 8014908:	f64f 717f 	movw	r1, #65407	; 0xff7f
 801490c:	7820      	ldrb	r0, [r4, #0]
 801490e:	fa41 f105 	asr.w	r1, r1, r5
 8014912:	4001      	ands	r1, r0
 8014914:	430b      	orrs	r3, r1
 8014916:	7023      	strb	r3, [r4, #0]
 8014918:	3501      	adds	r5, #1
 801491a:	9b03      	ldr	r3, [sp, #12]
 801491c:	f025 0207 	bic.w	r2, r5, #7
 8014920:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 8014924:	3301      	adds	r3, #1
 8014926:	fa45 f502 	asr.w	r5, r5, r2
 801492a:	e7e1      	b.n	80148f0 <LCD_ReadRectEx+0xac>
 801492c:	4543      	cmp	r3, r8
 801492e:	dc72      	bgt.n	8014a16 <LCD_ReadRectEx+0x1d2>
 8014930:	4619      	mov	r1, r3
 8014932:	4632      	mov	r2, r6
 8014934:	9303      	str	r3, [sp, #12]
 8014936:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014938:	47c8      	blx	r9
 801493a:	006a      	lsls	r2, r5, #1
 801493c:	f1c2 0106 	rsb	r1, r2, #6
 8014940:	fa00 f301 	lsl.w	r3, r0, r1
 8014944:	7821      	ldrb	r1, [r4, #0]
 8014946:	f64f 703f 	movw	r0, #65343	; 0xff3f
 801494a:	fa40 f202 	asr.w	r2, r0, r2
 801494e:	400a      	ands	r2, r1
 8014950:	4313      	orrs	r3, r2
 8014952:	7023      	strb	r3, [r4, #0]
 8014954:	3501      	adds	r5, #1
 8014956:	9803      	ldr	r0, [sp, #12]
 8014958:	f025 0303 	bic.w	r3, r5, #3
 801495c:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 8014960:	fa45 f503 	asr.w	r5, r5, r3
 8014964:	1c43      	adds	r3, r0, #1
 8014966:	e7e1      	b.n	801492c <LCD_ReadRectEx+0xe8>
 8014968:	4543      	cmp	r3, r8
 801496a:	dc54      	bgt.n	8014a16 <LCD_ReadRectEx+0x1d2>
 801496c:	4619      	mov	r1, r3
 801496e:	4632      	mov	r2, r6
 8014970:	9303      	str	r3, [sp, #12]
 8014972:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014974:	47c8      	blx	r9
 8014976:	00aa      	lsls	r2, r5, #2
 8014978:	f1c2 0104 	rsb	r1, r2, #4
 801497c:	fa00 f301 	lsl.w	r3, r0, r1
 8014980:	7821      	ldrb	r1, [r4, #0]
 8014982:	200f      	movs	r0, #15
 8014984:	fa00 f202 	lsl.w	r2, r0, r2
 8014988:	400a      	ands	r2, r1
 801498a:	4313      	orrs	r3, r2
 801498c:	7023      	strb	r3, [r4, #0]
 801498e:	9b03      	ldr	r3, [sp, #12]
 8014990:	1964      	adds	r4, r4, r5
 8014992:	3301      	adds	r3, #1
 8014994:	f085 0501 	eor.w	r5, r5, #1
 8014998:	e7e6      	b.n	8014968 <LCD_ReadRectEx+0x124>
 801499a:	1be2      	subs	r2, r4, r7
 801499c:	4543      	cmp	r3, r8
 801499e:	f1c7 0c00 	rsb	ip, r7, #0
 80149a2:	eb02 0103 	add.w	r1, r2, r3
 80149a6:	dc0e      	bgt.n	80149c6 <LCD_ReadRectEx+0x182>
 80149a8:	4619      	mov	r1, r3
 80149aa:	4632      	mov	r2, r6
 80149ac:	9303      	str	r3, [sp, #12]
 80149ae:	f8cd c010 	str.w	ip, [sp, #16]
 80149b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80149b4:	47c8      	blx	r9
 80149b6:	f8dd c010 	ldr.w	ip, [sp, #16]
 80149ba:	9b03      	ldr	r3, [sp, #12]
 80149bc:	eb04 020c 	add.w	r2, r4, ip
 80149c0:	54d0      	strb	r0, [r2, r3]
 80149c2:	3301      	adds	r3, #1
 80149c4:	e7e9      	b.n	801499a <LCD_ReadRectEx+0x156>
 80149c6:	460c      	mov	r4, r1
 80149c8:	e025      	b.n	8014a16 <LCD_ReadRectEx+0x1d2>
 80149ca:	4543      	cmp	r3, r8
 80149cc:	4664      	mov	r4, ip
 80149ce:	f10c 0e02 	add.w	lr, ip, #2
 80149d2:	dc20      	bgt.n	8014a16 <LCD_ReadRectEx+0x1d2>
 80149d4:	4619      	mov	r1, r3
 80149d6:	9303      	str	r3, [sp, #12]
 80149d8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80149da:	f8cd e010 	str.w	lr, [sp, #16]
 80149de:	4632      	mov	r2, r6
 80149e0:	47c8      	blx	r9
 80149e2:	f8dd c010 	ldr.w	ip, [sp, #16]
 80149e6:	9903      	ldr	r1, [sp, #12]
 80149e8:	f82c 0c02 	strh.w	r0, [ip, #-2]
 80149ec:	1c4b      	adds	r3, r1, #1
 80149ee:	e7ec      	b.n	80149ca <LCD_ReadRectEx+0x186>
 80149f0:	4543      	cmp	r3, r8
 80149f2:	4664      	mov	r4, ip
 80149f4:	f10c 0e04 	add.w	lr, ip, #4
 80149f8:	dc0d      	bgt.n	8014a16 <LCD_ReadRectEx+0x1d2>
 80149fa:	4619      	mov	r1, r3
 80149fc:	9303      	str	r3, [sp, #12]
 80149fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014a00:	f8cd e010 	str.w	lr, [sp, #16]
 8014a04:	4632      	mov	r2, r6
 8014a06:	47c8      	blx	r9
 8014a08:	f8dd c010 	ldr.w	ip, [sp, #16]
 8014a0c:	9c03      	ldr	r4, [sp, #12]
 8014a0e:	f84c 0c04 	str.w	r0, [ip, #-4]
 8014a12:	1c63      	adds	r3, r4, #1
 8014a14:	e7ec      	b.n	80149f0 <LCD_ReadRectEx+0x1ac>
 8014a16:	3601      	adds	r6, #1
 8014a18:	e743      	b.n	80148a2 <LCD_ReadRectEx+0x5e>
 8014a1a:	b007      	add	sp, #28
 8014a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a20:	2000027c 	.word	0x2000027c

08014a24 <GUI_ReadRectEx>:
 8014a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a26:	4d16      	ldr	r5, [pc, #88]	; (8014a80 <GUI_ReadRectEx+0x5c>)
 8014a28:	9e05      	ldr	r6, [sp, #20]
 8014a2a:	682d      	ldr	r5, [r5, #0]
 8014a2c:	9c06      	ldr	r4, [sp, #24]
 8014a2e:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8014a32:	42b8      	cmp	r0, r7
 8014a34:	bfb8      	it	lt
 8014a36:	4638      	movlt	r0, r7
 8014a38:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8014a3c:	42ba      	cmp	r2, r7
 8014a3e:	bfa8      	it	ge
 8014a40:	463a      	movge	r2, r7
 8014a42:	4282      	cmp	r2, r0
 8014a44:	db1b      	blt.n	8014a7e <GUI_ReadRectEx+0x5a>
 8014a46:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8014a4a:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8014a4e:	42b9      	cmp	r1, r7
 8014a50:	bfb8      	it	lt
 8014a52:	4639      	movlt	r1, r7
 8014a54:	42ab      	cmp	r3, r5
 8014a56:	bfa8      	it	ge
 8014a58:	462b      	movge	r3, r5
 8014a5a:	428b      	cmp	r3, r1
 8014a5c:	da05      	bge.n	8014a6a <GUI_ReadRectEx+0x46>
 8014a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a60:	2d04      	cmp	r5, #4
 8014a62:	d006      	beq.n	8014a72 <GUI_ReadRectEx+0x4e>
 8014a64:	6825      	ldr	r5, [r4, #0]
 8014a66:	b125      	cbz	r5, 8014a72 <GUI_ReadRectEx+0x4e>
 8014a68:	462c      	mov	r4, r5
 8014a6a:	68e5      	ldr	r5, [r4, #12]
 8014a6c:	682d      	ldr	r5, [r5, #0]
 8014a6e:	2d00      	cmp	r5, #0
 8014a70:	d1f6      	bne.n	8014a60 <GUI_ReadRectEx+0x3c>
 8014a72:	9605      	str	r6, [sp, #20]
 8014a74:	9406      	str	r4, [sp, #24]
 8014a76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a7a:	f7ff bee3 	b.w	8014844 <LCD_ReadRectEx>
 8014a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a80:	2000027c 	.word	0x2000027c

08014a84 <_OnExit>:
 8014a84:	b510      	push	{r4, lr}
 8014a86:	4c03      	ldr	r4, [pc, #12]	; (8014a94 <_OnExit+0x10>)
 8014a88:	6820      	ldr	r0, [r4, #0]
 8014a8a:	f7fc ff13 	bl	80118b4 <GUI_ALLOC_FreeFixedBlock>
 8014a8e:	2300      	movs	r3, #0
 8014a90:	6023      	str	r3, [r4, #0]
 8014a92:	bd10      	pop	{r4, pc}
 8014a94:	20017b00 	.word	0x20017b00

08014a98 <LCD_InitColors>:
 8014a98:	b538      	push	{r3, r4, r5, lr}
 8014a9a:	4d09      	ldr	r5, [pc, #36]	; (8014ac0 <LCD_InitColors+0x28>)
 8014a9c:	682c      	ldr	r4, [r5, #0]
 8014a9e:	b95c      	cbnz	r4, 8014ab8 <LCD_InitColors+0x20>
 8014aa0:	4b08      	ldr	r3, [pc, #32]	; (8014ac4 <LCD_InitColors+0x2c>)
 8014aa2:	6818      	ldr	r0, [r3, #0]
 8014aa4:	0080      	lsls	r0, r0, #2
 8014aa6:	f7fd f89f 	bl	8011be8 <GUI_ALLOC_GetFixedBlock>
 8014aaa:	6028      	str	r0, [r5, #0]
 8014aac:	b130      	cbz	r0, 8014abc <LCD_InitColors+0x24>
 8014aae:	4806      	ldr	r0, [pc, #24]	; (8014ac8 <LCD_InitColors+0x30>)
 8014ab0:	4906      	ldr	r1, [pc, #24]	; (8014acc <LCD_InitColors+0x34>)
 8014ab2:	6001      	str	r1, [r0, #0]
 8014ab4:	f7fc fb10 	bl	80110d8 <GUI__RegisterExit>
 8014ab8:	2000      	movs	r0, #0
 8014aba:	bd38      	pop	{r3, r4, r5, pc}
 8014abc:	2001      	movs	r0, #1
 8014abe:	bd38      	pop	{r3, r4, r5, pc}
 8014ac0:	20017b00 	.word	0x20017b00
 8014ac4:	200002a8 	.word	0x200002a8
 8014ac8:	20016f58 	.word	0x20016f58
 8014acc:	08014a85 	.word	0x08014a85

08014ad0 <LCD_GetpPalConvTableUncached>:
 8014ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ad2:	b1e8      	cbz	r0, 8014b10 <LCD_GetpPalConvTableUncached+0x40>
 8014ad4:	6885      	ldr	r5, [r0, #8]
 8014ad6:	b1d5      	cbz	r5, 8014b0e <LCD_GetpPalConvTableUncached+0x3e>
 8014ad8:	4b0e      	ldr	r3, [pc, #56]	; (8014b14 <LCD_GetpPalConvTableUncached+0x44>)
 8014ada:	6819      	ldr	r1, [r3, #0]
 8014adc:	b1b9      	cbz	r1, 8014b0e <LCD_GetpPalConvTableUncached+0x3e>
 8014ade:	6800      	ldr	r0, [r0, #0]
 8014ae0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8014ae4:	dc13      	bgt.n	8014b0e <LCD_GetpPalConvTableUncached+0x3e>
 8014ae6:	4a0c      	ldr	r2, [pc, #48]	; (8014b18 <LCD_GetpPalConvTableUncached+0x48>)
 8014ae8:	6817      	ldr	r7, [r2, #0]
 8014aea:	2400      	movs	r4, #0
 8014aec:	4287      	cmp	r7, r0
 8014aee:	bfa8      	it	ge
 8014af0:	4607      	movge	r7, r0
 8014af2:	42bc      	cmp	r4, r7
 8014af4:	4b07      	ldr	r3, [pc, #28]	; (8014b14 <LCD_GetpPalConvTableUncached+0x44>)
 8014af6:	da08      	bge.n	8014b0a <LCD_GetpPalConvTableUncached+0x3a>
 8014af8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8014afc:	681e      	ldr	r6, [r3, #0]
 8014afe:	f7fa fda9 	bl	800f654 <LCD_Color2Index>
 8014b02:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8014b06:	3401      	adds	r4, #1
 8014b08:	e7f3      	b.n	8014af2 <LCD_GetpPalConvTableUncached+0x22>
 8014b0a:	6818      	ldr	r0, [r3, #0]
 8014b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b0e:	2000      	movs	r0, #0
 8014b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b12:	bf00      	nop
 8014b14:	20017b00 	.word	0x20017b00
 8014b18:	200002a8 	.word	0x200002a8

08014b1c <LCD_GetpPalConvTableBM>:
 8014b1c:	f7ff bfd8 	b.w	8014ad0 <LCD_GetpPalConvTableUncached>

08014b20 <LCD_InitLUT>:
 8014b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b24:	f001 f8e4 	bl	8015cf0 <LCD_GetNumLayers>
 8014b28:	2400      	movs	r4, #0
 8014b2a:	4607      	mov	r7, r0
 8014b2c:	42bc      	cmp	r4, r7
 8014b2e:	da2b      	bge.n	8014b88 <LCD_InitLUT+0x68>
 8014b30:	4620      	mov	r0, r4
 8014b32:	f7fc f9af 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 8014b36:	b328      	cbz	r0, 8014b84 <LCD_InitLUT+0x64>
 8014b38:	4620      	mov	r0, r4
 8014b3a:	f7fb fbb9 	bl	80102b0 <GUI_SelectLayer>
 8014b3e:	4680      	mov	r8, r0
 8014b40:	4620      	mov	r0, r4
 8014b42:	f7fa f9de 	bl	800ef02 <LCD_GetBitsPerPixelEx>
 8014b46:	2808      	cmp	r0, #8
 8014b48:	dd03      	ble.n	8014b52 <LCD_InitLUT+0x32>
 8014b4a:	4640      	mov	r0, r8
 8014b4c:	f7fb fbb0 	bl	80102b0 <GUI_SelectLayer>
 8014b50:	e018      	b.n	8014b84 <LCD_InitLUT+0x64>
 8014b52:	4b0e      	ldr	r3, [pc, #56]	; (8014b8c <LCD_InitLUT+0x6c>)
 8014b54:	490e      	ldr	r1, [pc, #56]	; (8014b90 <LCD_InitLUT+0x70>)
 8014b56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014b5a:	6902      	ldr	r2, [r0, #16]
 8014b5c:	428a      	cmp	r2, r1
 8014b5e:	d0f4      	beq.n	8014b4a <LCD_InitLUT+0x2a>
 8014b60:	4620      	mov	r0, r4
 8014b62:	f7fa f9d1 	bl	800ef08 <LCD_GetNumColorsEx>
 8014b66:	2500      	movs	r5, #0
 8014b68:	4681      	mov	r9, r0
 8014b6a:	454d      	cmp	r5, r9
 8014b6c:	daed      	bge.n	8014b4a <LCD_InitLUT+0x2a>
 8014b6e:	b2ee      	uxtb	r6, r5
 8014b70:	4630      	mov	r0, r6
 8014b72:	f7fa fd7f 	bl	800f674 <LCD_Index2Color>
 8014b76:	4631      	mov	r1, r6
 8014b78:	4602      	mov	r2, r0
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	f7fa f97e 	bl	800ee7c <LCD_SetLUTEntryEx>
 8014b80:	3501      	adds	r5, #1
 8014b82:	e7f2      	b.n	8014b6a <LCD_InitLUT+0x4a>
 8014b84:	3401      	adds	r4, #1
 8014b86:	e7d1      	b.n	8014b2c <LCD_InitLUT+0xc>
 8014b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b8c:	20017a04 	.word	0x20017a04
 8014b90:	08030a1c 	.word	0x08030a1c

08014b94 <LCD_AA_SetAndMask>:
 8014b94:	4b02      	ldr	r3, [pc, #8]	; (8014ba0 <LCD_AA_SetAndMask+0xc>)
 8014b96:	681a      	ldr	r2, [r3, #0]
 8014b98:	6018      	str	r0, [r3, #0]
 8014b9a:	4610      	mov	r0, r2
 8014b9c:	4770      	bx	lr
 8014b9e:	bf00      	nop
 8014ba0:	200002ac 	.word	0x200002ac

08014ba4 <GUI__strcmp>:
 8014ba4:	b510      	push	{r4, lr}
 8014ba6:	4b09      	ldr	r3, [pc, #36]	; (8014bcc <GUI__strcmp+0x28>)
 8014ba8:	2800      	cmp	r0, #0
 8014baa:	bf08      	it	eq
 8014bac:	4618      	moveq	r0, r3
 8014bae:	2900      	cmp	r1, #0
 8014bb0:	bf08      	it	eq
 8014bb2:	4619      	moveq	r1, r3
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	5cc4      	ldrb	r4, [r0, r3]
 8014bb8:	5cca      	ldrb	r2, [r1, r3]
 8014bba:	42a2      	cmp	r2, r4
 8014bbc:	d104      	bne.n	8014bc8 <GUI__strcmp+0x24>
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	2a00      	cmp	r2, #0
 8014bc2:	d1f8      	bne.n	8014bb6 <GUI__strcmp+0x12>
 8014bc4:	4610      	mov	r0, r2
 8014bc6:	bd10      	pop	{r4, pc}
 8014bc8:	2001      	movs	r0, #1
 8014bca:	bd10      	pop	{r4, pc}
 8014bcc:	0801b2b1 	.word	0x0801b2b1

08014bd0 <GUI__strcmp_hp>:
 8014bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bd2:	460d      	mov	r5, r1
 8014bd4:	b160      	cbz	r0, 8014bf0 <GUI__strcmp_hp+0x20>
 8014bd6:	f7fc fe81 	bl	80118dc <GUI_ALLOC_LockH>
 8014bda:	ac02      	add	r4, sp, #8
 8014bdc:	4629      	mov	r1, r5
 8014bde:	f844 0d04 	str.w	r0, [r4, #-4]!
 8014be2:	f7ff ffdf 	bl	8014ba4 <GUI__strcmp>
 8014be6:	4605      	mov	r5, r0
 8014be8:	4620      	mov	r0, r4
 8014bea:	f7fc fe85 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8014bee:	e000      	b.n	8014bf2 <GUI__strcmp_hp+0x22>
 8014bf0:	2501      	movs	r5, #1
 8014bf2:	4628      	mov	r0, r5
 8014bf4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08014bf6 <GUI__sqrt32>:
 8014bf6:	b510      	push	{r4, lr}
 8014bf8:	2110      	movs	r1, #16
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014c00:	189c      	adds	r4, r3, r2
 8014c02:	4284      	cmp	r4, r0
 8014c04:	bf9c      	itt	ls
 8014c06:	18a3      	addls	r3, r4, r2
 8014c08:	ebc4 0000 	rsbls	r0, r4, r0
 8014c0c:	085b      	lsrs	r3, r3, #1
 8014c0e:	0892      	lsrs	r2, r2, #2
 8014c10:	3901      	subs	r1, #1
 8014c12:	d1f5      	bne.n	8014c00 <GUI__sqrt32+0xa>
 8014c14:	4618      	mov	r0, r3
 8014c16:	bd10      	pop	{r4, pc}

08014c18 <_GetCharWrap>:
 8014c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c1a:	2400      	movs	r4, #0
 8014c1c:	9001      	str	r0, [sp, #4]
 8014c1e:	460e      	mov	r6, r1
 8014c20:	4625      	mov	r5, r4
 8014c22:	a801      	add	r0, sp, #4
 8014c24:	f000 fc50 	bl	80154c8 <GUI_UC__GetCharCodeInc>
 8014c28:	4607      	mov	r7, r0
 8014c2a:	b148      	cbz	r0, 8014c40 <_GetCharWrap+0x28>
 8014c2c:	f7fc fd54 	bl	80116d8 <GUI_GetCharDistX>
 8014c30:	182d      	adds	r5, r5, r0
 8014c32:	b10c      	cbz	r4, 8014c38 <_GetCharWrap+0x20>
 8014c34:	42b5      	cmp	r5, r6
 8014c36:	dc03      	bgt.n	8014c40 <_GetCharWrap+0x28>
 8014c38:	2f0a      	cmp	r7, #10
 8014c3a:	d001      	beq.n	8014c40 <_GetCharWrap+0x28>
 8014c3c:	3401      	adds	r4, #1
 8014c3e:	e7f0      	b.n	8014c22 <_GetCharWrap+0xa>
 8014c40:	4620      	mov	r0, r4
 8014c42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08014c44 <_GetWordWrap>:
 8014c44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c48:	2400      	movs	r4, #0
 8014c4a:	9001      	str	r0, [sp, #4]
 8014c4c:	468a      	mov	sl, r1
 8014c4e:	4691      	mov	r9, r2
 8014c50:	46a0      	mov	r8, r4
 8014c52:	4626      	mov	r6, r4
 8014c54:	4625      	mov	r5, r4
 8014c56:	4627      	mov	r7, r4
 8014c58:	a801      	add	r0, sp, #4
 8014c5a:	f000 fc35 	bl	80154c8 <GUI_UC__GetCharCodeInc>
 8014c5e:	2c00      	cmp	r4, #0
 8014c60:	bf08      	it	eq
 8014c62:	4604      	moveq	r4, r0
 8014c64:	b108      	cbz	r0, 8014c6a <_GetWordWrap+0x26>
 8014c66:	280a      	cmp	r0, #10
 8014c68:	d10c      	bne.n	8014c84 <_GetWordWrap+0x40>
 8014c6a:	462e      	mov	r6, r5
 8014c6c:	2e00      	cmp	r6, #0
 8014c6e:	bf14      	ite	ne
 8014c70:	4630      	movne	r0, r6
 8014c72:	4628      	moveq	r0, r5
 8014c74:	f1b9 0f00 	cmp.w	r9, #0
 8014c78:	d016      	beq.n	8014ca8 <_GetWordWrap+0x64>
 8014c7a:	ebc8 0707 	rsb	r7, r8, r7
 8014c7e:	f8c9 7000 	str.w	r7, [r9]
 8014c82:	e011      	b.n	8014ca8 <_GetWordWrap+0x64>
 8014c84:	2820      	cmp	r0, #32
 8014c86:	d00d      	beq.n	8014ca4 <_GetWordWrap+0x60>
 8014c88:	2c20      	cmp	r4, #32
 8014c8a:	bf04      	itt	eq
 8014c8c:	462e      	moveq	r6, r5
 8014c8e:	2400      	moveq	r4, #0
 8014c90:	f7fc fd22 	bl	80116d8 <GUI_GetCharDistX>
 8014c94:	183f      	adds	r7, r7, r0
 8014c96:	4557      	cmp	r7, sl
 8014c98:	4680      	mov	r8, r0
 8014c9a:	dd01      	ble.n	8014ca0 <_GetWordWrap+0x5c>
 8014c9c:	2d00      	cmp	r5, #0
 8014c9e:	d1e5      	bne.n	8014c6c <_GetWordWrap+0x28>
 8014ca0:	3501      	adds	r5, #1
 8014ca2:	e7d9      	b.n	8014c58 <_GetWordWrap+0x14>
 8014ca4:	462e      	mov	r6, r5
 8014ca6:	e7f3      	b.n	8014c90 <_GetWordWrap+0x4c>
 8014ca8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

08014cac <_WrapGetNumCharsDisp>:
 8014cac:	2a01      	cmp	r2, #1
 8014cae:	b510      	push	{r4, lr}
 8014cb0:	d005      	beq.n	8014cbe <_WrapGetNumCharsDisp+0x12>
 8014cb2:	2a02      	cmp	r2, #2
 8014cb4:	d108      	bne.n	8014cc8 <_WrapGetNumCharsDisp+0x1c>
 8014cb6:	4b07      	ldr	r3, [pc, #28]	; (8014cd4 <_WrapGetNumCharsDisp+0x28>)
 8014cb8:	681a      	ldr	r2, [r3, #0]
 8014cba:	4790      	blx	r2
 8014cbc:	bd10      	pop	{r4, pc}
 8014cbe:	4c06      	ldr	r4, [pc, #24]	; (8014cd8 <_WrapGetNumCharsDisp+0x2c>)
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	6824      	ldr	r4, [r4, #0]
 8014cc4:	47a0      	blx	r4
 8014cc6:	bd10      	pop	{r4, pc}
 8014cc8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cd0:	f7fc bc36 	b.w	8011540 <GUI__GetLineNumChars>
 8014cd4:	200002b0 	.word	0x200002b0
 8014cd8:	200002b4 	.word	0x200002b4

08014cdc <GUI__WrapGetNumCharsDisp>:
 8014cdc:	2300      	movs	r3, #0
 8014cde:	f7ff bfe5 	b.w	8014cac <_WrapGetNumCharsDisp>

08014ce2 <GUI__WrapGetNumCharsToNextLine>:
 8014ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ce4:	b085      	sub	sp, #20
 8014ce6:	ab03      	add	r3, sp, #12
 8014ce8:	4617      	mov	r7, r2
 8014cea:	460e      	mov	r6, r1
 8014cec:	9001      	str	r0, [sp, #4]
 8014cee:	f7ff ffdd 	bl	8014cac <_WrapGetNumCharsDisp>
 8014cf2:	9d01      	ldr	r5, [sp, #4]
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	4621      	mov	r1, r4
 8014cf8:	4628      	mov	r0, r5
 8014cfa:	f000 fbf9 	bl	80154f0 <GUI_UC__NumChars2NumBytes>
 8014cfe:	182d      	adds	r5, r5, r0
 8014d00:	a804      	add	r0, sp, #16
 8014d02:	f840 5d0c 	str.w	r5, [r0, #-12]!
 8014d06:	f000 fbdf 	bl	80154c8 <GUI_UC__GetCharCodeInc>
 8014d0a:	280a      	cmp	r0, #10
 8014d0c:	d101      	bne.n	8014d12 <GUI__WrapGetNumCharsToNextLine+0x30>
 8014d0e:	3401      	adds	r4, #1
 8014d10:	e011      	b.n	8014d36 <GUI__WrapGetNumCharsToNextLine+0x54>
 8014d12:	2f01      	cmp	r7, #1
 8014d14:	d10f      	bne.n	8014d36 <GUI__WrapGetNumCharsToNextLine+0x54>
 8014d16:	2820      	cmp	r0, #32
 8014d18:	d10d      	bne.n	8014d36 <GUI__WrapGetNumCharsToNextLine+0x54>
 8014d1a:	f7fc fcdd 	bl	80116d8 <GUI_GetCharDistX>
 8014d1e:	4605      	mov	r5, r0
 8014d20:	9803      	ldr	r0, [sp, #12]
 8014d22:	4286      	cmp	r6, r0
 8014d24:	db07      	blt.n	8014d36 <GUI__WrapGetNumCharsToNextLine+0x54>
 8014d26:	1941      	adds	r1, r0, r5
 8014d28:	a801      	add	r0, sp, #4
 8014d2a:	9103      	str	r1, [sp, #12]
 8014d2c:	f000 fbcc 	bl	80154c8 <GUI_UC__GetCharCodeInc>
 8014d30:	3401      	adds	r4, #1
 8014d32:	2820      	cmp	r0, #32
 8014d34:	d0f4      	beq.n	8014d20 <GUI__WrapGetNumCharsToNextLine+0x3e>
 8014d36:	4620      	mov	r0, r4
 8014d38:	b005      	add	sp, #20
 8014d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014d3c <GUI__WrapGetNumBytesToNextLine>:
 8014d3c:	b510      	push	{r4, lr}
 8014d3e:	4604      	mov	r4, r0
 8014d40:	f7ff ffcf 	bl	8014ce2 <GUI__WrapGetNumCharsToNextLine>
 8014d44:	4601      	mov	r1, r0
 8014d46:	4620      	mov	r0, r4
 8014d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d4c:	f000 bbd0 	b.w	80154f0 <GUI_UC__NumChars2NumBytes>

08014d50 <GUI__HandleEOLine>:
 8014d50:	6803      	ldr	r3, [r0, #0]
 8014d52:	781a      	ldrb	r2, [r3, #0]
 8014d54:	b122      	cbz	r2, 8014d60 <GUI__HandleEOLine+0x10>
 8014d56:	2a0a      	cmp	r2, #10
 8014d58:	d104      	bne.n	8014d64 <GUI__HandleEOLine+0x14>
 8014d5a:	1c59      	adds	r1, r3, #1
 8014d5c:	6001      	str	r1, [r0, #0]
 8014d5e:	e001      	b.n	8014d64 <GUI__HandleEOLine+0x14>
 8014d60:	2001      	movs	r0, #1
 8014d62:	4770      	bx	lr
 8014d64:	2000      	movs	r0, #0
 8014d66:	4770      	bx	lr

08014d68 <GUI__GetNumChars>:
 8014d68:	b513      	push	{r0, r1, r4, lr}
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	9001      	str	r0, [sp, #4]
 8014d6e:	b130      	cbz	r0, 8014d7e <GUI__GetNumChars+0x16>
 8014d70:	2400      	movs	r4, #0
 8014d72:	a801      	add	r0, sp, #4
 8014d74:	f000 fba8 	bl	80154c8 <GUI_UC__GetCharCodeInc>
 8014d78:	b108      	cbz	r0, 8014d7e <GUI__GetNumChars+0x16>
 8014d7a:	3401      	adds	r4, #1
 8014d7c:	e7f9      	b.n	8014d72 <GUI__GetNumChars+0xa>
 8014d7e:	4620      	mov	r0, r4
 8014d80:	bd1c      	pop	{r2, r3, r4, pc}
	...

08014d84 <GUI__GetFontSizeY>:
 8014d84:	4b03      	ldr	r3, [pc, #12]	; (8014d94 <GUI__GetFontSizeY+0x10>)
 8014d86:	6818      	ldr	r0, [r3, #0]
 8014d88:	69c1      	ldr	r1, [r0, #28]
 8014d8a:	7e08      	ldrb	r0, [r1, #24]
 8014d8c:	7eca      	ldrb	r2, [r1, #27]
 8014d8e:	4350      	muls	r0, r2
 8014d90:	4770      	bx	lr
 8014d92:	bf00      	nop
 8014d94:	2000027c 	.word	0x2000027c

08014d98 <GUI__ExpandPixelIndicesEx>:
 8014d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d9c:	1e0c      	subs	r4, r1, #0
 8014d9e:	4605      	mov	r5, r0
 8014da0:	f340 80b0 	ble.w	8014f04 <GUI__ExpandPixelIndicesEx+0x16c>
 8014da4:	2a08      	cmp	r2, #8
 8014da6:	685f      	ldr	r7, [r3, #4]
 8014da8:	dd04      	ble.n	8014db4 <GUI__ExpandPixelIndicesEx+0x1c>
 8014daa:	2a10      	cmp	r2, #16
 8014dac:	f340 8095 	ble.w	8014eda <GUI__ExpandPixelIndicesEx+0x142>
 8014db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014db4:	3a01      	subs	r2, #1
 8014db6:	2a07      	cmp	r2, #7
 8014db8:	f200 80a4 	bhi.w	8014f04 <GUI__ExpandPixelIndicesEx+0x16c>
 8014dbc:	e8df f002 	tbb	[pc, r2]
 8014dc0:	53a22a04 	.word	0x53a22a04
 8014dc4:	7ca2a2a2 	.word	0x7ca2a2a2
 8014dc8:	1e66      	subs	r6, r4, #1
 8014dca:	10f1      	asrs	r1, r6, #3
 8014dcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014dd0:	2280      	movs	r2, #128	; 0x80
 8014dd2:	f006 0607 	and.w	r6, r6, #7
 8014dd6:	eb05 0e01 	add.w	lr, r5, r1
 8014dda:	fa42 f206 	asr.w	r2, r2, r6
 8014dde:	f815 9001 	ldrb.w	r9, [r5, r1]
 8014de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8014de6:	b2d5      	uxtb	r5, r2
 8014de8:	f1c6 0307 	rsb	r3, r6, #7
 8014dec:	ea09 0005 	and.w	r0, r9, r5
 8014df0:	fa40 f003 	asr.w	r0, r0, r3
 8014df4:	47b8      	blx	r7
 8014df6:	f848 0904 	str.w	r0, [r8], #-4
 8014dfa:	b926      	cbnz	r6, 8014e06 <GUI__ExpandPixelIndicesEx+0x6e>
 8014dfc:	f81a 9901 	ldrb.w	r9, [sl], #-1
 8014e00:	2501      	movs	r5, #1
 8014e02:	2607      	movs	r6, #7
 8014e04:	e002      	b.n	8014e0c <GUI__ExpandPixelIndicesEx+0x74>
 8014e06:	0068      	lsls	r0, r5, #1
 8014e08:	3e01      	subs	r6, #1
 8014e0a:	b2c5      	uxtb	r5, r0
 8014e0c:	3c01      	subs	r4, #1
 8014e0e:	d1eb      	bne.n	8014de8 <GUI__ExpandPixelIndicesEx+0x50>
 8014e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e14:	1e62      	subs	r2, r4, #1
 8014e16:	1093      	asrs	r3, r2, #2
 8014e18:	f002 0603 	and.w	r6, r2, #3
 8014e1c:	eb05 0c03 	add.w	ip, r5, r3
 8014e20:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8014e24:	f815 9003 	ldrb.w	r9, [r5, r3]
 8014e28:	0070      	lsls	r0, r6, #1
 8014e2a:	25c0      	movs	r5, #192	; 0xc0
 8014e2c:	fa45 f500 	asr.w	r5, r5, r0
 8014e30:	f10c 3aff 	add.w	sl, ip, #4294967295
 8014e34:	b2ed      	uxtb	r5, r5
 8014e36:	0072      	lsls	r2, r6, #1
 8014e38:	ea09 0105 	and.w	r1, r9, r5
 8014e3c:	f1c2 0306 	rsb	r3, r2, #6
 8014e40:	fa41 f003 	asr.w	r0, r1, r3
 8014e44:	b2c0      	uxtb	r0, r0
 8014e46:	47b8      	blx	r7
 8014e48:	f848 0904 	str.w	r0, [r8], #-4
 8014e4c:	b926      	cbnz	r6, 8014e58 <GUI__ExpandPixelIndicesEx+0xc0>
 8014e4e:	2503      	movs	r5, #3
 8014e50:	f81a 9901 	ldrb.w	r9, [sl], #-1
 8014e54:	462e      	mov	r6, r5
 8014e56:	e002      	b.n	8014e5e <GUI__ExpandPixelIndicesEx+0xc6>
 8014e58:	00ad      	lsls	r5, r5, #2
 8014e5a:	3e01      	subs	r6, #1
 8014e5c:	b2ed      	uxtb	r5, r5
 8014e5e:	3c01      	subs	r4, #1
 8014e60:	d1e9      	bne.n	8014e36 <GUI__ExpandPixelIndicesEx+0x9e>
 8014e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e66:	1e66      	subs	r6, r4, #1
 8014e68:	1071      	asrs	r1, r6, #1
 8014e6a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014e6e:	f006 0601 	and.w	r6, r6, #1
 8014e72:	eb05 0a01 	add.w	sl, r5, r1
 8014e76:	f815 9001 	ldrb.w	r9, [r5, r1]
 8014e7a:	00b5      	lsls	r5, r6, #2
 8014e7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e80:	2d00      	cmp	r5, #0
 8014e82:	bf14      	ite	ne
 8014e84:	250f      	movne	r5, #15
 8014e86:	25f0      	moveq	r5, #240	; 0xf0
 8014e88:	00b3      	lsls	r3, r6, #2
 8014e8a:	f1c3 0004 	rsb	r0, r3, #4
 8014e8e:	ea09 0205 	and.w	r2, r9, r5
 8014e92:	fa42 f100 	asr.w	r1, r2, r0
 8014e96:	b2c8      	uxtb	r0, r1
 8014e98:	47b8      	blx	r7
 8014e9a:	f848 0904 	str.w	r0, [r8], #-4
 8014e9e:	b926      	cbnz	r6, 8014eaa <GUI__ExpandPixelIndicesEx+0x112>
 8014ea0:	f81a 9901 	ldrb.w	r9, [sl], #-1
 8014ea4:	250f      	movs	r5, #15
 8014ea6:	2601      	movs	r6, #1
 8014ea8:	e002      	b.n	8014eb0 <GUI__ExpandPixelIndicesEx+0x118>
 8014eaa:	012e      	lsls	r6, r5, #4
 8014eac:	b2f5      	uxtb	r5, r6
 8014eae:	2600      	movs	r6, #0
 8014eb0:	3c01      	subs	r4, #1
 8014eb2:	d1e9      	bne.n	8014e88 <GUI__ExpandPixelIndicesEx+0xf0>
 8014eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eb8:	eb05 0804 	add.w	r8, r5, r4
 8014ebc:	4646      	mov	r6, r8
 8014ebe:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8014ec2:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8014ec6:	47b8      	blx	r7
 8014ec8:	ebc8 0304 	rsb	r3, r8, r4
 8014ecc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014ed0:	1998      	adds	r0, r3, r6
 8014ed2:	2800      	cmp	r0, #0
 8014ed4:	d1f5      	bne.n	8014ec2 <GUI__ExpandPixelIndicesEx+0x12a>
 8014ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eda:	695e      	ldr	r6, [r3, #20]
 8014edc:	b12e      	cbz	r6, 8014eea <GUI__ExpandPixelIndicesEx+0x152>
 8014ede:	4629      	mov	r1, r5
 8014ee0:	4622      	mov	r2, r4
 8014ee2:	2302      	movs	r3, #2
 8014ee4:	47b0      	blx	r6
 8014ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eea:	eb05 0644 	add.w	r6, r5, r4, lsl #1
 8014eee:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8014ef2:	f836 0d02 	ldrh.w	r0, [r6, #-2]!
 8014ef6:	47b8      	blx	r7
 8014ef8:	3c01      	subs	r4, #1
 8014efa:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014efe:	d1f8      	bne.n	8014ef2 <GUI__ExpandPixelIndicesEx+0x15a>
 8014f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014f08 <GUI__DrawBitmap16bpp>:
 8014f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f0c:	b08f      	sub	sp, #60	; 0x3c
 8014f0e:	460d      	mov	r5, r1
 8014f10:	4693      	mov	fp, r2
 8014f12:	4699      	mov	r9, r3
 8014f14:	9007      	str	r0, [sp, #28]
 8014f16:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014f18:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014f1a:	f000 fb42 	bl	80155a2 <GUI_GetColor>
 8014f1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8014f20:	f000 fefc 	bl	8015d1c <LCD_GetColorIndex>
 8014f24:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8014f26:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014f28:	430f      	orrs	r7, r1
 8014f2a:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8014f2e:	2f01      	cmp	r7, #1
 8014f30:	4684      	mov	ip, r0
 8014f32:	9208      	str	r2, [sp, #32]
 8014f34:	d001      	beq.n	8014f3a <GUI__DrawBitmap16bpp+0x32>
 8014f36:	2700      	movs	r7, #0
 8014f38:	e028      	b.n	8014f8c <GUI__DrawBitmap16bpp+0x84>
 8014f3a:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8015144 <GUI__DrawBitmap16bpp+0x23c>
 8014f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8014f42:	7c58      	ldrb	r0, [r3, #17]
 8014f44:	f7fa f81a 	bl	800ef7c <GUI_GetpfIndex2ColorEx>
 8014f48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014f4a:	4282      	cmp	r2, r0
 8014f4c:	d146      	bne.n	8014fdc <GUI__DrawBitmap16bpp+0xd4>
 8014f4e:	9a08      	ldr	r2, [sp, #32]
 8014f50:	9700      	str	r7, [sp, #0]
 8014f52:	2110      	movs	r1, #16
 8014f54:	2000      	movs	r0, #0
 8014f56:	9102      	str	r1, [sp, #8]
 8014f58:	9203      	str	r2, [sp, #12]
 8014f5a:	9005      	str	r0, [sp, #20]
 8014f5c:	9701      	str	r7, [sp, #4]
 8014f5e:	9404      	str	r4, [sp, #16]
 8014f60:	9807      	ldr	r0, [sp, #28]
 8014f62:	4629      	mov	r1, r5
 8014f64:	465a      	mov	r2, fp
 8014f66:	464b      	mov	r3, r9
 8014f68:	f7fa fa0e 	bl	800f388 <LCD_DrawBitmap>
 8014f6c:	e0e6      	b.n	801513c <GUI__DrawBitmap16bpp+0x234>
 8014f6e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014f70:	4974      	ldr	r1, [pc, #464]	; (8015144 <GUI__DrawBitmap16bpp+0x23c>)
 8014f72:	182b      	adds	r3, r5, r0
 8014f74:	6808      	ldr	r0, [r1, #0]
 8014f76:	9309      	str	r3, [sp, #36]	; 0x24
 8014f78:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014f7c:	f103 3aff 	add.w	sl, r3, #4294967295
 8014f80:	4592      	cmp	sl, r2
 8014f82:	da06      	bge.n	8014f92 <GUI__DrawBitmap16bpp+0x8a>
 8014f84:	9d08      	ldr	r5, [sp, #32]
 8014f86:	1964      	adds	r4, r4, r5
 8014f88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014f8a:	3701      	adds	r7, #1
 8014f8c:	454f      	cmp	r7, r9
 8014f8e:	dbee      	blt.n	8014f6e <GUI__DrawBitmap16bpp+0x66>
 8014f90:	e079      	b.n	8015086 <GUI__DrawBitmap16bpp+0x17e>
 8014f92:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8014f96:	429d      	cmp	r5, r3
 8014f98:	dcf4      	bgt.n	8014f84 <GUI__DrawBitmap16bpp+0x7c>
 8014f9a:	9a07      	ldr	r2, [sp, #28]
 8014f9c:	2600      	movs	r6, #0
 8014f9e:	455e      	cmp	r6, fp
 8014fa0:	daf0      	bge.n	8014f84 <GUI__DrawBitmap16bpp+0x7c>
 8014fa2:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8014fa6:	45e0      	cmp	r8, ip
 8014fa8:	d007      	beq.n	8014fba <GUI__DrawBitmap16bpp+0xb2>
 8014faa:	9206      	str	r2, [sp, #24]
 8014fac:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014fae:	4640      	mov	r0, r8
 8014fb0:	4788      	blx	r1
 8014fb2:	f7fa fbb3 	bl	800f71c <LCD_SetColor>
 8014fb6:	9a06      	ldr	r2, [sp, #24]
 8014fb8:	46c4      	mov	ip, r8
 8014fba:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014fbc:	f8cd c018 	str.w	ip, [sp, #24]
 8014fc0:	eb02 0800 	add.w	r8, r2, r0
 8014fc4:	4629      	mov	r1, r5
 8014fc6:	4610      	mov	r0, r2
 8014fc8:	4653      	mov	r3, sl
 8014fca:	f108 32ff 	add.w	r2, r8, #4294967295
 8014fce:	f7fa f8d5 	bl	800f17c <LCD_FillRect>
 8014fd2:	3601      	adds	r6, #1
 8014fd4:	4642      	mov	r2, r8
 8014fd6:	f8dd c018 	ldr.w	ip, [sp, #24]
 8014fda:	e7e0      	b.n	8014f9e <GUI__DrawBitmap16bpp+0x96>
 8014fdc:	eb05 0109 	add.w	r1, r5, r9
 8014fe0:	1e48      	subs	r0, r1, #1
 8014fe2:	9009      	str	r0, [sp, #36]	; 0x24
 8014fe4:	f8d8 0000 	ldr.w	r0, [r8]
 8014fe8:	9b07      	ldr	r3, [sp, #28]
 8014fea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014fee:	eb03 0a0b 	add.w	sl, r3, fp
 8014ff2:	4295      	cmp	r5, r2
 8014ff4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ff8:	da06      	bge.n	8015008 <GUI__DrawBitmap16bpp+0x100>
 8014ffa:	9908      	ldr	r1, [sp, #32]
 8014ffc:	1b55      	subs	r5, r2, r5
 8014ffe:	fb05 4401 	mla	r4, r5, r1, r4
 8015002:	ebc5 0909 	rsb	r9, r5, r9
 8015006:	4615      	mov	r5, r2
 8015008:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 801500c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801500e:	1ad1      	subs	r1, r2, r3
 8015010:	2900      	cmp	r1, #0
 8015012:	bfc8      	it	gt
 8015014:	ebc1 0909 	rsbgt	r9, r1, r9
 8015018:	f1b9 0f00 	cmp.w	r9, #0
 801501c:	f340 808e 	ble.w	801513c <GUI__DrawBitmap16bpp+0x234>
 8015020:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8015024:	9907      	ldr	r1, [sp, #28]
 8015026:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801502a:	ebc3 020a 	rsb	r2, r3, sl
 801502e:	2a00      	cmp	r2, #0
 8015030:	bfc8      	it	gt
 8015032:	ebc2 0b0b 	rsbgt	fp, r2, fp
 8015036:	4281      	cmp	r1, r0
 8015038:	da05      	bge.n	8015046 <GUI__DrawBitmap16bpp+0x13e>
 801503a:	1a43      	subs	r3, r0, r1
 801503c:	ebc3 0b0b 	rsb	fp, r3, fp
 8015040:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015044:	9007      	str	r0, [sp, #28]
 8015046:	f1bb 0f00 	cmp.w	fp, #0
 801504a:	dd77      	ble.n	801513c <GUI__DrawBitmap16bpp+0x234>
 801504c:	2100      	movs	r1, #0
 801504e:	910d      	str	r1, [sp, #52]	; 0x34
 8015050:	b1ee      	cbz	r6, 801508e <GUI__DrawBitmap16bpp+0x186>
 8015052:	f8d6 8014 	ldr.w	r8, [r6, #20]
 8015056:	f1b8 0f00 	cmp.w	r8, #0
 801505a:	d004      	beq.n	8015066 <GUI__DrawBitmap16bpp+0x15e>
 801505c:	a80d      	add	r0, sp, #52	; 0x34
 801505e:	460a      	mov	r2, r1
 8015060:	460b      	mov	r3, r1
 8015062:	f7fa fedd 	bl	800fe20 <GUI__GetAlphaBuffer>
 8015066:	4f37      	ldr	r7, [pc, #220]	; (8015144 <GUI__DrawBitmap16bpp+0x23c>)
 8015068:	f000 fe28 	bl	8015cbc <LCD_GetNextPixelAPI>
 801506c:	683a      	ldr	r2, [r7, #0]
 801506e:	4606      	mov	r6, r0
 8015070:	7c50      	ldrb	r0, [r2, #17]
 8015072:	f7f9 ff8b 	bl	800ef8c <GUI_GetpfColor2IndexEx>
 8015076:	4629      	mov	r1, r5
 8015078:	900a      	str	r0, [sp, #40]	; 0x28
 801507a:	4652      	mov	r2, sl
 801507c:	9807      	ldr	r0, [sp, #28]
 801507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015080:	6835      	ldr	r5, [r6, #0]
 8015082:	47a8      	blx	r5
 8015084:	b128      	cbz	r0, 8015092 <GUI__DrawBitmap16bpp+0x18a>
 8015086:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015088:	f7fb f8fe 	bl	8010288 <GUI_SetColor>
 801508c:	e056      	b.n	801513c <GUI__DrawBitmap16bpp+0x234>
 801508e:	46b0      	mov	r8, r6
 8015090:	e7e9      	b.n	8015066 <GUI__DrawBitmap16bpp+0x15e>
 8015092:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015094:	b91d      	cbnz	r5, 801509e <GUI__DrawBitmap16bpp+0x196>
 8015096:	9f08      	ldr	r7, [sp, #32]
 8015098:	ea4f 084b 	mov.w	r8, fp, lsl #1
 801509c:	e045      	b.n	801512a <GUI__DrawBitmap16bpp+0x222>
 801509e:	683f      	ldr	r7, [r7, #0]
 80150a0:	4929      	ldr	r1, [pc, #164]	; (8015148 <GUI__DrawBitmap16bpp+0x240>)
 80150a2:	7c7d      	ldrb	r5, [r7, #17]
 80150a4:	9f08      	ldr	r7, [sp, #32]
 80150a6:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 80150aa:	691a      	ldr	r2, [r3, #16]
 80150ac:	6915      	ldr	r5, [r2, #16]
 80150ae:	4620      	mov	r0, r4
 80150b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80150b2:	465a      	mov	r2, fp
 80150b4:	2302      	movs	r3, #2
 80150b6:	47c0      	blx	r8
 80150b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80150ba:	b125      	cbz	r5, 80150c6 <GUI__DrawBitmap16bpp+0x1be>
 80150bc:	4601      	mov	r1, r0
 80150be:	465a      	mov	r2, fp
 80150c0:	2304      	movs	r3, #4
 80150c2:	47a8      	blx	r5
 80150c4:	e00c      	b.n	80150e0 <GUI__DrawBitmap16bpp+0x1d8>
 80150c6:	4603      	mov	r3, r0
 80150c8:	46aa      	mov	sl, r5
 80150ca:	6818      	ldr	r0, [r3, #0]
 80150cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80150ce:	9306      	str	r3, [sp, #24]
 80150d0:	4788      	blx	r1
 80150d2:	f10a 0a01 	add.w	sl, sl, #1
 80150d6:	9b06      	ldr	r3, [sp, #24]
 80150d8:	45da      	cmp	sl, fp
 80150da:	f843 0b04 	str.w	r0, [r3], #4
 80150de:	d1f4      	bne.n	80150ca <GUI__DrawBitmap16bpp+0x1c2>
 80150e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150e2:	f04f 0a00 	mov.w	sl, #0
 80150e6:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 80150ea:	6871      	ldr	r1, [r6, #4]
 80150ec:	9206      	str	r2, [sp, #24]
 80150ee:	f10a 0a01 	add.w	sl, sl, #1
 80150f2:	4788      	blx	r1
 80150f4:	45da      	cmp	sl, fp
 80150f6:	9a06      	ldr	r2, [sp, #24]
 80150f8:	d1f5      	bne.n	80150e6 <GUI__DrawBitmap16bpp+0x1de>
 80150fa:	68b0      	ldr	r0, [r6, #8]
 80150fc:	4780      	blx	r0
 80150fe:	f1b9 0901 	subs.w	r9, r9, #1
 8015102:	443c      	add	r4, r7
 8015104:	d1d3      	bne.n	80150ae <GUI__DrawBitmap16bpp+0x1a6>
 8015106:	68f3      	ldr	r3, [r6, #12]
 8015108:	4798      	blx	r3
 801510a:	e7bc      	b.n	8015086 <GUI__DrawBitmap16bpp+0x17e>
 801510c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801510e:	f839 0b02 	ldrh.w	r0, [r9], #2
 8015112:	4788      	blx	r1
 8015114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015116:	4798      	blx	r3
 8015118:	6872      	ldr	r2, [r6, #4]
 801511a:	4790      	blx	r2
 801511c:	45d1      	cmp	r9, sl
 801511e:	d1f5      	bne.n	801510c <GUI__DrawBitmap16bpp+0x204>
 8015120:	b115      	cbz	r5, 8015128 <GUI__DrawBitmap16bpp+0x220>
 8015122:	68b0      	ldr	r0, [r6, #8]
 8015124:	4780      	blx	r0
 8015126:	19e4      	adds	r4, r4, r7
 8015128:	46a9      	mov	r9, r5
 801512a:	f109 35ff 	add.w	r5, r9, #4294967295
 801512e:	f1b9 0f00 	cmp.w	r9, #0
 8015132:	d0e8      	beq.n	8015106 <GUI__DrawBitmap16bpp+0x1fe>
 8015134:	eb04 0a08 	add.w	sl, r4, r8
 8015138:	46a1      	mov	r9, r4
 801513a:	e7e7      	b.n	801510c <GUI__DrawBitmap16bpp+0x204>
 801513c:	b00f      	add	sp, #60	; 0x3c
 801513e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015142:	bf00      	nop
 8015144:	2000027c 	.word	0x2000027c
 8015148:	20017a04 	.word	0x20017a04

0801514c <GUI__CompactPixelIndices>:
 801514c:	2a08      	cmp	r2, #8
 801514e:	b530      	push	{r4, r5, lr}
 8015150:	dd0d      	ble.n	801516e <GUI__CompactPixelIndices+0x22>
 8015152:	2a10      	cmp	r2, #16
 8015154:	dc09      	bgt.n	801516a <GUI__CompactPixelIndices+0x1e>
 8015156:	2300      	movs	r3, #0
 8015158:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801515c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8015160:	3301      	adds	r3, #1
 8015162:	428b      	cmp	r3, r1
 8015164:	d1f8      	bne.n	8015158 <GUI__CompactPixelIndices+0xc>
 8015166:	2001      	movs	r0, #1
 8015168:	bd30      	pop	{r4, r5, pc}
 801516a:	2000      	movs	r0, #0
 801516c:	bd30      	pop	{r4, r5, pc}
 801516e:	2a02      	cmp	r2, #2
 8015170:	d125      	bne.n	80151be <GUI__CompactPixelIndices+0x72>
 8015172:	4602      	mov	r2, r0
 8015174:	6803      	ldr	r3, [r0, #0]
 8015176:	019c      	lsls	r4, r3, #6
 8015178:	b2e3      	uxtb	r3, r4
 801517a:	1e4c      	subs	r4, r1, #1
 801517c:	d01c      	beq.n	80151b8 <GUI__CompactPixelIndices+0x6c>
 801517e:	6845      	ldr	r5, [r0, #4]
 8015180:	3c01      	subs	r4, #1
 8015182:	f005 0503 	and.w	r5, r5, #3
 8015186:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 801518a:	d101      	bne.n	8015190 <GUI__CompactPixelIndices+0x44>
 801518c:	3008      	adds	r0, #8
 801518e:	e014      	b.n	80151ba <GUI__CompactPixelIndices+0x6e>
 8015190:	6885      	ldr	r5, [r0, #8]
 8015192:	2c01      	cmp	r4, #1
 8015194:	f005 0503 	and.w	r5, r5, #3
 8015198:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 801519c:	d101      	bne.n	80151a2 <GUI__CompactPixelIndices+0x56>
 801519e:	300c      	adds	r0, #12
 80151a0:	e00b      	b.n	80151ba <GUI__CompactPixelIndices+0x6e>
 80151a2:	68c4      	ldr	r4, [r0, #12]
 80151a4:	f004 0403 	and.w	r4, r4, #3
 80151a8:	4323      	orrs	r3, r4
 80151aa:	3010      	adds	r0, #16
 80151ac:	3904      	subs	r1, #4
 80151ae:	f802 3b01 	strb.w	r3, [r2], #1
 80151b2:	2900      	cmp	r1, #0
 80151b4:	d1de      	bne.n	8015174 <GUI__CompactPixelIndices+0x28>
 80151b6:	e7d6      	b.n	8015166 <GUI__CompactPixelIndices+0x1a>
 80151b8:	3004      	adds	r0, #4
 80151ba:	2100      	movs	r1, #0
 80151bc:	e7f7      	b.n	80151ae <GUI__CompactPixelIndices+0x62>
 80151be:	2a04      	cmp	r2, #4
 80151c0:	d112      	bne.n	80151e8 <GUI__CompactPixelIndices+0x9c>
 80151c2:	4602      	mov	r2, r0
 80151c4:	6803      	ldr	r3, [r0, #0]
 80151c6:	011b      	lsls	r3, r3, #4
 80151c8:	3901      	subs	r1, #1
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	d101      	bne.n	80151d2 <GUI__CompactPixelIndices+0x86>
 80151ce:	3004      	adds	r0, #4
 80151d0:	e005      	b.n	80151de <GUI__CompactPixelIndices+0x92>
 80151d2:	6844      	ldr	r4, [r0, #4]
 80151d4:	f004 040f 	and.w	r4, r4, #15
 80151d8:	4323      	orrs	r3, r4
 80151da:	3008      	adds	r0, #8
 80151dc:	3901      	subs	r1, #1
 80151de:	f802 3b01 	strb.w	r3, [r2], #1
 80151e2:	2900      	cmp	r1, #0
 80151e4:	d1ee      	bne.n	80151c4 <GUI__CompactPixelIndices+0x78>
 80151e6:	e7be      	b.n	8015166 <GUI__CompactPixelIndices+0x1a>
 80151e8:	2a01      	cmp	r2, #1
 80151ea:	d148      	bne.n	801527e <GUI__CompactPixelIndices+0x132>
 80151ec:	4604      	mov	r4, r0
 80151ee:	6803      	ldr	r3, [r0, #0]
 80151f0:	01da      	lsls	r2, r3, #7
 80151f2:	b2d3      	uxtb	r3, r2
 80151f4:	1e4a      	subs	r2, r1, #1
 80151f6:	d03f      	beq.n	8015278 <GUI__CompactPixelIndices+0x12c>
 80151f8:	6845      	ldr	r5, [r0, #4]
 80151fa:	3a01      	subs	r2, #1
 80151fc:	f005 0501 	and.w	r5, r5, #1
 8015200:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8015204:	d101      	bne.n	801520a <GUI__CompactPixelIndices+0xbe>
 8015206:	3008      	adds	r0, #8
 8015208:	e037      	b.n	801527a <GUI__CompactPixelIndices+0x12e>
 801520a:	6885      	ldr	r5, [r0, #8]
 801520c:	2a01      	cmp	r2, #1
 801520e:	f005 0501 	and.w	r5, r5, #1
 8015212:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8015216:	d101      	bne.n	801521c <GUI__CompactPixelIndices+0xd0>
 8015218:	300c      	adds	r0, #12
 801521a:	e02e      	b.n	801527a <GUI__CompactPixelIndices+0x12e>
 801521c:	68c5      	ldr	r5, [r0, #12]
 801521e:	2a02      	cmp	r2, #2
 8015220:	f005 0501 	and.w	r5, r5, #1
 8015224:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8015228:	d101      	bne.n	801522e <GUI__CompactPixelIndices+0xe2>
 801522a:	3010      	adds	r0, #16
 801522c:	e025      	b.n	801527a <GUI__CompactPixelIndices+0x12e>
 801522e:	6905      	ldr	r5, [r0, #16]
 8015230:	2a03      	cmp	r2, #3
 8015232:	f005 0501 	and.w	r5, r5, #1
 8015236:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 801523a:	d101      	bne.n	8015240 <GUI__CompactPixelIndices+0xf4>
 801523c:	3014      	adds	r0, #20
 801523e:	e01c      	b.n	801527a <GUI__CompactPixelIndices+0x12e>
 8015240:	6945      	ldr	r5, [r0, #20]
 8015242:	2a04      	cmp	r2, #4
 8015244:	f005 0501 	and.w	r5, r5, #1
 8015248:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 801524c:	d101      	bne.n	8015252 <GUI__CompactPixelIndices+0x106>
 801524e:	3018      	adds	r0, #24
 8015250:	e013      	b.n	801527a <GUI__CompactPixelIndices+0x12e>
 8015252:	6982      	ldr	r2, [r0, #24]
 8015254:	3907      	subs	r1, #7
 8015256:	f002 0201 	and.w	r2, r2, #1
 801525a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 801525e:	d101      	bne.n	8015264 <GUI__CompactPixelIndices+0x118>
 8015260:	301c      	adds	r0, #28
 8015262:	e004      	b.n	801526e <GUI__CompactPixelIndices+0x122>
 8015264:	69c2      	ldr	r2, [r0, #28]
 8015266:	f002 0201 	and.w	r2, r2, #1
 801526a:	4313      	orrs	r3, r2
 801526c:	3020      	adds	r0, #32
 801526e:	f804 3b01 	strb.w	r3, [r4], #1
 8015272:	2900      	cmp	r1, #0
 8015274:	d1bb      	bne.n	80151ee <GUI__CompactPixelIndices+0xa2>
 8015276:	e776      	b.n	8015166 <GUI__CompactPixelIndices+0x1a>
 8015278:	3004      	adds	r0, #4
 801527a:	2100      	movs	r1, #0
 801527c:	e7f7      	b.n	801526e <GUI__CompactPixelIndices+0x122>
 801527e:	2300      	movs	r3, #0
 8015280:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8015284:	54c2      	strb	r2, [r0, r3]
 8015286:	3301      	adds	r3, #1
 8015288:	428b      	cmp	r3, r1
 801528a:	d1f9      	bne.n	8015280 <GUI__CompactPixelIndices+0x134>
 801528c:	e76b      	b.n	8015166 <GUI__CompactPixelIndices+0x1a>

0801528e <GUI__CompactPixelIndicesEx>:
 801528e:	2a08      	cmp	r2, #8
 8015290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015294:	4604      	mov	r4, r0
 8015296:	460d      	mov	r5, r1
 8015298:	681e      	ldr	r6, [r3, #0]
 801529a:	dd05      	ble.n	80152a8 <GUI__CompactPixelIndicesEx+0x1a>
 801529c:	2a10      	cmp	r2, #16
 801529e:	f340 80b1 	ble.w	8015404 <GUI__CompactPixelIndicesEx+0x176>
 80152a2:	2000      	movs	r0, #0
 80152a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152a8:	3a01      	subs	r2, #1
 80152aa:	2a07      	cmp	r2, #7
 80152ac:	f200 80a1 	bhi.w	80153f2 <GUI__CompactPixelIndicesEx+0x164>
 80152b0:	e8df f002 	tbb	[pc, r2]
 80152b4:	7b9f5404 	.word	0x7b9f5404
 80152b8:	909f9f9f 	.word	0x909f9f9f
 80152bc:	46a1      	mov	r9, r4
 80152be:	6820      	ldr	r0, [r4, #0]
 80152c0:	47b0      	blx	r6
 80152c2:	01c1      	lsls	r1, r0, #7
 80152c4:	f1b5 0801 	subs.w	r8, r5, #1
 80152c8:	b2cf      	uxtb	r7, r1
 80152ca:	f000 8095 	beq.w	80153f8 <GUI__CompactPixelIndicesEx+0x16a>
 80152ce:	6860      	ldr	r0, [r4, #4]
 80152d0:	47b0      	blx	r6
 80152d2:	f1b8 0801 	subs.w	r8, r8, #1
 80152d6:	ea47 1380 	orr.w	r3, r7, r0, lsl #6
 80152da:	b2df      	uxtb	r7, r3
 80152dc:	d101      	bne.n	80152e2 <GUI__CompactPixelIndicesEx+0x54>
 80152de:	3408      	adds	r4, #8
 80152e0:	e08b      	b.n	80153fa <GUI__CompactPixelIndicesEx+0x16c>
 80152e2:	68a0      	ldr	r0, [r4, #8]
 80152e4:	47b0      	blx	r6
 80152e6:	f1b8 0f01 	cmp.w	r8, #1
 80152ea:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
 80152ee:	b2ff      	uxtb	r7, r7
 80152f0:	d101      	bne.n	80152f6 <GUI__CompactPixelIndicesEx+0x68>
 80152f2:	340c      	adds	r4, #12
 80152f4:	e081      	b.n	80153fa <GUI__CompactPixelIndicesEx+0x16c>
 80152f6:	68e0      	ldr	r0, [r4, #12]
 80152f8:	47b0      	blx	r6
 80152fa:	f1b8 0f02 	cmp.w	r8, #2
 80152fe:	ea47 1200 	orr.w	r2, r7, r0, lsl #4
 8015302:	b2d7      	uxtb	r7, r2
 8015304:	d101      	bne.n	801530a <GUI__CompactPixelIndicesEx+0x7c>
 8015306:	3410      	adds	r4, #16
 8015308:	e077      	b.n	80153fa <GUI__CompactPixelIndicesEx+0x16c>
 801530a:	6920      	ldr	r0, [r4, #16]
 801530c:	47b0      	blx	r6
 801530e:	f1b8 0f03 	cmp.w	r8, #3
 8015312:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8015316:	b2c7      	uxtb	r7, r0
 8015318:	d101      	bne.n	801531e <GUI__CompactPixelIndicesEx+0x90>
 801531a:	3414      	adds	r4, #20
 801531c:	e06d      	b.n	80153fa <GUI__CompactPixelIndicesEx+0x16c>
 801531e:	6960      	ldr	r0, [r4, #20]
 8015320:	47b0      	blx	r6
 8015322:	f1b8 0f04 	cmp.w	r8, #4
 8015326:	ea47 0180 	orr.w	r1, r7, r0, lsl #2
 801532a:	b2cf      	uxtb	r7, r1
 801532c:	d101      	bne.n	8015332 <GUI__CompactPixelIndicesEx+0xa4>
 801532e:	3418      	adds	r4, #24
 8015330:	e063      	b.n	80153fa <GUI__CompactPixelIndicesEx+0x16c>
 8015332:	69a0      	ldr	r0, [r4, #24]
 8015334:	47b0      	blx	r6
 8015336:	f1b8 0f05 	cmp.w	r8, #5
 801533a:	ea47 0340 	orr.w	r3, r7, r0, lsl #1
 801533e:	b2df      	uxtb	r7, r3
 8015340:	d101      	bne.n	8015346 <GUI__CompactPixelIndicesEx+0xb8>
 8015342:	341c      	adds	r4, #28
 8015344:	e059      	b.n	80153fa <GUI__CompactPixelIndicesEx+0x16c>
 8015346:	69e0      	ldr	r0, [r4, #28]
 8015348:	47b0      	blx	r6
 801534a:	4307      	orrs	r7, r0
 801534c:	3420      	adds	r4, #32
 801534e:	b2ff      	uxtb	r7, r7
 8015350:	3d08      	subs	r5, #8
 8015352:	f809 7b01 	strb.w	r7, [r9], #1
 8015356:	2d00      	cmp	r5, #0
 8015358:	d1b1      	bne.n	80152be <GUI__CompactPixelIndicesEx+0x30>
 801535a:	e04a      	b.n	80153f2 <GUI__CompactPixelIndicesEx+0x164>
 801535c:	46a0      	mov	r8, r4
 801535e:	6820      	ldr	r0, [r4, #0]
 8015360:	47b0      	blx	r6
 8015362:	0183      	lsls	r3, r0, #6
 8015364:	f1b5 0901 	subs.w	r9, r5, #1
 8015368:	b2df      	uxtb	r7, r3
 801536a:	d048      	beq.n	80153fe <GUI__CompactPixelIndicesEx+0x170>
 801536c:	6860      	ldr	r0, [r4, #4]
 801536e:	47b0      	blx	r6
 8015370:	f1b9 0901 	subs.w	r9, r9, #1
 8015374:	ea47 1700 	orr.w	r7, r7, r0, lsl #4
 8015378:	b2ff      	uxtb	r7, r7
 801537a:	d101      	bne.n	8015380 <GUI__CompactPixelIndicesEx+0xf2>
 801537c:	3408      	adds	r4, #8
 801537e:	e03f      	b.n	8015400 <GUI__CompactPixelIndicesEx+0x172>
 8015380:	68a0      	ldr	r0, [r4, #8]
 8015382:	47b0      	blx	r6
 8015384:	f1b9 0f01 	cmp.w	r9, #1
 8015388:	ea47 0280 	orr.w	r2, r7, r0, lsl #2
 801538c:	b2d7      	uxtb	r7, r2
 801538e:	d101      	bne.n	8015394 <GUI__CompactPixelIndicesEx+0x106>
 8015390:	340c      	adds	r4, #12
 8015392:	e035      	b.n	8015400 <GUI__CompactPixelIndicesEx+0x172>
 8015394:	68e0      	ldr	r0, [r4, #12]
 8015396:	47b0      	blx	r6
 8015398:	4338      	orrs	r0, r7
 801539a:	3410      	adds	r4, #16
 801539c:	b2c7      	uxtb	r7, r0
 801539e:	3d04      	subs	r5, #4
 80153a0:	f808 7b01 	strb.w	r7, [r8], #1
 80153a4:	2d00      	cmp	r5, #0
 80153a6:	d1da      	bne.n	801535e <GUI__CompactPixelIndicesEx+0xd0>
 80153a8:	e023      	b.n	80153f2 <GUI__CompactPixelIndicesEx+0x164>
 80153aa:	46a0      	mov	r8, r4
 80153ac:	6820      	ldr	r0, [r4, #0]
 80153ae:	47b0      	blx	r6
 80153b0:	0100      	lsls	r0, r0, #4
 80153b2:	3d01      	subs	r5, #1
 80153b4:	b2c7      	uxtb	r7, r0
 80153b6:	d101      	bne.n	80153bc <GUI__CompactPixelIndicesEx+0x12e>
 80153b8:	3404      	adds	r4, #4
 80153ba:	e006      	b.n	80153ca <GUI__CompactPixelIndicesEx+0x13c>
 80153bc:	6860      	ldr	r0, [r4, #4]
 80153be:	47b0      	blx	r6
 80153c0:	ea47 0100 	orr.w	r1, r7, r0
 80153c4:	3408      	adds	r4, #8
 80153c6:	b2cf      	uxtb	r7, r1
 80153c8:	3d01      	subs	r5, #1
 80153ca:	f808 7b01 	strb.w	r7, [r8], #1
 80153ce:	2d00      	cmp	r5, #0
 80153d0:	d1ec      	bne.n	80153ac <GUI__CompactPixelIndicesEx+0x11e>
 80153d2:	e00e      	b.n	80153f2 <GUI__CompactPixelIndicesEx+0x164>
 80153d4:	691f      	ldr	r7, [r3, #16]
 80153d6:	b12f      	cbz	r7, 80153e4 <GUI__CompactPixelIndicesEx+0x156>
 80153d8:	4620      	mov	r0, r4
 80153da:	4621      	mov	r1, r4
 80153dc:	462a      	mov	r2, r5
 80153de:	2301      	movs	r3, #1
 80153e0:	47b8      	blx	r7
 80153e2:	e006      	b.n	80153f2 <GUI__CompactPixelIndicesEx+0x164>
 80153e4:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 80153e8:	47b0      	blx	r6
 80153ea:	55e0      	strb	r0, [r4, r7]
 80153ec:	3701      	adds	r7, #1
 80153ee:	42bd      	cmp	r5, r7
 80153f0:	d1f8      	bne.n	80153e4 <GUI__CompactPixelIndicesEx+0x156>
 80153f2:	2001      	movs	r0, #1
 80153f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153f8:	3404      	adds	r4, #4
 80153fa:	2500      	movs	r5, #0
 80153fc:	e7a9      	b.n	8015352 <GUI__CompactPixelIndicesEx+0xc4>
 80153fe:	3404      	adds	r4, #4
 8015400:	2500      	movs	r5, #0
 8015402:	e7cd      	b.n	80153a0 <GUI__CompactPixelIndicesEx+0x112>
 8015404:	691f      	ldr	r7, [r3, #16]
 8015406:	b11f      	cbz	r7, 8015410 <GUI__CompactPixelIndicesEx+0x182>
 8015408:	4621      	mov	r1, r4
 801540a:	462a      	mov	r2, r5
 801540c:	2302      	movs	r3, #2
 801540e:	e7e7      	b.n	80153e0 <GUI__CompactPixelIndicesEx+0x152>
 8015410:	4607      	mov	r7, r0
 8015412:	f854 0b04 	ldr.w	r0, [r4], #4
 8015416:	47b0      	blx	r6
 8015418:	3d01      	subs	r5, #1
 801541a:	f827 0b02 	strh.w	r0, [r7], #2
 801541e:	d1f8      	bne.n	8015412 <GUI__CompactPixelIndicesEx+0x184>
 8015420:	e7e7      	b.n	80153f2 <GUI__CompactPixelIndicesEx+0x164>

08015422 <GUI__CalcTextRect>:
 8015422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015426:	460c      	mov	r4, r1
 8015428:	4615      	mov	r5, r2
 801542a:	4698      	mov	r8, r3
 801542c:	2800      	cmp	r0, #0
 801542e:	d03b      	beq.n	80154a8 <GUI__CalcTextRect+0x86>
 8015430:	f7fb f82c 	bl	801048c <GUI_GetStringDistX>
 8015434:	f008 0203 	and.w	r2, r8, #3
 8015438:	2a01      	cmp	r2, #1
 801543a:	4607      	mov	r7, r0
 801543c:	d00c      	beq.n	8015458 <GUI__CalcTextRect+0x36>
 801543e:	2a02      	cmp	r2, #2
 8015440:	f9b4 6000 	ldrsh.w	r6, [r4]
 8015444:	d10c      	bne.n	8015460 <GUI__CalcTextRect+0x3e>
 8015446:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801544a:	1b8b      	subs	r3, r1, r6
 801544c:	1c58      	adds	r0, r3, #1
 801544e:	1bc1      	subs	r1, r0, r7
 8015450:	fb91 f2f2 	sdiv	r2, r1, r2
 8015454:	18b6      	adds	r6, r6, r2
 8015456:	e003      	b.n	8015460 <GUI__CalcTextRect+0x3e>
 8015458:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 801545c:	1a33      	subs	r3, r6, r0
 801545e:	1c5e      	adds	r6, r3, #1
 8015460:	f008 080c 	and.w	r8, r8, #12
 8015464:	f7fc f930 	bl	80116c8 <GUI_GetFontDistY>
 8015468:	f1b8 0f04 	cmp.w	r8, #4
 801546c:	d00e      	beq.n	801548c <GUI__CalcTextRect+0x6a>
 801546e:	f1b8 0f0c 	cmp.w	r8, #12
 8015472:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015476:	d10d      	bne.n	8015494 <GUI__CalcTextRect+0x72>
 8015478:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801547c:	1aca      	subs	r2, r1, r3
 801547e:	1c51      	adds	r1, r2, #1
 8015480:	1a0a      	subs	r2, r1, r0
 8015482:	2102      	movs	r1, #2
 8015484:	fb92 f2f1 	sdiv	r2, r2, r1
 8015488:	189b      	adds	r3, r3, r2
 801548a:	e003      	b.n	8015494 <GUI__CalcTextRect+0x72>
 801548c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015490:	1a19      	subs	r1, r3, r0
 8015492:	1c4b      	adds	r3, r1, #1
 8015494:	3f01      	subs	r7, #1
 8015496:	3801      	subs	r0, #1
 8015498:	802e      	strh	r6, [r5, #0]
 801549a:	18c2      	adds	r2, r0, r3
 801549c:	19be      	adds	r6, r7, r6
 801549e:	806b      	strh	r3, [r5, #2]
 80154a0:	80ae      	strh	r6, [r5, #4]
 80154a2:	80ea      	strh	r2, [r5, #6]
 80154a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154a8:	680b      	ldr	r3, [r1, #0]
 80154aa:	6013      	str	r3, [r2, #0]
 80154ac:	6848      	ldr	r0, [r1, #4]
 80154ae:	6050      	str	r0, [r2, #4]
 80154b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154b4 <_GetCharCode>:
 80154b4:	7800      	ldrb	r0, [r0, #0]
 80154b6:	4770      	bx	lr

080154b8 <_GetCharSize>:
 80154b8:	2001      	movs	r0, #1
 80154ba:	4770      	bx	lr

080154bc <_CalcSizeOfChar>:
 80154bc:	2001      	movs	r0, #1
 80154be:	4770      	bx	lr

080154c0 <_Encode>:
 80154c0:	7001      	strb	r1, [r0, #0]
 80154c2:	2001      	movs	r0, #1
 80154c4:	4770      	bx	lr
	...

080154c8 <GUI_UC__GetCharCodeInc>:
 80154c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ca:	4e08      	ldr	r6, [pc, #32]	; (80154ec <GUI_UC__GetCharCodeInc+0x24>)
 80154cc:	6804      	ldr	r4, [r0, #0]
 80154ce:	6833      	ldr	r3, [r6, #0]
 80154d0:	4605      	mov	r5, r0
 80154d2:	6819      	ldr	r1, [r3, #0]
 80154d4:	4620      	mov	r0, r4
 80154d6:	4788      	blx	r1
 80154d8:	4607      	mov	r7, r0
 80154da:	6830      	ldr	r0, [r6, #0]
 80154dc:	6842      	ldr	r2, [r0, #4]
 80154de:	4620      	mov	r0, r4
 80154e0:	4790      	blx	r2
 80154e2:	1823      	adds	r3, r4, r0
 80154e4:	602b      	str	r3, [r5, #0]
 80154e6:	4638      	mov	r0, r7
 80154e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154ea:	bf00      	nop
 80154ec:	20017a00 	.word	0x20017a00

080154f0 <GUI_UC__NumChars2NumBytes>:
 80154f0:	b570      	push	{r4, r5, r6, lr}
 80154f2:	4604      	mov	r4, r0
 80154f4:	460e      	mov	r6, r1
 80154f6:	2500      	movs	r5, #0
 80154f8:	b146      	cbz	r6, 801550c <GUI_UC__NumChars2NumBytes+0x1c>
 80154fa:	4b05      	ldr	r3, [pc, #20]	; (8015510 <GUI_UC__NumChars2NumBytes+0x20>)
 80154fc:	6818      	ldr	r0, [r3, #0]
 80154fe:	6841      	ldr	r1, [r0, #4]
 8015500:	4620      	mov	r0, r4
 8015502:	4788      	blx	r1
 8015504:	3e01      	subs	r6, #1
 8015506:	1824      	adds	r4, r4, r0
 8015508:	182d      	adds	r5, r5, r0
 801550a:	e7f5      	b.n	80154f8 <GUI_UC__NumChars2NumBytes+0x8>
 801550c:	4628      	mov	r0, r5
 801550e:	bd70      	pop	{r4, r5, r6, pc}
 8015510:	20017a00 	.word	0x20017a00

08015514 <GUI_SetTextAlign>:
 8015514:	4b03      	ldr	r3, [pc, #12]	; (8015524 <GUI_SetTextAlign+0x10>)
 8015516:	6819      	ldr	r1, [r3, #0]
 8015518:	f9b1 202c 	ldrsh.w	r2, [r1, #44]	; 0x2c
 801551c:	8588      	strh	r0, [r1, #44]	; 0x2c
 801551e:	4610      	mov	r0, r2
 8015520:	4770      	bx	lr
 8015522:	bf00      	nop
 8015524:	2000027c 	.word	0x2000027c

08015528 <GUI_SetOrg>:
 8015528:	b510      	push	{r4, lr}
 801552a:	460a      	mov	r2, r1
 801552c:	4c07      	ldr	r4, [pc, #28]	; (801554c <GUI_SetOrg+0x24>)
 801552e:	4908      	ldr	r1, [pc, #32]	; (8015550 <GUI_SetOrg+0x28>)
 8015530:	4603      	mov	r3, r0
 8015532:	8008      	strh	r0, [r1, #0]
 8015534:	6821      	ldr	r1, [r4, #0]
 8015536:	4807      	ldr	r0, [pc, #28]	; (8015554 <GUI_SetOrg+0x2c>)
 8015538:	4c07      	ldr	r4, [pc, #28]	; (8015558 <GUI_SetOrg+0x30>)
 801553a:	8002      	strh	r2, [r0, #0]
 801553c:	7c48      	ldrb	r0, [r1, #17]
 801553e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015542:	68c1      	ldr	r1, [r0, #12]
 8015544:	6a0c      	ldr	r4, [r1, #32]
 8015546:	4619      	mov	r1, r3
 8015548:	47a0      	blx	r4
 801554a:	bd10      	pop	{r4, pc}
 801554c:	2000027c 	.word	0x2000027c
 8015550:	200179f4 	.word	0x200179f4
 8015554:	200179ec 	.word	0x200179ec
 8015558:	20017a04 	.word	0x20017a04

0801555c <GUI_SetLineStyle>:
 801555c:	4b02      	ldr	r3, [pc, #8]	; (8015568 <GUI_SetLineStyle+0xc>)
 801555e:	6819      	ldr	r1, [r3, #0]
 8015560:	7e8a      	ldrb	r2, [r1, #26]
 8015562:	7688      	strb	r0, [r1, #26]
 8015564:	4610      	mov	r0, r2
 8015566:	4770      	bx	lr
 8015568:	2000027c 	.word	0x2000027c

0801556c <GUI_GetFontInfo>:
 801556c:	b508      	push	{r3, lr}
 801556e:	b910      	cbnz	r0, 8015576 <GUI_GetFontInfo+0xa>
 8015570:	4b07      	ldr	r3, [pc, #28]	; (8015590 <GUI_GetFontInfo+0x24>)
 8015572:	6818      	ldr	r0, [r3, #0]
 8015574:	69c0      	ldr	r0, [r0, #28]
 8015576:	f890 2020 	ldrb.w	r2, [r0, #32]
 801557a:	708a      	strb	r2, [r1, #2]
 801557c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8015580:	710b      	strb	r3, [r1, #4]
 8015582:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8015586:	70ca      	strb	r2, [r1, #3]
 8015588:	6883      	ldr	r3, [r0, #8]
 801558a:	4798      	blx	r3
 801558c:	bd08      	pop	{r3, pc}
 801558e:	bf00      	nop
 8015590:	2000027c 	.word	0x2000027c

08015594 <GUI_GetBkColor>:
 8015594:	b508      	push	{r3, lr}
 8015596:	f000 fbb9 	bl	8015d0c <LCD_GetBkColorIndex>
 801559a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801559e:	f7fa b869 	b.w	800f674 <LCD_Index2Color>

080155a2 <GUI_GetColor>:
 80155a2:	b508      	push	{r3, lr}
 80155a4:	f000 fbba 	bl	8015d1c <LCD_GetColorIndex>
 80155a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80155ac:	f7fa b862 	b.w	800f674 <LCD_Index2Color>

080155b0 <GUI_DrawFocusRect>:
 80155b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80155b2:	4603      	mov	r3, r0
 80155b4:	460a      	mov	r2, r1
 80155b6:	4668      	mov	r0, sp
 80155b8:	4619      	mov	r1, r3
 80155ba:	f7fa f951 	bl	800f860 <GUI__ReduceRect>
 80155be:	4826      	ldr	r0, [pc, #152]	; (8015658 <GUI_DrawFocusRect+0xa8>)
 80155c0:	f8bd 1000 	ldrh.w	r1, [sp]
 80155c4:	6803      	ldr	r3, [r0, #0]
 80155c6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80155ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80155ce:	1850      	adds	r0, r2, r1
 80155d0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80155d4:	f8ad 0000 	strh.w	r0, [sp]
 80155d8:	1858      	adds	r0, r3, r1
 80155da:	f8ad 0002 	strh.w	r0, [sp, #2]
 80155de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80155e2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80155e6:	1852      	adds	r2, r2, r1
 80155e8:	181b      	adds	r3, r3, r0
 80155ea:	4668      	mov	r0, sp
 80155ec:	f8ad 2004 	strh.w	r2, [sp, #4]
 80155f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80155f4:	f7f7 f8f6 	bl	800c7e4 <WM__InitIVRSearch>
 80155f8:	b360      	cbz	r0, 8015654 <GUI_DrawFocusRect+0xa4>
 80155fa:	f8bd 6000 	ldrh.w	r6, [sp]
 80155fe:	2500      	movs	r5, #0
 8015600:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8015604:	fa05 f486 	sxtah	r4, r5, r6
 8015608:	3502      	adds	r5, #2
 801560a:	428c      	cmp	r4, r1
 801560c:	dc0a      	bgt.n	8015624 <GUI_DrawFocusRect+0x74>
 801560e:	4620      	mov	r0, r4
 8015610:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8015614:	f7f9 fd38 	bl	800f088 <LCD_DrawPixel>
 8015618:	4620      	mov	r0, r4
 801561a:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801561e:	f7f9 fd33 	bl	800f088 <LCD_DrawPixel>
 8015622:	e7ed      	b.n	8015600 <GUI_DrawFocusRect+0x50>
 8015624:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015628:	2500      	movs	r5, #0
 801562a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801562e:	fa05 f486 	sxtah	r4, r5, r6
 8015632:	3502      	adds	r5, #2
 8015634:	4294      	cmp	r4, r2
 8015636:	dc0a      	bgt.n	801564e <GUI_DrawFocusRect+0x9e>
 8015638:	f9bd 0000 	ldrsh.w	r0, [sp]
 801563c:	4621      	mov	r1, r4
 801563e:	f7f9 fd23 	bl	800f088 <LCD_DrawPixel>
 8015642:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8015646:	4621      	mov	r1, r4
 8015648:	f7f9 fd1e 	bl	800f088 <LCD_DrawPixel>
 801564c:	e7ed      	b.n	801562a <GUI_DrawFocusRect+0x7a>
 801564e:	f7f7 f809 	bl	800c664 <WM__GetNextIVR>
 8015652:	e7d1      	b.n	80155f8 <GUI_DrawFocusRect+0x48>
 8015654:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8015656:	bf00      	nop
 8015658:	2000027c 	.word	0x2000027c

0801565c <GUI_Long2Len>:
 801565c:	b510      	push	{r4, lr}
 801565e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8015662:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8015666:	2200      	movs	r2, #0
 8015668:	1c53      	adds	r3, r2, #1
 801566a:	2b0a      	cmp	r3, #10
 801566c:	d006      	beq.n	801567c <GUI_Long2Len+0x20>
 801566e:	4c06      	ldr	r4, [pc, #24]	; (8015688 <GUI_Long2Len+0x2c>)
 8015670:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8015674:	42a1      	cmp	r1, r4
 8015676:	d301      	bcc.n	801567c <GUI_Long2Len+0x20>
 8015678:	461a      	mov	r2, r3
 801567a:	e7f5      	b.n	8015668 <GUI_Long2Len+0xc>
 801567c:	2800      	cmp	r0, #0
 801567e:	bfb8      	it	lt
 8015680:	1c93      	addlt	r3, r2, #2
 8015682:	4618      	mov	r0, r3
 8015684:	bd10      	pop	{r4, pc}
 8015686:	bf00      	nop
 8015688:	080309f4 	.word	0x080309f4

0801568c <GUI_AddDecShift>:
 801568c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8015690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015692:	681c      	ldr	r4, [r3, #0]
 8015694:	d109      	bne.n	80156aa <GUI_AddDecShift+0x1e>
 8015696:	202d      	movs	r0, #45	; 0x2d
 8015698:	f804 0b01 	strb.w	r0, [r4], #1
 801569c:	1e4e      	subs	r6, r1, #1
 801569e:	b2f1      	uxtb	r1, r6
 80156a0:	601c      	str	r4, [r3, #0]
 80156a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80156a6:	2601      	movs	r6, #1
 80156a8:	e00c      	b.n	80156c4 <GUI_AddDecShift+0x38>
 80156aa:	2800      	cmp	r0, #0
 80156ac:	da06      	bge.n	80156bc <GUI_AddDecShift+0x30>
 80156ae:	252d      	movs	r5, #45	; 0x2d
 80156b0:	f804 5b01 	strb.w	r5, [r4], #1
 80156b4:	4240      	negs	r0, r0
 80156b6:	601c      	str	r4, [r3, #0]
 80156b8:	2401      	movs	r4, #1
 80156ba:	e000      	b.n	80156be <GUI_AddDecShift+0x32>
 80156bc:	2400      	movs	r4, #0
 80156be:	1b09      	subs	r1, r1, r4
 80156c0:	b2c9      	uxtb	r1, r1
 80156c2:	2600      	movs	r6, #0
 80156c4:	b30a      	cbz	r2, 801570a <GUI_AddDecShift+0x7e>
 80156c6:	3901      	subs	r1, #1
 80156c8:	b2c9      	uxtb	r1, r1
 80156ca:	e01e      	b.n	801570a <GUI_AddDecShift+0x7e>
 80156cc:	1e4d      	subs	r5, r1, #1
 80156ce:	4291      	cmp	r1, r2
 80156d0:	b2ed      	uxtb	r5, r5
 80156d2:	d105      	bne.n	80156e0 <GUI_AddDecShift+0x54>
 80156d4:	4c12      	ldr	r4, [pc, #72]	; (8015720 <GUI_AddDecShift+0x94>)
 80156d6:	7827      	ldrb	r7, [r4, #0]
 80156d8:	681c      	ldr	r4, [r3, #0]
 80156da:	f804 7b01 	strb.w	r7, [r4], #1
 80156de:	601c      	str	r4, [r3, #0]
 80156e0:	4f10      	ldr	r7, [pc, #64]	; (8015724 <GUI_AddDecShift+0x98>)
 80156e2:	f857 7025 	ldr.w	r7, [r7, r5, lsl #2]
 80156e6:	fb90 f4f7 	sdiv	r4, r0, r7
 80156ea:	b2e4      	uxtb	r4, r4
 80156ec:	2c0a      	cmp	r4, #10
 80156ee:	d80e      	bhi.n	801570e <GUI_AddDecShift+0x82>
 80156f0:	fb07 0014 	mls	r0, r7, r4, r0
 80156f4:	b17d      	cbz	r5, 8015716 <GUI_AddDecShift+0x8a>
 80156f6:	2c0a      	cmp	r4, #10
 80156f8:	bf18      	it	ne
 80156fa:	4629      	movne	r1, r5
 80156fc:	681d      	ldr	r5, [r3, #0]
 80156fe:	bf08      	it	eq
 8015700:	2401      	moveq	r4, #1
 8015702:	3430      	adds	r4, #48	; 0x30
 8015704:	f805 4b01 	strb.w	r4, [r5], #1
 8015708:	601d      	str	r5, [r3, #0]
 801570a:	2900      	cmp	r1, #0
 801570c:	d1de      	bne.n	80156cc <GUI_AddDecShift+0x40>
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	2200      	movs	r2, #0
 8015712:	701a      	strb	r2, [r3, #0]
 8015714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015716:	2e00      	cmp	r6, #0
 8015718:	d0ed      	beq.n	80156f6 <GUI_AddDecShift+0x6a>
 801571a:	3401      	adds	r4, #1
 801571c:	b2e4      	uxtb	r4, r4
 801571e:	e7ea      	b.n	80156f6 <GUI_AddDecShift+0x6a>
 8015720:	200179e2 	.word	0x200179e2
 8015724:	080309f4 	.word	0x080309f4

08015728 <_GetIndexMask_0>:
 8015728:	b508      	push	{r3, lr}
 801572a:	f7f9 fc01 	bl	800ef30 <LCD_GetNumColors>
 801572e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8015732:	d010      	beq.n	8015756 <_GetIndexMask_0+0x2e>
 8015734:	287f      	cmp	r0, #127	; 0x7f
 8015736:	d810      	bhi.n	801575a <_GetIndexMask_0+0x32>
 8015738:	283f      	cmp	r0, #63	; 0x3f
 801573a:	d810      	bhi.n	801575e <_GetIndexMask_0+0x36>
 801573c:	281f      	cmp	r0, #31
 801573e:	d810      	bhi.n	8015762 <_GetIndexMask_0+0x3a>
 8015740:	280f      	cmp	r0, #15
 8015742:	d810      	bhi.n	8015766 <_GetIndexMask_0+0x3e>
 8015744:	2807      	cmp	r0, #7
 8015746:	d810      	bhi.n	801576a <_GetIndexMask_0+0x42>
 8015748:	2803      	cmp	r0, #3
 801574a:	d810      	bhi.n	801576e <_GetIndexMask_0+0x46>
 801574c:	2801      	cmp	r0, #1
 801574e:	bf94      	ite	ls
 8015750:	2000      	movls	r0, #0
 8015752:	2001      	movhi	r0, #1
 8015754:	e00c      	b.n	8015770 <_GetIndexMask_0+0x48>
 8015756:	2008      	movs	r0, #8
 8015758:	e00a      	b.n	8015770 <_GetIndexMask_0+0x48>
 801575a:	2007      	movs	r0, #7
 801575c:	e008      	b.n	8015770 <_GetIndexMask_0+0x48>
 801575e:	2006      	movs	r0, #6
 8015760:	e006      	b.n	8015770 <_GetIndexMask_0+0x48>
 8015762:	2005      	movs	r0, #5
 8015764:	e004      	b.n	8015770 <_GetIndexMask_0+0x48>
 8015766:	2004      	movs	r0, #4
 8015768:	e002      	b.n	8015770 <_GetIndexMask_0+0x48>
 801576a:	2003      	movs	r0, #3
 801576c:	e000      	b.n	8015770 <_GetIndexMask_0+0x48>
 801576e:	2002      	movs	r0, #2
 8015770:	2301      	movs	r3, #1
 8015772:	fa03 f000 	lsl.w	r0, r3, r0
 8015776:	3801      	subs	r0, #1
 8015778:	bd08      	pop	{r3, pc}

0801577a <_Index2Color_0>:
 801577a:	b538      	push	{r3, r4, r5, lr}
 801577c:	4604      	mov	r4, r0
 801577e:	f7f9 fbd7 	bl	800ef30 <LCD_GetNumColors>
 8015782:	4605      	mov	r5, r0
 8015784:	f7f9 fbf2 	bl	800ef6c <LCD_GetPalette>
 8015788:	42ac      	cmp	r4, r5
 801578a:	d203      	bcs.n	8015794 <_Index2Color_0+0x1a>
 801578c:	b118      	cbz	r0, 8015796 <_Index2Color_0+0x1c>
 801578e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015792:	bd38      	pop	{r3, r4, r5, pc}
 8015794:	2000      	movs	r0, #0
 8015796:	bd38      	pop	{r3, r4, r5, pc}

08015798 <_Color2Index_0>:
 8015798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801579c:	4680      	mov	r8, r0
 801579e:	f7f9 fbc7 	bl	800ef30 <LCD_GetNumColors>
 80157a2:	4607      	mov	r7, r0
 80157a4:	f7f9 fbe2 	bl	800ef6c <LCD_GetPalette>
 80157a8:	4606      	mov	r6, r0
 80157aa:	b1c8      	cbz	r0, 80157e0 <_Color2Index_0+0x48>
 80157ac:	2300      	movs	r3, #0
 80157ae:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80157b2:	4590      	cmp	r8, r2
 80157b4:	4618      	mov	r0, r3
 80157b6:	d015      	beq.n	80157e4 <_Color2Index_0+0x4c>
 80157b8:	3301      	adds	r3, #1
 80157ba:	42bb      	cmp	r3, r7
 80157bc:	dbf7      	blt.n	80157ae <_Color2Index_0+0x16>
 80157be:	2500      	movs	r5, #0
 80157c0:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 80157c4:	462c      	mov	r4, r5
 80157c6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80157ca:	4640      	mov	r0, r8
 80157cc:	f000 fab9 	bl	8015d42 <GUI_CalcColorDist>
 80157d0:	4548      	cmp	r0, r9
 80157d2:	bf3c      	itt	cc
 80157d4:	4681      	movcc	r9, r0
 80157d6:	4625      	movcc	r5, r4
 80157d8:	3401      	adds	r4, #1
 80157da:	42bc      	cmp	r4, r7
 80157dc:	dbf3      	blt.n	80157c6 <_Color2Index_0+0x2e>
 80157de:	e000      	b.n	80157e2 <_Color2Index_0+0x4a>
 80157e0:	4605      	mov	r5, r0
 80157e2:	4628      	mov	r0, r5
 80157e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080157e8 <WIDGET__FillStringInRect>:
 80157e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80157ec:	461e      	mov	r6, r3
 80157ee:	4b3f      	ldr	r3, [pc, #252]	; (80158ec <WIDGET__FillStringInRect+0x104>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	4690      	mov	r8, r2
 80157f4:	695a      	ldr	r2, [r3, #20]
 80157f6:	4607      	mov	r7, r0
 80157f8:	460c      	mov	r4, r1
 80157fa:	b90a      	cbnz	r2, 8015800 <WIDGET__FillStringInRect+0x18>
 80157fc:	bb1f      	cbnz	r7, 8015846 <WIDGET__FillStringInRect+0x5e>
 80157fe:	e06f      	b.n	80158e0 <WIDGET__FillStringInRect+0xf8>
 8015800:	6808      	ldr	r0, [r1, #0]
 8015802:	6849      	ldr	r1, [r1, #4]
 8015804:	466d      	mov	r5, sp
 8015806:	c503      	stmia	r5!, {r0, r1}
 8015808:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 801580c:	f8bd 0000 	ldrh.w	r0, [sp]
 8015810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015814:	1808      	adds	r0, r1, r0
 8015816:	f8ad 0000 	strh.w	r0, [sp]
 801581a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801581e:	1818      	adds	r0, r3, r0
 8015820:	f8ad 0002 	strh.w	r0, [sp, #2]
 8015824:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8015828:	1809      	adds	r1, r1, r0
 801582a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801582e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015832:	181b      	adds	r3, r3, r0
 8015834:	4669      	mov	r1, sp
 8015836:	4610      	mov	r0, r2
 8015838:	f8ad 3006 	strh.w	r3, [sp, #6]
 801583c:	f7fa fd68 	bl	8010310 <GUI_RectsIntersect>
 8015840:	2800      	cmp	r0, #0
 8015842:	d050      	beq.n	80158e6 <WIDGET__FillStringInRect+0xfe>
 8015844:	e7da      	b.n	80157fc <WIDGET__FillStringInRect+0x14>
 8015846:	783a      	ldrb	r2, [r7, #0]
 8015848:	2a00      	cmp	r2, #0
 801584a:	d049      	beq.n	80158e0 <WIDGET__FillStringInRect+0xf8>
 801584c:	f7ff fea2 	bl	8015594 <GUI_GetBkColor>
 8015850:	0e00      	lsrs	r0, r0, #24
 8015852:	d003      	beq.n	801585c <WIDGET__FillStringInRect+0x74>
 8015854:	2002      	movs	r0, #2
 8015856:	f7fa fcdf 	bl	8010218 <GUI_SetTextMode>
 801585a:	e032      	b.n	80158c2 <WIDGET__FillStringInRect+0xda>
 801585c:	f7fa fcdc 	bl	8010218 <GUI_SetTextMode>
 8015860:	4641      	mov	r1, r8
 8015862:	4632      	mov	r2, r6
 8015864:	a802      	add	r0, sp, #8
 8015866:	f7fa f87d 	bl	800f964 <GUI__IntersectRects>
 801586a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801586e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015872:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015876:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801587a:	3b01      	subs	r3, #1
 801587c:	f7fb fbea 	bl	8011054 <GUI_ClearRect>
 8015880:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8015884:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015888:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801588c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015890:	3a01      	subs	r2, #1
 8015892:	f7fb fbdf 	bl	8011054 <GUI_ClearRect>
 8015896:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801589a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801589e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80158a2:	1c48      	adds	r0, r1, #1
 80158a4:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80158a8:	f7fb fbd4 	bl	8011054 <GUI_ClearRect>
 80158ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80158b0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80158b4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80158b8:	1c59      	adds	r1, r3, #1
 80158ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80158be:	f7fb fbc9 	bl	8011054 <GUI_ClearRect>
 80158c2:	4640      	mov	r0, r8
 80158c4:	f7f5 fc4a 	bl	800b15c <WM_SetUserClipRect>
 80158c8:	f9b6 1000 	ldrsh.w	r1, [r6]
 80158cc:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80158d0:	4604      	mov	r4, r0
 80158d2:	4638      	mov	r0, r7
 80158d4:	f7fb fa20 	bl	8010d18 <GUI_DispStringAt>
 80158d8:	4620      	mov	r0, r4
 80158da:	f7f5 fc3f 	bl	800b15c <WM_SetUserClipRect>
 80158de:	e002      	b.n	80158e6 <WIDGET__FillStringInRect+0xfe>
 80158e0:	4620      	mov	r0, r4
 80158e2:	f000 fa23 	bl	8015d2c <GUI_ClearRectEx>
 80158e6:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
 80158ea:	bf00      	nop
 80158ec:	2000027c 	.word	0x2000027c

080158f0 <_DrawDownRect>:
 80158f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158f4:	4c27      	ldr	r4, [pc, #156]	; (8015994 <_DrawDownRect+0xa4>)
 80158f6:	8805      	ldrh	r5, [r0, #0]
 80158f8:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 80158fc:	8887      	ldrh	r7, [r0, #4]
 80158fe:	88c6      	ldrh	r6, [r0, #6]
 8015900:	6820      	ldr	r0, [r4, #0]
 8015902:	f7f9 ff0b 	bl	800f71c <LCD_SetColor>
 8015906:	b22d      	sxth	r5, r5
 8015908:	b23f      	sxth	r7, r7
 801590a:	fa0f f888 	sxth.w	r8, r8
 801590e:	68a0      	ldr	r0, [r4, #8]
 8015910:	f7f9 ff04 	bl	800f71c <LCD_SetColor>
 8015914:	f108 0a01 	add.w	sl, r8, #1
 8015918:	b236      	sxth	r6, r6
 801591a:	4640      	mov	r0, r8
 801591c:	4629      	mov	r1, r5
 801591e:	463a      	mov	r2, r7
 8015920:	f7fa fe60 	bl	80105e4 <GUI_DrawHLine>
 8015924:	4651      	mov	r1, sl
 8015926:	4632      	mov	r2, r6
 8015928:	4628      	mov	r0, r5
 801592a:	f7fa fe19 	bl	8010560 <GUI_DrawVLine>
 801592e:	f105 0b01 	add.w	fp, r5, #1
 8015932:	f107 39ff 	add.w	r9, r7, #4294967295
 8015936:	6820      	ldr	r0, [r4, #0]
 8015938:	f7f9 fef0 	bl	800f71c <LCD_SetColor>
 801593c:	4650      	mov	r0, sl
 801593e:	4659      	mov	r1, fp
 8015940:	464a      	mov	r2, r9
 8015942:	f7fa fe4f 	bl	80105e4 <GUI_DrawHLine>
 8015946:	f108 0302 	add.w	r3, r8, #2
 801594a:	f106 38ff 	add.w	r8, r6, #4294967295
 801594e:	4619      	mov	r1, r3
 8015950:	4642      	mov	r2, r8
 8015952:	4658      	mov	r0, fp
 8015954:	9301      	str	r3, [sp, #4]
 8015956:	f7fa fe03 	bl	8010560 <GUI_DrawVLine>
 801595a:	6920      	ldr	r0, [r4, #16]
 801595c:	f7f9 fede 	bl	800f71c <LCD_SetColor>
 8015960:	4630      	mov	r0, r6
 8015962:	4659      	mov	r1, fp
 8015964:	463a      	mov	r2, r7
 8015966:	f7fa fe3d 	bl	80105e4 <GUI_DrawHLine>
 801596a:	4651      	mov	r1, sl
 801596c:	4632      	mov	r2, r6
 801596e:	4638      	mov	r0, r7
 8015970:	f7fa fdf6 	bl	8010560 <GUI_DrawVLine>
 8015974:	68e0      	ldr	r0, [r4, #12]
 8015976:	f7f9 fed1 	bl	800f71c <LCD_SetColor>
 801597a:	4640      	mov	r0, r8
 801597c:	1ca9      	adds	r1, r5, #2
 801597e:	464a      	mov	r2, r9
 8015980:	f7fa fe30 	bl	80105e4 <GUI_DrawHLine>
 8015984:	9901      	ldr	r1, [sp, #4]
 8015986:	4648      	mov	r0, r9
 8015988:	4642      	mov	r2, r8
 801598a:	b003      	add	sp, #12
 801598c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015990:	f7fa bde6 	b.w	8010560 <GUI_DrawVLine>
 8015994:	200002b8 	.word	0x200002b8

08015998 <_DrawDown>:
 8015998:	b507      	push	{r0, r1, r2, lr}
 801599a:	4668      	mov	r0, sp
 801599c:	f7f5 fff2 	bl	800b984 <WM_GetClientRect>
 80159a0:	4668      	mov	r0, sp
 80159a2:	f7ff ffa5 	bl	80158f0 <_DrawDownRect>
 80159a6:	bd0e      	pop	{r1, r2, r3, pc}

080159a8 <_DrawUpRect>:
 80159a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159ac:	f8b0 8000 	ldrh.w	r8, [r0]
 80159b0:	4c19      	ldr	r4, [pc, #100]	; (8015a18 <_DrawUpRect+0x70>)
 80159b2:	8847      	ldrh	r7, [r0, #2]
 80159b4:	8886      	ldrh	r6, [r0, #4]
 80159b6:	88c5      	ldrh	r5, [r0, #6]
 80159b8:	6820      	ldr	r0, [r4, #0]
 80159ba:	b22d      	sxth	r5, r5
 80159bc:	fa0f f988 	sxth.w	r9, r8
 80159c0:	b236      	sxth	r6, r6
 80159c2:	b23f      	sxth	r7, r7
 80159c4:	f7f9 feaa 	bl	800f71c <LCD_SetColor>
 80159c8:	462b      	mov	r3, r5
 80159ca:	4639      	mov	r1, r7
 80159cc:	4632      	mov	r2, r6
 80159ce:	4648      	mov	r0, r9
 80159d0:	f7fc fa28 	bl	8011e24 <GUI_DrawRect>
 80159d4:	f109 0801 	add.w	r8, r9, #1
 80159d8:	3701      	adds	r7, #1
 80159da:	6920      	ldr	r0, [r4, #16]
 80159dc:	f7f9 fe9e 	bl	800f71c <LCD_SetColor>
 80159e0:	f1a5 0902 	sub.w	r9, r5, #2
 80159e4:	1eb2      	subs	r2, r6, #2
 80159e6:	4638      	mov	r0, r7
 80159e8:	4641      	mov	r1, r8
 80159ea:	f7fa fdfb 	bl	80105e4 <GUI_DrawHLine>
 80159ee:	4639      	mov	r1, r7
 80159f0:	464a      	mov	r2, r9
 80159f2:	4640      	mov	r0, r8
 80159f4:	f7fa fdb4 	bl	8010560 <GUI_DrawVLine>
 80159f8:	3e01      	subs	r6, #1
 80159fa:	6860      	ldr	r0, [r4, #4]
 80159fc:	f7f9 fe8e 	bl	800f71c <LCD_SetColor>
 8015a00:	1e68      	subs	r0, r5, #1
 8015a02:	4641      	mov	r1, r8
 8015a04:	4632      	mov	r2, r6
 8015a06:	f7fa fded 	bl	80105e4 <GUI_DrawHLine>
 8015a0a:	4630      	mov	r0, r6
 8015a0c:	4639      	mov	r1, r7
 8015a0e:	464a      	mov	r2, r9
 8015a10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a14:	f7fa bda4 	b.w	8010560 <GUI_DrawVLine>
 8015a18:	200002b8 	.word	0x200002b8

08015a1c <WIDGET_EFFECT_3D_DrawUp>:
 8015a1c:	b507      	push	{r0, r1, r2, lr}
 8015a1e:	4668      	mov	r0, sp
 8015a20:	f7f5 ffb0 	bl	800b984 <WM_GetClientRect>
 8015a24:	4668      	mov	r0, sp
 8015a26:	f7ff ffbf 	bl	80159a8 <_DrawUpRect>
 8015a2a:	bd0e      	pop	{r1, r2, r3, pc}

08015a2c <WM__IsChild>:
 8015a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a2e:	460d      	mov	r5, r1
 8015a30:	4604      	mov	r4, r0
 8015a32:	b168      	cbz	r0, 8015a50 <WM__IsChild+0x24>
 8015a34:	f7fb ff52 	bl	80118dc <GUI_ALLOC_LockH>
 8015a38:	9001      	str	r0, [sp, #4]
 8015a3a:	b128      	cbz	r0, 8015a48 <WM__IsChild+0x1c>
 8015a3c:	6984      	ldr	r4, [r0, #24]
 8015a3e:	1b63      	subs	r3, r4, r5
 8015a40:	4258      	negs	r0, r3
 8015a42:	eb50 0403 	adcs.w	r4, r0, r3
 8015a46:	e000      	b.n	8015a4a <WM__IsChild+0x1e>
 8015a48:	4604      	mov	r4, r0
 8015a4a:	a801      	add	r0, sp, #4
 8015a4c:	f7fb ff54 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8015a50:	4620      	mov	r0, r4
 8015a52:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08015a54 <WM__ForEachDesc>:
 8015a54:	b570      	push	{r4, r5, r6, lr}
 8015a56:	460d      	mov	r5, r1
 8015a58:	4616      	mov	r6, r2
 8015a5a:	f7fb ff35 	bl	80118c8 <GUI_ALLOC_h2p>
 8015a5e:	69c4      	ldr	r4, [r0, #28]
 8015a60:	b164      	cbz	r4, 8015a7c <WM__ForEachDesc+0x28>
 8015a62:	4620      	mov	r0, r4
 8015a64:	4631      	mov	r1, r6
 8015a66:	47a8      	blx	r5
 8015a68:	4620      	mov	r0, r4
 8015a6a:	4629      	mov	r1, r5
 8015a6c:	4632      	mov	r2, r6
 8015a6e:	f7ff fff1 	bl	8015a54 <WM__ForEachDesc>
 8015a72:	4620      	mov	r0, r4
 8015a74:	f7fb ff28 	bl	80118c8 <GUI_ALLOC_h2p>
 8015a78:	6a04      	ldr	r4, [r0, #32]
 8015a7a:	e7f1      	b.n	8015a60 <WM__ForEachDesc+0xc>
 8015a7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015a80 <_NextPixel_FlushBuffer>:
 8015a80:	b570      	push	{r4, r5, r6, lr}
 8015a82:	4b10      	ldr	r3, [pc, #64]	; (8015ac4 <_NextPixel_FlushBuffer+0x44>)
 8015a84:	4910      	ldr	r1, [pc, #64]	; (8015ac8 <_NextPixel_FlushBuffer+0x48>)
 8015a86:	6818      	ldr	r0, [r3, #0]
 8015a88:	4c10      	ldr	r4, [pc, #64]	; (8015acc <_NextPixel_FlushBuffer+0x4c>)
 8015a8a:	7c42      	ldrb	r2, [r0, #17]
 8015a8c:	69e3      	ldr	r3, [r4, #28]
 8015a8e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8015a92:	6922      	ldr	r2, [r4, #16]
 8015a94:	68c6      	ldr	r6, [r0, #12]
 8015a96:	6861      	ldr	r1, [r4, #4]
 8015a98:	b086      	sub	sp, #24
 8015a9a:	2501      	movs	r5, #1
 8015a9c:	9500      	str	r5, [sp, #0]
 8015a9e:	2500      	movs	r5, #0
 8015aa0:	9301      	str	r3, [sp, #4]
 8015aa2:	9203      	str	r2, [sp, #12]
 8015aa4:	9502      	str	r5, [sp, #8]
 8015aa6:	9504      	str	r5, [sp, #16]
 8015aa8:	9505      	str	r5, [sp, #20]
 8015aaa:	68a2      	ldr	r2, [r4, #8]
 8015aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015aae:	6876      	ldr	r6, [r6, #4]
 8015ab0:	47b0      	blx	r6
 8015ab2:	6860      	ldr	r0, [r4, #4]
 8015ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015ab6:	6922      	ldr	r2, [r4, #16]
 8015ab8:	6265      	str	r5, [r4, #36]	; 0x24
 8015aba:	1843      	adds	r3, r0, r1
 8015abc:	6063      	str	r3, [r4, #4]
 8015abe:	6162      	str	r2, [r4, #20]
 8015ac0:	b006      	add	sp, #24
 8015ac2:	bd70      	pop	{r4, r5, r6, pc}
 8015ac4:	2000027c 	.word	0x2000027c
 8015ac8:	20017a04 	.word	0x20017a04
 8015acc:	20016f60 	.word	0x20016f60

08015ad0 <_NextPixel_SetPixel>:
 8015ad0:	4b3f      	ldr	r3, [pc, #252]	; (8015bd0 <_NextPixel_SetPixel+0x100>)
 8015ad2:	699a      	ldr	r2, [r3, #24]
 8015ad4:	2a02      	cmp	r2, #2
 8015ad6:	b530      	push	{r4, r5, lr}
 8015ad8:	d066      	beq.n	8015ba8 <_NextPixel_SetPixel+0xd8>
 8015ada:	2a04      	cmp	r2, #4
 8015adc:	d068      	beq.n	8015bb0 <_NextPixel_SetPixel+0xe0>
 8015ade:	2a01      	cmp	r2, #1
 8015ae0:	d16a      	bne.n	8015bb8 <_NextPixel_SetPixel+0xe8>
 8015ae2:	69d9      	ldr	r1, [r3, #28]
 8015ae4:	695a      	ldr	r2, [r3, #20]
 8015ae6:	3901      	subs	r1, #1
 8015ae8:	2907      	cmp	r1, #7
 8015aea:	d865      	bhi.n	8015bb8 <_NextPixel_SetPixel+0xe8>
 8015aec:	e8df f001 	tbb	[pc, r1]
 8015af0:	38641e04 	.word	0x38641e04
 8015af4:	58646464 	.word	0x58646464
 8015af8:	7814      	ldrb	r4, [r2, #0]
 8015afa:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8015afe:	4934      	ldr	r1, [pc, #208]	; (8015bd0 <_NextPixel_SetPixel+0x100>)
 8015b00:	ea24 0405 	bic.w	r4, r4, r5
 8015b04:	7014      	strb	r4, [r2, #0]
 8015b06:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8015b08:	f1c5 0507 	rsb	r5, r5, #7
 8015b0c:	fa00 f005 	lsl.w	r0, r0, r5
 8015b10:	4304      	orrs	r4, r0
 8015b12:	7014      	strb	r4, [r2, #0]
 8015b14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015b16:	1c42      	adds	r2, r0, #1
 8015b18:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8015b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8015b1e:	0840      	lsrs	r0, r0, #1
 8015b20:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8015b24:	2800      	cmp	r0, #0
 8015b26:	d147      	bne.n	8015bb8 <_NextPixel_SetPixel+0xe8>
 8015b28:	2380      	movs	r3, #128	; 0x80
 8015b2a:	e032      	b.n	8015b92 <_NextPixel_SetPixel+0xc2>
 8015b2c:	7814      	ldrb	r4, [r2, #0]
 8015b2e:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8015b32:	4927      	ldr	r1, [pc, #156]	; (8015bd0 <_NextPixel_SetPixel+0x100>)
 8015b34:	ea24 0405 	bic.w	r4, r4, r5
 8015b38:	7014      	strb	r4, [r2, #0]
 8015b3a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8015b3c:	006d      	lsls	r5, r5, #1
 8015b3e:	f1c5 0506 	rsb	r5, r5, #6
 8015b42:	fa00 f005 	lsl.w	r0, r0, r5
 8015b46:	4304      	orrs	r4, r0
 8015b48:	7014      	strb	r4, [r2, #0]
 8015b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b4c:	1c50      	adds	r0, r2, #1
 8015b4e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8015b52:	62d8      	str	r0, [r3, #44]	; 0x2c
 8015b54:	0890      	lsrs	r0, r2, #2
 8015b56:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8015b5a:	bb68      	cbnz	r0, 8015bb8 <_NextPixel_SetPixel+0xe8>
 8015b5c:	23c0      	movs	r3, #192	; 0xc0
 8015b5e:	e018      	b.n	8015b92 <_NextPixel_SetPixel+0xc2>
 8015b60:	7814      	ldrb	r4, [r2, #0]
 8015b62:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8015b66:	491a      	ldr	r1, [pc, #104]	; (8015bd0 <_NextPixel_SetPixel+0x100>)
 8015b68:	ea24 0405 	bic.w	r4, r4, r5
 8015b6c:	7014      	strb	r4, [r2, #0]
 8015b6e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8015b70:	00ad      	lsls	r5, r5, #2
 8015b72:	f1c5 0504 	rsb	r5, r5, #4
 8015b76:	fa00 f005 	lsl.w	r0, r0, r5
 8015b7a:	4304      	orrs	r4, r0
 8015b7c:	7014      	strb	r4, [r2, #0]
 8015b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b80:	1c50      	adds	r0, r2, #1
 8015b82:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8015b86:	62d8      	str	r0, [r3, #44]	; 0x2c
 8015b88:	0910      	lsrs	r0, r2, #4
 8015b8a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8015b8e:	b998      	cbnz	r0, 8015bb8 <_NextPixel_SetPixel+0xe8>
 8015b90:	23f0      	movs	r3, #240	; 0xf0
 8015b92:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 8015b96:	694b      	ldr	r3, [r1, #20]
 8015b98:	62c8      	str	r0, [r1, #44]	; 0x2c
 8015b9a:	1c5a      	adds	r2, r3, #1
 8015b9c:	614a      	str	r2, [r1, #20]
 8015b9e:	e00b      	b.n	8015bb8 <_NextPixel_SetPixel+0xe8>
 8015ba0:	7010      	strb	r0, [r2, #0]
 8015ba2:	6958      	ldr	r0, [r3, #20]
 8015ba4:	1c41      	adds	r1, r0, #1
 8015ba6:	e006      	b.n	8015bb6 <_NextPixel_SetPixel+0xe6>
 8015ba8:	6959      	ldr	r1, [r3, #20]
 8015baa:	f821 0b02 	strh.w	r0, [r1], #2
 8015bae:	e002      	b.n	8015bb6 <_NextPixel_SetPixel+0xe6>
 8015bb0:	6959      	ldr	r1, [r3, #20]
 8015bb2:	f841 0b04 	str.w	r0, [r1], #4
 8015bb6:	6159      	str	r1, [r3, #20]
 8015bb8:	4805      	ldr	r0, [pc, #20]	; (8015bd0 <_NextPixel_SetPixel+0x100>)
 8015bba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015bbc:	6a01      	ldr	r1, [r0, #32]
 8015bbe:	1c5a      	adds	r2, r3, #1
 8015bc0:	428a      	cmp	r2, r1
 8015bc2:	6242      	str	r2, [r0, #36]	; 0x24
 8015bc4:	d103      	bne.n	8015bce <_NextPixel_SetPixel+0xfe>
 8015bc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015bca:	f7ff bf59 	b.w	8015a80 <_NextPixel_FlushBuffer>
 8015bce:	bd30      	pop	{r4, r5, pc}
 8015bd0:	20016f60 	.word	0x20016f60

08015bd4 <_NextPixel_NextLine>:
 8015bd4:	b510      	push	{r4, lr}
 8015bd6:	4c05      	ldr	r4, [pc, #20]	; (8015bec <_NextPixel_NextLine+0x18>)
 8015bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bda:	b10b      	cbz	r3, 8015be0 <_NextPixel_NextLine+0xc>
 8015bdc:	f7ff ff50 	bl	8015a80 <_NextPixel_FlushBuffer>
 8015be0:	68a1      	ldr	r1, [r4, #8]
 8015be2:	6820      	ldr	r0, [r4, #0]
 8015be4:	1c4a      	adds	r2, r1, #1
 8015be6:	6060      	str	r0, [r4, #4]
 8015be8:	60a2      	str	r2, [r4, #8]
 8015bea:	bd10      	pop	{r4, pc}
 8015bec:	20016f60 	.word	0x20016f60

08015bf0 <_NextPixel_End>:
 8015bf0:	4b07      	ldr	r3, [pc, #28]	; (8015c10 <_NextPixel_End+0x20>)
 8015bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bf4:	b510      	push	{r4, lr}
 8015bf6:	461c      	mov	r4, r3
 8015bf8:	b10a      	cbz	r2, 8015bfe <_NextPixel_End+0xe>
 8015bfa:	f7ff ff41 	bl	8015a80 <_NextPixel_FlushBuffer>
 8015bfe:	4805      	ldr	r0, [pc, #20]	; (8015c14 <_NextPixel_End+0x24>)
 8015c00:	f7fb fe7a 	bl	80118f8 <GUI_ALLOC_UnlockH>
 8015c04:	68e0      	ldr	r0, [r4, #12]
 8015c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c0a:	f7fb bea1 	b.w	8011950 <GUI_ALLOC_Free>
 8015c0e:	bf00      	nop
 8015c10:	20016f60 	.word	0x20016f60
 8015c14:	20016f70 	.word	0x20016f70

08015c18 <_NextPixel_Start>:
 8015c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c1c:	4b24      	ldr	r3, [pc, #144]	; (8015cb0 <_NextPixel_Start+0x98>)
 8015c1e:	1a12      	subs	r2, r2, r0
 8015c20:	4607      	mov	r7, r0
 8015c22:	6818      	ldr	r0, [r3, #0]
 8015c24:	7c40      	ldrb	r0, [r0, #17]
 8015c26:	4689      	mov	r9, r1
 8015c28:	f102 0801 	add.w	r8, r2, #1
 8015c2c:	f7f9 f988 	bl	800ef40 <GUI_GetBitsPerPixelEx>
 8015c30:	4920      	ldr	r1, [pc, #128]	; (8015cb4 <_NextPixel_Start+0x9c>)
 8015c32:	2818      	cmp	r0, #24
 8015c34:	bf08      	it	eq
 8015c36:	2020      	moveq	r0, #32
 8015c38:	2808      	cmp	r0, #8
 8015c3a:	61c8      	str	r0, [r1, #28]
 8015c3c:	dd04      	ble.n	8015c48 <_NextPixel_Start+0x30>
 8015c3e:	2810      	cmp	r0, #16
 8015c40:	bfcc      	ite	gt
 8015c42:	2504      	movgt	r5, #4
 8015c44:	2502      	movle	r5, #2
 8015c46:	e000      	b.n	8015c4a <_NextPixel_Start+0x32>
 8015c48:	2501      	movs	r5, #1
 8015c4a:	f7fb ff99 	bl	8011b80 <GUI_ALLOC_GetMaxSize>
 8015c4e:	fb08 f805 	mul.w	r8, r8, r5
 8015c52:	4540      	cmp	r0, r8
 8015c54:	d203      	bcs.n	8015c5e <_NextPixel_Start+0x46>
 8015c56:	fbb0 f6f5 	udiv	r6, r0, r5
 8015c5a:	436e      	muls	r6, r5
 8015c5c:	e000      	b.n	8015c60 <_NextPixel_Start+0x48>
 8015c5e:	4646      	mov	r6, r8
 8015c60:	4c14      	ldr	r4, [pc, #80]	; (8015cb4 <_NextPixel_Start+0x9c>)
 8015c62:	fb96 f2f5 	sdiv	r2, r6, r5
 8015c66:	4640      	mov	r0, r8
 8015c68:	2600      	movs	r6, #0
 8015c6a:	6222      	str	r2, [r4, #32]
 8015c6c:	6266      	str	r6, [r4, #36]	; 0x24
 8015c6e:	6027      	str	r7, [r4, #0]
 8015c70:	6067      	str	r7, [r4, #4]
 8015c72:	f8c4 9008 	str.w	r9, [r4, #8]
 8015c76:	61a5      	str	r5, [r4, #24]
 8015c78:	f7fc f87e 	bl	8011d78 <GUI_ALLOC_AllocNoInit>
 8015c7c:	60e0      	str	r0, [r4, #12]
 8015c7e:	b188      	cbz	r0, 8015ca4 <_NextPixel_Start+0x8c>
 8015c80:	f7fb fe2c 	bl	80118dc <GUI_ALLOC_LockH>
 8015c84:	6120      	str	r0, [r4, #16]
 8015c86:	6160      	str	r0, [r4, #20]
 8015c88:	69e0      	ldr	r0, [r4, #28]
 8015c8a:	2807      	cmp	r0, #7
 8015c8c:	dc0d      	bgt.n	8015caa <_NextPixel_Start+0x92>
 8015c8e:	2101      	movs	r1, #1
 8015c90:	4a09      	ldr	r2, [pc, #36]	; (8015cb8 <_NextPixel_Start+0xa0>)
 8015c92:	62e6      	str	r6, [r4, #44]	; 0x2c
 8015c94:	fa01 f300 	lsl.w	r3, r1, r0
 8015c98:	18d0      	adds	r0, r2, r3
 8015c9a:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 8015c9e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8015ca2:	e002      	b.n	8015caa <_NextPixel_Start+0x92>
 8015ca4:	2001      	movs	r0, #1
 8015ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015caa:	4630      	mov	r0, r6
 8015cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cb0:	2000027c 	.word	0x2000027c
 8015cb4:	20016f60 	.word	0x20016f60
 8015cb8:	0802f628 	.word	0x0802f628

08015cbc <LCD_GetNextPixelAPI>:
 8015cbc:	b507      	push	{r0, r1, r2, lr}
 8015cbe:	4b09      	ldr	r3, [pc, #36]	; (8015ce4 <LCD_GetNextPixelAPI+0x28>)
 8015cc0:	4909      	ldr	r1, [pc, #36]	; (8015ce8 <LCD_GetNextPixelAPI+0x2c>)
 8015cc2:	6818      	ldr	r0, [r3, #0]
 8015cc4:	7c42      	ldrb	r2, [r0, #17]
 8015cc6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8015cca:	68d8      	ldr	r0, [r3, #12]
 8015ccc:	9301      	str	r3, [sp, #4]
 8015cce:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8015cd0:	b90a      	cbnz	r2, 8015cd6 <LCD_GetNextPixelAPI+0x1a>
 8015cd2:	4806      	ldr	r0, [pc, #24]	; (8015cec <LCD_GetNextPixelAPI+0x30>)
 8015cd4:	e004      	b.n	8015ce0 <LCD_GetNextPixelAPI+0x24>
 8015cd6:	a801      	add	r0, sp, #4
 8015cd8:	2108      	movs	r1, #8
 8015cda:	4790      	blx	r2
 8015cdc:	2800      	cmp	r0, #0
 8015cde:	d0f8      	beq.n	8015cd2 <LCD_GetNextPixelAPI+0x16>
 8015ce0:	bd0e      	pop	{r1, r2, r3, pc}
 8015ce2:	bf00      	nop
 8015ce4:	2000027c 	.word	0x2000027c
 8015ce8:	20017a04 	.word	0x20017a04
 8015cec:	200002cc 	.word	0x200002cc

08015cf0 <LCD_GetNumLayers>:
 8015cf0:	b510      	push	{r4, lr}
 8015cf2:	2000      	movs	r0, #0
 8015cf4:	f7fb f8ce 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 8015cf8:	1c04      	adds	r4, r0, #0
 8015cfa:	bf18      	it	ne
 8015cfc:	2401      	movne	r4, #1
 8015cfe:	2001      	movs	r0, #1
 8015d00:	f7fb f8c8 	bl	8010e94 <GUI_DEVICE__GetpDriver>
 8015d04:	b100      	cbz	r0, 8015d08 <LCD_GetNumLayers+0x18>
 8015d06:	3401      	adds	r4, #1
 8015d08:	4620      	mov	r0, r4
 8015d0a:	bd10      	pop	{r4, pc}

08015d0c <LCD_GetBkColorIndex>:
 8015d0c:	4b02      	ldr	r3, [pc, #8]	; (8015d18 <LCD_GetBkColorIndex+0xc>)
 8015d0e:	6818      	ldr	r0, [r3, #0]
 8015d10:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8015d12:	6808      	ldr	r0, [r1, #0]
 8015d14:	4770      	bx	lr
 8015d16:	bf00      	nop
 8015d18:	2000027c 	.word	0x2000027c

08015d1c <LCD_GetColorIndex>:
 8015d1c:	4b02      	ldr	r3, [pc, #8]	; (8015d28 <LCD_GetColorIndex+0xc>)
 8015d1e:	6818      	ldr	r0, [r3, #0]
 8015d20:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8015d22:	6808      	ldr	r0, [r1, #0]
 8015d24:	4770      	bx	lr
 8015d26:	bf00      	nop
 8015d28:	2000027c 	.word	0x2000027c

08015d2c <GUI_ClearRectEx>:
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015d32:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8015d36:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015d3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015d3e:	f7fb b989 	b.w	8011054 <GUI_ClearRect>

08015d42 <GUI_CalcColorDist>:
 8015d42:	b2c2      	uxtb	r2, r0
 8015d44:	b2cb      	uxtb	r3, r1
 8015d46:	b510      	push	{r4, lr}
 8015d48:	1ad4      	subs	r4, r2, r3
 8015d4a:	b2a2      	uxth	r2, r4
 8015d4c:	b293      	uxth	r3, r2
 8015d4e:	041c      	lsls	r4, r3, #16
 8015d50:	d501      	bpl.n	8015d56 <GUI_CalcColorDist+0x14>
 8015d52:	4253      	negs	r3, r2
 8015d54:	b29b      	uxth	r3, r3
 8015d56:	fb03 f403 	mul.w	r4, r3, r3
 8015d5a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8015d5e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8015d62:	1ad2      	subs	r2, r2, r3
 8015d64:	b292      	uxth	r2, r2
 8015d66:	b293      	uxth	r3, r2
 8015d68:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8015d6c:	d001      	beq.n	8015d72 <GUI_CalcColorDist+0x30>
 8015d6e:	4253      	negs	r3, r2
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	0c09      	lsrs	r1, r1, #16
 8015d74:	ebc1 4010 	rsb	r0, r1, r0, lsr #16
 8015d78:	b281      	uxth	r1, r0
 8015d7a:	b288      	uxth	r0, r1
 8015d7c:	0402      	lsls	r2, r0, #16
 8015d7e:	fb03 4303 	mla	r3, r3, r3, r4
 8015d82:	d501      	bpl.n	8015d88 <GUI_CalcColorDist+0x46>
 8015d84:	424a      	negs	r2, r1
 8015d86:	b290      	uxth	r0, r2
 8015d88:	fb00 3000 	mla	r0, r0, r0, r3
 8015d8c:	bd10      	pop	{r4, pc}
	...

08015d90 <__assert_func>:
 8015d90:	b500      	push	{lr}
 8015d92:	4c0a      	ldr	r4, [pc, #40]	; (8015dbc <__assert_func+0x2c>)
 8015d94:	6824      	ldr	r4, [r4, #0]
 8015d96:	4605      	mov	r5, r0
 8015d98:	b085      	sub	sp, #20
 8015d9a:	68e0      	ldr	r0, [r4, #12]
 8015d9c:	b152      	cbz	r2, 8015db4 <__assert_func+0x24>
 8015d9e:	4c08      	ldr	r4, [pc, #32]	; (8015dc0 <__assert_func+0x30>)
 8015da0:	9202      	str	r2, [sp, #8]
 8015da2:	e88d 0012 	stmia.w	sp, {r1, r4}
 8015da6:	461a      	mov	r2, r3
 8015da8:	4906      	ldr	r1, [pc, #24]	; (8015dc4 <__assert_func+0x34>)
 8015daa:	462b      	mov	r3, r5
 8015dac:	f000 f80e 	bl	8015dcc <fiprintf>
 8015db0:	f002 fac0 	bl	8018334 <abort>
 8015db4:	4c04      	ldr	r4, [pc, #16]	; (8015dc8 <__assert_func+0x38>)
 8015db6:	4622      	mov	r2, r4
 8015db8:	e7f2      	b.n	8015da0 <__assert_func+0x10>
 8015dba:	bf00      	nop
 8015dbc:	20000708 	.word	0x20000708
 8015dc0:	08030a50 	.word	0x08030a50
 8015dc4:	08030a60 	.word	0x08030a60
 8015dc8:	08030a5c 	.word	0x08030a5c

08015dcc <fiprintf>:
 8015dcc:	b40e      	push	{r1, r2, r3}
 8015dce:	b510      	push	{r4, lr}
 8015dd0:	b083      	sub	sp, #12
 8015dd2:	ab05      	add	r3, sp, #20
 8015dd4:	4c06      	ldr	r4, [pc, #24]	; (8015df0 <fiprintf+0x24>)
 8015dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dda:	9301      	str	r3, [sp, #4]
 8015ddc:	4601      	mov	r1, r0
 8015dde:	6820      	ldr	r0, [r4, #0]
 8015de0:	f000 f9d8 	bl	8016194 <_vfiprintf_r>
 8015de4:	b003      	add	sp, #12
 8015de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dea:	b003      	add	sp, #12
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop
 8015df0:	20000708 	.word	0x20000708

08015df4 <memmove>:
 8015df4:	4288      	cmp	r0, r1
 8015df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015df8:	d90d      	bls.n	8015e16 <memmove+0x22>
 8015dfa:	188b      	adds	r3, r1, r2
 8015dfc:	4298      	cmp	r0, r3
 8015dfe:	d20a      	bcs.n	8015e16 <memmove+0x22>
 8015e00:	1881      	adds	r1, r0, r2
 8015e02:	2a00      	cmp	r2, #0
 8015e04:	d054      	beq.n	8015eb0 <memmove+0xbc>
 8015e06:	1a9a      	subs	r2, r3, r2
 8015e08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015e10:	4293      	cmp	r3, r2
 8015e12:	d1f9      	bne.n	8015e08 <memmove+0x14>
 8015e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e16:	2a0f      	cmp	r2, #15
 8015e18:	d948      	bls.n	8015eac <memmove+0xb8>
 8015e1a:	ea40 0301 	orr.w	r3, r0, r1
 8015e1e:	079b      	lsls	r3, r3, #30
 8015e20:	d147      	bne.n	8015eb2 <memmove+0xbe>
 8015e22:	f100 0410 	add.w	r4, r0, #16
 8015e26:	f101 0310 	add.w	r3, r1, #16
 8015e2a:	4615      	mov	r5, r2
 8015e2c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8015e30:	f844 6c10 	str.w	r6, [r4, #-16]
 8015e34:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8015e38:	f844 6c0c 	str.w	r6, [r4, #-12]
 8015e3c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8015e40:	f844 6c08 	str.w	r6, [r4, #-8]
 8015e44:	3d10      	subs	r5, #16
 8015e46:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8015e4a:	f844 6c04 	str.w	r6, [r4, #-4]
 8015e4e:	2d0f      	cmp	r5, #15
 8015e50:	f103 0310 	add.w	r3, r3, #16
 8015e54:	f104 0410 	add.w	r4, r4, #16
 8015e58:	d8e8      	bhi.n	8015e2c <memmove+0x38>
 8015e5a:	f1a2 0310 	sub.w	r3, r2, #16
 8015e5e:	f023 030f 	bic.w	r3, r3, #15
 8015e62:	f002 0e0f 	and.w	lr, r2, #15
 8015e66:	3310      	adds	r3, #16
 8015e68:	f1be 0f03 	cmp.w	lr, #3
 8015e6c:	4419      	add	r1, r3
 8015e6e:	4403      	add	r3, r0
 8015e70:	d921      	bls.n	8015eb6 <memmove+0xc2>
 8015e72:	1f1e      	subs	r6, r3, #4
 8015e74:	460d      	mov	r5, r1
 8015e76:	4674      	mov	r4, lr
 8015e78:	3c04      	subs	r4, #4
 8015e7a:	f855 7b04 	ldr.w	r7, [r5], #4
 8015e7e:	f846 7f04 	str.w	r7, [r6, #4]!
 8015e82:	2c03      	cmp	r4, #3
 8015e84:	d8f8      	bhi.n	8015e78 <memmove+0x84>
 8015e86:	f1ae 0404 	sub.w	r4, lr, #4
 8015e8a:	f024 0403 	bic.w	r4, r4, #3
 8015e8e:	3404      	adds	r4, #4
 8015e90:	4423      	add	r3, r4
 8015e92:	4421      	add	r1, r4
 8015e94:	f002 0203 	and.w	r2, r2, #3
 8015e98:	b152      	cbz	r2, 8015eb0 <memmove+0xbc>
 8015e9a:	3b01      	subs	r3, #1
 8015e9c:	440a      	add	r2, r1
 8015e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ea6:	4291      	cmp	r1, r2
 8015ea8:	d1f9      	bne.n	8015e9e <memmove+0xaa>
 8015eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015eac:	4603      	mov	r3, r0
 8015eae:	e7f3      	b.n	8015e98 <memmove+0xa4>
 8015eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	e7f1      	b.n	8015e9a <memmove+0xa6>
 8015eb6:	4672      	mov	r2, lr
 8015eb8:	e7ee      	b.n	8015e98 <memmove+0xa4>
 8015eba:	bf00      	nop

08015ebc <memset>:
 8015ebc:	b470      	push	{r4, r5, r6}
 8015ebe:	0784      	lsls	r4, r0, #30
 8015ec0:	d046      	beq.n	8015f50 <memset+0x94>
 8015ec2:	1e54      	subs	r4, r2, #1
 8015ec4:	2a00      	cmp	r2, #0
 8015ec6:	d041      	beq.n	8015f4c <memset+0x90>
 8015ec8:	b2cd      	uxtb	r5, r1
 8015eca:	4603      	mov	r3, r0
 8015ecc:	e002      	b.n	8015ed4 <memset+0x18>
 8015ece:	1e62      	subs	r2, r4, #1
 8015ed0:	b3e4      	cbz	r4, 8015f4c <memset+0x90>
 8015ed2:	4614      	mov	r4, r2
 8015ed4:	f803 5b01 	strb.w	r5, [r3], #1
 8015ed8:	079a      	lsls	r2, r3, #30
 8015eda:	d1f8      	bne.n	8015ece <memset+0x12>
 8015edc:	2c03      	cmp	r4, #3
 8015ede:	d92e      	bls.n	8015f3e <memset+0x82>
 8015ee0:	b2cd      	uxtb	r5, r1
 8015ee2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8015ee6:	2c0f      	cmp	r4, #15
 8015ee8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8015eec:	d919      	bls.n	8015f22 <memset+0x66>
 8015eee:	f103 0210 	add.w	r2, r3, #16
 8015ef2:	4626      	mov	r6, r4
 8015ef4:	3e10      	subs	r6, #16
 8015ef6:	2e0f      	cmp	r6, #15
 8015ef8:	f842 5c10 	str.w	r5, [r2, #-16]
 8015efc:	f842 5c0c 	str.w	r5, [r2, #-12]
 8015f00:	f842 5c08 	str.w	r5, [r2, #-8]
 8015f04:	f842 5c04 	str.w	r5, [r2, #-4]
 8015f08:	f102 0210 	add.w	r2, r2, #16
 8015f0c:	d8f2      	bhi.n	8015ef4 <memset+0x38>
 8015f0e:	f1a4 0210 	sub.w	r2, r4, #16
 8015f12:	f022 020f 	bic.w	r2, r2, #15
 8015f16:	f004 040f 	and.w	r4, r4, #15
 8015f1a:	3210      	adds	r2, #16
 8015f1c:	2c03      	cmp	r4, #3
 8015f1e:	4413      	add	r3, r2
 8015f20:	d90d      	bls.n	8015f3e <memset+0x82>
 8015f22:	461e      	mov	r6, r3
 8015f24:	4622      	mov	r2, r4
 8015f26:	3a04      	subs	r2, #4
 8015f28:	2a03      	cmp	r2, #3
 8015f2a:	f846 5b04 	str.w	r5, [r6], #4
 8015f2e:	d8fa      	bhi.n	8015f26 <memset+0x6a>
 8015f30:	1f22      	subs	r2, r4, #4
 8015f32:	f022 0203 	bic.w	r2, r2, #3
 8015f36:	3204      	adds	r2, #4
 8015f38:	4413      	add	r3, r2
 8015f3a:	f004 0403 	and.w	r4, r4, #3
 8015f3e:	b12c      	cbz	r4, 8015f4c <memset+0x90>
 8015f40:	b2c9      	uxtb	r1, r1
 8015f42:	441c      	add	r4, r3
 8015f44:	f803 1b01 	strb.w	r1, [r3], #1
 8015f48:	42a3      	cmp	r3, r4
 8015f4a:	d1fb      	bne.n	8015f44 <memset+0x88>
 8015f4c:	bc70      	pop	{r4, r5, r6}
 8015f4e:	4770      	bx	lr
 8015f50:	4614      	mov	r4, r2
 8015f52:	4603      	mov	r3, r0
 8015f54:	e7c2      	b.n	8015edc <memset+0x20>
 8015f56:	bf00      	nop

08015f58 <printf>:
 8015f58:	b40f      	push	{r0, r1, r2, r3}
 8015f5a:	b500      	push	{lr}
 8015f5c:	4907      	ldr	r1, [pc, #28]	; (8015f7c <printf+0x24>)
 8015f5e:	b083      	sub	sp, #12
 8015f60:	ab04      	add	r3, sp, #16
 8015f62:	6808      	ldr	r0, [r1, #0]
 8015f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f68:	6881      	ldr	r1, [r0, #8]
 8015f6a:	9301      	str	r3, [sp, #4]
 8015f6c:	f000 ff50 	bl	8016e10 <_vfprintf_r>
 8015f70:	b003      	add	sp, #12
 8015f72:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f76:	b004      	add	sp, #16
 8015f78:	4770      	bx	lr
 8015f7a:	bf00      	nop
 8015f7c:	20000708 	.word	0x20000708

08015f80 <_puts_r>:
 8015f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f82:	4604      	mov	r4, r0
 8015f84:	b089      	sub	sp, #36	; 0x24
 8015f86:	4608      	mov	r0, r1
 8015f88:	460d      	mov	r5, r1
 8015f8a:	f000 f88d 	bl	80160a8 <strlen>
 8015f8e:	68a3      	ldr	r3, [r4, #8]
 8015f90:	4f11      	ldr	r7, [pc, #68]	; (8015fd8 <_puts_r+0x58>)
 8015f92:	899a      	ldrh	r2, [r3, #12]
 8015f94:	9504      	str	r5, [sp, #16]
 8015f96:	2102      	movs	r1, #2
 8015f98:	f100 0e01 	add.w	lr, r0, #1
 8015f9c:	2601      	movs	r6, #1
 8015f9e:	ad04      	add	r5, sp, #16
 8015fa0:	9102      	str	r1, [sp, #8]
 8015fa2:	0491      	lsls	r1, r2, #18
 8015fa4:	9005      	str	r0, [sp, #20]
 8015fa6:	f8cd e00c 	str.w	lr, [sp, #12]
 8015faa:	9706      	str	r7, [sp, #24]
 8015fac:	9607      	str	r6, [sp, #28]
 8015fae:	9501      	str	r5, [sp, #4]
 8015fb0:	d406      	bmi.n	8015fc0 <_puts_r+0x40>
 8015fb2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8015fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015fb8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8015fbc:	819a      	strh	r2, [r3, #12]
 8015fbe:	6659      	str	r1, [r3, #100]	; 0x64
 8015fc0:	4620      	mov	r0, r4
 8015fc2:	4619      	mov	r1, r3
 8015fc4:	aa01      	add	r2, sp, #4
 8015fc6:	f003 fc6f 	bl	80198a8 <__sfvwrite_r>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	bf14      	ite	ne
 8015fce:	f04f 30ff 	movne.w	r0, #4294967295
 8015fd2:	200a      	moveq	r0, #10
 8015fd4:	b009      	add	sp, #36	; 0x24
 8015fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fd8:	08030a94 	.word	0x08030a94

08015fdc <puts>:
 8015fdc:	4b02      	ldr	r3, [pc, #8]	; (8015fe8 <puts+0xc>)
 8015fde:	4601      	mov	r1, r0
 8015fe0:	6818      	ldr	r0, [r3, #0]
 8015fe2:	f7ff bfcd 	b.w	8015f80 <_puts_r>
 8015fe6:	bf00      	nop
 8015fe8:	20000708 	.word	0x20000708

08015fec <strcpy>:
 8015fec:	ea80 0201 	eor.w	r2, r0, r1
 8015ff0:	4684      	mov	ip, r0
 8015ff2:	f012 0f03 	tst.w	r2, #3
 8015ff6:	d14f      	bne.n	8016098 <strcpy+0xac>
 8015ff8:	f011 0f03 	tst.w	r1, #3
 8015ffc:	d132      	bne.n	8016064 <strcpy+0x78>
 8015ffe:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8016002:	f011 0f04 	tst.w	r1, #4
 8016006:	f851 3b04 	ldr.w	r3, [r1], #4
 801600a:	d00b      	beq.n	8016024 <strcpy+0x38>
 801600c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8016010:	439a      	bics	r2, r3
 8016012:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8016016:	bf04      	itt	eq
 8016018:	f84c 3b04 	streq.w	r3, [ip], #4
 801601c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8016020:	d116      	bne.n	8016050 <strcpy+0x64>
 8016022:	bf00      	nop
 8016024:	f851 4b04 	ldr.w	r4, [r1], #4
 8016028:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801602c:	439a      	bics	r2, r3
 801602e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8016032:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8016036:	d10b      	bne.n	8016050 <strcpy+0x64>
 8016038:	f84c 3b04 	str.w	r3, [ip], #4
 801603c:	43a2      	bics	r2, r4
 801603e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8016042:	bf04      	itt	eq
 8016044:	f851 3b04 	ldreq.w	r3, [r1], #4
 8016048:	f84c 4b04 	streq.w	r4, [ip], #4
 801604c:	d0ea      	beq.n	8016024 <strcpy+0x38>
 801604e:	4623      	mov	r3, r4
 8016050:	f80c 3b01 	strb.w	r3, [ip], #1
 8016054:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016058:	ea4f 2333 	mov.w	r3, r3, ror #8
 801605c:	d1f8      	bne.n	8016050 <strcpy+0x64>
 801605e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016062:	4770      	bx	lr
 8016064:	f011 0f01 	tst.w	r1, #1
 8016068:	d006      	beq.n	8016078 <strcpy+0x8c>
 801606a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801606e:	f80c 2b01 	strb.w	r2, [ip], #1
 8016072:	2a00      	cmp	r2, #0
 8016074:	bf08      	it	eq
 8016076:	4770      	bxeq	lr
 8016078:	f011 0f02 	tst.w	r1, #2
 801607c:	d0bf      	beq.n	8015ffe <strcpy+0x12>
 801607e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8016082:	f012 0fff 	tst.w	r2, #255	; 0xff
 8016086:	bf16      	itet	ne
 8016088:	f82c 2b02 	strhne.w	r2, [ip], #2
 801608c:	f88c 2000 	strbeq.w	r2, [ip]
 8016090:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8016094:	d1b3      	bne.n	8015ffe <strcpy+0x12>
 8016096:	4770      	bx	lr
 8016098:	f811 2b01 	ldrb.w	r2, [r1], #1
 801609c:	f80c 2b01 	strb.w	r2, [ip], #1
 80160a0:	2a00      	cmp	r2, #0
 80160a2:	d1f9      	bne.n	8016098 <strcpy+0xac>
 80160a4:	4770      	bx	lr
 80160a6:	bf00      	nop

080160a8 <strlen>:
 80160a8:	f020 0103 	bic.w	r1, r0, #3
 80160ac:	f010 0003 	ands.w	r0, r0, #3
 80160b0:	f1c0 0000 	rsb	r0, r0, #0
 80160b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80160b8:	f100 0c04 	add.w	ip, r0, #4
 80160bc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80160c0:	f06f 0200 	mvn.w	r2, #0
 80160c4:	bf1c      	itt	ne
 80160c6:	fa22 f20c 	lsrne.w	r2, r2, ip
 80160ca:	4313      	orrne	r3, r2
 80160cc:	f04f 0c01 	mov.w	ip, #1
 80160d0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80160d4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80160d8:	eba3 020c 	sub.w	r2, r3, ip
 80160dc:	ea22 0203 	bic.w	r2, r2, r3
 80160e0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80160e4:	bf04      	itt	eq
 80160e6:	f851 3b04 	ldreq.w	r3, [r1], #4
 80160ea:	3004      	addeq	r0, #4
 80160ec:	d0f4      	beq.n	80160d8 <strlen+0x30>
 80160ee:	f1c2 0100 	rsb	r1, r2, #0
 80160f2:	ea02 0201 	and.w	r2, r2, r1
 80160f6:	fab2 f282 	clz	r2, r2
 80160fa:	f1c2 021f 	rsb	r2, r2, #31
 80160fe:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8016102:	4770      	bx	lr

08016104 <__sprint_r.part.0>:
 8016104:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8016106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801610a:	049c      	lsls	r4, r3, #18
 801610c:	460f      	mov	r7, r1
 801610e:	4692      	mov	sl, r2
 8016110:	d52b      	bpl.n	801616a <__sprint_r.part.0+0x66>
 8016112:	6893      	ldr	r3, [r2, #8]
 8016114:	6812      	ldr	r2, [r2, #0]
 8016116:	b333      	cbz	r3, 8016166 <__sprint_r.part.0+0x62>
 8016118:	4680      	mov	r8, r0
 801611a:	f102 0908 	add.w	r9, r2, #8
 801611e:	e919 0060 	ldmdb	r9, {r5, r6}
 8016122:	08b6      	lsrs	r6, r6, #2
 8016124:	d017      	beq.n	8016156 <__sprint_r.part.0+0x52>
 8016126:	3d04      	subs	r5, #4
 8016128:	2400      	movs	r4, #0
 801612a:	e001      	b.n	8016130 <__sprint_r.part.0+0x2c>
 801612c:	42a6      	cmp	r6, r4
 801612e:	d010      	beq.n	8016152 <__sprint_r.part.0+0x4e>
 8016130:	4640      	mov	r0, r8
 8016132:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8016136:	463a      	mov	r2, r7
 8016138:	f003 fa2e 	bl	8019598 <_fputwc_r>
 801613c:	1c43      	adds	r3, r0, #1
 801613e:	f104 0401 	add.w	r4, r4, #1
 8016142:	d1f3      	bne.n	801612c <__sprint_r.part.0+0x28>
 8016144:	2300      	movs	r3, #0
 8016146:	f8ca 3008 	str.w	r3, [sl, #8]
 801614a:	f8ca 3004 	str.w	r3, [sl, #4]
 801614e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016152:	f8da 3008 	ldr.w	r3, [sl, #8]
 8016156:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 801615a:	f8ca 3008 	str.w	r3, [sl, #8]
 801615e:	f109 0908 	add.w	r9, r9, #8
 8016162:	2b00      	cmp	r3, #0
 8016164:	d1db      	bne.n	801611e <__sprint_r.part.0+0x1a>
 8016166:	2000      	movs	r0, #0
 8016168:	e7ec      	b.n	8016144 <__sprint_r.part.0+0x40>
 801616a:	f003 fb9d 	bl	80198a8 <__sfvwrite_r>
 801616e:	2300      	movs	r3, #0
 8016170:	f8ca 3008 	str.w	r3, [sl, #8]
 8016174:	f8ca 3004 	str.w	r3, [sl, #4]
 8016178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801617c <__sprint_r>:
 801617c:	6893      	ldr	r3, [r2, #8]
 801617e:	b410      	push	{r4}
 8016180:	b11b      	cbz	r3, 801618a <__sprint_r+0xe>
 8016182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016186:	f7ff bfbd 	b.w	8016104 <__sprint_r.part.0>
 801618a:	4618      	mov	r0, r3
 801618c:	6053      	str	r3, [r2, #4]
 801618e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016192:	4770      	bx	lr

08016194 <_vfiprintf_r>:
 8016194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016198:	b0ab      	sub	sp, #172	; 0xac
 801619a:	461c      	mov	r4, r3
 801619c:	9100      	str	r1, [sp, #0]
 801619e:	4693      	mov	fp, r2
 80161a0:	9304      	str	r3, [sp, #16]
 80161a2:	9001      	str	r0, [sp, #4]
 80161a4:	b118      	cbz	r0, 80161ae <_vfiprintf_r+0x1a>
 80161a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	f000 80e1 	beq.w	8016370 <_vfiprintf_r+0x1dc>
 80161ae:	9b00      	ldr	r3, [sp, #0]
 80161b0:	8999      	ldrh	r1, [r3, #12]
 80161b2:	b28a      	uxth	r2, r1
 80161b4:	0490      	lsls	r0, r2, #18
 80161b6:	d408      	bmi.n	80161ca <_vfiprintf_r+0x36>
 80161b8:	4618      	mov	r0, r3
 80161ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80161bc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80161c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80161c4:	8182      	strh	r2, [r0, #12]
 80161c6:	6643      	str	r3, [r0, #100]	; 0x64
 80161c8:	b292      	uxth	r2, r2
 80161ca:	0711      	lsls	r1, r2, #28
 80161cc:	f140 80b0 	bpl.w	8016330 <_vfiprintf_r+0x19c>
 80161d0:	9b00      	ldr	r3, [sp, #0]
 80161d2:	691b      	ldr	r3, [r3, #16]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	f000 80ab 	beq.w	8016330 <_vfiprintf_r+0x19c>
 80161da:	f002 021a 	and.w	r2, r2, #26
 80161de:	2a0a      	cmp	r2, #10
 80161e0:	f000 80b2 	beq.w	8016348 <_vfiprintf_r+0x1b4>
 80161e4:	2300      	movs	r3, #0
 80161e6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80161ea:	9309      	str	r3, [sp, #36]	; 0x24
 80161ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80161ee:	930e      	str	r3, [sp, #56]	; 0x38
 80161f0:	9302      	str	r3, [sp, #8]
 80161f2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80161f6:	4654      	mov	r4, sl
 80161f8:	f89b 3000 	ldrb.w	r3, [fp]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	f000 849d 	beq.w	8016b3c <_vfiprintf_r+0x9a8>
 8016202:	2b25      	cmp	r3, #37	; 0x25
 8016204:	f000 849a 	beq.w	8016b3c <_vfiprintf_r+0x9a8>
 8016208:	465a      	mov	r2, fp
 801620a:	e001      	b.n	8016210 <_vfiprintf_r+0x7c>
 801620c:	2b25      	cmp	r3, #37	; 0x25
 801620e:	d003      	beq.n	8016218 <_vfiprintf_r+0x84>
 8016210:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016214:	2b00      	cmp	r3, #0
 8016216:	d1f9      	bne.n	801620c <_vfiprintf_r+0x78>
 8016218:	ebcb 0602 	rsb	r6, fp, r2
 801621c:	4615      	mov	r5, r2
 801621e:	b196      	cbz	r6, 8016246 <_vfiprintf_r+0xb2>
 8016220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016222:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016224:	f8c4 b000 	str.w	fp, [r4]
 8016228:	3301      	adds	r3, #1
 801622a:	4432      	add	r2, r6
 801622c:	2b07      	cmp	r3, #7
 801622e:	6066      	str	r6, [r4, #4]
 8016230:	920f      	str	r2, [sp, #60]	; 0x3c
 8016232:	930e      	str	r3, [sp, #56]	; 0x38
 8016234:	dd77      	ble.n	8016326 <_vfiprintf_r+0x192>
 8016236:	2a00      	cmp	r2, #0
 8016238:	f040 84a9 	bne.w	8016b8e <_vfiprintf_r+0x9fa>
 801623c:	9b02      	ldr	r3, [sp, #8]
 801623e:	920e      	str	r2, [sp, #56]	; 0x38
 8016240:	4433      	add	r3, r6
 8016242:	4654      	mov	r4, sl
 8016244:	9302      	str	r3, [sp, #8]
 8016246:	782b      	ldrb	r3, [r5, #0]
 8016248:	2b00      	cmp	r3, #0
 801624a:	f000 8359 	beq.w	8016900 <_vfiprintf_r+0x76c>
 801624e:	2100      	movs	r1, #0
 8016250:	f04f 3cff 	mov.w	ip, #4294967295
 8016254:	1c68      	adds	r0, r5, #1
 8016256:	786b      	ldrb	r3, [r5, #1]
 8016258:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801625c:	4688      	mov	r8, r1
 801625e:	460d      	mov	r5, r1
 8016260:	4666      	mov	r6, ip
 8016262:	f100 0b01 	add.w	fp, r0, #1
 8016266:	f1a3 0220 	sub.w	r2, r3, #32
 801626a:	2a58      	cmp	r2, #88	; 0x58
 801626c:	f200 82a7 	bhi.w	80167be <_vfiprintf_r+0x62a>
 8016270:	e8df f012 	tbh	[pc, r2, lsl #1]
 8016274:	02a50297 	.word	0x02a50297
 8016278:	029f02a5 	.word	0x029f02a5
 801627c:	02a502a5 	.word	0x02a502a5
 8016280:	02a502a5 	.word	0x02a502a5
 8016284:	02a502a5 	.word	0x02a502a5
 8016288:	025f0252 	.word	0x025f0252
 801628c:	010c02a5 	.word	0x010c02a5
 8016290:	02a5026a 	.word	0x02a5026a
 8016294:	012e0128 	.word	0x012e0128
 8016298:	012e012e 	.word	0x012e012e
 801629c:	012e012e 	.word	0x012e012e
 80162a0:	012e012e 	.word	0x012e012e
 80162a4:	012e012e 	.word	0x012e012e
 80162a8:	02a502a5 	.word	0x02a502a5
 80162ac:	02a502a5 	.word	0x02a502a5
 80162b0:	02a502a5 	.word	0x02a502a5
 80162b4:	02a502a5 	.word	0x02a502a5
 80162b8:	02a502a5 	.word	0x02a502a5
 80162bc:	02a5013c 	.word	0x02a5013c
 80162c0:	02a502a5 	.word	0x02a502a5
 80162c4:	02a502a5 	.word	0x02a502a5
 80162c8:	02a502a5 	.word	0x02a502a5
 80162cc:	02a502a5 	.word	0x02a502a5
 80162d0:	017302a5 	.word	0x017302a5
 80162d4:	02a502a5 	.word	0x02a502a5
 80162d8:	02a502a5 	.word	0x02a502a5
 80162dc:	018a02a5 	.word	0x018a02a5
 80162e0:	02a502a5 	.word	0x02a502a5
 80162e4:	02a501a2 	.word	0x02a501a2
 80162e8:	02a502a5 	.word	0x02a502a5
 80162ec:	02a502a5 	.word	0x02a502a5
 80162f0:	02a502a5 	.word	0x02a502a5
 80162f4:	02a502a5 	.word	0x02a502a5
 80162f8:	01c602a5 	.word	0x01c602a5
 80162fc:	02a501d8 	.word	0x02a501d8
 8016300:	02a502a5 	.word	0x02a502a5
 8016304:	01d80122 	.word	0x01d80122
 8016308:	02a502a5 	.word	0x02a502a5
 801630c:	02a50249 	.word	0x02a50249
 8016310:	01120286 	.word	0x01120286
 8016314:	020501f1 	.word	0x020501f1
 8016318:	020b02a5 	.word	0x020b02a5
 801631c:	008102a5 	.word	0x008102a5
 8016320:	02a502a5 	.word	0x02a502a5
 8016324:	0230      	.short	0x0230
 8016326:	3408      	adds	r4, #8
 8016328:	9b02      	ldr	r3, [sp, #8]
 801632a:	4433      	add	r3, r6
 801632c:	9302      	str	r3, [sp, #8]
 801632e:	e78a      	b.n	8016246 <_vfiprintf_r+0xb2>
 8016330:	9801      	ldr	r0, [sp, #4]
 8016332:	9900      	ldr	r1, [sp, #0]
 8016334:	f001 ff9c 	bl	8018270 <__swsetup_r>
 8016338:	b9a8      	cbnz	r0, 8016366 <_vfiprintf_r+0x1d2>
 801633a:	9b00      	ldr	r3, [sp, #0]
 801633c:	899a      	ldrh	r2, [r3, #12]
 801633e:	f002 021a 	and.w	r2, r2, #26
 8016342:	2a0a      	cmp	r2, #10
 8016344:	f47f af4e 	bne.w	80161e4 <_vfiprintf_r+0x50>
 8016348:	9b00      	ldr	r3, [sp, #0]
 801634a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801634e:	2b00      	cmp	r3, #0
 8016350:	f6ff af48 	blt.w	80161e4 <_vfiprintf_r+0x50>
 8016354:	9801      	ldr	r0, [sp, #4]
 8016356:	9900      	ldr	r1, [sp, #0]
 8016358:	465a      	mov	r2, fp
 801635a:	4623      	mov	r3, r4
 801635c:	f000 fd1c 	bl	8016d98 <__sbprintf>
 8016360:	b02b      	add	sp, #172	; 0xac
 8016362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016366:	f04f 30ff 	mov.w	r0, #4294967295
 801636a:	b02b      	add	sp, #172	; 0xac
 801636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016370:	f003 f908 	bl	8019584 <__sinit>
 8016374:	e71b      	b.n	80161ae <_vfiprintf_r+0x1a>
 8016376:	f018 0f20 	tst.w	r8, #32
 801637a:	9503      	str	r5, [sp, #12]
 801637c:	46b4      	mov	ip, r6
 801637e:	f000 810b 	beq.w	8016598 <_vfiprintf_r+0x404>
 8016382:	9b04      	ldr	r3, [sp, #16]
 8016384:	3307      	adds	r3, #7
 8016386:	f023 0307 	bic.w	r3, r3, #7
 801638a:	f103 0208 	add.w	r2, r3, #8
 801638e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016392:	9204      	str	r2, [sp, #16]
 8016394:	2301      	movs	r3, #1
 8016396:	2200      	movs	r2, #0
 8016398:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801639c:	46e1      	mov	r9, ip
 801639e:	4615      	mov	r5, r2
 80163a0:	f1bc 0f00 	cmp.w	ip, #0
 80163a4:	bfa8      	it	ge
 80163a6:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 80163aa:	ea56 0207 	orrs.w	r2, r6, r7
 80163ae:	f040 80c4 	bne.w	801653a <_vfiprintf_r+0x3a6>
 80163b2:	f1bc 0f00 	cmp.w	ip, #0
 80163b6:	f000 837d 	beq.w	8016ab4 <_vfiprintf_r+0x920>
 80163ba:	2b01      	cmp	r3, #1
 80163bc:	f000 80c5 	beq.w	801654a <_vfiprintf_r+0x3b6>
 80163c0:	2b02      	cmp	r3, #2
 80163c2:	f000 8383 	beq.w	8016acc <_vfiprintf_r+0x938>
 80163c6:	4651      	mov	r1, sl
 80163c8:	08f2      	lsrs	r2, r6, #3
 80163ca:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80163ce:	08f8      	lsrs	r0, r7, #3
 80163d0:	f006 0307 	and.w	r3, r6, #7
 80163d4:	4607      	mov	r7, r0
 80163d6:	4616      	mov	r6, r2
 80163d8:	3330      	adds	r3, #48	; 0x30
 80163da:	ea56 0207 	orrs.w	r2, r6, r7
 80163de:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80163e2:	d1f1      	bne.n	80163c8 <_vfiprintf_r+0x234>
 80163e4:	f018 0f01 	tst.w	r8, #1
 80163e8:	9107      	str	r1, [sp, #28]
 80163ea:	f040 83f9 	bne.w	8016be0 <_vfiprintf_r+0xa4c>
 80163ee:	ebc1 090a 	rsb	r9, r1, sl
 80163f2:	45e1      	cmp	r9, ip
 80163f4:	464e      	mov	r6, r9
 80163f6:	bfb8      	it	lt
 80163f8:	4666      	movlt	r6, ip
 80163fa:	b105      	cbz	r5, 80163fe <_vfiprintf_r+0x26a>
 80163fc:	3601      	adds	r6, #1
 80163fe:	f018 0302 	ands.w	r3, r8, #2
 8016402:	9305      	str	r3, [sp, #20]
 8016404:	bf18      	it	ne
 8016406:	3602      	addne	r6, #2
 8016408:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801640c:	9306      	str	r3, [sp, #24]
 801640e:	f040 81f6 	bne.w	80167fe <_vfiprintf_r+0x66a>
 8016412:	9b03      	ldr	r3, [sp, #12]
 8016414:	1b9d      	subs	r5, r3, r6
 8016416:	2d00      	cmp	r5, #0
 8016418:	f340 81f1 	ble.w	80167fe <_vfiprintf_r+0x66a>
 801641c:	2d10      	cmp	r5, #16
 801641e:	f340 8489 	ble.w	8016d34 <_vfiprintf_r+0xba0>
 8016422:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8016426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016428:	4fc4      	ldr	r7, [pc, #784]	; (801673c <_vfiprintf_r+0x5a8>)
 801642a:	4620      	mov	r0, r4
 801642c:	2310      	movs	r3, #16
 801642e:	4664      	mov	r4, ip
 8016430:	4671      	mov	r1, lr
 8016432:	4684      	mov	ip, r0
 8016434:	e007      	b.n	8016446 <_vfiprintf_r+0x2b2>
 8016436:	f101 0e02 	add.w	lr, r1, #2
 801643a:	f10c 0c08 	add.w	ip, ip, #8
 801643e:	4601      	mov	r1, r0
 8016440:	3d10      	subs	r5, #16
 8016442:	2d10      	cmp	r5, #16
 8016444:	dd13      	ble.n	801646e <_vfiprintf_r+0x2da>
 8016446:	1c48      	adds	r0, r1, #1
 8016448:	3210      	adds	r2, #16
 801644a:	2807      	cmp	r0, #7
 801644c:	920f      	str	r2, [sp, #60]	; 0x3c
 801644e:	f8cc 7000 	str.w	r7, [ip]
 8016452:	f8cc 3004 	str.w	r3, [ip, #4]
 8016456:	900e      	str	r0, [sp, #56]	; 0x38
 8016458:	dded      	ble.n	8016436 <_vfiprintf_r+0x2a2>
 801645a:	2a00      	cmp	r2, #0
 801645c:	f040 81bf 	bne.w	80167de <_vfiprintf_r+0x64a>
 8016460:	3d10      	subs	r5, #16
 8016462:	2d10      	cmp	r5, #16
 8016464:	4611      	mov	r1, r2
 8016466:	f04f 0e01 	mov.w	lr, #1
 801646a:	46d4      	mov	ip, sl
 801646c:	dceb      	bgt.n	8016446 <_vfiprintf_r+0x2b2>
 801646e:	4663      	mov	r3, ip
 8016470:	4671      	mov	r1, lr
 8016472:	46a4      	mov	ip, r4
 8016474:	461c      	mov	r4, r3
 8016476:	442a      	add	r2, r5
 8016478:	2907      	cmp	r1, #7
 801647a:	920f      	str	r2, [sp, #60]	; 0x3c
 801647c:	6027      	str	r7, [r4, #0]
 801647e:	6065      	str	r5, [r4, #4]
 8016480:	910e      	str	r1, [sp, #56]	; 0x38
 8016482:	f300 8343 	bgt.w	8016b0c <_vfiprintf_r+0x978>
 8016486:	3408      	adds	r4, #8
 8016488:	1c48      	adds	r0, r1, #1
 801648a:	e1bb      	b.n	8016804 <_vfiprintf_r+0x670>
 801648c:	4658      	mov	r0, fp
 801648e:	f048 0804 	orr.w	r8, r8, #4
 8016492:	f89b 3000 	ldrb.w	r3, [fp]
 8016496:	e6e4      	b.n	8016262 <_vfiprintf_r+0xce>
 8016498:	f018 0320 	ands.w	r3, r8, #32
 801649c:	9503      	str	r5, [sp, #12]
 801649e:	46b4      	mov	ip, r6
 80164a0:	d062      	beq.n	8016568 <_vfiprintf_r+0x3d4>
 80164a2:	9b04      	ldr	r3, [sp, #16]
 80164a4:	3307      	adds	r3, #7
 80164a6:	f023 0307 	bic.w	r3, r3, #7
 80164aa:	f103 0208 	add.w	r2, r3, #8
 80164ae:	e9d3 6700 	ldrd	r6, r7, [r3]
 80164b2:	9204      	str	r2, [sp, #16]
 80164b4:	2300      	movs	r3, #0
 80164b6:	e76e      	b.n	8016396 <_vfiprintf_r+0x202>
 80164b8:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 80164bc:	f89b 3000 	ldrb.w	r3, [fp]
 80164c0:	4658      	mov	r0, fp
 80164c2:	e6ce      	b.n	8016262 <_vfiprintf_r+0xce>
 80164c4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80164c8:	f89b 3000 	ldrb.w	r3, [fp]
 80164cc:	4658      	mov	r0, fp
 80164ce:	e6c8      	b.n	8016262 <_vfiprintf_r+0xce>
 80164d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80164d4:	2500      	movs	r5, #0
 80164d6:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80164da:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80164de:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80164e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80164e6:	2a09      	cmp	r2, #9
 80164e8:	d9f5      	bls.n	80164d6 <_vfiprintf_r+0x342>
 80164ea:	e6bc      	b.n	8016266 <_vfiprintf_r+0xd2>
 80164ec:	f048 0810 	orr.w	r8, r8, #16
 80164f0:	f018 0f20 	tst.w	r8, #32
 80164f4:	9503      	str	r5, [sp, #12]
 80164f6:	46b4      	mov	ip, r6
 80164f8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80164fc:	f000 809a 	beq.w	8016634 <_vfiprintf_r+0x4a0>
 8016500:	9904      	ldr	r1, [sp, #16]
 8016502:	3107      	adds	r1, #7
 8016504:	f021 0107 	bic.w	r1, r1, #7
 8016508:	e9d1 2300 	ldrd	r2, r3, [r1]
 801650c:	3108      	adds	r1, #8
 801650e:	9104      	str	r1, [sp, #16]
 8016510:	4616      	mov	r6, r2
 8016512:	461f      	mov	r7, r3
 8016514:	2a00      	cmp	r2, #0
 8016516:	f173 0300 	sbcs.w	r3, r3, #0
 801651a:	f2c0 83a3 	blt.w	8016c64 <_vfiprintf_r+0xad0>
 801651e:	f1bc 0f00 	cmp.w	ip, #0
 8016522:	bfa8      	it	ge
 8016524:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 8016528:	ea56 0207 	orrs.w	r2, r6, r7
 801652c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8016530:	46e1      	mov	r9, ip
 8016532:	f04f 0301 	mov.w	r3, #1
 8016536:	f43f af3c 	beq.w	80163b2 <_vfiprintf_r+0x21e>
 801653a:	2b01      	cmp	r3, #1
 801653c:	f47f af40 	bne.w	80163c0 <_vfiprintf_r+0x22c>
 8016540:	2f00      	cmp	r7, #0
 8016542:	bf08      	it	eq
 8016544:	2e0a      	cmpeq	r6, #10
 8016546:	f080 8331 	bcs.w	8016bac <_vfiprintf_r+0xa18>
 801654a:	ab2a      	add	r3, sp, #168	; 0xa8
 801654c:	3630      	adds	r6, #48	; 0x30
 801654e:	f803 6d41 	strb.w	r6, [r3, #-65]!
 8016552:	ebc3 090a 	rsb	r9, r3, sl
 8016556:	9307      	str	r3, [sp, #28]
 8016558:	e74b      	b.n	80163f2 <_vfiprintf_r+0x25e>
 801655a:	f048 0810 	orr.w	r8, r8, #16
 801655e:	f018 0320 	ands.w	r3, r8, #32
 8016562:	9503      	str	r5, [sp, #12]
 8016564:	46b4      	mov	ip, r6
 8016566:	d19c      	bne.n	80164a2 <_vfiprintf_r+0x30e>
 8016568:	f018 0210 	ands.w	r2, r8, #16
 801656c:	f040 82f4 	bne.w	8016b58 <_vfiprintf_r+0x9c4>
 8016570:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8016574:	f000 82f0 	beq.w	8016b58 <_vfiprintf_r+0x9c4>
 8016578:	9904      	ldr	r1, [sp, #16]
 801657a:	4613      	mov	r3, r2
 801657c:	460a      	mov	r2, r1
 801657e:	3204      	adds	r2, #4
 8016580:	880e      	ldrh	r6, [r1, #0]
 8016582:	9204      	str	r2, [sp, #16]
 8016584:	2700      	movs	r7, #0
 8016586:	e706      	b.n	8016396 <_vfiprintf_r+0x202>
 8016588:	f048 0810 	orr.w	r8, r8, #16
 801658c:	f018 0f20 	tst.w	r8, #32
 8016590:	9503      	str	r5, [sp, #12]
 8016592:	46b4      	mov	ip, r6
 8016594:	f47f aef5 	bne.w	8016382 <_vfiprintf_r+0x1ee>
 8016598:	9a04      	ldr	r2, [sp, #16]
 801659a:	f018 0f10 	tst.w	r8, #16
 801659e:	4613      	mov	r3, r2
 80165a0:	f040 82e1 	bne.w	8016b66 <_vfiprintf_r+0x9d2>
 80165a4:	f018 0f40 	tst.w	r8, #64	; 0x40
 80165a8:	f000 82dd 	beq.w	8016b66 <_vfiprintf_r+0x9d2>
 80165ac:	8816      	ldrh	r6, [r2, #0]
 80165ae:	3204      	adds	r2, #4
 80165b0:	2700      	movs	r7, #0
 80165b2:	2301      	movs	r3, #1
 80165b4:	9204      	str	r2, [sp, #16]
 80165b6:	e6ee      	b.n	8016396 <_vfiprintf_r+0x202>
 80165b8:	4a61      	ldr	r2, [pc, #388]	; (8016740 <_vfiprintf_r+0x5ac>)
 80165ba:	9503      	str	r5, [sp, #12]
 80165bc:	f018 0f20 	tst.w	r8, #32
 80165c0:	46b4      	mov	ip, r6
 80165c2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80165c6:	9209      	str	r2, [sp, #36]	; 0x24
 80165c8:	f000 808e 	beq.w	80166e8 <_vfiprintf_r+0x554>
 80165cc:	9a04      	ldr	r2, [sp, #16]
 80165ce:	3207      	adds	r2, #7
 80165d0:	f022 0207 	bic.w	r2, r2, #7
 80165d4:	e9d2 6700 	ldrd	r6, r7, [r2]
 80165d8:	f102 0108 	add.w	r1, r2, #8
 80165dc:	9104      	str	r1, [sp, #16]
 80165de:	f018 0f01 	tst.w	r8, #1
 80165e2:	f000 828c 	beq.w	8016afe <_vfiprintf_r+0x96a>
 80165e6:	ea56 0207 	orrs.w	r2, r6, r7
 80165ea:	f000 8288 	beq.w	8016afe <_vfiprintf_r+0x96a>
 80165ee:	2230      	movs	r2, #48	; 0x30
 80165f0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80165f4:	f048 0802 	orr.w	r8, r8, #2
 80165f8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80165fc:	2302      	movs	r3, #2
 80165fe:	e6ca      	b.n	8016396 <_vfiprintf_r+0x202>
 8016600:	9a04      	ldr	r2, [sp, #16]
 8016602:	9503      	str	r5, [sp, #12]
 8016604:	6813      	ldr	r3, [r2, #0]
 8016606:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 801660a:	4613      	mov	r3, r2
 801660c:	3304      	adds	r3, #4
 801660e:	2601      	movs	r6, #1
 8016610:	2100      	movs	r1, #0
 8016612:	9304      	str	r3, [sp, #16]
 8016614:	ab10      	add	r3, sp, #64	; 0x40
 8016616:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801661a:	46b1      	mov	r9, r6
 801661c:	9307      	str	r3, [sp, #28]
 801661e:	f04f 0c00 	mov.w	ip, #0
 8016622:	e6ec      	b.n	80163fe <_vfiprintf_r+0x26a>
 8016624:	f018 0f20 	tst.w	r8, #32
 8016628:	9503      	str	r5, [sp, #12]
 801662a:	46b4      	mov	ip, r6
 801662c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8016630:	f47f af66 	bne.w	8016500 <_vfiprintf_r+0x36c>
 8016634:	f018 0f10 	tst.w	r8, #16
 8016638:	f040 82a0 	bne.w	8016b7c <_vfiprintf_r+0x9e8>
 801663c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8016640:	f000 829c 	beq.w	8016b7c <_vfiprintf_r+0x9e8>
 8016644:	9904      	ldr	r1, [sp, #16]
 8016646:	f9b1 6000 	ldrsh.w	r6, [r1]
 801664a:	3104      	adds	r1, #4
 801664c:	17f7      	asrs	r7, r6, #31
 801664e:	4632      	mov	r2, r6
 8016650:	463b      	mov	r3, r7
 8016652:	9104      	str	r1, [sp, #16]
 8016654:	e75e      	b.n	8016514 <_vfiprintf_r+0x380>
 8016656:	9904      	ldr	r1, [sp, #16]
 8016658:	9503      	str	r5, [sp, #12]
 801665a:	2330      	movs	r3, #48	; 0x30
 801665c:	460a      	mov	r2, r1
 801665e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8016662:	2378      	movs	r3, #120	; 0x78
 8016664:	3204      	adds	r2, #4
 8016666:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 801666a:	4b36      	ldr	r3, [pc, #216]	; (8016744 <_vfiprintf_r+0x5b0>)
 801666c:	9309      	str	r3, [sp, #36]	; 0x24
 801666e:	46b4      	mov	ip, r6
 8016670:	f048 0802 	orr.w	r8, r8, #2
 8016674:	680e      	ldr	r6, [r1, #0]
 8016676:	9204      	str	r2, [sp, #16]
 8016678:	2700      	movs	r7, #0
 801667a:	2302      	movs	r3, #2
 801667c:	e68b      	b.n	8016396 <_vfiprintf_r+0x202>
 801667e:	f048 0820 	orr.w	r8, r8, #32
 8016682:	f89b 3000 	ldrb.w	r3, [fp]
 8016686:	4658      	mov	r0, fp
 8016688:	e5eb      	b.n	8016262 <_vfiprintf_r+0xce>
 801668a:	9a04      	ldr	r2, [sp, #16]
 801668c:	9503      	str	r5, [sp, #12]
 801668e:	6813      	ldr	r3, [r2, #0]
 8016690:	9307      	str	r3, [sp, #28]
 8016692:	2100      	movs	r1, #0
 8016694:	46b4      	mov	ip, r6
 8016696:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801669a:	1d16      	adds	r6, r2, #4
 801669c:	2b00      	cmp	r3, #0
 801669e:	f000 834f 	beq.w	8016d40 <_vfiprintf_r+0xbac>
 80166a2:	f1bc 0f00 	cmp.w	ip, #0
 80166a6:	f2c0 8329 	blt.w	8016cfc <_vfiprintf_r+0xb68>
 80166aa:	9d07      	ldr	r5, [sp, #28]
 80166ac:	f8cd c010 	str.w	ip, [sp, #16]
 80166b0:	4662      	mov	r2, ip
 80166b2:	4628      	mov	r0, r5
 80166b4:	2100      	movs	r1, #0
 80166b6:	f003 fdb9 	bl	801a22c <memchr>
 80166ba:	f8dd c010 	ldr.w	ip, [sp, #16]
 80166be:	2800      	cmp	r0, #0
 80166c0:	f000 834f 	beq.w	8016d62 <_vfiprintf_r+0xbce>
 80166c4:	ebc5 0900 	rsb	r9, r5, r0
 80166c8:	9604      	str	r6, [sp, #16]
 80166ca:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80166ce:	f04f 0c00 	mov.w	ip, #0
 80166d2:	e68e      	b.n	80163f2 <_vfiprintf_r+0x25e>
 80166d4:	4a1b      	ldr	r2, [pc, #108]	; (8016744 <_vfiprintf_r+0x5b0>)
 80166d6:	9503      	str	r5, [sp, #12]
 80166d8:	f018 0f20 	tst.w	r8, #32
 80166dc:	46b4      	mov	ip, r6
 80166de:	9209      	str	r2, [sp, #36]	; 0x24
 80166e0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80166e4:	f47f af72 	bne.w	80165cc <_vfiprintf_r+0x438>
 80166e8:	9904      	ldr	r1, [sp, #16]
 80166ea:	f018 0f10 	tst.w	r8, #16
 80166ee:	460a      	mov	r2, r1
 80166f0:	f040 823f 	bne.w	8016b72 <_vfiprintf_r+0x9de>
 80166f4:	f018 0f40 	tst.w	r8, #64	; 0x40
 80166f8:	f000 823b 	beq.w	8016b72 <_vfiprintf_r+0x9de>
 80166fc:	3204      	adds	r2, #4
 80166fe:	880e      	ldrh	r6, [r1, #0]
 8016700:	9204      	str	r2, [sp, #16]
 8016702:	2700      	movs	r7, #0
 8016704:	e76b      	b.n	80165de <_vfiprintf_r+0x44a>
 8016706:	f89b 3000 	ldrb.w	r3, [fp]
 801670a:	2b6c      	cmp	r3, #108	; 0x6c
 801670c:	f000 82e9 	beq.w	8016ce2 <_vfiprintf_r+0xb4e>
 8016710:	f048 0810 	orr.w	r8, r8, #16
 8016714:	4658      	mov	r0, fp
 8016716:	e5a4      	b.n	8016262 <_vfiprintf_r+0xce>
 8016718:	9a04      	ldr	r2, [sp, #16]
 801671a:	6815      	ldr	r5, [r2, #0]
 801671c:	4613      	mov	r3, r2
 801671e:	2d00      	cmp	r5, #0
 8016720:	f103 0304 	add.w	r3, r3, #4
 8016724:	f2c0 82e5 	blt.w	8016cf2 <_vfiprintf_r+0xb5e>
 8016728:	9304      	str	r3, [sp, #16]
 801672a:	f89b 3000 	ldrb.w	r3, [fp]
 801672e:	4658      	mov	r0, fp
 8016730:	e597      	b.n	8016262 <_vfiprintf_r+0xce>
 8016732:	f89b 3000 	ldrb.w	r3, [fp]
 8016736:	4658      	mov	r0, fp
 8016738:	212b      	movs	r1, #43	; 0x2b
 801673a:	e592      	b.n	8016262 <_vfiprintf_r+0xce>
 801673c:	08030aa8 	.word	0x08030aa8
 8016740:	08030ab8 	.word	0x08030ab8
 8016744:	08030acc 	.word	0x08030acc
 8016748:	f89b 3000 	ldrb.w	r3, [fp]
 801674c:	2b2a      	cmp	r3, #42	; 0x2a
 801674e:	f10b 0001 	add.w	r0, fp, #1
 8016752:	f000 830f 	beq.w	8016d74 <_vfiprintf_r+0xbe0>
 8016756:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801675a:	2a09      	cmp	r2, #9
 801675c:	4683      	mov	fp, r0
 801675e:	f04f 0600 	mov.w	r6, #0
 8016762:	f63f ad80 	bhi.w	8016266 <_vfiprintf_r+0xd2>
 8016766:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801676a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801676e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8016772:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016776:	2a09      	cmp	r2, #9
 8016778:	d9f5      	bls.n	8016766 <_vfiprintf_r+0x5d2>
 801677a:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 801677e:	e572      	b.n	8016266 <_vfiprintf_r+0xd2>
 8016780:	f018 0f20 	tst.w	r8, #32
 8016784:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8016788:	f000 8283 	beq.w	8016c92 <_vfiprintf_r+0xafe>
 801678c:	9a04      	ldr	r2, [sp, #16]
 801678e:	9902      	ldr	r1, [sp, #8]
 8016790:	6813      	ldr	r3, [r2, #0]
 8016792:	17cf      	asrs	r7, r1, #31
 8016794:	4608      	mov	r0, r1
 8016796:	3204      	adds	r2, #4
 8016798:	4639      	mov	r1, r7
 801679a:	9204      	str	r2, [sp, #16]
 801679c:	e9c3 0100 	strd	r0, r1, [r3]
 80167a0:	e52a      	b.n	80161f8 <_vfiprintf_r+0x64>
 80167a2:	4658      	mov	r0, fp
 80167a4:	f89b 3000 	ldrb.w	r3, [fp]
 80167a8:	2900      	cmp	r1, #0
 80167aa:	f47f ad5a 	bne.w	8016262 <_vfiprintf_r+0xce>
 80167ae:	2120      	movs	r1, #32
 80167b0:	e557      	b.n	8016262 <_vfiprintf_r+0xce>
 80167b2:	f048 0801 	orr.w	r8, r8, #1
 80167b6:	4658      	mov	r0, fp
 80167b8:	f89b 3000 	ldrb.w	r3, [fp]
 80167bc:	e551      	b.n	8016262 <_vfiprintf_r+0xce>
 80167be:	9503      	str	r5, [sp, #12]
 80167c0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	f000 809b 	beq.w	8016900 <_vfiprintf_r+0x76c>
 80167ca:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80167ce:	2300      	movs	r3, #0
 80167d0:	2601      	movs	r6, #1
 80167d2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80167d6:	ab10      	add	r3, sp, #64	; 0x40
 80167d8:	46b1      	mov	r9, r6
 80167da:	9307      	str	r3, [sp, #28]
 80167dc:	e71f      	b.n	801661e <_vfiprintf_r+0x48a>
 80167de:	9801      	ldr	r0, [sp, #4]
 80167e0:	9900      	ldr	r1, [sp, #0]
 80167e2:	9308      	str	r3, [sp, #32]
 80167e4:	aa0d      	add	r2, sp, #52	; 0x34
 80167e6:	f7ff fc8d 	bl	8016104 <__sprint_r.part.0>
 80167ea:	2800      	cmp	r0, #0
 80167ec:	f040 808f 	bne.w	801690e <_vfiprintf_r+0x77a>
 80167f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80167f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80167f4:	9b08      	ldr	r3, [sp, #32]
 80167f6:	f101 0e01 	add.w	lr, r1, #1
 80167fa:	46d4      	mov	ip, sl
 80167fc:	e620      	b.n	8016440 <_vfiprintf_r+0x2ac>
 80167fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016802:	1c48      	adds	r0, r1, #1
 8016804:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8016808:	b16b      	cbz	r3, 8016826 <_vfiprintf_r+0x692>
 801680a:	3201      	adds	r2, #1
 801680c:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8016810:	2101      	movs	r1, #1
 8016812:	2807      	cmp	r0, #7
 8016814:	920f      	str	r2, [sp, #60]	; 0x3c
 8016816:	900e      	str	r0, [sp, #56]	; 0x38
 8016818:	6023      	str	r3, [r4, #0]
 801681a:	6061      	str	r1, [r4, #4]
 801681c:	f300 8134 	bgt.w	8016a88 <_vfiprintf_r+0x8f4>
 8016820:	4601      	mov	r1, r0
 8016822:	3408      	adds	r4, #8
 8016824:	3001      	adds	r0, #1
 8016826:	9b05      	ldr	r3, [sp, #20]
 8016828:	b163      	cbz	r3, 8016844 <_vfiprintf_r+0x6b0>
 801682a:	3202      	adds	r2, #2
 801682c:	a90c      	add	r1, sp, #48	; 0x30
 801682e:	2302      	movs	r3, #2
 8016830:	2807      	cmp	r0, #7
 8016832:	920f      	str	r2, [sp, #60]	; 0x3c
 8016834:	900e      	str	r0, [sp, #56]	; 0x38
 8016836:	e884 000a 	stmia.w	r4, {r1, r3}
 801683a:	f300 8134 	bgt.w	8016aa6 <_vfiprintf_r+0x912>
 801683e:	4601      	mov	r1, r0
 8016840:	3408      	adds	r4, #8
 8016842:	3001      	adds	r0, #1
 8016844:	9b06      	ldr	r3, [sp, #24]
 8016846:	2b80      	cmp	r3, #128	; 0x80
 8016848:	f000 80d4 	beq.w	80169f4 <_vfiprintf_r+0x860>
 801684c:	ebc9 070c 	rsb	r7, r9, ip
 8016850:	2f00      	cmp	r7, #0
 8016852:	dd2b      	ble.n	80168ac <_vfiprintf_r+0x718>
 8016854:	2f10      	cmp	r7, #16
 8016856:	4dab      	ldr	r5, [pc, #684]	; (8016b04 <_vfiprintf_r+0x970>)
 8016858:	dd1f      	ble.n	801689a <_vfiprintf_r+0x706>
 801685a:	46a6      	mov	lr, r4
 801685c:	2310      	movs	r3, #16
 801685e:	9c01      	ldr	r4, [sp, #4]
 8016860:	e007      	b.n	8016872 <_vfiprintf_r+0x6de>
 8016862:	f101 0c02 	add.w	ip, r1, #2
 8016866:	f10e 0e08 	add.w	lr, lr, #8
 801686a:	4601      	mov	r1, r0
 801686c:	3f10      	subs	r7, #16
 801686e:	2f10      	cmp	r7, #16
 8016870:	dd11      	ble.n	8016896 <_vfiprintf_r+0x702>
 8016872:	1c48      	adds	r0, r1, #1
 8016874:	3210      	adds	r2, #16
 8016876:	2807      	cmp	r0, #7
 8016878:	920f      	str	r2, [sp, #60]	; 0x3c
 801687a:	f8ce 5000 	str.w	r5, [lr]
 801687e:	f8ce 3004 	str.w	r3, [lr, #4]
 8016882:	900e      	str	r0, [sp, #56]	; 0x38
 8016884:	dded      	ble.n	8016862 <_vfiprintf_r+0x6ce>
 8016886:	bb6a      	cbnz	r2, 80168e4 <_vfiprintf_r+0x750>
 8016888:	3f10      	subs	r7, #16
 801688a:	2f10      	cmp	r7, #16
 801688c:	f04f 0c01 	mov.w	ip, #1
 8016890:	4611      	mov	r1, r2
 8016892:	46d6      	mov	lr, sl
 8016894:	dced      	bgt.n	8016872 <_vfiprintf_r+0x6de>
 8016896:	4674      	mov	r4, lr
 8016898:	4660      	mov	r0, ip
 801689a:	443a      	add	r2, r7
 801689c:	2807      	cmp	r0, #7
 801689e:	920f      	str	r2, [sp, #60]	; 0x3c
 80168a0:	e884 00a0 	stmia.w	r4, {r5, r7}
 80168a4:	900e      	str	r0, [sp, #56]	; 0x38
 80168a6:	dc3b      	bgt.n	8016920 <_vfiprintf_r+0x78c>
 80168a8:	3408      	adds	r4, #8
 80168aa:	3001      	adds	r0, #1
 80168ac:	eb02 0309 	add.w	r3, r2, r9
 80168b0:	9a07      	ldr	r2, [sp, #28]
 80168b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80168b4:	2807      	cmp	r0, #7
 80168b6:	e884 0204 	stmia.w	r4, {r2, r9}
 80168ba:	900e      	str	r0, [sp, #56]	; 0x38
 80168bc:	dd3d      	ble.n	801693a <_vfiprintf_r+0x7a6>
 80168be:	2b00      	cmp	r3, #0
 80168c0:	f040 813f 	bne.w	8016b42 <_vfiprintf_r+0x9ae>
 80168c4:	f018 0f04 	tst.w	r8, #4
 80168c8:	930e      	str	r3, [sp, #56]	; 0x38
 80168ca:	f040 8130 	bne.w	8016b2e <_vfiprintf_r+0x99a>
 80168ce:	9b02      	ldr	r3, [sp, #8]
 80168d0:	9a03      	ldr	r2, [sp, #12]
 80168d2:	4296      	cmp	r6, r2
 80168d4:	bfac      	ite	ge
 80168d6:	199b      	addge	r3, r3, r6
 80168d8:	189b      	addlt	r3, r3, r2
 80168da:	9302      	str	r3, [sp, #8]
 80168dc:	2300      	movs	r3, #0
 80168de:	930e      	str	r3, [sp, #56]	; 0x38
 80168e0:	4654      	mov	r4, sl
 80168e2:	e489      	b.n	80161f8 <_vfiprintf_r+0x64>
 80168e4:	4620      	mov	r0, r4
 80168e6:	9900      	ldr	r1, [sp, #0]
 80168e8:	9305      	str	r3, [sp, #20]
 80168ea:	aa0d      	add	r2, sp, #52	; 0x34
 80168ec:	f7ff fc0a 	bl	8016104 <__sprint_r.part.0>
 80168f0:	b968      	cbnz	r0, 801690e <_vfiprintf_r+0x77a>
 80168f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80168f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80168f6:	9b05      	ldr	r3, [sp, #20]
 80168f8:	f101 0c01 	add.w	ip, r1, #1
 80168fc:	46d6      	mov	lr, sl
 80168fe:	e7b5      	b.n	801686c <_vfiprintf_r+0x6d8>
 8016900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016902:	b123      	cbz	r3, 801690e <_vfiprintf_r+0x77a>
 8016904:	9801      	ldr	r0, [sp, #4]
 8016906:	9900      	ldr	r1, [sp, #0]
 8016908:	aa0d      	add	r2, sp, #52	; 0x34
 801690a:	f7ff fbfb 	bl	8016104 <__sprint_r.part.0>
 801690e:	9b00      	ldr	r3, [sp, #0]
 8016910:	899b      	ldrh	r3, [r3, #12]
 8016912:	065b      	lsls	r3, r3, #25
 8016914:	f53f ad27 	bmi.w	8016366 <_vfiprintf_r+0x1d2>
 8016918:	9802      	ldr	r0, [sp, #8]
 801691a:	b02b      	add	sp, #172	; 0xac
 801691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016920:	2a00      	cmp	r2, #0
 8016922:	f040 8192 	bne.w	8016c4a <_vfiprintf_r+0xab6>
 8016926:	2201      	movs	r2, #1
 8016928:	9907      	ldr	r1, [sp, #28]
 801692a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 801692e:	464b      	mov	r3, r9
 8016930:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8016934:	911a      	str	r1, [sp, #104]	; 0x68
 8016936:	920e      	str	r2, [sp, #56]	; 0x38
 8016938:	4654      	mov	r4, sl
 801693a:	f104 0208 	add.w	r2, r4, #8
 801693e:	f018 0f04 	tst.w	r8, #4
 8016942:	d039      	beq.n	80169b8 <_vfiprintf_r+0x824>
 8016944:	9903      	ldr	r1, [sp, #12]
 8016946:	1b8d      	subs	r5, r1, r6
 8016948:	2d00      	cmp	r5, #0
 801694a:	dd35      	ble.n	80169b8 <_vfiprintf_r+0x824>
 801694c:	2d10      	cmp	r5, #16
 801694e:	f340 8203 	ble.w	8016d58 <_vfiprintf_r+0xbc4>
 8016952:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016954:	4f6c      	ldr	r7, [pc, #432]	; (8016b08 <_vfiprintf_r+0x974>)
 8016956:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801695a:	f8dd 9000 	ldr.w	r9, [sp]
 801695e:	2410      	movs	r4, #16
 8016960:	e006      	b.n	8016970 <_vfiprintf_r+0x7dc>
 8016962:	f100 0e02 	add.w	lr, r0, #2
 8016966:	3208      	adds	r2, #8
 8016968:	4608      	mov	r0, r1
 801696a:	3d10      	subs	r5, #16
 801696c:	2d10      	cmp	r5, #16
 801696e:	dd10      	ble.n	8016992 <_vfiprintf_r+0x7fe>
 8016970:	1c41      	adds	r1, r0, #1
 8016972:	3310      	adds	r3, #16
 8016974:	2907      	cmp	r1, #7
 8016976:	930f      	str	r3, [sp, #60]	; 0x3c
 8016978:	6017      	str	r7, [r2, #0]
 801697a:	6054      	str	r4, [r2, #4]
 801697c:	910e      	str	r1, [sp, #56]	; 0x38
 801697e:	ddf0      	ble.n	8016962 <_vfiprintf_r+0x7ce>
 8016980:	2b00      	cmp	r3, #0
 8016982:	d12a      	bne.n	80169da <_vfiprintf_r+0x846>
 8016984:	3d10      	subs	r5, #16
 8016986:	2d10      	cmp	r5, #16
 8016988:	f04f 0e01 	mov.w	lr, #1
 801698c:	4618      	mov	r0, r3
 801698e:	4652      	mov	r2, sl
 8016990:	dcee      	bgt.n	8016970 <_vfiprintf_r+0x7dc>
 8016992:	442b      	add	r3, r5
 8016994:	f1be 0f07 	cmp.w	lr, #7
 8016998:	930f      	str	r3, [sp, #60]	; 0x3c
 801699a:	6017      	str	r7, [r2, #0]
 801699c:	6055      	str	r5, [r2, #4]
 801699e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80169a2:	dd09      	ble.n	80169b8 <_vfiprintf_r+0x824>
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d092      	beq.n	80168ce <_vfiprintf_r+0x73a>
 80169a8:	9801      	ldr	r0, [sp, #4]
 80169aa:	9900      	ldr	r1, [sp, #0]
 80169ac:	aa0d      	add	r2, sp, #52	; 0x34
 80169ae:	f7ff fba9 	bl	8016104 <__sprint_r.part.0>
 80169b2:	2800      	cmp	r0, #0
 80169b4:	d1ab      	bne.n	801690e <_vfiprintf_r+0x77a>
 80169b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169b8:	9a02      	ldr	r2, [sp, #8]
 80169ba:	9903      	ldr	r1, [sp, #12]
 80169bc:	428e      	cmp	r6, r1
 80169be:	bfac      	ite	ge
 80169c0:	1992      	addge	r2, r2, r6
 80169c2:	1852      	addlt	r2, r2, r1
 80169c4:	9202      	str	r2, [sp, #8]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d088      	beq.n	80168dc <_vfiprintf_r+0x748>
 80169ca:	9801      	ldr	r0, [sp, #4]
 80169cc:	9900      	ldr	r1, [sp, #0]
 80169ce:	aa0d      	add	r2, sp, #52	; 0x34
 80169d0:	f7ff fb98 	bl	8016104 <__sprint_r.part.0>
 80169d4:	2800      	cmp	r0, #0
 80169d6:	d081      	beq.n	80168dc <_vfiprintf_r+0x748>
 80169d8:	e799      	b.n	801690e <_vfiprintf_r+0x77a>
 80169da:	4640      	mov	r0, r8
 80169dc:	4649      	mov	r1, r9
 80169de:	aa0d      	add	r2, sp, #52	; 0x34
 80169e0:	f7ff fb90 	bl	8016104 <__sprint_r.part.0>
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d192      	bne.n	801690e <_vfiprintf_r+0x77a>
 80169e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80169ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169ec:	f100 0e01 	add.w	lr, r0, #1
 80169f0:	4652      	mov	r2, sl
 80169f2:	e7ba      	b.n	801696a <_vfiprintf_r+0x7d6>
 80169f4:	9b03      	ldr	r3, [sp, #12]
 80169f6:	1b9f      	subs	r7, r3, r6
 80169f8:	2f00      	cmp	r7, #0
 80169fa:	f77f af27 	ble.w	801684c <_vfiprintf_r+0x6b8>
 80169fe:	2f10      	cmp	r7, #16
 8016a00:	4d40      	ldr	r5, [pc, #256]	; (8016b04 <_vfiprintf_r+0x970>)
 8016a02:	f340 81b5 	ble.w	8016d70 <_vfiprintf_r+0xbdc>
 8016a06:	4620      	mov	r0, r4
 8016a08:	2310      	movs	r3, #16
 8016a0a:	4664      	mov	r4, ip
 8016a0c:	4684      	mov	ip, r0
 8016a0e:	e007      	b.n	8016a20 <_vfiprintf_r+0x88c>
 8016a10:	f101 0e02 	add.w	lr, r1, #2
 8016a14:	f10c 0c08 	add.w	ip, ip, #8
 8016a18:	4601      	mov	r1, r0
 8016a1a:	3f10      	subs	r7, #16
 8016a1c:	2f10      	cmp	r7, #16
 8016a1e:	dd11      	ble.n	8016a44 <_vfiprintf_r+0x8b0>
 8016a20:	1c48      	adds	r0, r1, #1
 8016a22:	3210      	adds	r2, #16
 8016a24:	2807      	cmp	r0, #7
 8016a26:	920f      	str	r2, [sp, #60]	; 0x3c
 8016a28:	f8cc 5000 	str.w	r5, [ip]
 8016a2c:	f8cc 3004 	str.w	r3, [ip, #4]
 8016a30:	900e      	str	r0, [sp, #56]	; 0x38
 8016a32:	dded      	ble.n	8016a10 <_vfiprintf_r+0x87c>
 8016a34:	b9c2      	cbnz	r2, 8016a68 <_vfiprintf_r+0x8d4>
 8016a36:	3f10      	subs	r7, #16
 8016a38:	2f10      	cmp	r7, #16
 8016a3a:	f04f 0e01 	mov.w	lr, #1
 8016a3e:	4611      	mov	r1, r2
 8016a40:	46d4      	mov	ip, sl
 8016a42:	dced      	bgt.n	8016a20 <_vfiprintf_r+0x88c>
 8016a44:	4663      	mov	r3, ip
 8016a46:	46a4      	mov	ip, r4
 8016a48:	461c      	mov	r4, r3
 8016a4a:	443a      	add	r2, r7
 8016a4c:	f1be 0f07 	cmp.w	lr, #7
 8016a50:	920f      	str	r2, [sp, #60]	; 0x3c
 8016a52:	e884 00a0 	stmia.w	r4, {r5, r7}
 8016a56:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8016a5a:	f300 80f0 	bgt.w	8016c3e <_vfiprintf_r+0xaaa>
 8016a5e:	3408      	adds	r4, #8
 8016a60:	f10e 0001 	add.w	r0, lr, #1
 8016a64:	4671      	mov	r1, lr
 8016a66:	e6f1      	b.n	801684c <_vfiprintf_r+0x6b8>
 8016a68:	9801      	ldr	r0, [sp, #4]
 8016a6a:	9900      	ldr	r1, [sp, #0]
 8016a6c:	9305      	str	r3, [sp, #20]
 8016a6e:	aa0d      	add	r2, sp, #52	; 0x34
 8016a70:	f7ff fb48 	bl	8016104 <__sprint_r.part.0>
 8016a74:	2800      	cmp	r0, #0
 8016a76:	f47f af4a 	bne.w	801690e <_vfiprintf_r+0x77a>
 8016a7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a7e:	9b05      	ldr	r3, [sp, #20]
 8016a80:	f101 0e01 	add.w	lr, r1, #1
 8016a84:	46d4      	mov	ip, sl
 8016a86:	e7c8      	b.n	8016a1a <_vfiprintf_r+0x886>
 8016a88:	2a00      	cmp	r2, #0
 8016a8a:	f040 80c7 	bne.w	8016c1c <_vfiprintf_r+0xa88>
 8016a8e:	9b05      	ldr	r3, [sp, #20]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	f000 8087 	beq.w	8016ba4 <_vfiprintf_r+0xa10>
 8016a96:	aa0c      	add	r2, sp, #48	; 0x30
 8016a98:	2302      	movs	r3, #2
 8016a9a:	921a      	str	r2, [sp, #104]	; 0x68
 8016a9c:	4608      	mov	r0, r1
 8016a9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016aa0:	461a      	mov	r2, r3
 8016aa2:	4654      	mov	r4, sl
 8016aa4:	e6cb      	b.n	801683e <_vfiprintf_r+0x6aa>
 8016aa6:	2a00      	cmp	r2, #0
 8016aa8:	f040 80a7 	bne.w	8016bfa <_vfiprintf_r+0xa66>
 8016aac:	2001      	movs	r0, #1
 8016aae:	4611      	mov	r1, r2
 8016ab0:	4654      	mov	r4, sl
 8016ab2:	e6c7      	b.n	8016844 <_vfiprintf_r+0x6b0>
 8016ab4:	bb03      	cbnz	r3, 8016af8 <_vfiprintf_r+0x964>
 8016ab6:	f018 0f01 	tst.w	r8, #1
 8016aba:	d01d      	beq.n	8016af8 <_vfiprintf_r+0x964>
 8016abc:	ab2a      	add	r3, sp, #168	; 0xa8
 8016abe:	2230      	movs	r2, #48	; 0x30
 8016ac0:	f803 2d41 	strb.w	r2, [r3, #-65]!
 8016ac4:	ebc3 090a 	rsb	r9, r3, sl
 8016ac8:	9307      	str	r3, [sp, #28]
 8016aca:	e492      	b.n	80163f2 <_vfiprintf_r+0x25e>
 8016acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ace:	46d1      	mov	r9, sl
 8016ad0:	0933      	lsrs	r3, r6, #4
 8016ad2:	f006 010f 	and.w	r1, r6, #15
 8016ad6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8016ada:	093a      	lsrs	r2, r7, #4
 8016adc:	461e      	mov	r6, r3
 8016ade:	4617      	mov	r7, r2
 8016ae0:	5c43      	ldrb	r3, [r0, r1]
 8016ae2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8016ae6:	ea56 0307 	orrs.w	r3, r6, r7
 8016aea:	d1f1      	bne.n	8016ad0 <_vfiprintf_r+0x93c>
 8016aec:	464b      	mov	r3, r9
 8016aee:	f8cd 901c 	str.w	r9, [sp, #28]
 8016af2:	ebc3 090a 	rsb	r9, r3, sl
 8016af6:	e47c      	b.n	80163f2 <_vfiprintf_r+0x25e>
 8016af8:	f8cd a01c 	str.w	sl, [sp, #28]
 8016afc:	e479      	b.n	80163f2 <_vfiprintf_r+0x25e>
 8016afe:	2302      	movs	r3, #2
 8016b00:	e449      	b.n	8016396 <_vfiprintf_r+0x202>
 8016b02:	bf00      	nop
 8016b04:	08030a98 	.word	0x08030a98
 8016b08:	08030aa8 	.word	0x08030aa8
 8016b0c:	2a00      	cmp	r2, #0
 8016b0e:	f040 80d7 	bne.w	8016cc0 <_vfiprintf_r+0xb2c>
 8016b12:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	f000 80ae 	beq.w	8016c78 <_vfiprintf_r+0xae4>
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8016b22:	4618      	mov	r0, r3
 8016b24:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b26:	461a      	mov	r2, r3
 8016b28:	911a      	str	r1, [sp, #104]	; 0x68
 8016b2a:	4654      	mov	r4, sl
 8016b2c:	e678      	b.n	8016820 <_vfiprintf_r+0x68c>
 8016b2e:	9a03      	ldr	r2, [sp, #12]
 8016b30:	1b95      	subs	r5, r2, r6
 8016b32:	2d00      	cmp	r5, #0
 8016b34:	4652      	mov	r2, sl
 8016b36:	f73f af09 	bgt.w	801694c <_vfiprintf_r+0x7b8>
 8016b3a:	e6c8      	b.n	80168ce <_vfiprintf_r+0x73a>
 8016b3c:	465d      	mov	r5, fp
 8016b3e:	f7ff bb82 	b.w	8016246 <_vfiprintf_r+0xb2>
 8016b42:	9801      	ldr	r0, [sp, #4]
 8016b44:	9900      	ldr	r1, [sp, #0]
 8016b46:	aa0d      	add	r2, sp, #52	; 0x34
 8016b48:	f7ff fadc 	bl	8016104 <__sprint_r.part.0>
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	f47f aede 	bne.w	801690e <_vfiprintf_r+0x77a>
 8016b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b54:	4652      	mov	r2, sl
 8016b56:	e6f2      	b.n	801693e <_vfiprintf_r+0x7aa>
 8016b58:	9904      	ldr	r1, [sp, #16]
 8016b5a:	460a      	mov	r2, r1
 8016b5c:	3204      	adds	r2, #4
 8016b5e:	680e      	ldr	r6, [r1, #0]
 8016b60:	9204      	str	r2, [sp, #16]
 8016b62:	2700      	movs	r7, #0
 8016b64:	e417      	b.n	8016396 <_vfiprintf_r+0x202>
 8016b66:	3204      	adds	r2, #4
 8016b68:	681e      	ldr	r6, [r3, #0]
 8016b6a:	9204      	str	r2, [sp, #16]
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	2700      	movs	r7, #0
 8016b70:	e411      	b.n	8016396 <_vfiprintf_r+0x202>
 8016b72:	6816      	ldr	r6, [r2, #0]
 8016b74:	3204      	adds	r2, #4
 8016b76:	9204      	str	r2, [sp, #16]
 8016b78:	2700      	movs	r7, #0
 8016b7a:	e530      	b.n	80165de <_vfiprintf_r+0x44a>
 8016b7c:	9a04      	ldr	r2, [sp, #16]
 8016b7e:	6816      	ldr	r6, [r2, #0]
 8016b80:	4613      	mov	r3, r2
 8016b82:	3304      	adds	r3, #4
 8016b84:	17f7      	asrs	r7, r6, #31
 8016b86:	9304      	str	r3, [sp, #16]
 8016b88:	4632      	mov	r2, r6
 8016b8a:	463b      	mov	r3, r7
 8016b8c:	e4c2      	b.n	8016514 <_vfiprintf_r+0x380>
 8016b8e:	9801      	ldr	r0, [sp, #4]
 8016b90:	9900      	ldr	r1, [sp, #0]
 8016b92:	aa0d      	add	r2, sp, #52	; 0x34
 8016b94:	f7ff fab6 	bl	8016104 <__sprint_r.part.0>
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	f47f aeb8 	bne.w	801690e <_vfiprintf_r+0x77a>
 8016b9e:	4654      	mov	r4, sl
 8016ba0:	f7ff bbc2 	b.w	8016328 <_vfiprintf_r+0x194>
 8016ba4:	4608      	mov	r0, r1
 8016ba6:	4654      	mov	r4, sl
 8016ba8:	4611      	mov	r1, r2
 8016baa:	e64b      	b.n	8016844 <_vfiprintf_r+0x6b0>
 8016bac:	46d1      	mov	r9, sl
 8016bae:	f8cd c014 	str.w	ip, [sp, #20]
 8016bb2:	4630      	mov	r0, r6
 8016bb4:	4639      	mov	r1, r7
 8016bb6:	220a      	movs	r2, #10
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f7e9 fff9 	bl	8000bb0 <__aeabi_uldivmod>
 8016bbe:	3230      	adds	r2, #48	; 0x30
 8016bc0:	4630      	mov	r0, r6
 8016bc2:	4639      	mov	r1, r7
 8016bc4:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8016bc8:	2300      	movs	r3, #0
 8016bca:	220a      	movs	r2, #10
 8016bcc:	f7e9 fff0 	bl	8000bb0 <__aeabi_uldivmod>
 8016bd0:	4606      	mov	r6, r0
 8016bd2:	460f      	mov	r7, r1
 8016bd4:	ea56 0307 	orrs.w	r3, r6, r7
 8016bd8:	d1eb      	bne.n	8016bb2 <_vfiprintf_r+0xa1e>
 8016bda:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016bde:	e785      	b.n	8016aec <_vfiprintf_r+0x958>
 8016be0:	2b30      	cmp	r3, #48	; 0x30
 8016be2:	9b07      	ldr	r3, [sp, #28]
 8016be4:	d085      	beq.n	8016af2 <_vfiprintf_r+0x95e>
 8016be6:	3b01      	subs	r3, #1
 8016be8:	461a      	mov	r2, r3
 8016bea:	9307      	str	r3, [sp, #28]
 8016bec:	2330      	movs	r3, #48	; 0x30
 8016bee:	ebc2 090a 	rsb	r9, r2, sl
 8016bf2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016bf6:	f7ff bbfc 	b.w	80163f2 <_vfiprintf_r+0x25e>
 8016bfa:	9801      	ldr	r0, [sp, #4]
 8016bfc:	9900      	ldr	r1, [sp, #0]
 8016bfe:	f8cd c014 	str.w	ip, [sp, #20]
 8016c02:	aa0d      	add	r2, sp, #52	; 0x34
 8016c04:	f7ff fa7e 	bl	8016104 <__sprint_r.part.0>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	f47f ae80 	bne.w	801690e <_vfiprintf_r+0x77a>
 8016c0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016c10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c12:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016c16:	1c48      	adds	r0, r1, #1
 8016c18:	4654      	mov	r4, sl
 8016c1a:	e613      	b.n	8016844 <_vfiprintf_r+0x6b0>
 8016c1c:	9801      	ldr	r0, [sp, #4]
 8016c1e:	9900      	ldr	r1, [sp, #0]
 8016c20:	f8cd c020 	str.w	ip, [sp, #32]
 8016c24:	aa0d      	add	r2, sp, #52	; 0x34
 8016c26:	f7ff fa6d 	bl	8016104 <__sprint_r.part.0>
 8016c2a:	2800      	cmp	r0, #0
 8016c2c:	f47f ae6f 	bne.w	801690e <_vfiprintf_r+0x77a>
 8016c30:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016c32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c34:	f8dd c020 	ldr.w	ip, [sp, #32]
 8016c38:	1c48      	adds	r0, r1, #1
 8016c3a:	4654      	mov	r4, sl
 8016c3c:	e5f3      	b.n	8016826 <_vfiprintf_r+0x692>
 8016c3e:	2a00      	cmp	r2, #0
 8016c40:	d167      	bne.n	8016d12 <_vfiprintf_r+0xb7e>
 8016c42:	2001      	movs	r0, #1
 8016c44:	4611      	mov	r1, r2
 8016c46:	4654      	mov	r4, sl
 8016c48:	e600      	b.n	801684c <_vfiprintf_r+0x6b8>
 8016c4a:	9801      	ldr	r0, [sp, #4]
 8016c4c:	9900      	ldr	r1, [sp, #0]
 8016c4e:	aa0d      	add	r2, sp, #52	; 0x34
 8016c50:	f7ff fa58 	bl	8016104 <__sprint_r.part.0>
 8016c54:	2800      	cmp	r0, #0
 8016c56:	f47f ae5a 	bne.w	801690e <_vfiprintf_r+0x77a>
 8016c5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c5e:	3001      	adds	r0, #1
 8016c60:	4654      	mov	r4, sl
 8016c62:	e623      	b.n	80168ac <_vfiprintf_r+0x718>
 8016c64:	252d      	movs	r5, #45	; 0x2d
 8016c66:	4276      	negs	r6, r6
 8016c68:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8016c6c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8016c70:	46e1      	mov	r9, ip
 8016c72:	2301      	movs	r3, #1
 8016c74:	f7ff bb94 	b.w	80163a0 <_vfiprintf_r+0x20c>
 8016c78:	9b05      	ldr	r3, [sp, #20]
 8016c7a:	4611      	mov	r1, r2
 8016c7c:	2001      	movs	r0, #1
 8016c7e:	4654      	mov	r4, sl
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f43f ade3 	beq.w	801684c <_vfiprintf_r+0x6b8>
 8016c86:	aa0c      	add	r2, sp, #48	; 0x30
 8016c88:	2302      	movs	r3, #2
 8016c8a:	e88a 000c 	stmia.w	sl, {r2, r3}
 8016c8e:	461a      	mov	r2, r3
 8016c90:	e5d5      	b.n	801683e <_vfiprintf_r+0x6aa>
 8016c92:	f018 0f10 	tst.w	r8, #16
 8016c96:	d10b      	bne.n	8016cb0 <_vfiprintf_r+0xb1c>
 8016c98:	f018 0f40 	tst.w	r8, #64	; 0x40
 8016c9c:	d008      	beq.n	8016cb0 <_vfiprintf_r+0xb1c>
 8016c9e:	9a04      	ldr	r2, [sp, #16]
 8016ca0:	6813      	ldr	r3, [r2, #0]
 8016ca2:	3204      	adds	r2, #4
 8016ca4:	9204      	str	r2, [sp, #16]
 8016ca6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8016caa:	801a      	strh	r2, [r3, #0]
 8016cac:	f7ff baa4 	b.w	80161f8 <_vfiprintf_r+0x64>
 8016cb0:	9a04      	ldr	r2, [sp, #16]
 8016cb2:	6813      	ldr	r3, [r2, #0]
 8016cb4:	3204      	adds	r2, #4
 8016cb6:	9204      	str	r2, [sp, #16]
 8016cb8:	9a02      	ldr	r2, [sp, #8]
 8016cba:	601a      	str	r2, [r3, #0]
 8016cbc:	f7ff ba9c 	b.w	80161f8 <_vfiprintf_r+0x64>
 8016cc0:	9801      	ldr	r0, [sp, #4]
 8016cc2:	9900      	ldr	r1, [sp, #0]
 8016cc4:	f8cd c020 	str.w	ip, [sp, #32]
 8016cc8:	aa0d      	add	r2, sp, #52	; 0x34
 8016cca:	f7ff fa1b 	bl	8016104 <__sprint_r.part.0>
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	f47f ae1d 	bne.w	801690e <_vfiprintf_r+0x77a>
 8016cd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016cd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016cd8:	f8dd c020 	ldr.w	ip, [sp, #32]
 8016cdc:	1c48      	adds	r0, r1, #1
 8016cde:	4654      	mov	r4, sl
 8016ce0:	e590      	b.n	8016804 <_vfiprintf_r+0x670>
 8016ce2:	f048 0820 	orr.w	r8, r8, #32
 8016ce6:	f10b 0001 	add.w	r0, fp, #1
 8016cea:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8016cee:	f7ff bab8 	b.w	8016262 <_vfiprintf_r+0xce>
 8016cf2:	426d      	negs	r5, r5
 8016cf4:	9304      	str	r3, [sp, #16]
 8016cf6:	4658      	mov	r0, fp
 8016cf8:	f7ff bbc9 	b.w	801648e <_vfiprintf_r+0x2fa>
 8016cfc:	9807      	ldr	r0, [sp, #28]
 8016cfe:	9604      	str	r6, [sp, #16]
 8016d00:	f7ff f9d2 	bl	80160a8 <strlen>
 8016d04:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8016d08:	4681      	mov	r9, r0
 8016d0a:	f04f 0c00 	mov.w	ip, #0
 8016d0e:	f7ff bb70 	b.w	80163f2 <_vfiprintf_r+0x25e>
 8016d12:	9801      	ldr	r0, [sp, #4]
 8016d14:	9900      	ldr	r1, [sp, #0]
 8016d16:	f8cd c014 	str.w	ip, [sp, #20]
 8016d1a:	aa0d      	add	r2, sp, #52	; 0x34
 8016d1c:	f7ff f9f2 	bl	8016104 <__sprint_r.part.0>
 8016d20:	2800      	cmp	r0, #0
 8016d22:	f47f adf4 	bne.w	801690e <_vfiprintf_r+0x77a>
 8016d26:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016d28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d2a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016d2e:	1c48      	adds	r0, r1, #1
 8016d30:	4654      	mov	r4, sl
 8016d32:	e58b      	b.n	801684c <_vfiprintf_r+0x6b8>
 8016d34:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d38:	4f15      	ldr	r7, [pc, #84]	; (8016d90 <_vfiprintf_r+0xbfc>)
 8016d3a:	3101      	adds	r1, #1
 8016d3c:	f7ff bb9b 	b.w	8016476 <_vfiprintf_r+0x2e2>
 8016d40:	f1bc 0f06 	cmp.w	ip, #6
 8016d44:	bf28      	it	cs
 8016d46:	f04f 0c06 	movcs.w	ip, #6
 8016d4a:	4b12      	ldr	r3, [pc, #72]	; (8016d94 <_vfiprintf_r+0xc00>)
 8016d4c:	9604      	str	r6, [sp, #16]
 8016d4e:	46e1      	mov	r9, ip
 8016d50:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 8016d54:	9307      	str	r3, [sp, #28]
 8016d56:	e462      	b.n	801661e <_vfiprintf_r+0x48a>
 8016d58:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016d5a:	4f0d      	ldr	r7, [pc, #52]	; (8016d90 <_vfiprintf_r+0xbfc>)
 8016d5c:	f101 0e01 	add.w	lr, r1, #1
 8016d60:	e617      	b.n	8016992 <_vfiprintf_r+0x7fe>
 8016d62:	46e1      	mov	r9, ip
 8016d64:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8016d68:	9604      	str	r6, [sp, #16]
 8016d6a:	4684      	mov	ip, r0
 8016d6c:	f7ff bb41 	b.w	80163f2 <_vfiprintf_r+0x25e>
 8016d70:	4686      	mov	lr, r0
 8016d72:	e66a      	b.n	8016a4a <_vfiprintf_r+0x8b6>
 8016d74:	9a04      	ldr	r2, [sp, #16]
 8016d76:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8016d7a:	6816      	ldr	r6, [r2, #0]
 8016d7c:	3204      	adds	r2, #4
 8016d7e:	2e00      	cmp	r6, #0
 8016d80:	9204      	str	r2, [sp, #16]
 8016d82:	f6bf aa6e 	bge.w	8016262 <_vfiprintf_r+0xce>
 8016d86:	f04f 36ff 	mov.w	r6, #4294967295
 8016d8a:	f7ff ba6a 	b.w	8016262 <_vfiprintf_r+0xce>
 8016d8e:	bf00      	nop
 8016d90:	08030aa8 	.word	0x08030aa8
 8016d94:	08030ae0 	.word	0x08030ae0

08016d98 <__sbprintf>:
 8016d98:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8016d9c:	460c      	mov	r4, r1
 8016d9e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8016da2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8016da6:	69e7      	ldr	r7, [r4, #28]
 8016da8:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8016daa:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8016dae:	9119      	str	r1, [sp, #100]	; 0x64
 8016db0:	ad1a      	add	r5, sp, #104	; 0x68
 8016db2:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8016db6:	f02e 0e02 	bic.w	lr, lr, #2
 8016dba:	f04f 0c00 	mov.w	ip, #0
 8016dbe:	9707      	str	r7, [sp, #28]
 8016dc0:	4669      	mov	r1, sp
 8016dc2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8016dc4:	9500      	str	r5, [sp, #0]
 8016dc6:	9504      	str	r5, [sp, #16]
 8016dc8:	9602      	str	r6, [sp, #8]
 8016dca:	9605      	str	r6, [sp, #20]
 8016dcc:	f8ad e00c 	strh.w	lr, [sp, #12]
 8016dd0:	f8ad 900e 	strh.w	r9, [sp, #14]
 8016dd4:	9709      	str	r7, [sp, #36]	; 0x24
 8016dd6:	f8cd c018 	str.w	ip, [sp, #24]
 8016dda:	4606      	mov	r6, r0
 8016ddc:	f7ff f9da 	bl	8016194 <_vfiprintf_r>
 8016de0:	1e05      	subs	r5, r0, #0
 8016de2:	db07      	blt.n	8016df4 <__sbprintf+0x5c>
 8016de4:	4630      	mov	r0, r6
 8016de6:	4669      	mov	r1, sp
 8016de8:	f002 fb38 	bl	801945c <_fflush_r>
 8016dec:	2800      	cmp	r0, #0
 8016dee:	bf18      	it	ne
 8016df0:	f04f 35ff 	movne.w	r5, #4294967295
 8016df4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016df8:	065b      	lsls	r3, r3, #25
 8016dfa:	d503      	bpl.n	8016e04 <__sbprintf+0x6c>
 8016dfc:	89a3      	ldrh	r3, [r4, #12]
 8016dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e02:	81a3      	strh	r3, [r4, #12]
 8016e04:	4628      	mov	r0, r5
 8016e06:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8016e0a:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8016e0e:	bf00      	nop

08016e10 <_vfprintf_r>:
 8016e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e14:	b0bf      	sub	sp, #252	; 0xfc
 8016e16:	461c      	mov	r4, r3
 8016e18:	4689      	mov	r9, r1
 8016e1a:	9208      	str	r2, [sp, #32]
 8016e1c:	4607      	mov	r7, r0
 8016e1e:	f002 ff03 	bl	8019c28 <_localeconv_r>
 8016e22:	6803      	ldr	r3, [r0, #0]
 8016e24:	9315      	str	r3, [sp, #84]	; 0x54
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7ff f93e 	bl	80160a8 <strlen>
 8016e2c:	940c      	str	r4, [sp, #48]	; 0x30
 8016e2e:	9016      	str	r0, [sp, #88]	; 0x58
 8016e30:	b11f      	cbz	r7, 8016e3a <_vfprintf_r+0x2a>
 8016e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	f000 80f3 	beq.w	8017020 <_vfprintf_r+0x210>
 8016e3a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8016e3e:	b293      	uxth	r3, r2
 8016e40:	049d      	lsls	r5, r3, #18
 8016e42:	d40a      	bmi.n	8016e5a <_vfprintf_r+0x4a>
 8016e44:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8016e48:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8016e4c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8016e50:	f8a9 300c 	strh.w	r3, [r9, #12]
 8016e54:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8016e58:	b29b      	uxth	r3, r3
 8016e5a:	0718      	lsls	r0, r3, #28
 8016e5c:	f140 80aa 	bpl.w	8016fb4 <_vfprintf_r+0x1a4>
 8016e60:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016e64:	2a00      	cmp	r2, #0
 8016e66:	f000 80a5 	beq.w	8016fb4 <_vfprintf_r+0x1a4>
 8016e6a:	f003 031a 	and.w	r3, r3, #26
 8016e6e:	2b0a      	cmp	r3, #10
 8016e70:	f000 80ac 	beq.w	8016fcc <_vfprintf_r+0x1bc>
 8016e74:	2300      	movs	r3, #0
 8016e76:	461a      	mov	r2, r3
 8016e78:	9311      	str	r3, [sp, #68]	; 0x44
 8016e7a:	9323      	str	r3, [sp, #140]	; 0x8c
 8016e7c:	9322      	str	r3, [sp, #136]	; 0x88
 8016e7e:	9314      	str	r3, [sp, #80]	; 0x50
 8016e80:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e82:	9309      	str	r3, [sp, #36]	; 0x24
 8016e84:	ab2e      	add	r3, sp, #184	; 0xb8
 8016e86:	469c      	mov	ip, r3
 8016e88:	9321      	str	r3, [sp, #132]	; 0x84
 8016e8a:	9212      	str	r2, [sp, #72]	; 0x48
 8016e8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8016e8e:	4664      	mov	r4, ip
 8016e90:	46b8      	mov	r8, r7
 8016e92:	9d08      	ldr	r5, [sp, #32]
 8016e94:	782b      	ldrb	r3, [r5, #0]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	f000 80c6 	beq.w	8017028 <_vfprintf_r+0x218>
 8016e9c:	2b25      	cmp	r3, #37	; 0x25
 8016e9e:	d102      	bne.n	8016ea6 <_vfprintf_r+0x96>
 8016ea0:	e0c2      	b.n	8017028 <_vfprintf_r+0x218>
 8016ea2:	2b25      	cmp	r3, #37	; 0x25
 8016ea4:	d003      	beq.n	8016eae <_vfprintf_r+0x9e>
 8016ea6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d1f9      	bne.n	8016ea2 <_vfprintf_r+0x92>
 8016eae:	9b08      	ldr	r3, [sp, #32]
 8016eb0:	1aee      	subs	r6, r5, r3
 8016eb2:	b17e      	cbz	r6, 8016ed4 <_vfprintf_r+0xc4>
 8016eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016eb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8016eb8:	9908      	ldr	r1, [sp, #32]
 8016eba:	6021      	str	r1, [r4, #0]
 8016ebc:	3301      	adds	r3, #1
 8016ebe:	4432      	add	r2, r6
 8016ec0:	2b07      	cmp	r3, #7
 8016ec2:	6066      	str	r6, [r4, #4]
 8016ec4:	9223      	str	r2, [sp, #140]	; 0x8c
 8016ec6:	9322      	str	r3, [sp, #136]	; 0x88
 8016ec8:	f300 8093 	bgt.w	8016ff2 <_vfprintf_r+0x1e2>
 8016ecc:	3408      	adds	r4, #8
 8016ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ed0:	4433      	add	r3, r6
 8016ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8016ed4:	782b      	ldrb	r3, [r5, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	f000 8093 	beq.w	8017002 <_vfprintf_r+0x1f2>
 8016edc:	2300      	movs	r3, #0
 8016ede:	1c69      	adds	r1, r5, #1
 8016ee0:	f04f 3aff 	mov.w	sl, #4294967295
 8016ee4:	786d      	ldrb	r5, [r5, #1]
 8016ee6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8016eea:	461a      	mov	r2, r3
 8016eec:	930a      	str	r3, [sp, #40]	; 0x28
 8016eee:	9306      	str	r3, [sp, #24]
 8016ef0:	4656      	mov	r6, sl
 8016ef2:	1c4b      	adds	r3, r1, #1
 8016ef4:	f1a5 0120 	sub.w	r1, r5, #32
 8016ef8:	2958      	cmp	r1, #88	; 0x58
 8016efa:	f200 83c1 	bhi.w	8017680 <_vfprintf_r+0x870>
 8016efe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8016f02:	0256      	.short	0x0256
 8016f04:	03bf03bf 	.word	0x03bf03bf
 8016f08:	03bf02f6 	.word	0x03bf02f6
 8016f0c:	03bf03bf 	.word	0x03bf03bf
 8016f10:	03bf03bf 	.word	0x03bf03bf
 8016f14:	02fd03bf 	.word	0x02fd03bf
 8016f18:	03bf02c6 	.word	0x03bf02c6
 8016f1c:	034701f2 	.word	0x034701f2
 8016f20:	02ca03bf 	.word	0x02ca03bf
 8016f24:	02d102d1 	.word	0x02d102d1
 8016f28:	02d102d1 	.word	0x02d102d1
 8016f2c:	02d102d1 	.word	0x02d102d1
 8016f30:	02d102d1 	.word	0x02d102d1
 8016f34:	03bf02d1 	.word	0x03bf02d1
 8016f38:	03bf03bf 	.word	0x03bf03bf
 8016f3c:	03bf03bf 	.word	0x03bf03bf
 8016f40:	03bf03bf 	.word	0x03bf03bf
 8016f44:	03bf03bf 	.word	0x03bf03bf
 8016f48:	026b03bf 	.word	0x026b03bf
 8016f4c:	03bf028d 	.word	0x03bf028d
 8016f50:	03bf028d 	.word	0x03bf028d
 8016f54:	03bf03bf 	.word	0x03bf03bf
 8016f58:	02bf03bf 	.word	0x02bf03bf
 8016f5c:	03bf03bf 	.word	0x03bf03bf
 8016f60:	03bf0362 	.word	0x03bf0362
 8016f64:	03bf03bf 	.word	0x03bf03bf
 8016f68:	03bf03bf 	.word	0x03bf03bf
 8016f6c:	03bf03a9 	.word	0x03bf03a9
 8016f70:	037f03bf 	.word	0x037f03bf
 8016f74:	03bf03bf 	.word	0x03bf03bf
 8016f78:	03bf03bf 	.word	0x03bf03bf
 8016f7c:	03bf03bf 	.word	0x03bf03bf
 8016f80:	03bf03bf 	.word	0x03bf03bf
 8016f84:	03bf03bf 	.word	0x03bf03bf
 8016f88:	030b0394 	.word	0x030b0394
 8016f8c:	028d028d 	.word	0x028d028d
 8016f90:	0324028d 	.word	0x0324028d
 8016f94:	03bf030b 	.word	0x03bf030b
 8016f98:	032b03bf 	.word	0x032b03bf
 8016f9c:	033503bf 	.word	0x033503bf
 8016fa0:	02e001f9 	.word	0x02e001f9
 8016fa4:	03bf025d 	.word	0x03bf025d
 8016fa8:	03bf020b 	.word	0x03bf020b
 8016fac:	03bf0095 	.word	0x03bf0095
 8016fb0:	023003bf 	.word	0x023003bf
 8016fb4:	4638      	mov	r0, r7
 8016fb6:	4649      	mov	r1, r9
 8016fb8:	f001 f95a 	bl	8018270 <__swsetup_r>
 8016fbc:	b9a0      	cbnz	r0, 8016fe8 <_vfprintf_r+0x1d8>
 8016fbe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016fc2:	f003 031a 	and.w	r3, r3, #26
 8016fc6:	2b0a      	cmp	r3, #10
 8016fc8:	f47f af54 	bne.w	8016e74 <_vfprintf_r+0x64>
 8016fcc:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f6ff af4f 	blt.w	8016e74 <_vfprintf_r+0x64>
 8016fd6:	4638      	mov	r0, r7
 8016fd8:	4649      	mov	r1, r9
 8016fda:	9a08      	ldr	r2, [sp, #32]
 8016fdc:	4623      	mov	r3, r4
 8016fde:	f001 f90b 	bl	80181f8 <__sbprintf>
 8016fe2:	b03f      	add	sp, #252	; 0xfc
 8016fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8016fec:	b03f      	add	sp, #252	; 0xfc
 8016fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ff2:	4640      	mov	r0, r8
 8016ff4:	4649      	mov	r1, r9
 8016ff6:	aa21      	add	r2, sp, #132	; 0x84
 8016ff8:	f7ff f8c0 	bl	801617c <__sprint_r>
 8016ffc:	b940      	cbnz	r0, 8017010 <_vfprintf_r+0x200>
 8016ffe:	ac2e      	add	r4, sp, #184	; 0xb8
 8017000:	e765      	b.n	8016ece <_vfprintf_r+0xbe>
 8017002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017004:	b123      	cbz	r3, 8017010 <_vfprintf_r+0x200>
 8017006:	4640      	mov	r0, r8
 8017008:	4649      	mov	r1, r9
 801700a:	aa21      	add	r2, sp, #132	; 0x84
 801700c:	f7ff f8b6 	bl	801617c <__sprint_r>
 8017010:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017014:	065a      	lsls	r2, r3, #25
 8017016:	d4e7      	bmi.n	8016fe8 <_vfprintf_r+0x1d8>
 8017018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801701a:	b03f      	add	sp, #252	; 0xfc
 801701c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017020:	4638      	mov	r0, r7
 8017022:	f002 faaf 	bl	8019584 <__sinit>
 8017026:	e708      	b.n	8016e3a <_vfprintf_r+0x2a>
 8017028:	9d08      	ldr	r5, [sp, #32]
 801702a:	e753      	b.n	8016ed4 <_vfprintf_r+0xc4>
 801702c:	9308      	str	r3, [sp, #32]
 801702e:	9b06      	ldr	r3, [sp, #24]
 8017030:	46b2      	mov	sl, r6
 8017032:	069e      	lsls	r6, r3, #26
 8017034:	f140 8318 	bpl.w	8017668 <_vfprintf_r+0x858>
 8017038:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801703a:	3707      	adds	r7, #7
 801703c:	f027 0307 	bic.w	r3, r7, #7
 8017040:	f103 0208 	add.w	r2, r3, #8
 8017044:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017048:	920c      	str	r2, [sp, #48]	; 0x30
 801704a:	2301      	movs	r3, #1
 801704c:	f04f 0c00 	mov.w	ip, #0
 8017050:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8017054:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8017058:	f1ba 0f00 	cmp.w	sl, #0
 801705c:	db03      	blt.n	8017066 <_vfprintf_r+0x256>
 801705e:	9a06      	ldr	r2, [sp, #24]
 8017060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017064:	9206      	str	r2, [sp, #24]
 8017066:	ea56 0207 	orrs.w	r2, r6, r7
 801706a:	f040 8319 	bne.w	80176a0 <_vfprintf_r+0x890>
 801706e:	f1ba 0f00 	cmp.w	sl, #0
 8017072:	f000 8416 	beq.w	80178a2 <_vfprintf_r+0xa92>
 8017076:	2b01      	cmp	r3, #1
 8017078:	f000 831a 	beq.w	80176b0 <_vfprintf_r+0x8a0>
 801707c:	2b02      	cmp	r3, #2
 801707e:	f000 844c 	beq.w	801791a <_vfprintf_r+0xb0a>
 8017082:	a92e      	add	r1, sp, #184	; 0xb8
 8017084:	08f2      	lsrs	r2, r6, #3
 8017086:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801708a:	08f8      	lsrs	r0, r7, #3
 801708c:	f006 0307 	and.w	r3, r6, #7
 8017090:	4607      	mov	r7, r0
 8017092:	4616      	mov	r6, r2
 8017094:	3330      	adds	r3, #48	; 0x30
 8017096:	ea56 0207 	orrs.w	r2, r6, r7
 801709a:	f801 3d01 	strb.w	r3, [r1, #-1]!
 801709e:	d1f1      	bne.n	8017084 <_vfprintf_r+0x274>
 80170a0:	9a06      	ldr	r2, [sp, #24]
 80170a2:	910e      	str	r1, [sp, #56]	; 0x38
 80170a4:	07d0      	lsls	r0, r2, #31
 80170a6:	f100 850d 	bmi.w	8017ac4 <_vfprintf_r+0xcb4>
 80170aa:	ab2e      	add	r3, sp, #184	; 0xb8
 80170ac:	1a5b      	subs	r3, r3, r1
 80170ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80170b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80170b2:	4592      	cmp	sl, r2
 80170b4:	4653      	mov	r3, sl
 80170b6:	bfb8      	it	lt
 80170b8:	4613      	movlt	r3, r2
 80170ba:	9307      	str	r3, [sp, #28]
 80170bc:	2300      	movs	r3, #0
 80170be:	9310      	str	r3, [sp, #64]	; 0x40
 80170c0:	f1bc 0f00 	cmp.w	ip, #0
 80170c4:	d002      	beq.n	80170cc <_vfprintf_r+0x2bc>
 80170c6:	9b07      	ldr	r3, [sp, #28]
 80170c8:	3301      	adds	r3, #1
 80170ca:	9307      	str	r3, [sp, #28]
 80170cc:	9b06      	ldr	r3, [sp, #24]
 80170ce:	f013 0302 	ands.w	r3, r3, #2
 80170d2:	930d      	str	r3, [sp, #52]	; 0x34
 80170d4:	d002      	beq.n	80170dc <_vfprintf_r+0x2cc>
 80170d6:	9b07      	ldr	r3, [sp, #28]
 80170d8:	3302      	adds	r3, #2
 80170da:	9307      	str	r3, [sp, #28]
 80170dc:	9b06      	ldr	r3, [sp, #24]
 80170de:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 80170e2:	f040 82da 	bne.w	801769a <_vfprintf_r+0x88a>
 80170e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170e8:	9a07      	ldr	r2, [sp, #28]
 80170ea:	ebc2 0a03 	rsb	sl, r2, r3
 80170ee:	f1ba 0f00 	cmp.w	sl, #0
 80170f2:	f340 82d2 	ble.w	801769a <_vfprintf_r+0x88a>
 80170f6:	f1ba 0f10 	cmp.w	sl, #16
 80170fa:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80170fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80170fe:	4fb3      	ldr	r7, [pc, #716]	; (80173cc <_vfprintf_r+0x5bc>)
 8017100:	bfc8      	it	gt
 8017102:	f04f 0b10 	movgt.w	fp, #16
 8017106:	dc07      	bgt.n	8017118 <_vfprintf_r+0x308>
 8017108:	e01e      	b.n	8017148 <_vfprintf_r+0x338>
 801710a:	f1aa 0a10 	sub.w	sl, sl, #16
 801710e:	f1ba 0f10 	cmp.w	sl, #16
 8017112:	f104 0408 	add.w	r4, r4, #8
 8017116:	dd17      	ble.n	8017148 <_vfprintf_r+0x338>
 8017118:	3201      	adds	r2, #1
 801711a:	3110      	adds	r1, #16
 801711c:	2a07      	cmp	r2, #7
 801711e:	9123      	str	r1, [sp, #140]	; 0x8c
 8017120:	9222      	str	r2, [sp, #136]	; 0x88
 8017122:	e884 0880 	stmia.w	r4, {r7, fp}
 8017126:	ddf0      	ble.n	801710a <_vfprintf_r+0x2fa>
 8017128:	4640      	mov	r0, r8
 801712a:	4649      	mov	r1, r9
 801712c:	aa21      	add	r2, sp, #132	; 0x84
 801712e:	f7ff f825 	bl	801617c <__sprint_r>
 8017132:	2800      	cmp	r0, #0
 8017134:	f47f af6c 	bne.w	8017010 <_vfprintf_r+0x200>
 8017138:	f1aa 0a10 	sub.w	sl, sl, #16
 801713c:	f1ba 0f10 	cmp.w	sl, #16
 8017140:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017142:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017144:	ac2e      	add	r4, sp, #184	; 0xb8
 8017146:	dce7      	bgt.n	8017118 <_vfprintf_r+0x308>
 8017148:	3201      	adds	r2, #1
 801714a:	eb0a 0b01 	add.w	fp, sl, r1
 801714e:	2a07      	cmp	r2, #7
 8017150:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017154:	9222      	str	r2, [sp, #136]	; 0x88
 8017156:	e884 0480 	stmia.w	r4, {r7, sl}
 801715a:	f300 8443 	bgt.w	80179e4 <_vfprintf_r+0xbd4>
 801715e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8017162:	3408      	adds	r4, #8
 8017164:	f1bc 0f00 	cmp.w	ip, #0
 8017168:	d00f      	beq.n	801718a <_vfprintf_r+0x37a>
 801716a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801716c:	3301      	adds	r3, #1
 801716e:	f10b 0b01 	add.w	fp, fp, #1
 8017172:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8017176:	2201      	movs	r2, #1
 8017178:	2b07      	cmp	r3, #7
 801717a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801717e:	9322      	str	r3, [sp, #136]	; 0x88
 8017180:	e884 0006 	stmia.w	r4, {r1, r2}
 8017184:	f300 83b7 	bgt.w	80178f6 <_vfprintf_r+0xae6>
 8017188:	3408      	adds	r4, #8
 801718a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801718c:	b173      	cbz	r3, 80171ac <_vfprintf_r+0x39c>
 801718e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017190:	3301      	adds	r3, #1
 8017192:	f10b 0b02 	add.w	fp, fp, #2
 8017196:	a91a      	add	r1, sp, #104	; 0x68
 8017198:	2202      	movs	r2, #2
 801719a:	2b07      	cmp	r3, #7
 801719c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80171a0:	9322      	str	r3, [sp, #136]	; 0x88
 80171a2:	e884 0006 	stmia.w	r4, {r1, r2}
 80171a6:	f300 839a 	bgt.w	80178de <_vfprintf_r+0xace>
 80171aa:	3408      	adds	r4, #8
 80171ac:	2e80      	cmp	r6, #128	; 0x80
 80171ae:	f000 82ea 	beq.w	8017786 <_vfprintf_r+0x976>
 80171b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80171b6:	ebc2 0a03 	rsb	sl, r2, r3
 80171ba:	f1ba 0f00 	cmp.w	sl, #0
 80171be:	dd32      	ble.n	8017226 <_vfprintf_r+0x416>
 80171c0:	f1ba 0f10 	cmp.w	sl, #16
 80171c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80171c6:	4f82      	ldr	r7, [pc, #520]	; (80173d0 <_vfprintf_r+0x5c0>)
 80171c8:	dd22      	ble.n	8017210 <_vfprintf_r+0x400>
 80171ca:	2610      	movs	r6, #16
 80171cc:	465b      	mov	r3, fp
 80171ce:	e006      	b.n	80171de <_vfprintf_r+0x3ce>
 80171d0:	f1aa 0a10 	sub.w	sl, sl, #16
 80171d4:	f1ba 0f10 	cmp.w	sl, #16
 80171d8:	f104 0408 	add.w	r4, r4, #8
 80171dc:	dd17      	ble.n	801720e <_vfprintf_r+0x3fe>
 80171de:	3201      	adds	r2, #1
 80171e0:	3310      	adds	r3, #16
 80171e2:	2a07      	cmp	r2, #7
 80171e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80171e6:	9222      	str	r2, [sp, #136]	; 0x88
 80171e8:	6027      	str	r7, [r4, #0]
 80171ea:	6066      	str	r6, [r4, #4]
 80171ec:	ddf0      	ble.n	80171d0 <_vfprintf_r+0x3c0>
 80171ee:	4640      	mov	r0, r8
 80171f0:	4649      	mov	r1, r9
 80171f2:	aa21      	add	r2, sp, #132	; 0x84
 80171f4:	f7fe ffc2 	bl	801617c <__sprint_r>
 80171f8:	2800      	cmp	r0, #0
 80171fa:	f47f af09 	bne.w	8017010 <_vfprintf_r+0x200>
 80171fe:	f1aa 0a10 	sub.w	sl, sl, #16
 8017202:	f1ba 0f10 	cmp.w	sl, #16
 8017206:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017208:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801720a:	ac2e      	add	r4, sp, #184	; 0xb8
 801720c:	dce7      	bgt.n	80171de <_vfprintf_r+0x3ce>
 801720e:	469b      	mov	fp, r3
 8017210:	3201      	adds	r2, #1
 8017212:	44d3      	add	fp, sl
 8017214:	2a07      	cmp	r2, #7
 8017216:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801721a:	9222      	str	r2, [sp, #136]	; 0x88
 801721c:	e884 0480 	stmia.w	r4, {r7, sl}
 8017220:	f300 8351 	bgt.w	80178c6 <_vfprintf_r+0xab6>
 8017224:	3408      	adds	r4, #8
 8017226:	9b06      	ldr	r3, [sp, #24]
 8017228:	05db      	lsls	r3, r3, #23
 801722a:	f100 8255 	bmi.w	80176d8 <_vfprintf_r+0x8c8>
 801722e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017234:	6022      	str	r2, [r4, #0]
 8017236:	3301      	adds	r3, #1
 8017238:	448b      	add	fp, r1
 801723a:	2b07      	cmp	r3, #7
 801723c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017240:	6061      	str	r1, [r4, #4]
 8017242:	9322      	str	r3, [sp, #136]	; 0x88
 8017244:	f300 8317 	bgt.w	8017876 <_vfprintf_r+0xa66>
 8017248:	3408      	adds	r4, #8
 801724a:	9b06      	ldr	r3, [sp, #24]
 801724c:	0759      	lsls	r1, r3, #29
 801724e:	d53a      	bpl.n	80172c6 <_vfprintf_r+0x4b6>
 8017250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017252:	9a07      	ldr	r2, [sp, #28]
 8017254:	1a9d      	subs	r5, r3, r2
 8017256:	2d00      	cmp	r5, #0
 8017258:	dd35      	ble.n	80172c6 <_vfprintf_r+0x4b6>
 801725a:	2d10      	cmp	r5, #16
 801725c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801725e:	4f5b      	ldr	r7, [pc, #364]	; (80173cc <_vfprintf_r+0x5bc>)
 8017260:	dd1e      	ble.n	80172a0 <_vfprintf_r+0x490>
 8017262:	2610      	movs	r6, #16
 8017264:	465a      	mov	r2, fp
 8017266:	e004      	b.n	8017272 <_vfprintf_r+0x462>
 8017268:	3d10      	subs	r5, #16
 801726a:	2d10      	cmp	r5, #16
 801726c:	f104 0408 	add.w	r4, r4, #8
 8017270:	dd15      	ble.n	801729e <_vfprintf_r+0x48e>
 8017272:	3301      	adds	r3, #1
 8017274:	3210      	adds	r2, #16
 8017276:	2b07      	cmp	r3, #7
 8017278:	9223      	str	r2, [sp, #140]	; 0x8c
 801727a:	9322      	str	r3, [sp, #136]	; 0x88
 801727c:	6027      	str	r7, [r4, #0]
 801727e:	6066      	str	r6, [r4, #4]
 8017280:	ddf2      	ble.n	8017268 <_vfprintf_r+0x458>
 8017282:	4640      	mov	r0, r8
 8017284:	4649      	mov	r1, r9
 8017286:	aa21      	add	r2, sp, #132	; 0x84
 8017288:	f7fe ff78 	bl	801617c <__sprint_r>
 801728c:	2800      	cmp	r0, #0
 801728e:	f47f aebf 	bne.w	8017010 <_vfprintf_r+0x200>
 8017292:	3d10      	subs	r5, #16
 8017294:	2d10      	cmp	r5, #16
 8017296:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801729a:	ac2e      	add	r4, sp, #184	; 0xb8
 801729c:	dce9      	bgt.n	8017272 <_vfprintf_r+0x462>
 801729e:	4693      	mov	fp, r2
 80172a0:	3301      	adds	r3, #1
 80172a2:	44ab      	add	fp, r5
 80172a4:	2b07      	cmp	r3, #7
 80172a6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80172aa:	9322      	str	r3, [sp, #136]	; 0x88
 80172ac:	6027      	str	r7, [r4, #0]
 80172ae:	6065      	str	r5, [r4, #4]
 80172b0:	dd09      	ble.n	80172c6 <_vfprintf_r+0x4b6>
 80172b2:	4640      	mov	r0, r8
 80172b4:	4649      	mov	r1, r9
 80172b6:	aa21      	add	r2, sp, #132	; 0x84
 80172b8:	f7fe ff60 	bl	801617c <__sprint_r>
 80172bc:	2800      	cmp	r0, #0
 80172be:	f47f aea7 	bne.w	8017010 <_vfprintf_r+0x200>
 80172c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80172c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172c8:	9a07      	ldr	r2, [sp, #28]
 80172ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80172cc:	428a      	cmp	r2, r1
 80172ce:	bfac      	ite	ge
 80172d0:	189b      	addge	r3, r3, r2
 80172d2:	185b      	addlt	r3, r3, r1
 80172d4:	9309      	str	r3, [sp, #36]	; 0x24
 80172d6:	f1bb 0f00 	cmp.w	fp, #0
 80172da:	f040 82d8 	bne.w	801788e <_vfprintf_r+0xa7e>
 80172de:	2300      	movs	r3, #0
 80172e0:	9322      	str	r3, [sp, #136]	; 0x88
 80172e2:	ac2e      	add	r4, sp, #184	; 0xb8
 80172e4:	e5d5      	b.n	8016e92 <_vfprintf_r+0x82>
 80172e6:	4619      	mov	r1, r3
 80172e8:	9806      	ldr	r0, [sp, #24]
 80172ea:	781d      	ldrb	r5, [r3, #0]
 80172ec:	f040 0004 	orr.w	r0, r0, #4
 80172f0:	9006      	str	r0, [sp, #24]
 80172f2:	e5fe      	b.n	8016ef2 <_vfprintf_r+0xe2>
 80172f4:	9308      	str	r3, [sp, #32]
 80172f6:	9b06      	ldr	r3, [sp, #24]
 80172f8:	f013 0320 	ands.w	r3, r3, #32
 80172fc:	46b2      	mov	sl, r6
 80172fe:	f000 816d 	beq.w	80175dc <_vfprintf_r+0x7cc>
 8017302:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017304:	3707      	adds	r7, #7
 8017306:	f027 0307 	bic.w	r3, r7, #7
 801730a:	f103 0208 	add.w	r2, r3, #8
 801730e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017312:	920c      	str	r2, [sp, #48]	; 0x30
 8017314:	2300      	movs	r3, #0
 8017316:	e699      	b.n	801704c <_vfprintf_r+0x23c>
 8017318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801731a:	9308      	str	r3, [sp, #32]
 801731c:	6813      	ldr	r3, [r2, #0]
 801731e:	930e      	str	r3, [sp, #56]	; 0x38
 8017320:	f04f 0b00 	mov.w	fp, #0
 8017324:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 8017328:	1d17      	adds	r7, r2, #4
 801732a:	2b00      	cmp	r3, #0
 801732c:	f000 864f 	beq.w	8017fce <_vfprintf_r+0x11be>
 8017330:	2e00      	cmp	r6, #0
 8017332:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017334:	f2c0 8601 	blt.w	8017f3a <_vfprintf_r+0x112a>
 8017338:	4659      	mov	r1, fp
 801733a:	4632      	mov	r2, r6
 801733c:	f002 ff76 	bl	801a22c <memchr>
 8017340:	2800      	cmp	r0, #0
 8017342:	f000 8680 	beq.w	8018046 <_vfprintf_r+0x1236>
 8017346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017348:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 801734c:	1ac3      	subs	r3, r0, r3
 801734e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017350:	970c      	str	r7, [sp, #48]	; 0x30
 8017352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017356:	9307      	str	r3, [sp, #28]
 8017358:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 801735c:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8017360:	e6ae      	b.n	80170c0 <_vfprintf_r+0x2b0>
 8017362:	9308      	str	r3, [sp, #32]
 8017364:	4b1b      	ldr	r3, [pc, #108]	; (80173d4 <_vfprintf_r+0x5c4>)
 8017366:	9314      	str	r3, [sp, #80]	; 0x50
 8017368:	9b06      	ldr	r3, [sp, #24]
 801736a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801736e:	0699      	lsls	r1, r3, #26
 8017370:	46b2      	mov	sl, r6
 8017372:	f140 814f 	bpl.w	8017614 <_vfprintf_r+0x804>
 8017376:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017378:	3707      	adds	r7, #7
 801737a:	f027 0307 	bic.w	r3, r7, #7
 801737e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017382:	f103 0208 	add.w	r2, r3, #8
 8017386:	920c      	str	r2, [sp, #48]	; 0x30
 8017388:	9b06      	ldr	r3, [sp, #24]
 801738a:	07db      	lsls	r3, r3, #31
 801738c:	f140 82de 	bpl.w	801794c <_vfprintf_r+0xb3c>
 8017390:	ea56 0307 	orrs.w	r3, r6, r7
 8017394:	f000 82da 	beq.w	801794c <_vfprintf_r+0xb3c>
 8017398:	9a06      	ldr	r2, [sp, #24]
 801739a:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 801739e:	2330      	movs	r3, #48	; 0x30
 80173a0:	f042 0202 	orr.w	r2, r2, #2
 80173a4:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80173a8:	9206      	str	r2, [sp, #24]
 80173aa:	2302      	movs	r3, #2
 80173ac:	e64e      	b.n	801704c <_vfprintf_r+0x23c>
 80173ae:	781d      	ldrb	r5, [r3, #0]
 80173b0:	4619      	mov	r1, r3
 80173b2:	2a00      	cmp	r2, #0
 80173b4:	f47f ad9d 	bne.w	8016ef2 <_vfprintf_r+0xe2>
 80173b8:	2220      	movs	r2, #32
 80173ba:	e59a      	b.n	8016ef2 <_vfprintf_r+0xe2>
 80173bc:	9906      	ldr	r1, [sp, #24]
 80173be:	f041 0120 	orr.w	r1, r1, #32
 80173c2:	9106      	str	r1, [sp, #24]
 80173c4:	781d      	ldrb	r5, [r3, #0]
 80173c6:	4619      	mov	r1, r3
 80173c8:	e593      	b.n	8016ef2 <_vfprintf_r+0xe2>
 80173ca:	bf00      	nop
 80173cc:	08030b0c 	.word	0x08030b0c
 80173d0:	08030ae8 	.word	0x08030ae8
 80173d4:	08030acc 	.word	0x08030acc
 80173d8:	9308      	str	r3, [sp, #32]
 80173da:	9b06      	ldr	r3, [sp, #24]
 80173dc:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80173e0:	f043 0310 	orr.w	r3, r3, #16
 80173e4:	9306      	str	r3, [sp, #24]
 80173e6:	9b06      	ldr	r3, [sp, #24]
 80173e8:	0699      	lsls	r1, r3, #26
 80173ea:	46b2      	mov	sl, r6
 80173ec:	f140 809c 	bpl.w	8017528 <_vfprintf_r+0x718>
 80173f0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80173f2:	3707      	adds	r7, #7
 80173f4:	f027 0707 	bic.w	r7, r7, #7
 80173f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80173fc:	f107 0108 	add.w	r1, r7, #8
 8017400:	910c      	str	r1, [sp, #48]	; 0x30
 8017402:	4616      	mov	r6, r2
 8017404:	461f      	mov	r7, r3
 8017406:	2a00      	cmp	r2, #0
 8017408:	f173 0300 	sbcs.w	r3, r3, #0
 801740c:	f2c0 8415 	blt.w	8017c3a <_vfprintf_r+0xe2a>
 8017410:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8017414:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8017418:	2301      	movs	r3, #1
 801741a:	e61d      	b.n	8017058 <_vfprintf_r+0x248>
 801741c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801741e:	9308      	str	r3, [sp, #32]
 8017420:	3707      	adds	r7, #7
 8017422:	f027 0307 	bic.w	r3, r7, #7
 8017426:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801742a:	f103 0208 	add.w	r2, r3, #8
 801742e:	920c      	str	r2, [sp, #48]	; 0x30
 8017430:	681a      	ldr	r2, [r3, #0]
 8017432:	9212      	str	r2, [sp, #72]	; 0x48
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	9313      	str	r3, [sp, #76]	; 0x4c
 8017438:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801743a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801743c:	f003 fc2e 	bl	801ac9c <__fpclassifyd>
 8017440:	2801      	cmp	r0, #1
 8017442:	46b3      	mov	fp, r6
 8017444:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017446:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017448:	f040 8406 	bne.w	8017c58 <_vfprintf_r+0xe48>
 801744c:	2200      	movs	r2, #0
 801744e:	2300      	movs	r3, #0
 8017450:	f7e9 fb5e 	bl	8000b10 <__aeabi_dcmplt>
 8017454:	2800      	cmp	r0, #0
 8017456:	f040 85ee 	bne.w	8018036 <_vfprintf_r+0x1226>
 801745a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801745e:	9e06      	ldr	r6, [sp, #24]
 8017460:	4a99      	ldr	r2, [pc, #612]	; (80176c8 <_vfprintf_r+0x8b8>)
 8017462:	4b9a      	ldr	r3, [pc, #616]	; (80176cc <_vfprintf_r+0x8bc>)
 8017464:	2103      	movs	r1, #3
 8017466:	2000      	movs	r0, #0
 8017468:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 801746c:	2d47      	cmp	r5, #71	; 0x47
 801746e:	bfd8      	it	le
 8017470:	461a      	movle	r2, r3
 8017472:	9107      	str	r1, [sp, #28]
 8017474:	900f      	str	r0, [sp, #60]	; 0x3c
 8017476:	9606      	str	r6, [sp, #24]
 8017478:	920e      	str	r2, [sp, #56]	; 0x38
 801747a:	910b      	str	r1, [sp, #44]	; 0x2c
 801747c:	9010      	str	r0, [sp, #64]	; 0x40
 801747e:	e61f      	b.n	80170c0 <_vfprintf_r+0x2b0>
 8017480:	9906      	ldr	r1, [sp, #24]
 8017482:	f041 0108 	orr.w	r1, r1, #8
 8017486:	9106      	str	r1, [sp, #24]
 8017488:	781d      	ldrb	r5, [r3, #0]
 801748a:	4619      	mov	r1, r3
 801748c:	e531      	b.n	8016ef2 <_vfprintf_r+0xe2>
 801748e:	781d      	ldrb	r5, [r3, #0]
 8017490:	4619      	mov	r1, r3
 8017492:	222b      	movs	r2, #43	; 0x2b
 8017494:	e52d      	b.n	8016ef2 <_vfprintf_r+0xe2>
 8017496:	9906      	ldr	r1, [sp, #24]
 8017498:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 801749c:	9106      	str	r1, [sp, #24]
 801749e:	781d      	ldrb	r5, [r3, #0]
 80174a0:	4619      	mov	r1, r3
 80174a2:	e526      	b.n	8016ef2 <_vfprintf_r+0xe2>
 80174a4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80174a8:	2100      	movs	r1, #0
 80174aa:	f813 5b01 	ldrb.w	r5, [r3], #1
 80174ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80174b2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80174b6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80174ba:	2809      	cmp	r0, #9
 80174bc:	d9f5      	bls.n	80174aa <_vfprintf_r+0x69a>
 80174be:	910a      	str	r1, [sp, #40]	; 0x28
 80174c0:	e518      	b.n	8016ef4 <_vfprintf_r+0xe4>
 80174c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80174c4:	9308      	str	r3, [sp, #32]
 80174c6:	2330      	movs	r3, #48	; 0x30
 80174c8:	9a06      	ldr	r2, [sp, #24]
 80174ca:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80174ce:	460b      	mov	r3, r1
 80174d0:	3304      	adds	r3, #4
 80174d2:	2578      	movs	r5, #120	; 0x78
 80174d4:	f042 0202 	orr.w	r2, r2, #2
 80174d8:	930c      	str	r3, [sp, #48]	; 0x30
 80174da:	4b7d      	ldr	r3, [pc, #500]	; (80176d0 <_vfprintf_r+0x8c0>)
 80174dc:	9314      	str	r3, [sp, #80]	; 0x50
 80174de:	46b2      	mov	sl, r6
 80174e0:	9206      	str	r2, [sp, #24]
 80174e2:	680e      	ldr	r6, [r1, #0]
 80174e4:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 80174e8:	2700      	movs	r7, #0
 80174ea:	2302      	movs	r3, #2
 80174ec:	e5ae      	b.n	801704c <_vfprintf_r+0x23c>
 80174ee:	9906      	ldr	r1, [sp, #24]
 80174f0:	f041 0101 	orr.w	r1, r1, #1
 80174f4:	9106      	str	r1, [sp, #24]
 80174f6:	781d      	ldrb	r5, [r3, #0]
 80174f8:	4619      	mov	r1, r3
 80174fa:	e4fa      	b.n	8016ef2 <_vfprintf_r+0xe2>
 80174fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80174fe:	6829      	ldr	r1, [r5, #0]
 8017500:	910a      	str	r1, [sp, #40]	; 0x28
 8017502:	4608      	mov	r0, r1
 8017504:	2800      	cmp	r0, #0
 8017506:	4629      	mov	r1, r5
 8017508:	f101 0104 	add.w	r1, r1, #4
 801750c:	f2c0 84e3 	blt.w	8017ed6 <_vfprintf_r+0x10c6>
 8017510:	910c      	str	r1, [sp, #48]	; 0x30
 8017512:	781d      	ldrb	r5, [r3, #0]
 8017514:	4619      	mov	r1, r3
 8017516:	e4ec      	b.n	8016ef2 <_vfprintf_r+0xe2>
 8017518:	9308      	str	r3, [sp, #32]
 801751a:	9b06      	ldr	r3, [sp, #24]
 801751c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8017520:	0699      	lsls	r1, r3, #26
 8017522:	46b2      	mov	sl, r6
 8017524:	f53f af64 	bmi.w	80173f0 <_vfprintf_r+0x5e0>
 8017528:	9b06      	ldr	r3, [sp, #24]
 801752a:	06da      	lsls	r2, r3, #27
 801752c:	f100 8292 	bmi.w	8017a54 <_vfprintf_r+0xc44>
 8017530:	9b06      	ldr	r3, [sp, #24]
 8017532:	065b      	lsls	r3, r3, #25
 8017534:	f140 828e 	bpl.w	8017a54 <_vfprintf_r+0xc44>
 8017538:	990c      	ldr	r1, [sp, #48]	; 0x30
 801753a:	f9b1 6000 	ldrsh.w	r6, [r1]
 801753e:	3104      	adds	r1, #4
 8017540:	17f7      	asrs	r7, r6, #31
 8017542:	4632      	mov	r2, r6
 8017544:	463b      	mov	r3, r7
 8017546:	910c      	str	r1, [sp, #48]	; 0x30
 8017548:	e75d      	b.n	8017406 <_vfprintf_r+0x5f6>
 801754a:	9906      	ldr	r1, [sp, #24]
 801754c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8017550:	9106      	str	r1, [sp, #24]
 8017552:	781d      	ldrb	r5, [r3, #0]
 8017554:	4619      	mov	r1, r3
 8017556:	e4cc      	b.n	8016ef2 <_vfprintf_r+0xe2>
 8017558:	781d      	ldrb	r5, [r3, #0]
 801755a:	9906      	ldr	r1, [sp, #24]
 801755c:	2d6c      	cmp	r5, #108	; 0x6c
 801755e:	f000 84b3 	beq.w	8017ec8 <_vfprintf_r+0x10b8>
 8017562:	f041 0110 	orr.w	r1, r1, #16
 8017566:	9106      	str	r1, [sp, #24]
 8017568:	4619      	mov	r1, r3
 801756a:	e4c2      	b.n	8016ef2 <_vfprintf_r+0xe2>
 801756c:	9308      	str	r3, [sp, #32]
 801756e:	9b06      	ldr	r3, [sp, #24]
 8017570:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8017574:	069a      	lsls	r2, r3, #26
 8017576:	f140 8400 	bpl.w	8017d7a <_vfprintf_r+0xf6a>
 801757a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801757c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801757e:	6813      	ldr	r3, [r2, #0]
 8017580:	17cf      	asrs	r7, r1, #31
 8017582:	4608      	mov	r0, r1
 8017584:	3204      	adds	r2, #4
 8017586:	4639      	mov	r1, r7
 8017588:	920c      	str	r2, [sp, #48]	; 0x30
 801758a:	e9c3 0100 	strd	r0, r1, [r3]
 801758e:	e480      	b.n	8016e92 <_vfprintf_r+0x82>
 8017590:	781d      	ldrb	r5, [r3, #0]
 8017592:	2d2a      	cmp	r5, #42	; 0x2a
 8017594:	f103 0101 	add.w	r1, r3, #1
 8017598:	f000 860e 	beq.w	80181b8 <_vfprintf_r+0x13a8>
 801759c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80175a0:	2809      	cmp	r0, #9
 80175a2:	460b      	mov	r3, r1
 80175a4:	f04f 0600 	mov.w	r6, #0
 80175a8:	f63f aca4 	bhi.w	8016ef4 <_vfprintf_r+0xe4>
 80175ac:	f813 5b01 	ldrb.w	r5, [r3], #1
 80175b0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80175b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80175b8:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80175bc:	2809      	cmp	r0, #9
 80175be:	d9f5      	bls.n	80175ac <_vfprintf_r+0x79c>
 80175c0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80175c4:	e496      	b.n	8016ef4 <_vfprintf_r+0xe4>
 80175c6:	9308      	str	r3, [sp, #32]
 80175c8:	9b06      	ldr	r3, [sp, #24]
 80175ca:	f043 0310 	orr.w	r3, r3, #16
 80175ce:	9306      	str	r3, [sp, #24]
 80175d0:	9b06      	ldr	r3, [sp, #24]
 80175d2:	f013 0320 	ands.w	r3, r3, #32
 80175d6:	46b2      	mov	sl, r6
 80175d8:	f47f ae93 	bne.w	8017302 <_vfprintf_r+0x4f2>
 80175dc:	9a06      	ldr	r2, [sp, #24]
 80175de:	f012 0210 	ands.w	r2, r2, #16
 80175e2:	f040 8240 	bne.w	8017a66 <_vfprintf_r+0xc56>
 80175e6:	9b06      	ldr	r3, [sp, #24]
 80175e8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80175ec:	f000 823b 	beq.w	8017a66 <_vfprintf_r+0xc56>
 80175f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80175f2:	4613      	mov	r3, r2
 80175f4:	460a      	mov	r2, r1
 80175f6:	3204      	adds	r2, #4
 80175f8:	880e      	ldrh	r6, [r1, #0]
 80175fa:	920c      	str	r2, [sp, #48]	; 0x30
 80175fc:	2700      	movs	r7, #0
 80175fe:	e525      	b.n	801704c <_vfprintf_r+0x23c>
 8017600:	9308      	str	r3, [sp, #32]
 8017602:	4b34      	ldr	r3, [pc, #208]	; (80176d4 <_vfprintf_r+0x8c4>)
 8017604:	9314      	str	r3, [sp, #80]	; 0x50
 8017606:	9b06      	ldr	r3, [sp, #24]
 8017608:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801760c:	0699      	lsls	r1, r3, #26
 801760e:	46b2      	mov	sl, r6
 8017610:	f53f aeb1 	bmi.w	8017376 <_vfprintf_r+0x566>
 8017614:	9b06      	ldr	r3, [sp, #24]
 8017616:	06da      	lsls	r2, r3, #27
 8017618:	f140 83c6 	bpl.w	8017da8 <_vfprintf_r+0xf98>
 801761c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801761e:	4613      	mov	r3, r2
 8017620:	3304      	adds	r3, #4
 8017622:	6816      	ldr	r6, [r2, #0]
 8017624:	930c      	str	r3, [sp, #48]	; 0x30
 8017626:	2700      	movs	r7, #0
 8017628:	e6ae      	b.n	8017388 <_vfprintf_r+0x578>
 801762a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801762c:	9308      	str	r3, [sp, #32]
 801762e:	680a      	ldr	r2, [r1, #0]
 8017630:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8017634:	2300      	movs	r3, #0
 8017636:	2201      	movs	r2, #1
 8017638:	3104      	adds	r1, #4
 801763a:	469c      	mov	ip, r3
 801763c:	9207      	str	r2, [sp, #28]
 801763e:	910c      	str	r1, [sp, #48]	; 0x30
 8017640:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8017644:	ab24      	add	r3, sp, #144	; 0x90
 8017646:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801764a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801764e:	920b      	str	r2, [sp, #44]	; 0x2c
 8017650:	930e      	str	r3, [sp, #56]	; 0x38
 8017652:	e53b      	b.n	80170cc <_vfprintf_r+0x2bc>
 8017654:	9308      	str	r3, [sp, #32]
 8017656:	9b06      	ldr	r3, [sp, #24]
 8017658:	f043 0310 	orr.w	r3, r3, #16
 801765c:	9306      	str	r3, [sp, #24]
 801765e:	9b06      	ldr	r3, [sp, #24]
 8017660:	46b2      	mov	sl, r6
 8017662:	069e      	lsls	r6, r3, #26
 8017664:	f53f ace8 	bmi.w	8017038 <_vfprintf_r+0x228>
 8017668:	9b06      	ldr	r3, [sp, #24]
 801766a:	06d8      	lsls	r0, r3, #27
 801766c:	f140 8377 	bpl.w	8017d5e <_vfprintf_r+0xf4e>
 8017670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017672:	4613      	mov	r3, r2
 8017674:	3204      	adds	r2, #4
 8017676:	681e      	ldr	r6, [r3, #0]
 8017678:	920c      	str	r2, [sp, #48]	; 0x30
 801767a:	2301      	movs	r3, #1
 801767c:	2700      	movs	r7, #0
 801767e:	e4e5      	b.n	801704c <_vfprintf_r+0x23c>
 8017680:	9308      	str	r3, [sp, #32]
 8017682:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8017686:	2d00      	cmp	r5, #0
 8017688:	f43f acbb 	beq.w	8017002 <_vfprintf_r+0x1f2>
 801768c:	2300      	movs	r3, #0
 801768e:	2201      	movs	r2, #1
 8017690:	469c      	mov	ip, r3
 8017692:	9207      	str	r2, [sp, #28]
 8017694:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 8017698:	e7d2      	b.n	8017640 <_vfprintf_r+0x830>
 801769a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801769e:	e561      	b.n	8017164 <_vfprintf_r+0x354>
 80176a0:	2b01      	cmp	r3, #1
 80176a2:	f47f aceb 	bne.w	801707c <_vfprintf_r+0x26c>
 80176a6:	2f00      	cmp	r7, #0
 80176a8:	bf08      	it	eq
 80176aa:	2e0a      	cmpeq	r6, #10
 80176ac:	f080 81ef 	bcs.w	8017a8e <_vfprintf_r+0xc7e>
 80176b0:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80176b4:	3630      	adds	r6, #48	; 0x30
 80176b6:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 80176ba:	ab2e      	add	r3, sp, #184	; 0xb8
 80176bc:	ebcb 0303 	rsb	r3, fp, r3
 80176c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80176c2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80176c6:	e4f3      	b.n	80170b0 <_vfprintf_r+0x2a0>
 80176c8:	08030afc 	.word	0x08030afc
 80176cc:	08030af8 	.word	0x08030af8
 80176d0:	08030acc 	.word	0x08030acc
 80176d4:	08030ab8 	.word	0x08030ab8
 80176d8:	2d65      	cmp	r5, #101	; 0x65
 80176da:	f340 808a 	ble.w	80177f2 <_vfprintf_r+0x9e2>
 80176de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80176e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80176e2:	2200      	movs	r2, #0
 80176e4:	2300      	movs	r3, #0
 80176e6:	f7e9 fa09 	bl	8000afc <__aeabi_dcmpeq>
 80176ea:	2800      	cmp	r0, #0
 80176ec:	f000 8131 	beq.w	8017952 <_vfprintf_r+0xb42>
 80176f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80176f2:	4aba      	ldr	r2, [pc, #744]	; (80179dc <_vfprintf_r+0xbcc>)
 80176f4:	6022      	str	r2, [r4, #0]
 80176f6:	3301      	adds	r3, #1
 80176f8:	f10b 0b01 	add.w	fp, fp, #1
 80176fc:	2201      	movs	r2, #1
 80176fe:	2b07      	cmp	r3, #7
 8017700:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017704:	9322      	str	r3, [sp, #136]	; 0x88
 8017706:	6062      	str	r2, [r4, #4]
 8017708:	f300 8367 	bgt.w	8017dda <_vfprintf_r+0xfca>
 801770c:	3408      	adds	r4, #8
 801770e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017710:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017712:	4293      	cmp	r3, r2
 8017714:	db03      	blt.n	801771e <_vfprintf_r+0x90e>
 8017716:	9b06      	ldr	r3, [sp, #24]
 8017718:	07df      	lsls	r7, r3, #31
 801771a:	f57f ad96 	bpl.w	801724a <_vfprintf_r+0x43a>
 801771e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017720:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017722:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017724:	6022      	str	r2, [r4, #0]
 8017726:	3301      	adds	r3, #1
 8017728:	448b      	add	fp, r1
 801772a:	2b07      	cmp	r3, #7
 801772c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017730:	6061      	str	r1, [r4, #4]
 8017732:	9322      	str	r3, [sp, #136]	; 0x88
 8017734:	f300 83d6 	bgt.w	8017ee4 <_vfprintf_r+0x10d4>
 8017738:	3408      	adds	r4, #8
 801773a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801773c:	1e5d      	subs	r5, r3, #1
 801773e:	2d00      	cmp	r5, #0
 8017740:	f77f ad83 	ble.w	801724a <_vfprintf_r+0x43a>
 8017744:	2d10      	cmp	r5, #16
 8017746:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017748:	4fa5      	ldr	r7, [pc, #660]	; (80179e0 <_vfprintf_r+0xbd0>)
 801774a:	f340 8195 	ble.w	8017a78 <_vfprintf_r+0xc68>
 801774e:	2610      	movs	r6, #16
 8017750:	465a      	mov	r2, fp
 8017752:	e004      	b.n	801775e <_vfprintf_r+0x94e>
 8017754:	3408      	adds	r4, #8
 8017756:	3d10      	subs	r5, #16
 8017758:	2d10      	cmp	r5, #16
 801775a:	f340 818c 	ble.w	8017a76 <_vfprintf_r+0xc66>
 801775e:	3301      	adds	r3, #1
 8017760:	3210      	adds	r2, #16
 8017762:	2b07      	cmp	r3, #7
 8017764:	9223      	str	r2, [sp, #140]	; 0x8c
 8017766:	9322      	str	r3, [sp, #136]	; 0x88
 8017768:	6027      	str	r7, [r4, #0]
 801776a:	6066      	str	r6, [r4, #4]
 801776c:	ddf2      	ble.n	8017754 <_vfprintf_r+0x944>
 801776e:	4640      	mov	r0, r8
 8017770:	4649      	mov	r1, r9
 8017772:	aa21      	add	r2, sp, #132	; 0x84
 8017774:	f7fe fd02 	bl	801617c <__sprint_r>
 8017778:	2800      	cmp	r0, #0
 801777a:	f47f ac49 	bne.w	8017010 <_vfprintf_r+0x200>
 801777e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017782:	ac2e      	add	r4, sp, #184	; 0xb8
 8017784:	e7e7      	b.n	8017756 <_vfprintf_r+0x946>
 8017786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017788:	9a07      	ldr	r2, [sp, #28]
 801778a:	1a9e      	subs	r6, r3, r2
 801778c:	2e00      	cmp	r6, #0
 801778e:	f77f ad10 	ble.w	80171b2 <_vfprintf_r+0x3a2>
 8017792:	2e10      	cmp	r6, #16
 8017794:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017796:	4f92      	ldr	r7, [pc, #584]	; (80179e0 <_vfprintf_r+0xbd0>)
 8017798:	dd1f      	ble.n	80177da <_vfprintf_r+0x9ca>
 801779a:	f04f 0a10 	mov.w	sl, #16
 801779e:	465b      	mov	r3, fp
 80177a0:	e004      	b.n	80177ac <_vfprintf_r+0x99c>
 80177a2:	3e10      	subs	r6, #16
 80177a4:	2e10      	cmp	r6, #16
 80177a6:	f104 0408 	add.w	r4, r4, #8
 80177aa:	dd15      	ble.n	80177d8 <_vfprintf_r+0x9c8>
 80177ac:	3201      	adds	r2, #1
 80177ae:	3310      	adds	r3, #16
 80177b0:	2a07      	cmp	r2, #7
 80177b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80177b4:	9222      	str	r2, [sp, #136]	; 0x88
 80177b6:	e884 0480 	stmia.w	r4, {r7, sl}
 80177ba:	ddf2      	ble.n	80177a2 <_vfprintf_r+0x992>
 80177bc:	4640      	mov	r0, r8
 80177be:	4649      	mov	r1, r9
 80177c0:	aa21      	add	r2, sp, #132	; 0x84
 80177c2:	f7fe fcdb 	bl	801617c <__sprint_r>
 80177c6:	2800      	cmp	r0, #0
 80177c8:	f47f ac22 	bne.w	8017010 <_vfprintf_r+0x200>
 80177cc:	3e10      	subs	r6, #16
 80177ce:	2e10      	cmp	r6, #16
 80177d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80177d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80177d4:	ac2e      	add	r4, sp, #184	; 0xb8
 80177d6:	dce9      	bgt.n	80177ac <_vfprintf_r+0x99c>
 80177d8:	469b      	mov	fp, r3
 80177da:	3201      	adds	r2, #1
 80177dc:	44b3      	add	fp, r6
 80177de:	2a07      	cmp	r2, #7
 80177e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80177e4:	9222      	str	r2, [sp, #136]	; 0x88
 80177e6:	6027      	str	r7, [r4, #0]
 80177e8:	6066      	str	r6, [r4, #4]
 80177ea:	f300 8219 	bgt.w	8017c20 <_vfprintf_r+0xe10>
 80177ee:	3408      	adds	r4, #8
 80177f0:	e4df      	b.n	80171b2 <_vfprintf_r+0x3a2>
 80177f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80177f4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80177f6:	2b01      	cmp	r3, #1
 80177f8:	f340 81d4 	ble.w	8017ba4 <_vfprintf_r+0xd94>
 80177fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177fe:	6023      	str	r3, [r4, #0]
 8017800:	3501      	adds	r5, #1
 8017802:	f10b 0601 	add.w	r6, fp, #1
 8017806:	2301      	movs	r3, #1
 8017808:	2d07      	cmp	r5, #7
 801780a:	9623      	str	r6, [sp, #140]	; 0x8c
 801780c:	9522      	str	r5, [sp, #136]	; 0x88
 801780e:	6063      	str	r3, [r4, #4]
 8017810:	f300 81e4 	bgt.w	8017bdc <_vfprintf_r+0xdcc>
 8017814:	3408      	adds	r4, #8
 8017816:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801781a:	6023      	str	r3, [r4, #0]
 801781c:	3501      	adds	r5, #1
 801781e:	4416      	add	r6, r2
 8017820:	2d07      	cmp	r5, #7
 8017822:	9623      	str	r6, [sp, #140]	; 0x8c
 8017824:	9522      	str	r5, [sp, #136]	; 0x88
 8017826:	6062      	str	r2, [r4, #4]
 8017828:	f300 81e4 	bgt.w	8017bf4 <_vfprintf_r+0xde4>
 801782c:	3408      	adds	r4, #8
 801782e:	2300      	movs	r3, #0
 8017830:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017832:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017834:	2200      	movs	r2, #0
 8017836:	f7e9 f961 	bl	8000afc <__aeabi_dcmpeq>
 801783a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801783c:	2800      	cmp	r0, #0
 801783e:	f040 80e0 	bne.w	8017a02 <_vfprintf_r+0xbf2>
 8017842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017844:	3b01      	subs	r3, #1
 8017846:	3501      	adds	r5, #1
 8017848:	3201      	adds	r2, #1
 801784a:	441e      	add	r6, r3
 801784c:	2d07      	cmp	r5, #7
 801784e:	9522      	str	r5, [sp, #136]	; 0x88
 8017850:	9623      	str	r6, [sp, #140]	; 0x8c
 8017852:	6022      	str	r2, [r4, #0]
 8017854:	6063      	str	r3, [r4, #4]
 8017856:	f300 81b5 	bgt.w	8017bc4 <_vfprintf_r+0xdb4>
 801785a:	3408      	adds	r4, #8
 801785c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801785e:	6062      	str	r2, [r4, #4]
 8017860:	3501      	adds	r5, #1
 8017862:	eb06 0b02 	add.w	fp, r6, r2
 8017866:	ab1d      	add	r3, sp, #116	; 0x74
 8017868:	2d07      	cmp	r5, #7
 801786a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801786e:	9522      	str	r5, [sp, #136]	; 0x88
 8017870:	6023      	str	r3, [r4, #0]
 8017872:	f77f ace9 	ble.w	8017248 <_vfprintf_r+0x438>
 8017876:	4640      	mov	r0, r8
 8017878:	4649      	mov	r1, r9
 801787a:	aa21      	add	r2, sp, #132	; 0x84
 801787c:	f7fe fc7e 	bl	801617c <__sprint_r>
 8017880:	2800      	cmp	r0, #0
 8017882:	f47f abc5 	bne.w	8017010 <_vfprintf_r+0x200>
 8017886:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801788a:	ac2e      	add	r4, sp, #184	; 0xb8
 801788c:	e4dd      	b.n	801724a <_vfprintf_r+0x43a>
 801788e:	4640      	mov	r0, r8
 8017890:	4649      	mov	r1, r9
 8017892:	aa21      	add	r2, sp, #132	; 0x84
 8017894:	f7fe fc72 	bl	801617c <__sprint_r>
 8017898:	2800      	cmp	r0, #0
 801789a:	f43f ad20 	beq.w	80172de <_vfprintf_r+0x4ce>
 801789e:	f7ff bbb7 	b.w	8017010 <_vfprintf_r+0x200>
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d133      	bne.n	801790e <_vfprintf_r+0xafe>
 80178a6:	9b06      	ldr	r3, [sp, #24]
 80178a8:	07da      	lsls	r2, r3, #31
 80178aa:	d530      	bpl.n	801790e <_vfprintf_r+0xafe>
 80178ac:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80178b0:	2330      	movs	r3, #48	; 0x30
 80178b2:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80178b6:	ab2e      	add	r3, sp, #184	; 0xb8
 80178b8:	ebcb 0303 	rsb	r3, fp, r3
 80178bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80178be:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80178c2:	f7ff bbf5 	b.w	80170b0 <_vfprintf_r+0x2a0>
 80178c6:	4640      	mov	r0, r8
 80178c8:	4649      	mov	r1, r9
 80178ca:	aa21      	add	r2, sp, #132	; 0x84
 80178cc:	f7fe fc56 	bl	801617c <__sprint_r>
 80178d0:	2800      	cmp	r0, #0
 80178d2:	f47f ab9d 	bne.w	8017010 <_vfprintf_r+0x200>
 80178d6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80178da:	ac2e      	add	r4, sp, #184	; 0xb8
 80178dc:	e4a3      	b.n	8017226 <_vfprintf_r+0x416>
 80178de:	4640      	mov	r0, r8
 80178e0:	4649      	mov	r1, r9
 80178e2:	aa21      	add	r2, sp, #132	; 0x84
 80178e4:	f7fe fc4a 	bl	801617c <__sprint_r>
 80178e8:	2800      	cmp	r0, #0
 80178ea:	f47f ab91 	bne.w	8017010 <_vfprintf_r+0x200>
 80178ee:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80178f2:	ac2e      	add	r4, sp, #184	; 0xb8
 80178f4:	e45a      	b.n	80171ac <_vfprintf_r+0x39c>
 80178f6:	4640      	mov	r0, r8
 80178f8:	4649      	mov	r1, r9
 80178fa:	aa21      	add	r2, sp, #132	; 0x84
 80178fc:	f7fe fc3e 	bl	801617c <__sprint_r>
 8017900:	2800      	cmp	r0, #0
 8017902:	f47f ab85 	bne.w	8017010 <_vfprintf_r+0x200>
 8017906:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801790a:	ac2e      	add	r4, sp, #184	; 0xb8
 801790c:	e43d      	b.n	801718a <_vfprintf_r+0x37a>
 801790e:	ab2e      	add	r3, sp, #184	; 0xb8
 8017910:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8017914:	930e      	str	r3, [sp, #56]	; 0x38
 8017916:	f7ff bbcb 	b.w	80170b0 <_vfprintf_r+0x2a0>
 801791a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801791c:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 8017920:	0933      	lsrs	r3, r6, #4
 8017922:	f006 010f 	and.w	r1, r6, #15
 8017926:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801792a:	093a      	lsrs	r2, r7, #4
 801792c:	461e      	mov	r6, r3
 801792e:	4617      	mov	r7, r2
 8017930:	5c43      	ldrb	r3, [r0, r1]
 8017932:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8017936:	ea56 0307 	orrs.w	r3, r6, r7
 801793a:	d1f1      	bne.n	8017920 <_vfprintf_r+0xb10>
 801793c:	465a      	mov	r2, fp
 801793e:	ab2e      	add	r3, sp, #184	; 0xb8
 8017940:	1a9b      	subs	r3, r3, r2
 8017942:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8017946:	930b      	str	r3, [sp, #44]	; 0x2c
 8017948:	f7ff bbb2 	b.w	80170b0 <_vfprintf_r+0x2a0>
 801794c:	2302      	movs	r3, #2
 801794e:	f7ff bb7d 	b.w	801704c <_vfprintf_r+0x23c>
 8017952:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017954:	2d00      	cmp	r5, #0
 8017956:	f340 824c 	ble.w	8017df2 <_vfprintf_r+0xfe2>
 801795a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801795c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801795e:	428a      	cmp	r2, r1
 8017960:	4613      	mov	r3, r2
 8017962:	bfa8      	it	ge
 8017964:	460b      	movge	r3, r1
 8017966:	461d      	mov	r5, r3
 8017968:	990e      	ldr	r1, [sp, #56]	; 0x38
 801796a:	2d00      	cmp	r5, #0
 801796c:	eb01 0a02 	add.w	sl, r1, r2
 8017970:	dd0b      	ble.n	801798a <_vfprintf_r+0xb7a>
 8017972:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017974:	6021      	str	r1, [r4, #0]
 8017976:	3301      	adds	r3, #1
 8017978:	44ab      	add	fp, r5
 801797a:	2b07      	cmp	r3, #7
 801797c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017980:	6065      	str	r5, [r4, #4]
 8017982:	9322      	str	r3, [sp, #136]	; 0x88
 8017984:	f300 8300 	bgt.w	8017f88 <_vfprintf_r+0x1178>
 8017988:	3408      	adds	r4, #8
 801798a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801798c:	2d00      	cmp	r5, #0
 801798e:	bfa8      	it	ge
 8017990:	1b5b      	subge	r3, r3, r5
 8017992:	2b00      	cmp	r3, #0
 8017994:	461d      	mov	r5, r3
 8017996:	f340 80af 	ble.w	8017af8 <_vfprintf_r+0xce8>
 801799a:	2d10      	cmp	r5, #16
 801799c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801799e:	4f10      	ldr	r7, [pc, #64]	; (80179e0 <_vfprintf_r+0xbd0>)
 80179a0:	f340 820f 	ble.w	8017dc2 <_vfprintf_r+0xfb2>
 80179a4:	2610      	movs	r6, #16
 80179a6:	465a      	mov	r2, fp
 80179a8:	e004      	b.n	80179b4 <_vfprintf_r+0xba4>
 80179aa:	3408      	adds	r4, #8
 80179ac:	3d10      	subs	r5, #16
 80179ae:	2d10      	cmp	r5, #16
 80179b0:	f340 8206 	ble.w	8017dc0 <_vfprintf_r+0xfb0>
 80179b4:	3301      	adds	r3, #1
 80179b6:	3210      	adds	r2, #16
 80179b8:	2b07      	cmp	r3, #7
 80179ba:	9223      	str	r2, [sp, #140]	; 0x8c
 80179bc:	9322      	str	r3, [sp, #136]	; 0x88
 80179be:	6027      	str	r7, [r4, #0]
 80179c0:	6066      	str	r6, [r4, #4]
 80179c2:	ddf2      	ble.n	80179aa <_vfprintf_r+0xb9a>
 80179c4:	4640      	mov	r0, r8
 80179c6:	4649      	mov	r1, r9
 80179c8:	aa21      	add	r2, sp, #132	; 0x84
 80179ca:	f7fe fbd7 	bl	801617c <__sprint_r>
 80179ce:	2800      	cmp	r0, #0
 80179d0:	f47f ab1e 	bne.w	8017010 <_vfprintf_r+0x200>
 80179d4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80179d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80179d8:	ac2e      	add	r4, sp, #184	; 0xb8
 80179da:	e7e7      	b.n	80179ac <_vfprintf_r+0xb9c>
 80179dc:	08030b08 	.word	0x08030b08
 80179e0:	08030ae8 	.word	0x08030ae8
 80179e4:	4640      	mov	r0, r8
 80179e6:	4649      	mov	r1, r9
 80179e8:	aa21      	add	r2, sp, #132	; 0x84
 80179ea:	f7fe fbc7 	bl	801617c <__sprint_r>
 80179ee:	2800      	cmp	r0, #0
 80179f0:	f47f ab0e 	bne.w	8017010 <_vfprintf_r+0x200>
 80179f4:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 80179f8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80179fc:	ac2e      	add	r4, sp, #184	; 0xb8
 80179fe:	f7ff bbb1 	b.w	8017164 <_vfprintf_r+0x354>
 8017a02:	f103 3aff 	add.w	sl, r3, #4294967295
 8017a06:	f1ba 0f00 	cmp.w	sl, #0
 8017a0a:	f77f af27 	ble.w	801785c <_vfprintf_r+0xa4c>
 8017a0e:	f1ba 0f10 	cmp.w	sl, #16
 8017a12:	4f90      	ldr	r7, [pc, #576]	; (8017c54 <_vfprintf_r+0xe44>)
 8017a14:	bfc8      	it	gt
 8017a16:	f04f 0b10 	movgt.w	fp, #16
 8017a1a:	dc07      	bgt.n	8017a2c <_vfprintf_r+0xc1c>
 8017a1c:	e0f6      	b.n	8017c0c <_vfprintf_r+0xdfc>
 8017a1e:	3408      	adds	r4, #8
 8017a20:	f1aa 0a10 	sub.w	sl, sl, #16
 8017a24:	f1ba 0f10 	cmp.w	sl, #16
 8017a28:	f340 80f0 	ble.w	8017c0c <_vfprintf_r+0xdfc>
 8017a2c:	3501      	adds	r5, #1
 8017a2e:	3610      	adds	r6, #16
 8017a30:	2d07      	cmp	r5, #7
 8017a32:	9623      	str	r6, [sp, #140]	; 0x8c
 8017a34:	9522      	str	r5, [sp, #136]	; 0x88
 8017a36:	e884 0880 	stmia.w	r4, {r7, fp}
 8017a3a:	ddf0      	ble.n	8017a1e <_vfprintf_r+0xc0e>
 8017a3c:	4640      	mov	r0, r8
 8017a3e:	4649      	mov	r1, r9
 8017a40:	aa21      	add	r2, sp, #132	; 0x84
 8017a42:	f7fe fb9b 	bl	801617c <__sprint_r>
 8017a46:	2800      	cmp	r0, #0
 8017a48:	f47f aae2 	bne.w	8017010 <_vfprintf_r+0x200>
 8017a4c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8017a4e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8017a50:	ac2e      	add	r4, sp, #184	; 0xb8
 8017a52:	e7e5      	b.n	8017a20 <_vfprintf_r+0xc10>
 8017a54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a56:	6816      	ldr	r6, [r2, #0]
 8017a58:	4613      	mov	r3, r2
 8017a5a:	3304      	adds	r3, #4
 8017a5c:	17f7      	asrs	r7, r6, #31
 8017a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8017a60:	4632      	mov	r2, r6
 8017a62:	463b      	mov	r3, r7
 8017a64:	e4cf      	b.n	8017406 <_vfprintf_r+0x5f6>
 8017a66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017a68:	460a      	mov	r2, r1
 8017a6a:	3204      	adds	r2, #4
 8017a6c:	680e      	ldr	r6, [r1, #0]
 8017a6e:	920c      	str	r2, [sp, #48]	; 0x30
 8017a70:	2700      	movs	r7, #0
 8017a72:	f7ff baeb 	b.w	801704c <_vfprintf_r+0x23c>
 8017a76:	4693      	mov	fp, r2
 8017a78:	3301      	adds	r3, #1
 8017a7a:	44ab      	add	fp, r5
 8017a7c:	2b07      	cmp	r3, #7
 8017a7e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017a82:	9322      	str	r3, [sp, #136]	; 0x88
 8017a84:	6027      	str	r7, [r4, #0]
 8017a86:	6065      	str	r5, [r4, #4]
 8017a88:	f77f abde 	ble.w	8017248 <_vfprintf_r+0x438>
 8017a8c:	e6f3      	b.n	8017876 <_vfprintf_r+0xa66>
 8017a8e:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 8017a92:	f8cd c01c 	str.w	ip, [sp, #28]
 8017a96:	4630      	mov	r0, r6
 8017a98:	4639      	mov	r1, r7
 8017a9a:	220a      	movs	r2, #10
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	f7e9 f887 	bl	8000bb0 <__aeabi_uldivmod>
 8017aa2:	3230      	adds	r2, #48	; 0x30
 8017aa4:	4630      	mov	r0, r6
 8017aa6:	4639      	mov	r1, r7
 8017aa8:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8017aac:	2300      	movs	r3, #0
 8017aae:	220a      	movs	r2, #10
 8017ab0:	f7e9 f87e 	bl	8000bb0 <__aeabi_uldivmod>
 8017ab4:	4606      	mov	r6, r0
 8017ab6:	460f      	mov	r7, r1
 8017ab8:	ea56 0307 	orrs.w	r3, r6, r7
 8017abc:	d1eb      	bne.n	8017a96 <_vfprintf_r+0xc86>
 8017abe:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8017ac2:	e73b      	b.n	801793c <_vfprintf_r+0xb2c>
 8017ac4:	2b30      	cmp	r3, #48	; 0x30
 8017ac6:	f000 8219 	beq.w	8017efc <_vfprintf_r+0x10ec>
 8017aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017acc:	3b01      	subs	r3, #1
 8017ace:	461a      	mov	r2, r3
 8017ad0:	a82e      	add	r0, sp, #184	; 0xb8
 8017ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8017ad4:	1a82      	subs	r2, r0, r2
 8017ad6:	2330      	movs	r3, #48	; 0x30
 8017ad8:	920b      	str	r2, [sp, #44]	; 0x2c
 8017ada:	f801 3c01 	strb.w	r3, [r1, #-1]
 8017ade:	f7ff bae7 	b.w	80170b0 <_vfprintf_r+0x2a0>
 8017ae2:	4640      	mov	r0, r8
 8017ae4:	4649      	mov	r1, r9
 8017ae6:	aa21      	add	r2, sp, #132	; 0x84
 8017ae8:	f7fe fb48 	bl	801617c <__sprint_r>
 8017aec:	2800      	cmp	r0, #0
 8017aee:	f47f aa8f 	bne.w	8017010 <_vfprintf_r+0x200>
 8017af2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017af6:	ac2e      	add	r4, sp, #184	; 0xb8
 8017af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017afa:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017afe:	440a      	add	r2, r1
 8017b00:	4616      	mov	r6, r2
 8017b02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b04:	4293      	cmp	r3, r2
 8017b06:	db3e      	blt.n	8017b86 <_vfprintf_r+0xd76>
 8017b08:	9a06      	ldr	r2, [sp, #24]
 8017b0a:	07d5      	lsls	r5, r2, #31
 8017b0c:	d43b      	bmi.n	8017b86 <_vfprintf_r+0xd76>
 8017b0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b10:	ebc6 050a 	rsb	r5, r6, sl
 8017b14:	1ad3      	subs	r3, r2, r3
 8017b16:	429d      	cmp	r5, r3
 8017b18:	bfa8      	it	ge
 8017b1a:	461d      	movge	r5, r3
 8017b1c:	2d00      	cmp	r5, #0
 8017b1e:	462f      	mov	r7, r5
 8017b20:	dd0b      	ble.n	8017b3a <_vfprintf_r+0xd2a>
 8017b22:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017b24:	6026      	str	r6, [r4, #0]
 8017b26:	3201      	adds	r2, #1
 8017b28:	44ab      	add	fp, r5
 8017b2a:	2a07      	cmp	r2, #7
 8017b2c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017b30:	6065      	str	r5, [r4, #4]
 8017b32:	9222      	str	r2, [sp, #136]	; 0x88
 8017b34:	f300 825e 	bgt.w	8017ff4 <_vfprintf_r+0x11e4>
 8017b38:	3408      	adds	r4, #8
 8017b3a:	2f00      	cmp	r7, #0
 8017b3c:	bfac      	ite	ge
 8017b3e:	1bdd      	subge	r5, r3, r7
 8017b40:	461d      	movlt	r5, r3
 8017b42:	2d00      	cmp	r5, #0
 8017b44:	f77f ab81 	ble.w	801724a <_vfprintf_r+0x43a>
 8017b48:	2d10      	cmp	r5, #16
 8017b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017b4c:	4f41      	ldr	r7, [pc, #260]	; (8017c54 <_vfprintf_r+0xe44>)
 8017b4e:	dd93      	ble.n	8017a78 <_vfprintf_r+0xc68>
 8017b50:	2610      	movs	r6, #16
 8017b52:	465a      	mov	r2, fp
 8017b54:	e003      	b.n	8017b5e <_vfprintf_r+0xd4e>
 8017b56:	3408      	adds	r4, #8
 8017b58:	3d10      	subs	r5, #16
 8017b5a:	2d10      	cmp	r5, #16
 8017b5c:	dd8b      	ble.n	8017a76 <_vfprintf_r+0xc66>
 8017b5e:	3301      	adds	r3, #1
 8017b60:	3210      	adds	r2, #16
 8017b62:	2b07      	cmp	r3, #7
 8017b64:	9223      	str	r2, [sp, #140]	; 0x8c
 8017b66:	9322      	str	r3, [sp, #136]	; 0x88
 8017b68:	6027      	str	r7, [r4, #0]
 8017b6a:	6066      	str	r6, [r4, #4]
 8017b6c:	ddf3      	ble.n	8017b56 <_vfprintf_r+0xd46>
 8017b6e:	4640      	mov	r0, r8
 8017b70:	4649      	mov	r1, r9
 8017b72:	aa21      	add	r2, sp, #132	; 0x84
 8017b74:	f7fe fb02 	bl	801617c <__sprint_r>
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	f47f aa49 	bne.w	8017010 <_vfprintf_r+0x200>
 8017b7e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017b82:	ac2e      	add	r4, sp, #184	; 0xb8
 8017b84:	e7e8      	b.n	8017b58 <_vfprintf_r+0xd48>
 8017b86:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017b88:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017b8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017b8c:	6021      	str	r1, [r4, #0]
 8017b8e:	3201      	adds	r2, #1
 8017b90:	4483      	add	fp, r0
 8017b92:	2a07      	cmp	r2, #7
 8017b94:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017b98:	6060      	str	r0, [r4, #4]
 8017b9a:	9222      	str	r2, [sp, #136]	; 0x88
 8017b9c:	f300 820a 	bgt.w	8017fb4 <_vfprintf_r+0x11a4>
 8017ba0:	3408      	adds	r4, #8
 8017ba2:	e7b4      	b.n	8017b0e <_vfprintf_r+0xcfe>
 8017ba4:	9b06      	ldr	r3, [sp, #24]
 8017ba6:	07d8      	lsls	r0, r3, #31
 8017ba8:	f53f ae28 	bmi.w	80177fc <_vfprintf_r+0x9ec>
 8017bac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bae:	6023      	str	r3, [r4, #0]
 8017bb0:	3501      	adds	r5, #1
 8017bb2:	f10b 0601 	add.w	r6, fp, #1
 8017bb6:	2301      	movs	r3, #1
 8017bb8:	2d07      	cmp	r5, #7
 8017bba:	9623      	str	r6, [sp, #140]	; 0x8c
 8017bbc:	9522      	str	r5, [sp, #136]	; 0x88
 8017bbe:	6063      	str	r3, [r4, #4]
 8017bc0:	f77f ae4b 	ble.w	801785a <_vfprintf_r+0xa4a>
 8017bc4:	4640      	mov	r0, r8
 8017bc6:	4649      	mov	r1, r9
 8017bc8:	aa21      	add	r2, sp, #132	; 0x84
 8017bca:	f7fe fad7 	bl	801617c <__sprint_r>
 8017bce:	2800      	cmp	r0, #0
 8017bd0:	f47f aa1e 	bne.w	8017010 <_vfprintf_r+0x200>
 8017bd4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8017bd6:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8017bd8:	ac2e      	add	r4, sp, #184	; 0xb8
 8017bda:	e63f      	b.n	801785c <_vfprintf_r+0xa4c>
 8017bdc:	4640      	mov	r0, r8
 8017bde:	4649      	mov	r1, r9
 8017be0:	aa21      	add	r2, sp, #132	; 0x84
 8017be2:	f7fe facb 	bl	801617c <__sprint_r>
 8017be6:	2800      	cmp	r0, #0
 8017be8:	f47f aa12 	bne.w	8017010 <_vfprintf_r+0x200>
 8017bec:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8017bee:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8017bf0:	ac2e      	add	r4, sp, #184	; 0xb8
 8017bf2:	e610      	b.n	8017816 <_vfprintf_r+0xa06>
 8017bf4:	4640      	mov	r0, r8
 8017bf6:	4649      	mov	r1, r9
 8017bf8:	aa21      	add	r2, sp, #132	; 0x84
 8017bfa:	f7fe fabf 	bl	801617c <__sprint_r>
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	f47f aa06 	bne.w	8017010 <_vfprintf_r+0x200>
 8017c04:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8017c06:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8017c08:	ac2e      	add	r4, sp, #184	; 0xb8
 8017c0a:	e610      	b.n	801782e <_vfprintf_r+0xa1e>
 8017c0c:	3501      	adds	r5, #1
 8017c0e:	4456      	add	r6, sl
 8017c10:	2d07      	cmp	r5, #7
 8017c12:	9623      	str	r6, [sp, #140]	; 0x8c
 8017c14:	9522      	str	r5, [sp, #136]	; 0x88
 8017c16:	e884 0480 	stmia.w	r4, {r7, sl}
 8017c1a:	f77f ae1e 	ble.w	801785a <_vfprintf_r+0xa4a>
 8017c1e:	e7d1      	b.n	8017bc4 <_vfprintf_r+0xdb4>
 8017c20:	4640      	mov	r0, r8
 8017c22:	4649      	mov	r1, r9
 8017c24:	aa21      	add	r2, sp, #132	; 0x84
 8017c26:	f7fe faa9 	bl	801617c <__sprint_r>
 8017c2a:	2800      	cmp	r0, #0
 8017c2c:	f47f a9f0 	bne.w	8017010 <_vfprintf_r+0x200>
 8017c30:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017c34:	ac2e      	add	r4, sp, #184	; 0xb8
 8017c36:	f7ff babc 	b.w	80171b2 <_vfprintf_r+0x3a2>
 8017c3a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8017c3e:	4276      	negs	r6, r6
 8017c40:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8017c44:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8017c48:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8017c4c:	2301      	movs	r3, #1
 8017c4e:	f7ff ba03 	b.w	8017058 <_vfprintf_r+0x248>
 8017c52:	bf00      	nop
 8017c54:	08030ae8 	.word	0x08030ae8
 8017c58:	f003 f820 	bl	801ac9c <__fpclassifyd>
 8017c5c:	2800      	cmp	r0, #0
 8017c5e:	f000 810d 	beq.w	8017e7c <_vfprintf_r+0x106c>
 8017c62:	f025 0320 	bic.w	r3, r5, #32
 8017c66:	f1b6 3fff 	cmp.w	r6, #4294967295
 8017c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c6c:	f000 8258 	beq.w	8018120 <_vfprintf_r+0x1310>
 8017c70:	2b47      	cmp	r3, #71	; 0x47
 8017c72:	d104      	bne.n	8017c7e <_vfprintf_r+0xe6e>
 8017c74:	2e00      	cmp	r6, #0
 8017c76:	bf14      	ite	ne
 8017c78:	46b3      	movne	fp, r6
 8017c7a:	f04f 0b01 	moveq.w	fp, #1
 8017c7e:	9b06      	ldr	r3, [sp, #24]
 8017c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017c88:	f1b3 0a00 	subs.w	sl, r3, #0
 8017c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017c8e:	9307      	str	r3, [sp, #28]
 8017c90:	bfbb      	ittet	lt
 8017c92:	4653      	movlt	r3, sl
 8017c94:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
 8017c98:	2300      	movge	r3, #0
 8017c9a:	232d      	movlt	r3, #45	; 0x2d
 8017c9c:	2d66      	cmp	r5, #102	; 0x66
 8017c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8017ca0:	f000 8154 	beq.w	8017f4c <_vfprintf_r+0x113c>
 8017ca4:	2d46      	cmp	r5, #70	; 0x46
 8017ca6:	f000 8151 	beq.w	8017f4c <_vfprintf_r+0x113c>
 8017caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cac:	9a07      	ldr	r2, [sp, #28]
 8017cae:	2b45      	cmp	r3, #69	; 0x45
 8017cb0:	bf0c      	ite	eq
 8017cb2:	f10b 0701 	addeq.w	r7, fp, #1
 8017cb6:	465f      	movne	r7, fp
 8017cb8:	2002      	movs	r0, #2
 8017cba:	a91b      	add	r1, sp, #108	; 0x6c
 8017cbc:	e88d 0081 	stmia.w	sp, {r0, r7}
 8017cc0:	9102      	str	r1, [sp, #8]
 8017cc2:	a81c      	add	r0, sp, #112	; 0x70
 8017cc4:	a91f      	add	r1, sp, #124	; 0x7c
 8017cc6:	9003      	str	r0, [sp, #12]
 8017cc8:	4653      	mov	r3, sl
 8017cca:	9104      	str	r1, [sp, #16]
 8017ccc:	4640      	mov	r0, r8
 8017cce:	f000 fbcf 	bl	8018470 <_dtoa_r>
 8017cd2:	2d67      	cmp	r5, #103	; 0x67
 8017cd4:	900e      	str	r0, [sp, #56]	; 0x38
 8017cd6:	d002      	beq.n	8017cde <_vfprintf_r+0xece>
 8017cd8:	2d47      	cmp	r5, #71	; 0x47
 8017cda:	f040 8147 	bne.w	8017f6c <_vfprintf_r+0x115c>
 8017cde:	9b06      	ldr	r3, [sp, #24]
 8017ce0:	07db      	lsls	r3, r3, #31
 8017ce2:	f140 823a 	bpl.w	801815a <_vfprintf_r+0x134a>
 8017ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ce8:	19de      	adds	r6, r3, r7
 8017cea:	9807      	ldr	r0, [sp, #28]
 8017cec:	4651      	mov	r1, sl
 8017cee:	2200      	movs	r2, #0
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	f7e8 ff03 	bl	8000afc <__aeabi_dcmpeq>
 8017cf6:	2800      	cmp	r0, #0
 8017cf8:	f040 81a3 	bne.w	8018042 <_vfprintf_r+0x1232>
 8017cfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017cfe:	429e      	cmp	r6, r3
 8017d00:	d906      	bls.n	8017d10 <_vfprintf_r+0xf00>
 8017d02:	2130      	movs	r1, #48	; 0x30
 8017d04:	1c5a      	adds	r2, r3, #1
 8017d06:	921f      	str	r2, [sp, #124]	; 0x7c
 8017d08:	7019      	strb	r1, [r3, #0]
 8017d0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017d0c:	429e      	cmp	r6, r3
 8017d0e:	d8f9      	bhi.n	8017d04 <_vfprintf_r+0xef4>
 8017d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017d12:	1a9b      	subs	r3, r3, r2
 8017d14:	9311      	str	r3, [sp, #68]	; 0x44
 8017d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d18:	2b47      	cmp	r3, #71	; 0x47
 8017d1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017d1c:	f000 8179 	beq.w	8018012 <_vfprintf_r+0x1202>
 8017d20:	2d65      	cmp	r5, #101	; 0x65
 8017d22:	f340 819c 	ble.w	801805e <_vfprintf_r+0x124e>
 8017d26:	2d66      	cmp	r5, #102	; 0x66
 8017d28:	9310      	str	r3, [sp, #64]	; 0x40
 8017d2a:	f000 8209 	beq.w	8018140 <_vfprintf_r+0x1330>
 8017d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017d32:	4293      	cmp	r3, r2
 8017d34:	f300 81f7 	bgt.w	8018126 <_vfprintf_r+0x1316>
 8017d38:	9b06      	ldr	r3, [sp, #24]
 8017d3a:	07d9      	lsls	r1, r3, #31
 8017d3c:	f100 8217 	bmi.w	801816e <_vfprintf_r+0x135e>
 8017d40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017d44:	920b      	str	r2, [sp, #44]	; 0x2c
 8017d46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d48:	2a00      	cmp	r2, #0
 8017d4a:	f040 8169 	bne.w	8018020 <_vfprintf_r+0x1210>
 8017d4e:	9307      	str	r3, [sp, #28]
 8017d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d52:	9306      	str	r3, [sp, #24]
 8017d54:	920f      	str	r2, [sp, #60]	; 0x3c
 8017d56:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8017d5a:	f7ff b9b1 	b.w	80170c0 <_vfprintf_r+0x2b0>
 8017d5e:	9b06      	ldr	r3, [sp, #24]
 8017d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017d66:	4613      	mov	r3, r2
 8017d68:	f43f ac84 	beq.w	8017674 <_vfprintf_r+0x864>
 8017d6c:	8816      	ldrh	r6, [r2, #0]
 8017d6e:	3204      	adds	r2, #4
 8017d70:	2700      	movs	r7, #0
 8017d72:	2301      	movs	r3, #1
 8017d74:	920c      	str	r2, [sp, #48]	; 0x30
 8017d76:	f7ff b969 	b.w	801704c <_vfprintf_r+0x23c>
 8017d7a:	9b06      	ldr	r3, [sp, #24]
 8017d7c:	06db      	lsls	r3, r3, #27
 8017d7e:	d40b      	bmi.n	8017d98 <_vfprintf_r+0xf88>
 8017d80:	9b06      	ldr	r3, [sp, #24]
 8017d82:	065f      	lsls	r7, r3, #25
 8017d84:	d508      	bpl.n	8017d98 <_vfprintf_r+0xf88>
 8017d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d88:	6813      	ldr	r3, [r2, #0]
 8017d8a:	3204      	adds	r2, #4
 8017d8c:	920c      	str	r2, [sp, #48]	; 0x30
 8017d8e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8017d92:	801a      	strh	r2, [r3, #0]
 8017d94:	f7ff b87d 	b.w	8016e92 <_vfprintf_r+0x82>
 8017d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d9a:	6813      	ldr	r3, [r2, #0]
 8017d9c:	3204      	adds	r2, #4
 8017d9e:	920c      	str	r2, [sp, #48]	; 0x30
 8017da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017da2:	601a      	str	r2, [r3, #0]
 8017da4:	f7ff b875 	b.w	8016e92 <_vfprintf_r+0x82>
 8017da8:	9b06      	ldr	r3, [sp, #24]
 8017daa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017dac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017db0:	4613      	mov	r3, r2
 8017db2:	d076      	beq.n	8017ea2 <_vfprintf_r+0x1092>
 8017db4:	3304      	adds	r3, #4
 8017db6:	8816      	ldrh	r6, [r2, #0]
 8017db8:	930c      	str	r3, [sp, #48]	; 0x30
 8017dba:	2700      	movs	r7, #0
 8017dbc:	f7ff bae4 	b.w	8017388 <_vfprintf_r+0x578>
 8017dc0:	4693      	mov	fp, r2
 8017dc2:	3301      	adds	r3, #1
 8017dc4:	44ab      	add	fp, r5
 8017dc6:	2b07      	cmp	r3, #7
 8017dc8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017dcc:	9322      	str	r3, [sp, #136]	; 0x88
 8017dce:	6027      	str	r7, [r4, #0]
 8017dd0:	6065      	str	r5, [r4, #4]
 8017dd2:	f73f ae86 	bgt.w	8017ae2 <_vfprintf_r+0xcd2>
 8017dd6:	3408      	adds	r4, #8
 8017dd8:	e68e      	b.n	8017af8 <_vfprintf_r+0xce8>
 8017dda:	4640      	mov	r0, r8
 8017ddc:	4649      	mov	r1, r9
 8017dde:	aa21      	add	r2, sp, #132	; 0x84
 8017de0:	f7fe f9cc 	bl	801617c <__sprint_r>
 8017de4:	2800      	cmp	r0, #0
 8017de6:	f47f a913 	bne.w	8017010 <_vfprintf_r+0x200>
 8017dea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017dee:	ac2e      	add	r4, sp, #184	; 0xb8
 8017df0:	e48d      	b.n	801770e <_vfprintf_r+0x8fe>
 8017df2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017df4:	4ab0      	ldr	r2, [pc, #704]	; (80180b8 <_vfprintf_r+0x12a8>)
 8017df6:	6022      	str	r2, [r4, #0]
 8017df8:	3301      	adds	r3, #1
 8017dfa:	f10b 0b01 	add.w	fp, fp, #1
 8017dfe:	2201      	movs	r2, #1
 8017e00:	2b07      	cmp	r3, #7
 8017e02:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017e06:	9322      	str	r3, [sp, #136]	; 0x88
 8017e08:	6062      	str	r2, [r4, #4]
 8017e0a:	dc50      	bgt.n	8017eae <_vfprintf_r+0x109e>
 8017e0c:	3408      	adds	r4, #8
 8017e0e:	b92d      	cbnz	r5, 8017e1c <_vfprintf_r+0x100c>
 8017e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017e12:	b91b      	cbnz	r3, 8017e1c <_vfprintf_r+0x100c>
 8017e14:	9b06      	ldr	r3, [sp, #24]
 8017e16:	07de      	lsls	r6, r3, #31
 8017e18:	f57f aa17 	bpl.w	801724a <_vfprintf_r+0x43a>
 8017e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017e1e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017e20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017e22:	6022      	str	r2, [r4, #0]
 8017e24:	3301      	adds	r3, #1
 8017e26:	eb0b 0201 	add.w	r2, fp, r1
 8017e2a:	2b07      	cmp	r3, #7
 8017e2c:	9223      	str	r2, [sp, #140]	; 0x8c
 8017e2e:	6061      	str	r1, [r4, #4]
 8017e30:	9322      	str	r3, [sp, #136]	; 0x88
 8017e32:	f300 8168 	bgt.w	8018106 <_vfprintf_r+0x12f6>
 8017e36:	3408      	adds	r4, #8
 8017e38:	426d      	negs	r5, r5
 8017e3a:	2d00      	cmp	r5, #0
 8017e3c:	dd6f      	ble.n	8017f1e <_vfprintf_r+0x110e>
 8017e3e:	2d10      	cmp	r5, #16
 8017e40:	4f9e      	ldr	r7, [pc, #632]	; (80180bc <_vfprintf_r+0x12ac>)
 8017e42:	bfc8      	it	gt
 8017e44:	2610      	movgt	r6, #16
 8017e46:	dc05      	bgt.n	8017e54 <_vfprintf_r+0x1044>
 8017e48:	e0aa      	b.n	8017fa0 <_vfprintf_r+0x1190>
 8017e4a:	3408      	adds	r4, #8
 8017e4c:	3d10      	subs	r5, #16
 8017e4e:	2d10      	cmp	r5, #16
 8017e50:	f340 80a6 	ble.w	8017fa0 <_vfprintf_r+0x1190>
 8017e54:	3301      	adds	r3, #1
 8017e56:	3210      	adds	r2, #16
 8017e58:	2b07      	cmp	r3, #7
 8017e5a:	9223      	str	r2, [sp, #140]	; 0x8c
 8017e5c:	9322      	str	r3, [sp, #136]	; 0x88
 8017e5e:	6027      	str	r7, [r4, #0]
 8017e60:	6066      	str	r6, [r4, #4]
 8017e62:	ddf2      	ble.n	8017e4a <_vfprintf_r+0x103a>
 8017e64:	4640      	mov	r0, r8
 8017e66:	4649      	mov	r1, r9
 8017e68:	aa21      	add	r2, sp, #132	; 0x84
 8017e6a:	f7fe f987 	bl	801617c <__sprint_r>
 8017e6e:	2800      	cmp	r0, #0
 8017e70:	f47f a8ce 	bne.w	8017010 <_vfprintf_r+0x200>
 8017e74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017e76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017e78:	ac2e      	add	r4, sp, #184	; 0xb8
 8017e7a:	e7e7      	b.n	8017e4c <_vfprintf_r+0x103c>
 8017e7c:	9e06      	ldr	r6, [sp, #24]
 8017e7e:	4a90      	ldr	r2, [pc, #576]	; (80180c0 <_vfprintf_r+0x12b0>)
 8017e80:	4b90      	ldr	r3, [pc, #576]	; (80180c4 <_vfprintf_r+0x12b4>)
 8017e82:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8017e86:	900f      	str	r0, [sp, #60]	; 0x3c
 8017e88:	2103      	movs	r1, #3
 8017e8a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8017e8e:	2d47      	cmp	r5, #71	; 0x47
 8017e90:	bfd8      	it	le
 8017e92:	461a      	movle	r2, r3
 8017e94:	9107      	str	r1, [sp, #28]
 8017e96:	9606      	str	r6, [sp, #24]
 8017e98:	9010      	str	r0, [sp, #64]	; 0x40
 8017e9a:	920e      	str	r2, [sp, #56]	; 0x38
 8017e9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8017e9e:	f7ff b90f 	b.w	80170c0 <_vfprintf_r+0x2b0>
 8017ea2:	3304      	adds	r3, #4
 8017ea4:	6816      	ldr	r6, [r2, #0]
 8017ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8017ea8:	2700      	movs	r7, #0
 8017eaa:	f7ff ba6d 	b.w	8017388 <_vfprintf_r+0x578>
 8017eae:	4640      	mov	r0, r8
 8017eb0:	4649      	mov	r1, r9
 8017eb2:	aa21      	add	r2, sp, #132	; 0x84
 8017eb4:	f7fe f962 	bl	801617c <__sprint_r>
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	f47f a8a9 	bne.w	8017010 <_vfprintf_r+0x200>
 8017ebe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017ec0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017ec4:	ac2e      	add	r4, sp, #184	; 0xb8
 8017ec6:	e7a2      	b.n	8017e0e <_vfprintf_r+0xffe>
 8017ec8:	f041 0120 	orr.w	r1, r1, #32
 8017ecc:	9106      	str	r1, [sp, #24]
 8017ece:	785d      	ldrb	r5, [r3, #1]
 8017ed0:	1c59      	adds	r1, r3, #1
 8017ed2:	f7ff b80e 	b.w	8016ef2 <_vfprintf_r+0xe2>
 8017ed6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017ed8:	910c      	str	r1, [sp, #48]	; 0x30
 8017eda:	4240      	negs	r0, r0
 8017edc:	900a      	str	r0, [sp, #40]	; 0x28
 8017ede:	4619      	mov	r1, r3
 8017ee0:	f7ff ba02 	b.w	80172e8 <_vfprintf_r+0x4d8>
 8017ee4:	4640      	mov	r0, r8
 8017ee6:	4649      	mov	r1, r9
 8017ee8:	aa21      	add	r2, sp, #132	; 0x84
 8017eea:	f7fe f947 	bl	801617c <__sprint_r>
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	f47f a88e 	bne.w	8017010 <_vfprintf_r+0x200>
 8017ef4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017ef8:	ac2e      	add	r4, sp, #184	; 0xb8
 8017efa:	e41e      	b.n	801773a <_vfprintf_r+0x92a>
 8017efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017efe:	ab2e      	add	r3, sp, #184	; 0xb8
 8017f00:	1a9b      	subs	r3, r3, r2
 8017f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8017f04:	f7ff b8d4 	b.w	80170b0 <_vfprintf_r+0x2a0>
 8017f08:	4640      	mov	r0, r8
 8017f0a:	4649      	mov	r1, r9
 8017f0c:	aa21      	add	r2, sp, #132	; 0x84
 8017f0e:	f7fe f935 	bl	801617c <__sprint_r>
 8017f12:	2800      	cmp	r0, #0
 8017f14:	f47f a87c 	bne.w	8017010 <_vfprintf_r+0x200>
 8017f18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017f1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017f1c:	ac2e      	add	r4, sp, #184	; 0xb8
 8017f1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017f20:	6060      	str	r0, [r4, #4]
 8017f22:	3301      	adds	r3, #1
 8017f24:	eb02 0b00 	add.w	fp, r2, r0
 8017f28:	2b07      	cmp	r3, #7
 8017f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017f2c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017f30:	9322      	str	r3, [sp, #136]	; 0x88
 8017f32:	6022      	str	r2, [r4, #0]
 8017f34:	f77f a988 	ble.w	8017248 <_vfprintf_r+0x438>
 8017f38:	e49d      	b.n	8017876 <_vfprintf_r+0xa66>
 8017f3a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8017f3e:	f7fe f8b3 	bl	80160a8 <strlen>
 8017f42:	970c      	str	r7, [sp, #48]	; 0x30
 8017f44:	900b      	str	r0, [sp, #44]	; 0x2c
 8017f46:	4603      	mov	r3, r0
 8017f48:	f7ff ba03 	b.w	8017352 <_vfprintf_r+0x542>
 8017f4c:	2003      	movs	r0, #3
 8017f4e:	a91b      	add	r1, sp, #108	; 0x6c
 8017f50:	e88d 0801 	stmia.w	sp, {r0, fp}
 8017f54:	9102      	str	r1, [sp, #8]
 8017f56:	a81c      	add	r0, sp, #112	; 0x70
 8017f58:	a91f      	add	r1, sp, #124	; 0x7c
 8017f5a:	9003      	str	r0, [sp, #12]
 8017f5c:	9a07      	ldr	r2, [sp, #28]
 8017f5e:	9104      	str	r1, [sp, #16]
 8017f60:	4653      	mov	r3, sl
 8017f62:	4640      	mov	r0, r8
 8017f64:	f000 fa84 	bl	8018470 <_dtoa_r>
 8017f68:	465f      	mov	r7, fp
 8017f6a:	900e      	str	r0, [sp, #56]	; 0x38
 8017f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f6e:	19de      	adds	r6, r3, r7
 8017f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f72:	2b46      	cmp	r3, #70	; 0x46
 8017f74:	f47f aeb9 	bne.w	8017cea <_vfprintf_r+0xeda>
 8017f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f7a:	781b      	ldrb	r3, [r3, #0]
 8017f7c:	2b30      	cmp	r3, #48	; 0x30
 8017f7e:	f000 80fc 	beq.w	801817a <_vfprintf_r+0x136a>
 8017f82:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8017f84:	443e      	add	r6, r7
 8017f86:	e6b0      	b.n	8017cea <_vfprintf_r+0xeda>
 8017f88:	4640      	mov	r0, r8
 8017f8a:	4649      	mov	r1, r9
 8017f8c:	aa21      	add	r2, sp, #132	; 0x84
 8017f8e:	f7fe f8f5 	bl	801617c <__sprint_r>
 8017f92:	2800      	cmp	r0, #0
 8017f94:	f47f a83c 	bne.w	8017010 <_vfprintf_r+0x200>
 8017f98:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017f9c:	ac2e      	add	r4, sp, #184	; 0xb8
 8017f9e:	e4f4      	b.n	801798a <_vfprintf_r+0xb7a>
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	442a      	add	r2, r5
 8017fa4:	2b07      	cmp	r3, #7
 8017fa6:	9223      	str	r2, [sp, #140]	; 0x8c
 8017fa8:	9322      	str	r3, [sp, #136]	; 0x88
 8017faa:	6027      	str	r7, [r4, #0]
 8017fac:	6065      	str	r5, [r4, #4]
 8017fae:	dcab      	bgt.n	8017f08 <_vfprintf_r+0x10f8>
 8017fb0:	3408      	adds	r4, #8
 8017fb2:	e7b4      	b.n	8017f1e <_vfprintf_r+0x110e>
 8017fb4:	4640      	mov	r0, r8
 8017fb6:	4649      	mov	r1, r9
 8017fb8:	aa21      	add	r2, sp, #132	; 0x84
 8017fba:	f7fe f8df 	bl	801617c <__sprint_r>
 8017fbe:	2800      	cmp	r0, #0
 8017fc0:	f47f a826 	bne.w	8017010 <_vfprintf_r+0x200>
 8017fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017fc6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017fca:	ac2e      	add	r4, sp, #184	; 0xb8
 8017fcc:	e59f      	b.n	8017b0e <_vfprintf_r+0xcfe>
 8017fce:	2e06      	cmp	r6, #6
 8017fd0:	4633      	mov	r3, r6
 8017fd2:	bf28      	it	cs
 8017fd4:	2306      	movcs	r3, #6
 8017fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017fdc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8017fe0:	9307      	str	r3, [sp, #28]
 8017fe2:	4b39      	ldr	r3, [pc, #228]	; (80180c8 <_vfprintf_r+0x12b8>)
 8017fe4:	970c      	str	r7, [sp, #48]	; 0x30
 8017fe6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8017fea:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8017fee:	930e      	str	r3, [sp, #56]	; 0x38
 8017ff0:	f7ff b866 	b.w	80170c0 <_vfprintf_r+0x2b0>
 8017ff4:	4640      	mov	r0, r8
 8017ff6:	4649      	mov	r1, r9
 8017ff8:	aa21      	add	r2, sp, #132	; 0x84
 8017ffa:	f7fe f8bf 	bl	801617c <__sprint_r>
 8017ffe:	2800      	cmp	r0, #0
 8018000:	f47f a806 	bne.w	8017010 <_vfprintf_r+0x200>
 8018004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018006:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018008:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801800c:	1ad3      	subs	r3, r2, r3
 801800e:	ac2e      	add	r4, sp, #184	; 0xb8
 8018010:	e593      	b.n	8017b3a <_vfprintf_r+0xd2a>
 8018012:	1cdf      	adds	r7, r3, #3
 8018014:	db22      	blt.n	801805c <_vfprintf_r+0x124c>
 8018016:	459b      	cmp	fp, r3
 8018018:	db20      	blt.n	801805c <_vfprintf_r+0x124c>
 801801a:	9310      	str	r3, [sp, #64]	; 0x40
 801801c:	2567      	movs	r5, #103	; 0x67
 801801e:	e686      	b.n	8017d2e <_vfprintf_r+0xf1e>
 8018020:	9307      	str	r3, [sp, #28]
 8018022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018024:	9306      	str	r3, [sp, #24]
 8018026:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 801802a:	2300      	movs	r3, #0
 801802c:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8018030:	930f      	str	r3, [sp, #60]	; 0x3c
 8018032:	f7ff b848 	b.w	80170c6 <_vfprintf_r+0x2b6>
 8018036:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 801803a:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 801803e:	f7ff ba0e 	b.w	801745e <_vfprintf_r+0x64e>
 8018042:	4633      	mov	r3, r6
 8018044:	e664      	b.n	8017d10 <_vfprintf_r+0xf00>
 8018046:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801804a:	900f      	str	r0, [sp, #60]	; 0x3c
 801804c:	970c      	str	r7, [sp, #48]	; 0x30
 801804e:	9010      	str	r0, [sp, #64]	; 0x40
 8018050:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8018054:	9307      	str	r3, [sp, #28]
 8018056:	960b      	str	r6, [sp, #44]	; 0x2c
 8018058:	f7ff b832 	b.w	80170c0 <_vfprintf_r+0x2b0>
 801805c:	3d02      	subs	r5, #2
 801805e:	3b01      	subs	r3, #1
 8018060:	2b00      	cmp	r3, #0
 8018062:	931b      	str	r3, [sp, #108]	; 0x6c
 8018064:	bfba      	itte	lt
 8018066:	425b      	neglt	r3, r3
 8018068:	222d      	movlt	r2, #45	; 0x2d
 801806a:	222b      	movge	r2, #43	; 0x2b
 801806c:	2b09      	cmp	r3, #9
 801806e:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8018072:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8018076:	dd72      	ble.n	801815e <_vfprintf_r+0x134e>
 8018078:	f10d 0683 	add.w	r6, sp, #131	; 0x83
 801807c:	4630      	mov	r0, r6
 801807e:	4a13      	ldr	r2, [pc, #76]	; (80180cc <_vfprintf_r+0x12bc>)
 8018080:	fb82 2103 	smull	r2, r1, r2, r3
 8018084:	17da      	asrs	r2, r3, #31
 8018086:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 801808a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801808e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8018092:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018096:	2a09      	cmp	r2, #9
 8018098:	4613      	mov	r3, r2
 801809a:	f800 1d01 	strb.w	r1, [r0, #-1]!
 801809e:	dcee      	bgt.n	801807e <_vfprintf_r+0x126e>
 80180a0:	4602      	mov	r2, r0
 80180a2:	3330      	adds	r3, #48	; 0x30
 80180a4:	b2d9      	uxtb	r1, r3
 80180a6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80180aa:	4296      	cmp	r6, r2
 80180ac:	f240 80a0 	bls.w	80181f0 <_vfprintf_r+0x13e0>
 80180b0:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 80180b4:	4603      	mov	r3, r0
 80180b6:	e00d      	b.n	80180d4 <_vfprintf_r+0x12c4>
 80180b8:	08030b08 	.word	0x08030b08
 80180bc:	08030ae8 	.word	0x08030ae8
 80180c0:	08030b04 	.word	0x08030b04
 80180c4:	08030b00 	.word	0x08030b00
 80180c8:	08030ae0 	.word	0x08030ae0
 80180cc:	66666667 	.word	0x66666667
 80180d0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80180d4:	f802 1b01 	strb.w	r1, [r2], #1
 80180d8:	42b3      	cmp	r3, r6
 80180da:	d1f9      	bne.n	80180d0 <_vfprintf_r+0x12c0>
 80180dc:	ab21      	add	r3, sp, #132	; 0x84
 80180de:	1a1b      	subs	r3, r3, r0
 80180e0:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 80180e4:	4413      	add	r3, r2
 80180e6:	aa1d      	add	r2, sp, #116	; 0x74
 80180e8:	1a9b      	subs	r3, r3, r2
 80180ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80180ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80180ee:	2a01      	cmp	r2, #1
 80180f0:	4413      	add	r3, r2
 80180f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80180f4:	dd6d      	ble.n	80181d2 <_vfprintf_r+0x13c2>
 80180f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180f8:	2200      	movs	r2, #0
 80180fa:	3301      	adds	r3, #1
 80180fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80180fe:	9210      	str	r2, [sp, #64]	; 0x40
 8018100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018104:	e61f      	b.n	8017d46 <_vfprintf_r+0xf36>
 8018106:	4640      	mov	r0, r8
 8018108:	4649      	mov	r1, r9
 801810a:	aa21      	add	r2, sp, #132	; 0x84
 801810c:	f7fe f836 	bl	801617c <__sprint_r>
 8018110:	2800      	cmp	r0, #0
 8018112:	f47e af7d 	bne.w	8017010 <_vfprintf_r+0x200>
 8018116:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8018118:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801811a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801811c:	ac2e      	add	r4, sp, #184	; 0xb8
 801811e:	e68b      	b.n	8017e38 <_vfprintf_r+0x1028>
 8018120:	f04f 0b06 	mov.w	fp, #6
 8018124:	e5ab      	b.n	8017c7e <_vfprintf_r+0xe6e>
 8018126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018128:	2b00      	cmp	r3, #0
 801812a:	bfd8      	it	le
 801812c:	f1c3 0602 	rsble	r6, r3, #2
 8018130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018132:	bfc8      	it	gt
 8018134:	2601      	movgt	r6, #1
 8018136:	18f3      	adds	r3, r6, r3
 8018138:	930b      	str	r3, [sp, #44]	; 0x2c
 801813a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801813e:	e602      	b.n	8017d46 <_vfprintf_r+0xf36>
 8018140:	2b00      	cmp	r3, #0
 8018142:	dd30      	ble.n	80181a6 <_vfprintf_r+0x1396>
 8018144:	f1bb 0f00 	cmp.w	fp, #0
 8018148:	d125      	bne.n	8018196 <_vfprintf_r+0x1386>
 801814a:	9b06      	ldr	r3, [sp, #24]
 801814c:	07de      	lsls	r6, r3, #31
 801814e:	d422      	bmi.n	8018196 <_vfprintf_r+0x1386>
 8018150:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018152:	920b      	str	r2, [sp, #44]	; 0x2c
 8018154:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018158:	e5f5      	b.n	8017d46 <_vfprintf_r+0xf36>
 801815a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801815c:	e5d8      	b.n	8017d10 <_vfprintf_r+0xf00>
 801815e:	3330      	adds	r3, #48	; 0x30
 8018160:	2230      	movs	r2, #48	; 0x30
 8018162:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8018166:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 801816a:	ab1e      	add	r3, sp, #120	; 0x78
 801816c:	e7bb      	b.n	80180e6 <_vfprintf_r+0x12d6>
 801816e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018170:	3301      	adds	r3, #1
 8018172:	930b      	str	r3, [sp, #44]	; 0x2c
 8018174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018178:	e5e5      	b.n	8017d46 <_vfprintf_r+0xf36>
 801817a:	9807      	ldr	r0, [sp, #28]
 801817c:	4651      	mov	r1, sl
 801817e:	2200      	movs	r2, #0
 8018180:	2300      	movs	r3, #0
 8018182:	f7e8 fcbb 	bl	8000afc <__aeabi_dcmpeq>
 8018186:	2800      	cmp	r0, #0
 8018188:	f47f aefb 	bne.w	8017f82 <_vfprintf_r+0x1172>
 801818c:	f1c7 0701 	rsb	r7, r7, #1
 8018190:	971b      	str	r7, [sp, #108]	; 0x6c
 8018192:	443e      	add	r6, r7
 8018194:	e5a9      	b.n	8017cea <_vfprintf_r+0xeda>
 8018196:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018198:	f10b 0601 	add.w	r6, fp, #1
 801819c:	4433      	add	r3, r6
 801819e:	930b      	str	r3, [sp, #44]	; 0x2c
 80181a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80181a4:	e5cf      	b.n	8017d46 <_vfprintf_r+0xf36>
 80181a6:	f1bb 0f00 	cmp.w	fp, #0
 80181aa:	d11b      	bne.n	80181e4 <_vfprintf_r+0x13d4>
 80181ac:	9b06      	ldr	r3, [sp, #24]
 80181ae:	07d8      	lsls	r0, r3, #31
 80181b0:	d418      	bmi.n	80181e4 <_vfprintf_r+0x13d4>
 80181b2:	2301      	movs	r3, #1
 80181b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80181b6:	e5c6      	b.n	8017d46 <_vfprintf_r+0xf36>
 80181b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80181ba:	682e      	ldr	r6, [r5, #0]
 80181bc:	4628      	mov	r0, r5
 80181be:	3004      	adds	r0, #4
 80181c0:	2e00      	cmp	r6, #0
 80181c2:	785d      	ldrb	r5, [r3, #1]
 80181c4:	900c      	str	r0, [sp, #48]	; 0x30
 80181c6:	f6be ae94 	bge.w	8016ef2 <_vfprintf_r+0xe2>
 80181ca:	f04f 36ff 	mov.w	r6, #4294967295
 80181ce:	f7fe be90 	b.w	8016ef2 <_vfprintf_r+0xe2>
 80181d2:	9b06      	ldr	r3, [sp, #24]
 80181d4:	f013 0301 	ands.w	r3, r3, #1
 80181d8:	d18d      	bne.n	80180f6 <_vfprintf_r+0x12e6>
 80181da:	9310      	str	r3, [sp, #64]	; 0x40
 80181dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80181e2:	e5b0      	b.n	8017d46 <_vfprintf_r+0xf36>
 80181e4:	f10b 0302 	add.w	r3, fp, #2
 80181e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80181ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80181ee:	e5aa      	b.n	8017d46 <_vfprintf_r+0xf36>
 80181f0:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80181f4:	e777      	b.n	80180e6 <_vfprintf_r+0x12d6>
 80181f6:	bf00      	nop

080181f8 <__sbprintf>:
 80181f8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80181fc:	460c      	mov	r4, r1
 80181fe:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8018202:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8018206:	69e7      	ldr	r7, [r4, #28]
 8018208:	6e49      	ldr	r1, [r1, #100]	; 0x64
 801820a:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 801820e:	9119      	str	r1, [sp, #100]	; 0x64
 8018210:	ad1a      	add	r5, sp, #104	; 0x68
 8018212:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8018216:	f02e 0e02 	bic.w	lr, lr, #2
 801821a:	f04f 0c00 	mov.w	ip, #0
 801821e:	9707      	str	r7, [sp, #28]
 8018220:	4669      	mov	r1, sp
 8018222:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8018224:	9500      	str	r5, [sp, #0]
 8018226:	9504      	str	r5, [sp, #16]
 8018228:	9602      	str	r6, [sp, #8]
 801822a:	9605      	str	r6, [sp, #20]
 801822c:	f8ad e00c 	strh.w	lr, [sp, #12]
 8018230:	f8ad 900e 	strh.w	r9, [sp, #14]
 8018234:	9709      	str	r7, [sp, #36]	; 0x24
 8018236:	f8cd c018 	str.w	ip, [sp, #24]
 801823a:	4606      	mov	r6, r0
 801823c:	f7fe fde8 	bl	8016e10 <_vfprintf_r>
 8018240:	1e05      	subs	r5, r0, #0
 8018242:	db07      	blt.n	8018254 <__sbprintf+0x5c>
 8018244:	4630      	mov	r0, r6
 8018246:	4669      	mov	r1, sp
 8018248:	f001 f908 	bl	801945c <_fflush_r>
 801824c:	2800      	cmp	r0, #0
 801824e:	bf18      	it	ne
 8018250:	f04f 35ff 	movne.w	r5, #4294967295
 8018254:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018258:	065b      	lsls	r3, r3, #25
 801825a:	d503      	bpl.n	8018264 <__sbprintf+0x6c>
 801825c:	89a3      	ldrh	r3, [r4, #12]
 801825e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018262:	81a3      	strh	r3, [r4, #12]
 8018264:	4628      	mov	r0, r5
 8018266:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 801826a:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801826e:	bf00      	nop

08018270 <__swsetup_r>:
 8018270:	b538      	push	{r3, r4, r5, lr}
 8018272:	4b2f      	ldr	r3, [pc, #188]	; (8018330 <__swsetup_r+0xc0>)
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	4605      	mov	r5, r0
 8018278:	460c      	mov	r4, r1
 801827a:	b113      	cbz	r3, 8018282 <__swsetup_r+0x12>
 801827c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801827e:	2a00      	cmp	r2, #0
 8018280:	d036      	beq.n	80182f0 <__swsetup_r+0x80>
 8018282:	89a2      	ldrh	r2, [r4, #12]
 8018284:	b293      	uxth	r3, r2
 8018286:	0718      	lsls	r0, r3, #28
 8018288:	d50c      	bpl.n	80182a4 <__swsetup_r+0x34>
 801828a:	6920      	ldr	r0, [r4, #16]
 801828c:	b1a8      	cbz	r0, 80182ba <__swsetup_r+0x4a>
 801828e:	f013 0201 	ands.w	r2, r3, #1
 8018292:	d01e      	beq.n	80182d2 <__swsetup_r+0x62>
 8018294:	6963      	ldr	r3, [r4, #20]
 8018296:	2200      	movs	r2, #0
 8018298:	425b      	negs	r3, r3
 801829a:	61a3      	str	r3, [r4, #24]
 801829c:	60a2      	str	r2, [r4, #8]
 801829e:	b1f0      	cbz	r0, 80182de <__swsetup_r+0x6e>
 80182a0:	2000      	movs	r0, #0
 80182a2:	bd38      	pop	{r3, r4, r5, pc}
 80182a4:	06d9      	lsls	r1, r3, #27
 80182a6:	d53b      	bpl.n	8018320 <__swsetup_r+0xb0>
 80182a8:	0758      	lsls	r0, r3, #29
 80182aa:	d425      	bmi.n	80182f8 <__swsetup_r+0x88>
 80182ac:	6920      	ldr	r0, [r4, #16]
 80182ae:	f042 0308 	orr.w	r3, r2, #8
 80182b2:	81a3      	strh	r3, [r4, #12]
 80182b4:	b29b      	uxth	r3, r3
 80182b6:	2800      	cmp	r0, #0
 80182b8:	d1e9      	bne.n	801828e <__swsetup_r+0x1e>
 80182ba:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80182be:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80182c2:	d0e4      	beq.n	801828e <__swsetup_r+0x1e>
 80182c4:	4628      	mov	r0, r5
 80182c6:	4621      	mov	r1, r4
 80182c8:	f001 fcb2 	bl	8019c30 <__smakebuf_r>
 80182cc:	89a3      	ldrh	r3, [r4, #12]
 80182ce:	6920      	ldr	r0, [r4, #16]
 80182d0:	e7dd      	b.n	801828e <__swsetup_r+0x1e>
 80182d2:	0799      	lsls	r1, r3, #30
 80182d4:	bf58      	it	pl
 80182d6:	6962      	ldrpl	r2, [r4, #20]
 80182d8:	60a2      	str	r2, [r4, #8]
 80182da:	2800      	cmp	r0, #0
 80182dc:	d1e0      	bne.n	80182a0 <__swsetup_r+0x30>
 80182de:	89a3      	ldrh	r3, [r4, #12]
 80182e0:	061a      	lsls	r2, r3, #24
 80182e2:	d5de      	bpl.n	80182a2 <__swsetup_r+0x32>
 80182e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182e8:	81a3      	strh	r3, [r4, #12]
 80182ea:	f04f 30ff 	mov.w	r0, #4294967295
 80182ee:	bd38      	pop	{r3, r4, r5, pc}
 80182f0:	4618      	mov	r0, r3
 80182f2:	f001 f947 	bl	8019584 <__sinit>
 80182f6:	e7c4      	b.n	8018282 <__swsetup_r+0x12>
 80182f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80182fa:	b149      	cbz	r1, 8018310 <__swsetup_r+0xa0>
 80182fc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8018300:	4299      	cmp	r1, r3
 8018302:	d003      	beq.n	801830c <__swsetup_r+0x9c>
 8018304:	4628      	mov	r0, r5
 8018306:	f001 f9f7 	bl	80196f8 <_free_r>
 801830a:	89a2      	ldrh	r2, [r4, #12]
 801830c:	2300      	movs	r3, #0
 801830e:	6323      	str	r3, [r4, #48]	; 0x30
 8018310:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8018314:	2300      	movs	r3, #0
 8018316:	6920      	ldr	r0, [r4, #16]
 8018318:	6063      	str	r3, [r4, #4]
 801831a:	b292      	uxth	r2, r2
 801831c:	6020      	str	r0, [r4, #0]
 801831e:	e7c6      	b.n	80182ae <__swsetup_r+0x3e>
 8018320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018324:	2309      	movs	r3, #9
 8018326:	602b      	str	r3, [r5, #0]
 8018328:	f04f 30ff 	mov.w	r0, #4294967295
 801832c:	81a2      	strh	r2, [r4, #12]
 801832e:	bd38      	pop	{r3, r4, r5, pc}
 8018330:	20000708 	.word	0x20000708

08018334 <abort>:
 8018334:	b508      	push	{r3, lr}
 8018336:	2006      	movs	r0, #6
 8018338:	f002 fd1a 	bl	801ad70 <raise>
 801833c:	2001      	movs	r0, #1
 801833e:	f7e9 fd45 	bl	8001dcc <_exit>
 8018342:	bf00      	nop

08018344 <quorem>:
 8018344:	6902      	ldr	r2, [r0, #16]
 8018346:	690b      	ldr	r3, [r1, #16]
 8018348:	4293      	cmp	r3, r2
 801834a:	f300 808f 	bgt.w	801846c <quorem+0x128>
 801834e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018352:	f103 38ff 	add.w	r8, r3, #4294967295
 8018356:	f101 0714 	add.w	r7, r1, #20
 801835a:	f100 0b14 	add.w	fp, r0, #20
 801835e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8018362:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8018366:	ea4f 0488 	mov.w	r4, r8, lsl #2
 801836a:	b083      	sub	sp, #12
 801836c:	3201      	adds	r2, #1
 801836e:	fbb3 f9f2 	udiv	r9, r3, r2
 8018372:	eb0b 0304 	add.w	r3, fp, r4
 8018376:	9400      	str	r4, [sp, #0]
 8018378:	eb07 0a04 	add.w	sl, r7, r4
 801837c:	9301      	str	r3, [sp, #4]
 801837e:	f1b9 0f00 	cmp.w	r9, #0
 8018382:	d03b      	beq.n	80183fc <quorem+0xb8>
 8018384:	2600      	movs	r6, #0
 8018386:	4632      	mov	r2, r6
 8018388:	46bc      	mov	ip, r7
 801838a:	46de      	mov	lr, fp
 801838c:	4634      	mov	r4, r6
 801838e:	f85c 6b04 	ldr.w	r6, [ip], #4
 8018392:	f8de 5000 	ldr.w	r5, [lr]
 8018396:	b2b3      	uxth	r3, r6
 8018398:	0c36      	lsrs	r6, r6, #16
 801839a:	fb03 4409 	mla	r4, r3, r9, r4
 801839e:	fb06 f609 	mul.w	r6, r6, r9
 80183a2:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 80183a6:	b2a3      	uxth	r3, r4
 80183a8:	1ad3      	subs	r3, r2, r3
 80183aa:	b2b4      	uxth	r4, r6
 80183ac:	fa13 f385 	uxtah	r3, r3, r5
 80183b0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 80183b4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80183b8:	b29b      	uxth	r3, r3
 80183ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80183be:	45e2      	cmp	sl, ip
 80183c0:	ea4f 4224 	mov.w	r2, r4, asr #16
 80183c4:	f84e 3b04 	str.w	r3, [lr], #4
 80183c8:	ea4f 4416 	mov.w	r4, r6, lsr #16
 80183cc:	d2df      	bcs.n	801838e <quorem+0x4a>
 80183ce:	9b00      	ldr	r3, [sp, #0]
 80183d0:	f85b 3003 	ldr.w	r3, [fp, r3]
 80183d4:	b993      	cbnz	r3, 80183fc <quorem+0xb8>
 80183d6:	9c01      	ldr	r4, [sp, #4]
 80183d8:	1f23      	subs	r3, r4, #4
 80183da:	459b      	cmp	fp, r3
 80183dc:	d20c      	bcs.n	80183f8 <quorem+0xb4>
 80183de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80183e2:	b94b      	cbnz	r3, 80183f8 <quorem+0xb4>
 80183e4:	f1a4 0308 	sub.w	r3, r4, #8
 80183e8:	e002      	b.n	80183f0 <quorem+0xac>
 80183ea:	681a      	ldr	r2, [r3, #0]
 80183ec:	3b04      	subs	r3, #4
 80183ee:	b91a      	cbnz	r2, 80183f8 <quorem+0xb4>
 80183f0:	459b      	cmp	fp, r3
 80183f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80183f6:	d3f8      	bcc.n	80183ea <quorem+0xa6>
 80183f8:	f8c0 8010 	str.w	r8, [r0, #16]
 80183fc:	4604      	mov	r4, r0
 80183fe:	f002 f96d 	bl	801a6dc <__mcmp>
 8018402:	2800      	cmp	r0, #0
 8018404:	db2e      	blt.n	8018464 <quorem+0x120>
 8018406:	f109 0901 	add.w	r9, r9, #1
 801840a:	465d      	mov	r5, fp
 801840c:	2300      	movs	r3, #0
 801840e:	f857 1b04 	ldr.w	r1, [r7], #4
 8018412:	6828      	ldr	r0, [r5, #0]
 8018414:	b28a      	uxth	r2, r1
 8018416:	1a9a      	subs	r2, r3, r2
 8018418:	0c09      	lsrs	r1, r1, #16
 801841a:	fa12 f280 	uxtah	r2, r2, r0
 801841e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8018422:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8018426:	b291      	uxth	r1, r2
 8018428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801842c:	45ba      	cmp	sl, r7
 801842e:	f845 1b04 	str.w	r1, [r5], #4
 8018432:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018436:	d2ea      	bcs.n	801840e <quorem+0xca>
 8018438:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 801843c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8018440:	b982      	cbnz	r2, 8018464 <quorem+0x120>
 8018442:	1f1a      	subs	r2, r3, #4
 8018444:	4593      	cmp	fp, r2
 8018446:	d20b      	bcs.n	8018460 <quorem+0x11c>
 8018448:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801844c:	b942      	cbnz	r2, 8018460 <quorem+0x11c>
 801844e:	3b08      	subs	r3, #8
 8018450:	e002      	b.n	8018458 <quorem+0x114>
 8018452:	681a      	ldr	r2, [r3, #0]
 8018454:	3b04      	subs	r3, #4
 8018456:	b91a      	cbnz	r2, 8018460 <quorem+0x11c>
 8018458:	459b      	cmp	fp, r3
 801845a:	f108 38ff 	add.w	r8, r8, #4294967295
 801845e:	d3f8      	bcc.n	8018452 <quorem+0x10e>
 8018460:	f8c4 8010 	str.w	r8, [r4, #16]
 8018464:	4648      	mov	r0, r9
 8018466:	b003      	add	sp, #12
 8018468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801846c:	2000      	movs	r0, #0
 801846e:	4770      	bx	lr

08018470 <_dtoa_r>:
 8018470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018474:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8018476:	b097      	sub	sp, #92	; 0x5c
 8018478:	4604      	mov	r4, r0
 801847a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801847c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018480:	b141      	cbz	r1, 8018494 <_dtoa_r+0x24>
 8018482:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018484:	604a      	str	r2, [r1, #4]
 8018486:	2301      	movs	r3, #1
 8018488:	4093      	lsls	r3, r2
 801848a:	608b      	str	r3, [r1, #8]
 801848c:	f001 ff42 	bl	801a314 <_Bfree>
 8018490:	2300      	movs	r3, #0
 8018492:	6423      	str	r3, [r4, #64]	; 0x40
 8018494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018498:	2b00      	cmp	r3, #0
 801849a:	4699      	mov	r9, r3
 801849c:	db36      	blt.n	801850c <_dtoa_r+0x9c>
 801849e:	2300      	movs	r3, #0
 80184a0:	602b      	str	r3, [r5, #0]
 80184a2:	4ba5      	ldr	r3, [pc, #660]	; (8018738 <_dtoa_r+0x2c8>)
 80184a4:	461a      	mov	r2, r3
 80184a6:	ea09 0303 	and.w	r3, r9, r3
 80184aa:	4293      	cmp	r3, r2
 80184ac:	d017      	beq.n	80184de <_dtoa_r+0x6e>
 80184ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80184b2:	2200      	movs	r2, #0
 80184b4:	4630      	mov	r0, r6
 80184b6:	4639      	mov	r1, r7
 80184b8:	2300      	movs	r3, #0
 80184ba:	f7e8 fb1f 	bl	8000afc <__aeabi_dcmpeq>
 80184be:	4680      	mov	r8, r0
 80184c0:	2800      	cmp	r0, #0
 80184c2:	d02b      	beq.n	801851c <_dtoa_r+0xac>
 80184c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80184c6:	2301      	movs	r3, #1
 80184c8:	6013      	str	r3, [r2, #0]
 80184ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	f000 80cb 	beq.w	8018668 <_dtoa_r+0x1f8>
 80184d2:	489a      	ldr	r0, [pc, #616]	; (801873c <_dtoa_r+0x2cc>)
 80184d4:	6018      	str	r0, [r3, #0]
 80184d6:	3801      	subs	r0, #1
 80184d8:	b017      	add	sp, #92	; 0x5c
 80184da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80184e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80184e4:	6013      	str	r3, [r2, #0]
 80184e6:	9b02      	ldr	r3, [sp, #8]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	f000 80a6 	beq.w	801863a <_dtoa_r+0x1ca>
 80184ee:	4894      	ldr	r0, [pc, #592]	; (8018740 <_dtoa_r+0x2d0>)
 80184f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d0f0      	beq.n	80184d8 <_dtoa_r+0x68>
 80184f6:	78c3      	ldrb	r3, [r0, #3]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	f000 80b7 	beq.w	801866c <_dtoa_r+0x1fc>
 80184fe:	f100 0308 	add.w	r3, r0, #8
 8018502:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018504:	6013      	str	r3, [r2, #0]
 8018506:	b017      	add	sp, #92	; 0x5c
 8018508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801850c:	9a03      	ldr	r2, [sp, #12]
 801850e:	2301      	movs	r3, #1
 8018510:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8018514:	602b      	str	r3, [r5, #0]
 8018516:	f8cd 900c 	str.w	r9, [sp, #12]
 801851a:	e7c2      	b.n	80184a2 <_dtoa_r+0x32>
 801851c:	aa15      	add	r2, sp, #84	; 0x54
 801851e:	ab14      	add	r3, sp, #80	; 0x50
 8018520:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018524:	4620      	mov	r0, r4
 8018526:	4632      	mov	r2, r6
 8018528:	463b      	mov	r3, r7
 801852a:	f002 f965 	bl	801a7f8 <__d2b>
 801852e:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8018532:	4683      	mov	fp, r0
 8018534:	f040 808a 	bne.w	801864c <_dtoa_r+0x1dc>
 8018538:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801853c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801853e:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8018542:	4445      	add	r5, r8
 8018544:	429d      	cmp	r5, r3
 8018546:	f2c0 8297 	blt.w	8018a78 <_dtoa_r+0x608>
 801854a:	4a7e      	ldr	r2, [pc, #504]	; (8018744 <_dtoa_r+0x2d4>)
 801854c:	1b52      	subs	r2, r2, r5
 801854e:	fa09 f902 	lsl.w	r9, r9, r2
 8018552:	9a02      	ldr	r2, [sp, #8]
 8018554:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8018558:	fa22 f003 	lsr.w	r0, r2, r3
 801855c:	ea49 0000 	orr.w	r0, r9, r0
 8018560:	f7e7 ffee 	bl	8000540 <__aeabi_ui2d>
 8018564:	2301      	movs	r3, #1
 8018566:	3d01      	subs	r5, #1
 8018568:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801856c:	930d      	str	r3, [sp, #52]	; 0x34
 801856e:	2200      	movs	r2, #0
 8018570:	4b75      	ldr	r3, [pc, #468]	; (8018748 <_dtoa_r+0x2d8>)
 8018572:	f7e7 fea7 	bl	80002c4 <__aeabi_dsub>
 8018576:	a36a      	add	r3, pc, #424	; (adr r3, 8018720 <_dtoa_r+0x2b0>)
 8018578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801857c:	f7e8 f856 	bl	800062c <__aeabi_dmul>
 8018580:	a369      	add	r3, pc, #420	; (adr r3, 8018728 <_dtoa_r+0x2b8>)
 8018582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018586:	f7e7 fe9f 	bl	80002c8 <__adddf3>
 801858a:	4606      	mov	r6, r0
 801858c:	4628      	mov	r0, r5
 801858e:	460f      	mov	r7, r1
 8018590:	f7e7 ffe6 	bl	8000560 <__aeabi_i2d>
 8018594:	a366      	add	r3, pc, #408	; (adr r3, 8018730 <_dtoa_r+0x2c0>)
 8018596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801859a:	f7e8 f847 	bl	800062c <__aeabi_dmul>
 801859e:	4602      	mov	r2, r0
 80185a0:	460b      	mov	r3, r1
 80185a2:	4630      	mov	r0, r6
 80185a4:	4639      	mov	r1, r7
 80185a6:	f7e7 fe8f 	bl	80002c8 <__adddf3>
 80185aa:	4606      	mov	r6, r0
 80185ac:	460f      	mov	r7, r1
 80185ae:	f7e8 fad7 	bl	8000b60 <__aeabi_d2iz>
 80185b2:	4639      	mov	r1, r7
 80185b4:	9004      	str	r0, [sp, #16]
 80185b6:	2200      	movs	r2, #0
 80185b8:	4630      	mov	r0, r6
 80185ba:	2300      	movs	r3, #0
 80185bc:	f7e8 faa8 	bl	8000b10 <__aeabi_dcmplt>
 80185c0:	2800      	cmp	r0, #0
 80185c2:	f040 81a6 	bne.w	8018912 <_dtoa_r+0x4a2>
 80185c6:	9b04      	ldr	r3, [sp, #16]
 80185c8:	2b16      	cmp	r3, #22
 80185ca:	f200 819f 	bhi.w	801890c <_dtoa_r+0x49c>
 80185ce:	9a04      	ldr	r2, [sp, #16]
 80185d0:	4b5e      	ldr	r3, [pc, #376]	; (801874c <_dtoa_r+0x2dc>)
 80185d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80185d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80185da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185de:	f7e8 fab5 	bl	8000b4c <__aeabi_dcmpgt>
 80185e2:	2800      	cmp	r0, #0
 80185e4:	f000 824e 	beq.w	8018a84 <_dtoa_r+0x614>
 80185e8:	9b04      	ldr	r3, [sp, #16]
 80185ea:	3b01      	subs	r3, #1
 80185ec:	9304      	str	r3, [sp, #16]
 80185ee:	2300      	movs	r3, #0
 80185f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80185f2:	ebc5 0508 	rsb	r5, r5, r8
 80185f6:	f1b5 0a01 	subs.w	sl, r5, #1
 80185fa:	f100 81a1 	bmi.w	8018940 <_dtoa_r+0x4d0>
 80185fe:	2300      	movs	r3, #0
 8018600:	9305      	str	r3, [sp, #20]
 8018602:	9b04      	ldr	r3, [sp, #16]
 8018604:	2b00      	cmp	r3, #0
 8018606:	f2c0 8192 	blt.w	801892e <_dtoa_r+0x4be>
 801860a:	449a      	add	sl, r3
 801860c:	930a      	str	r3, [sp, #40]	; 0x28
 801860e:	2300      	movs	r3, #0
 8018610:	9308      	str	r3, [sp, #32]
 8018612:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018614:	2b09      	cmp	r3, #9
 8018616:	d82b      	bhi.n	8018670 <_dtoa_r+0x200>
 8018618:	2b05      	cmp	r3, #5
 801861a:	f340 8670 	ble.w	80192fe <_dtoa_r+0xe8e>
 801861e:	3b04      	subs	r3, #4
 8018620:	9320      	str	r3, [sp, #128]	; 0x80
 8018622:	2500      	movs	r5, #0
 8018624:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018626:	3b02      	subs	r3, #2
 8018628:	2b03      	cmp	r3, #3
 801862a:	f200 864e 	bhi.w	80192ca <_dtoa_r+0xe5a>
 801862e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018632:	03cc      	.short	0x03cc
 8018634:	02b203be 	.word	0x02b203be
 8018638:	0663      	.short	0x0663
 801863a:	4b41      	ldr	r3, [pc, #260]	; (8018740 <_dtoa_r+0x2d0>)
 801863c:	4a44      	ldr	r2, [pc, #272]	; (8018750 <_dtoa_r+0x2e0>)
 801863e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8018642:	2800      	cmp	r0, #0
 8018644:	bf14      	ite	ne
 8018646:	4618      	movne	r0, r3
 8018648:	4610      	moveq	r0, r2
 801864a:	e751      	b.n	80184f0 <_dtoa_r+0x80>
 801864c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018650:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8018654:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8018658:	4630      	mov	r0, r6
 801865a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801865e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018662:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8018666:	e782      	b.n	801856e <_dtoa_r+0xfe>
 8018668:	483a      	ldr	r0, [pc, #232]	; (8018754 <_dtoa_r+0x2e4>)
 801866a:	e735      	b.n	80184d8 <_dtoa_r+0x68>
 801866c:	1cc3      	adds	r3, r0, #3
 801866e:	e748      	b.n	8018502 <_dtoa_r+0x92>
 8018670:	2100      	movs	r1, #0
 8018672:	6461      	str	r1, [r4, #68]	; 0x44
 8018674:	4620      	mov	r0, r4
 8018676:	9120      	str	r1, [sp, #128]	; 0x80
 8018678:	f001 fe26 	bl	801a2c8 <_Balloc>
 801867c:	f04f 33ff 	mov.w	r3, #4294967295
 8018680:	9306      	str	r3, [sp, #24]
 8018682:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018684:	930c      	str	r3, [sp, #48]	; 0x30
 8018686:	2301      	movs	r3, #1
 8018688:	9007      	str	r0, [sp, #28]
 801868a:	9221      	str	r2, [sp, #132]	; 0x84
 801868c:	6420      	str	r0, [r4, #64]	; 0x40
 801868e:	9309      	str	r3, [sp, #36]	; 0x24
 8018690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018692:	2b00      	cmp	r3, #0
 8018694:	f2c0 80d2 	blt.w	801883c <_dtoa_r+0x3cc>
 8018698:	9a04      	ldr	r2, [sp, #16]
 801869a:	2a0e      	cmp	r2, #14
 801869c:	f300 80ce 	bgt.w	801883c <_dtoa_r+0x3cc>
 80186a0:	4b2a      	ldr	r3, [pc, #168]	; (801874c <_dtoa_r+0x2dc>)
 80186a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80186a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80186aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	f2c0 838f 	blt.w	8018dd0 <_dtoa_r+0x960>
 80186b2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80186b6:	4642      	mov	r2, r8
 80186b8:	464b      	mov	r3, r9
 80186ba:	4630      	mov	r0, r6
 80186bc:	4639      	mov	r1, r7
 80186be:	f7e8 f8df 	bl	8000880 <__aeabi_ddiv>
 80186c2:	f7e8 fa4d 	bl	8000b60 <__aeabi_d2iz>
 80186c6:	4682      	mov	sl, r0
 80186c8:	f7e7 ff4a 	bl	8000560 <__aeabi_i2d>
 80186cc:	4642      	mov	r2, r8
 80186ce:	464b      	mov	r3, r9
 80186d0:	f7e7 ffac 	bl	800062c <__aeabi_dmul>
 80186d4:	460b      	mov	r3, r1
 80186d6:	4602      	mov	r2, r0
 80186d8:	4639      	mov	r1, r7
 80186da:	4630      	mov	r0, r6
 80186dc:	f7e7 fdf2 	bl	80002c4 <__aeabi_dsub>
 80186e0:	9d07      	ldr	r5, [sp, #28]
 80186e2:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 80186e6:	702b      	strb	r3, [r5, #0]
 80186e8:	9b06      	ldr	r3, [sp, #24]
 80186ea:	2b01      	cmp	r3, #1
 80186ec:	4606      	mov	r6, r0
 80186ee:	460f      	mov	r7, r1
 80186f0:	f105 0501 	add.w	r5, r5, #1
 80186f4:	d062      	beq.n	80187bc <_dtoa_r+0x34c>
 80186f6:	2200      	movs	r2, #0
 80186f8:	4b17      	ldr	r3, [pc, #92]	; (8018758 <_dtoa_r+0x2e8>)
 80186fa:	f7e7 ff97 	bl	800062c <__aeabi_dmul>
 80186fe:	2200      	movs	r2, #0
 8018700:	2300      	movs	r3, #0
 8018702:	4606      	mov	r6, r0
 8018704:	460f      	mov	r7, r1
 8018706:	f7e8 f9f9 	bl	8000afc <__aeabi_dcmpeq>
 801870a:	2800      	cmp	r0, #0
 801870c:	f040 8083 	bne.w	8018816 <_dtoa_r+0x3a6>
 8018710:	f8cd b008 	str.w	fp, [sp, #8]
 8018714:	9405      	str	r4, [sp, #20]
 8018716:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801871a:	9c06      	ldr	r4, [sp, #24]
 801871c:	e029      	b.n	8018772 <_dtoa_r+0x302>
 801871e:	bf00      	nop
 8018720:	636f4361 	.word	0x636f4361
 8018724:	3fd287a7 	.word	0x3fd287a7
 8018728:	8b60c8b3 	.word	0x8b60c8b3
 801872c:	3fc68a28 	.word	0x3fc68a28
 8018730:	509f79fb 	.word	0x509f79fb
 8018734:	3fd34413 	.word	0x3fd34413
 8018738:	7ff00000 	.word	0x7ff00000
 801873c:	08030b09 	.word	0x08030b09
 8018740:	08030b28 	.word	0x08030b28
 8018744:	fffffc0e 	.word	0xfffffc0e
 8018748:	3ff80000 	.word	0x3ff80000
 801874c:	08030b38 	.word	0x08030b38
 8018750:	08030b1c 	.word	0x08030b1c
 8018754:	08030b08 	.word	0x08030b08
 8018758:	40240000 	.word	0x40240000
 801875c:	f7e7 ff66 	bl	800062c <__aeabi_dmul>
 8018760:	2200      	movs	r2, #0
 8018762:	2300      	movs	r3, #0
 8018764:	4606      	mov	r6, r0
 8018766:	460f      	mov	r7, r1
 8018768:	f7e8 f9c8 	bl	8000afc <__aeabi_dcmpeq>
 801876c:	2800      	cmp	r0, #0
 801876e:	f040 83de 	bne.w	8018f2e <_dtoa_r+0xabe>
 8018772:	4642      	mov	r2, r8
 8018774:	464b      	mov	r3, r9
 8018776:	4630      	mov	r0, r6
 8018778:	4639      	mov	r1, r7
 801877a:	f7e8 f881 	bl	8000880 <__aeabi_ddiv>
 801877e:	f7e8 f9ef 	bl	8000b60 <__aeabi_d2iz>
 8018782:	4682      	mov	sl, r0
 8018784:	f7e7 feec 	bl	8000560 <__aeabi_i2d>
 8018788:	4642      	mov	r2, r8
 801878a:	464b      	mov	r3, r9
 801878c:	f7e7 ff4e 	bl	800062c <__aeabi_dmul>
 8018790:	4602      	mov	r2, r0
 8018792:	460b      	mov	r3, r1
 8018794:	4630      	mov	r0, r6
 8018796:	4639      	mov	r1, r7
 8018798:	f7e7 fd94 	bl	80002c4 <__aeabi_dsub>
 801879c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 80187a0:	f805 eb01 	strb.w	lr, [r5], #1
 80187a4:	ebcb 0e05 	rsb	lr, fp, r5
 80187a8:	4574      	cmp	r4, lr
 80187aa:	4606      	mov	r6, r0
 80187ac:	460f      	mov	r7, r1
 80187ae:	f04f 0200 	mov.w	r2, #0
 80187b2:	4bb5      	ldr	r3, [pc, #724]	; (8018a88 <_dtoa_r+0x618>)
 80187b4:	d1d2      	bne.n	801875c <_dtoa_r+0x2ec>
 80187b6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80187ba:	9c05      	ldr	r4, [sp, #20]
 80187bc:	4632      	mov	r2, r6
 80187be:	463b      	mov	r3, r7
 80187c0:	4630      	mov	r0, r6
 80187c2:	4639      	mov	r1, r7
 80187c4:	f7e7 fd80 	bl	80002c8 <__adddf3>
 80187c8:	4606      	mov	r6, r0
 80187ca:	460f      	mov	r7, r1
 80187cc:	4640      	mov	r0, r8
 80187ce:	4649      	mov	r1, r9
 80187d0:	4632      	mov	r2, r6
 80187d2:	463b      	mov	r3, r7
 80187d4:	f7e8 f99c 	bl	8000b10 <__aeabi_dcmplt>
 80187d8:	b948      	cbnz	r0, 80187ee <_dtoa_r+0x37e>
 80187da:	4640      	mov	r0, r8
 80187dc:	4649      	mov	r1, r9
 80187de:	4632      	mov	r2, r6
 80187e0:	463b      	mov	r3, r7
 80187e2:	f7e8 f98b 	bl	8000afc <__aeabi_dcmpeq>
 80187e6:	b1b0      	cbz	r0, 8018816 <_dtoa_r+0x3a6>
 80187e8:	f01a 0f01 	tst.w	sl, #1
 80187ec:	d013      	beq.n	8018816 <_dtoa_r+0x3a6>
 80187ee:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80187f2:	9907      	ldr	r1, [sp, #28]
 80187f4:	1e6b      	subs	r3, r5, #1
 80187f6:	e004      	b.n	8018802 <_dtoa_r+0x392>
 80187f8:	428b      	cmp	r3, r1
 80187fa:	f000 8440 	beq.w	801907e <_dtoa_r+0xc0e>
 80187fe:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8018802:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018806:	f103 0501 	add.w	r5, r3, #1
 801880a:	461a      	mov	r2, r3
 801880c:	d0f4      	beq.n	80187f8 <_dtoa_r+0x388>
 801880e:	f108 0301 	add.w	r3, r8, #1
 8018812:	b2db      	uxtb	r3, r3
 8018814:	7013      	strb	r3, [r2, #0]
 8018816:	4620      	mov	r0, r4
 8018818:	4659      	mov	r1, fp
 801881a:	f001 fd7b 	bl	801a314 <_Bfree>
 801881e:	2200      	movs	r2, #0
 8018820:	9b04      	ldr	r3, [sp, #16]
 8018822:	702a      	strb	r2, [r5, #0]
 8018824:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018826:	3301      	adds	r3, #1
 8018828:	6013      	str	r3, [r2, #0]
 801882a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801882c:	2b00      	cmp	r3, #0
 801882e:	f000 8345 	beq.w	8018ebc <_dtoa_r+0xa4c>
 8018832:	9807      	ldr	r0, [sp, #28]
 8018834:	601d      	str	r5, [r3, #0]
 8018836:	b017      	add	sp, #92	; 0x5c
 8018838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801883c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801883e:	2a00      	cmp	r2, #0
 8018840:	f000 8084 	beq.w	801894c <_dtoa_r+0x4dc>
 8018844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018846:	2a01      	cmp	r2, #1
 8018848:	f340 8304 	ble.w	8018e54 <_dtoa_r+0x9e4>
 801884c:	9b06      	ldr	r3, [sp, #24]
 801884e:	1e5f      	subs	r7, r3, #1
 8018850:	9b08      	ldr	r3, [sp, #32]
 8018852:	42bb      	cmp	r3, r7
 8018854:	f2c0 83a9 	blt.w	8018faa <_dtoa_r+0xb3a>
 8018858:	1bdf      	subs	r7, r3, r7
 801885a:	9b06      	ldr	r3, [sp, #24]
 801885c:	2b00      	cmp	r3, #0
 801885e:	f2c0 849c 	blt.w	801919a <_dtoa_r+0xd2a>
 8018862:	9d05      	ldr	r5, [sp, #20]
 8018864:	9b06      	ldr	r3, [sp, #24]
 8018866:	9a05      	ldr	r2, [sp, #20]
 8018868:	4620      	mov	r0, r4
 801886a:	441a      	add	r2, r3
 801886c:	2101      	movs	r1, #1
 801886e:	9205      	str	r2, [sp, #20]
 8018870:	449a      	add	sl, r3
 8018872:	f001 fde9 	bl	801a448 <__i2b>
 8018876:	4606      	mov	r6, r0
 8018878:	b165      	cbz	r5, 8018894 <_dtoa_r+0x424>
 801887a:	f1ba 0f00 	cmp.w	sl, #0
 801887e:	dd09      	ble.n	8018894 <_dtoa_r+0x424>
 8018880:	45aa      	cmp	sl, r5
 8018882:	9a05      	ldr	r2, [sp, #20]
 8018884:	4653      	mov	r3, sl
 8018886:	bfa8      	it	ge
 8018888:	462b      	movge	r3, r5
 801888a:	1ad2      	subs	r2, r2, r3
 801888c:	9205      	str	r2, [sp, #20]
 801888e:	1aed      	subs	r5, r5, r3
 8018890:	ebc3 0a0a 	rsb	sl, r3, sl
 8018894:	9b08      	ldr	r3, [sp, #32]
 8018896:	2b00      	cmp	r3, #0
 8018898:	dd1a      	ble.n	80188d0 <_dtoa_r+0x460>
 801889a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801889c:	2b00      	cmp	r3, #0
 801889e:	f000 837d 	beq.w	8018f9c <_dtoa_r+0xb2c>
 80188a2:	2f00      	cmp	r7, #0
 80188a4:	dd10      	ble.n	80188c8 <_dtoa_r+0x458>
 80188a6:	4631      	mov	r1, r6
 80188a8:	463a      	mov	r2, r7
 80188aa:	4620      	mov	r0, r4
 80188ac:	f001 fe70 	bl	801a590 <__pow5mult>
 80188b0:	4606      	mov	r6, r0
 80188b2:	465a      	mov	r2, fp
 80188b4:	4631      	mov	r1, r6
 80188b6:	4620      	mov	r0, r4
 80188b8:	f001 fdd0 	bl	801a45c <__multiply>
 80188bc:	4659      	mov	r1, fp
 80188be:	4680      	mov	r8, r0
 80188c0:	4620      	mov	r0, r4
 80188c2:	f001 fd27 	bl	801a314 <_Bfree>
 80188c6:	46c3      	mov	fp, r8
 80188c8:	9b08      	ldr	r3, [sp, #32]
 80188ca:	1bda      	subs	r2, r3, r7
 80188cc:	f040 82a2 	bne.w	8018e14 <_dtoa_r+0x9a4>
 80188d0:	4620      	mov	r0, r4
 80188d2:	2101      	movs	r1, #1
 80188d4:	f001 fdb8 	bl	801a448 <__i2b>
 80188d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188da:	2b00      	cmp	r3, #0
 80188dc:	4680      	mov	r8, r0
 80188de:	dd39      	ble.n	8018954 <_dtoa_r+0x4e4>
 80188e0:	4601      	mov	r1, r0
 80188e2:	461a      	mov	r2, r3
 80188e4:	4620      	mov	r0, r4
 80188e6:	f001 fe53 	bl	801a590 <__pow5mult>
 80188ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80188ec:	2b01      	cmp	r3, #1
 80188ee:	4680      	mov	r8, r0
 80188f0:	f340 8296 	ble.w	8018e20 <_dtoa_r+0x9b0>
 80188f4:	f04f 0900 	mov.w	r9, #0
 80188f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80188fc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8018900:	6918      	ldr	r0, [r3, #16]
 8018902:	f001 fd53 	bl	801a3ac <__hi0bits>
 8018906:	f1c0 0020 	rsb	r0, r0, #32
 801890a:	e02d      	b.n	8018968 <_dtoa_r+0x4f8>
 801890c:	2301      	movs	r3, #1
 801890e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018910:	e66f      	b.n	80185f2 <_dtoa_r+0x182>
 8018912:	9804      	ldr	r0, [sp, #16]
 8018914:	f7e7 fe24 	bl	8000560 <__aeabi_i2d>
 8018918:	4632      	mov	r2, r6
 801891a:	463b      	mov	r3, r7
 801891c:	f7e8 f8ee 	bl	8000afc <__aeabi_dcmpeq>
 8018920:	2800      	cmp	r0, #0
 8018922:	f47f ae50 	bne.w	80185c6 <_dtoa_r+0x156>
 8018926:	9b04      	ldr	r3, [sp, #16]
 8018928:	3b01      	subs	r3, #1
 801892a:	9304      	str	r3, [sp, #16]
 801892c:	e64b      	b.n	80185c6 <_dtoa_r+0x156>
 801892e:	9a05      	ldr	r2, [sp, #20]
 8018930:	9b04      	ldr	r3, [sp, #16]
 8018932:	1ad2      	subs	r2, r2, r3
 8018934:	425b      	negs	r3, r3
 8018936:	9308      	str	r3, [sp, #32]
 8018938:	2300      	movs	r3, #0
 801893a:	9205      	str	r2, [sp, #20]
 801893c:	930a      	str	r3, [sp, #40]	; 0x28
 801893e:	e668      	b.n	8018612 <_dtoa_r+0x1a2>
 8018940:	f1ca 0300 	rsb	r3, sl, #0
 8018944:	9305      	str	r3, [sp, #20]
 8018946:	f04f 0a00 	mov.w	sl, #0
 801894a:	e65a      	b.n	8018602 <_dtoa_r+0x192>
 801894c:	9f08      	ldr	r7, [sp, #32]
 801894e:	9d05      	ldr	r5, [sp, #20]
 8018950:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018952:	e791      	b.n	8018878 <_dtoa_r+0x408>
 8018954:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018956:	2b01      	cmp	r3, #1
 8018958:	f340 82b3 	ble.w	8018ec2 <_dtoa_r+0xa52>
 801895c:	f04f 0900 	mov.w	r9, #0
 8018960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018962:	2b00      	cmp	r3, #0
 8018964:	d1c8      	bne.n	80188f8 <_dtoa_r+0x488>
 8018966:	2001      	movs	r0, #1
 8018968:	4450      	add	r0, sl
 801896a:	f010 001f 	ands.w	r0, r0, #31
 801896e:	f000 8081 	beq.w	8018a74 <_dtoa_r+0x604>
 8018972:	f1c0 0320 	rsb	r3, r0, #32
 8018976:	2b04      	cmp	r3, #4
 8018978:	f340 84b8 	ble.w	80192ec <_dtoa_r+0xe7c>
 801897c:	f1c0 001c 	rsb	r0, r0, #28
 8018980:	9b05      	ldr	r3, [sp, #20]
 8018982:	4403      	add	r3, r0
 8018984:	9305      	str	r3, [sp, #20]
 8018986:	4405      	add	r5, r0
 8018988:	4482      	add	sl, r0
 801898a:	9b05      	ldr	r3, [sp, #20]
 801898c:	2b00      	cmp	r3, #0
 801898e:	dd05      	ble.n	801899c <_dtoa_r+0x52c>
 8018990:	4659      	mov	r1, fp
 8018992:	461a      	mov	r2, r3
 8018994:	4620      	mov	r0, r4
 8018996:	f001 fe4b 	bl	801a630 <__lshift>
 801899a:	4683      	mov	fp, r0
 801899c:	f1ba 0f00 	cmp.w	sl, #0
 80189a0:	dd05      	ble.n	80189ae <_dtoa_r+0x53e>
 80189a2:	4641      	mov	r1, r8
 80189a4:	4652      	mov	r2, sl
 80189a6:	4620      	mov	r0, r4
 80189a8:	f001 fe42 	bl	801a630 <__lshift>
 80189ac:	4680      	mov	r8, r0
 80189ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f040 8268 	bne.w	8018e86 <_dtoa_r+0xa16>
 80189b6:	9b06      	ldr	r3, [sp, #24]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	f340 8295 	ble.w	8018ee8 <_dtoa_r+0xa78>
 80189be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d171      	bne.n	8018aa8 <_dtoa_r+0x638>
 80189c4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80189c8:	9f06      	ldr	r7, [sp, #24]
 80189ca:	464d      	mov	r5, r9
 80189cc:	e002      	b.n	80189d4 <_dtoa_r+0x564>
 80189ce:	f001 fcab 	bl	801a328 <__multadd>
 80189d2:	4683      	mov	fp, r0
 80189d4:	4641      	mov	r1, r8
 80189d6:	4658      	mov	r0, fp
 80189d8:	f7ff fcb4 	bl	8018344 <quorem>
 80189dc:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80189e0:	f805 cb01 	strb.w	ip, [r5], #1
 80189e4:	ebc9 0305 	rsb	r3, r9, r5
 80189e8:	42bb      	cmp	r3, r7
 80189ea:	4620      	mov	r0, r4
 80189ec:	4659      	mov	r1, fp
 80189ee:	f04f 020a 	mov.w	r2, #10
 80189f2:	f04f 0300 	mov.w	r3, #0
 80189f6:	dbea      	blt.n	80189ce <_dtoa_r+0x55e>
 80189f8:	9b07      	ldr	r3, [sp, #28]
 80189fa:	9a06      	ldr	r2, [sp, #24]
 80189fc:	2a01      	cmp	r2, #1
 80189fe:	bfac      	ite	ge
 8018a00:	189b      	addge	r3, r3, r2
 8018a02:	3301      	addlt	r3, #1
 8018a04:	461d      	mov	r5, r3
 8018a06:	f04f 0a00 	mov.w	sl, #0
 8018a0a:	4659      	mov	r1, fp
 8018a0c:	2201      	movs	r2, #1
 8018a0e:	4620      	mov	r0, r4
 8018a10:	f8cd c008 	str.w	ip, [sp, #8]
 8018a14:	f001 fe0c 	bl	801a630 <__lshift>
 8018a18:	4641      	mov	r1, r8
 8018a1a:	4683      	mov	fp, r0
 8018a1c:	f001 fe5e 	bl	801a6dc <__mcmp>
 8018a20:	2800      	cmp	r0, #0
 8018a22:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018a26:	f340 82f6 	ble.w	8019016 <_dtoa_r+0xba6>
 8018a2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018a2e:	9907      	ldr	r1, [sp, #28]
 8018a30:	1e6b      	subs	r3, r5, #1
 8018a32:	e004      	b.n	8018a3e <_dtoa_r+0x5ce>
 8018a34:	428b      	cmp	r3, r1
 8018a36:	f000 8273 	beq.w	8018f20 <_dtoa_r+0xab0>
 8018a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018a3e:	2a39      	cmp	r2, #57	; 0x39
 8018a40:	f103 0501 	add.w	r5, r3, #1
 8018a44:	d0f6      	beq.n	8018a34 <_dtoa_r+0x5c4>
 8018a46:	3201      	adds	r2, #1
 8018a48:	701a      	strb	r2, [r3, #0]
 8018a4a:	4641      	mov	r1, r8
 8018a4c:	4620      	mov	r0, r4
 8018a4e:	f001 fc61 	bl	801a314 <_Bfree>
 8018a52:	2e00      	cmp	r6, #0
 8018a54:	f43f aedf 	beq.w	8018816 <_dtoa_r+0x3a6>
 8018a58:	f1ba 0f00 	cmp.w	sl, #0
 8018a5c:	d005      	beq.n	8018a6a <_dtoa_r+0x5fa>
 8018a5e:	45b2      	cmp	sl, r6
 8018a60:	d003      	beq.n	8018a6a <_dtoa_r+0x5fa>
 8018a62:	4651      	mov	r1, sl
 8018a64:	4620      	mov	r0, r4
 8018a66:	f001 fc55 	bl	801a314 <_Bfree>
 8018a6a:	4631      	mov	r1, r6
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	f001 fc51 	bl	801a314 <_Bfree>
 8018a72:	e6d0      	b.n	8018816 <_dtoa_r+0x3a6>
 8018a74:	201c      	movs	r0, #28
 8018a76:	e783      	b.n	8018980 <_dtoa_r+0x510>
 8018a78:	4b04      	ldr	r3, [pc, #16]	; (8018a8c <_dtoa_r+0x61c>)
 8018a7a:	9a02      	ldr	r2, [sp, #8]
 8018a7c:	1b5b      	subs	r3, r3, r5
 8018a7e:	fa02 f003 	lsl.w	r0, r2, r3
 8018a82:	e56d      	b.n	8018560 <_dtoa_r+0xf0>
 8018a84:	900b      	str	r0, [sp, #44]	; 0x2c
 8018a86:	e5b4      	b.n	80185f2 <_dtoa_r+0x182>
 8018a88:	40240000 	.word	0x40240000
 8018a8c:	fffffbee 	.word	0xfffffbee
 8018a90:	4631      	mov	r1, r6
 8018a92:	2300      	movs	r3, #0
 8018a94:	4620      	mov	r0, r4
 8018a96:	220a      	movs	r2, #10
 8018a98:	f001 fc46 	bl	801a328 <__multadd>
 8018a9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	4606      	mov	r6, r0
 8018aa2:	f340 840c 	ble.w	80192be <_dtoa_r+0xe4e>
 8018aa6:	9306      	str	r3, [sp, #24]
 8018aa8:	2d00      	cmp	r5, #0
 8018aaa:	dd05      	ble.n	8018ab8 <_dtoa_r+0x648>
 8018aac:	4631      	mov	r1, r6
 8018aae:	462a      	mov	r2, r5
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	f001 fdbd 	bl	801a630 <__lshift>
 8018ab6:	4606      	mov	r6, r0
 8018ab8:	f1b9 0f00 	cmp.w	r9, #0
 8018abc:	f040 82e9 	bne.w	8019092 <_dtoa_r+0xc22>
 8018ac0:	46b1      	mov	r9, r6
 8018ac2:	9b06      	ldr	r3, [sp, #24]
 8018ac4:	9a07      	ldr	r2, [sp, #28]
 8018ac6:	3b01      	subs	r3, #1
 8018ac8:	18d3      	adds	r3, r2, r3
 8018aca:	9308      	str	r3, [sp, #32]
 8018acc:	9b02      	ldr	r3, [sp, #8]
 8018ace:	f003 0301 	and.w	r3, r3, #1
 8018ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ad4:	4617      	mov	r7, r2
 8018ad6:	4641      	mov	r1, r8
 8018ad8:	4658      	mov	r0, fp
 8018ada:	f7ff fc33 	bl	8018344 <quorem>
 8018ade:	4631      	mov	r1, r6
 8018ae0:	4605      	mov	r5, r0
 8018ae2:	4658      	mov	r0, fp
 8018ae4:	f001 fdfa 	bl	801a6dc <__mcmp>
 8018ae8:	464a      	mov	r2, r9
 8018aea:	4682      	mov	sl, r0
 8018aec:	4641      	mov	r1, r8
 8018aee:	4620      	mov	r0, r4
 8018af0:	f001 fe18 	bl	801a724 <__mdiff>
 8018af4:	68c2      	ldr	r2, [r0, #12]
 8018af6:	4603      	mov	r3, r0
 8018af8:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8018afc:	2a00      	cmp	r2, #0
 8018afe:	f040 81b8 	bne.w	8018e72 <_dtoa_r+0xa02>
 8018b02:	4619      	mov	r1, r3
 8018b04:	4658      	mov	r0, fp
 8018b06:	f8cd c018 	str.w	ip, [sp, #24]
 8018b0a:	9305      	str	r3, [sp, #20]
 8018b0c:	f001 fde6 	bl	801a6dc <__mcmp>
 8018b10:	9b05      	ldr	r3, [sp, #20]
 8018b12:	9002      	str	r0, [sp, #8]
 8018b14:	4619      	mov	r1, r3
 8018b16:	4620      	mov	r0, r4
 8018b18:	f001 fbfc 	bl	801a314 <_Bfree>
 8018b1c:	9a02      	ldr	r2, [sp, #8]
 8018b1e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8018b22:	b92a      	cbnz	r2, 8018b30 <_dtoa_r+0x6c0>
 8018b24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018b26:	b91b      	cbnz	r3, 8018b30 <_dtoa_r+0x6c0>
 8018b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	f000 83a7 	beq.w	801927e <_dtoa_r+0xe0e>
 8018b30:	f1ba 0f00 	cmp.w	sl, #0
 8018b34:	f2c0 8251 	blt.w	8018fda <_dtoa_r+0xb6a>
 8018b38:	d105      	bne.n	8018b46 <_dtoa_r+0x6d6>
 8018b3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018b3c:	b91b      	cbnz	r3, 8018b46 <_dtoa_r+0x6d6>
 8018b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	f000 824a 	beq.w	8018fda <_dtoa_r+0xb6a>
 8018b46:	2a00      	cmp	r2, #0
 8018b48:	f300 82b7 	bgt.w	80190ba <_dtoa_r+0xc4a>
 8018b4c:	9b08      	ldr	r3, [sp, #32]
 8018b4e:	f887 c000 	strb.w	ip, [r7]
 8018b52:	f107 0a01 	add.w	sl, r7, #1
 8018b56:	429f      	cmp	r7, r3
 8018b58:	4655      	mov	r5, sl
 8018b5a:	f000 82ba 	beq.w	80190d2 <_dtoa_r+0xc62>
 8018b5e:	4659      	mov	r1, fp
 8018b60:	220a      	movs	r2, #10
 8018b62:	2300      	movs	r3, #0
 8018b64:	4620      	mov	r0, r4
 8018b66:	f001 fbdf 	bl	801a328 <__multadd>
 8018b6a:	454e      	cmp	r6, r9
 8018b6c:	4683      	mov	fp, r0
 8018b6e:	4631      	mov	r1, r6
 8018b70:	4620      	mov	r0, r4
 8018b72:	f04f 020a 	mov.w	r2, #10
 8018b76:	f04f 0300 	mov.w	r3, #0
 8018b7a:	f000 8174 	beq.w	8018e66 <_dtoa_r+0x9f6>
 8018b7e:	f001 fbd3 	bl	801a328 <__multadd>
 8018b82:	4649      	mov	r1, r9
 8018b84:	4606      	mov	r6, r0
 8018b86:	220a      	movs	r2, #10
 8018b88:	4620      	mov	r0, r4
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	f001 fbcc 	bl	801a328 <__multadd>
 8018b90:	4657      	mov	r7, sl
 8018b92:	4681      	mov	r9, r0
 8018b94:	e79f      	b.n	8018ad6 <_dtoa_r+0x666>
 8018b96:	2301      	movs	r3, #1
 8018b98:	9309      	str	r3, [sp, #36]	; 0x24
 8018b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f340 8213 	ble.w	8018fc8 <_dtoa_r+0xb58>
 8018ba2:	461f      	mov	r7, r3
 8018ba4:	461e      	mov	r6, r3
 8018ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8018ba8:	9306      	str	r3, [sp, #24]
 8018baa:	2100      	movs	r1, #0
 8018bac:	2f17      	cmp	r7, #23
 8018bae:	6461      	str	r1, [r4, #68]	; 0x44
 8018bb0:	d90a      	bls.n	8018bc8 <_dtoa_r+0x758>
 8018bb2:	2201      	movs	r2, #1
 8018bb4:	2304      	movs	r3, #4
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	f103 0014 	add.w	r0, r3, #20
 8018bbc:	4287      	cmp	r7, r0
 8018bbe:	4611      	mov	r1, r2
 8018bc0:	f102 0201 	add.w	r2, r2, #1
 8018bc4:	d2f7      	bcs.n	8018bb6 <_dtoa_r+0x746>
 8018bc6:	6461      	str	r1, [r4, #68]	; 0x44
 8018bc8:	4620      	mov	r0, r4
 8018bca:	f001 fb7d 	bl	801a2c8 <_Balloc>
 8018bce:	2e0e      	cmp	r6, #14
 8018bd0:	9007      	str	r0, [sp, #28]
 8018bd2:	6420      	str	r0, [r4, #64]	; 0x40
 8018bd4:	f63f ad5c 	bhi.w	8018690 <_dtoa_r+0x220>
 8018bd8:	2d00      	cmp	r5, #0
 8018bda:	f43f ad59 	beq.w	8018690 <_dtoa_r+0x220>
 8018bde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018be2:	9904      	ldr	r1, [sp, #16]
 8018be4:	2900      	cmp	r1, #0
 8018be6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8018bea:	f340 8221 	ble.w	8019030 <_dtoa_r+0xbc0>
 8018bee:	4bb7      	ldr	r3, [pc, #732]	; (8018ecc <_dtoa_r+0xa5c>)
 8018bf0:	f001 020f 	and.w	r2, r1, #15
 8018bf4:	110d      	asrs	r5, r1, #4
 8018bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018bfa:	06e9      	lsls	r1, r5, #27
 8018bfc:	e9d3 6700 	ldrd	r6, r7, [r3]
 8018c00:	f140 81db 	bpl.w	8018fba <_dtoa_r+0xb4a>
 8018c04:	4bb2      	ldr	r3, [pc, #712]	; (8018ed0 <_dtoa_r+0xa60>)
 8018c06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018c0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018c0e:	f7e7 fe37 	bl	8000880 <__aeabi_ddiv>
 8018c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c16:	f005 050f 	and.w	r5, r5, #15
 8018c1a:	f04f 0803 	mov.w	r8, #3
 8018c1e:	b18d      	cbz	r5, 8018c44 <_dtoa_r+0x7d4>
 8018c20:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8018ed0 <_dtoa_r+0xa60>
 8018c24:	4630      	mov	r0, r6
 8018c26:	4639      	mov	r1, r7
 8018c28:	07ea      	lsls	r2, r5, #31
 8018c2a:	d505      	bpl.n	8018c38 <_dtoa_r+0x7c8>
 8018c2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018c30:	f108 0801 	add.w	r8, r8, #1
 8018c34:	f7e7 fcfa 	bl	800062c <__aeabi_dmul>
 8018c38:	106d      	asrs	r5, r5, #1
 8018c3a:	f109 0908 	add.w	r9, r9, #8
 8018c3e:	d1f3      	bne.n	8018c28 <_dtoa_r+0x7b8>
 8018c40:	4606      	mov	r6, r0
 8018c42:	460f      	mov	r7, r1
 8018c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c48:	4632      	mov	r2, r6
 8018c4a:	463b      	mov	r3, r7
 8018c4c:	f7e7 fe18 	bl	8000880 <__aeabi_ddiv>
 8018c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c56:	b143      	cbz	r3, 8018c6a <_dtoa_r+0x7fa>
 8018c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c5c:	2200      	movs	r2, #0
 8018c5e:	4b9d      	ldr	r3, [pc, #628]	; (8018ed4 <_dtoa_r+0xa64>)
 8018c60:	f7e7 ff56 	bl	8000b10 <__aeabi_dcmplt>
 8018c64:	2800      	cmp	r0, #0
 8018c66:	f040 82ac 	bne.w	80191c2 <_dtoa_r+0xd52>
 8018c6a:	4640      	mov	r0, r8
 8018c6c:	f7e7 fc78 	bl	8000560 <__aeabi_i2d>
 8018c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018c74:	f7e7 fcda 	bl	800062c <__aeabi_dmul>
 8018c78:	4b97      	ldr	r3, [pc, #604]	; (8018ed8 <_dtoa_r+0xa68>)
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	f7e7 fb24 	bl	80002c8 <__adddf3>
 8018c80:	9b06      	ldr	r3, [sp, #24]
 8018c82:	4606      	mov	r6, r0
 8018c84:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	f000 8162 	beq.w	8018f52 <_dtoa_r+0xae2>
 8018c8e:	9b04      	ldr	r3, [sp, #16]
 8018c90:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018c94:	9312      	str	r3, [sp, #72]	; 0x48
 8018c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	f000 8221 	beq.w	80190e0 <_dtoa_r+0xc70>
 8018c9e:	4b8b      	ldr	r3, [pc, #556]	; (8018ecc <_dtoa_r+0xa5c>)
 8018ca0:	498e      	ldr	r1, [pc, #568]	; (8018edc <_dtoa_r+0xa6c>)
 8018ca2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8018ca6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018caa:	2000      	movs	r0, #0
 8018cac:	f7e7 fde8 	bl	8000880 <__aeabi_ddiv>
 8018cb0:	4632      	mov	r2, r6
 8018cb2:	463b      	mov	r3, r7
 8018cb4:	f7e7 fb06 	bl	80002c4 <__aeabi_dsub>
 8018cb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018cbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018cc0:	4639      	mov	r1, r7
 8018cc2:	4630      	mov	r0, r6
 8018cc4:	f7e7 ff4c 	bl	8000b60 <__aeabi_d2iz>
 8018cc8:	4605      	mov	r5, r0
 8018cca:	f7e7 fc49 	bl	8000560 <__aeabi_i2d>
 8018cce:	3530      	adds	r5, #48	; 0x30
 8018cd0:	4602      	mov	r2, r0
 8018cd2:	460b      	mov	r3, r1
 8018cd4:	4630      	mov	r0, r6
 8018cd6:	4639      	mov	r1, r7
 8018cd8:	f7e7 faf4 	bl	80002c4 <__aeabi_dsub>
 8018cdc:	fa5f f885 	uxtb.w	r8, r5
 8018ce0:	9d07      	ldr	r5, [sp, #28]
 8018ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018ce6:	f885 8000 	strb.w	r8, [r5]
 8018cea:	4606      	mov	r6, r0
 8018cec:	460f      	mov	r7, r1
 8018cee:	3501      	adds	r5, #1
 8018cf0:	f7e7 ff0e 	bl	8000b10 <__aeabi_dcmplt>
 8018cf4:	2800      	cmp	r0, #0
 8018cf6:	f040 82b2 	bne.w	801925e <_dtoa_r+0xdee>
 8018cfa:	4632      	mov	r2, r6
 8018cfc:	463b      	mov	r3, r7
 8018cfe:	2000      	movs	r0, #0
 8018d00:	4974      	ldr	r1, [pc, #464]	; (8018ed4 <_dtoa_r+0xa64>)
 8018d02:	f7e7 fadf 	bl	80002c4 <__aeabi_dsub>
 8018d06:	4602      	mov	r2, r0
 8018d08:	460b      	mov	r3, r1
 8018d0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018d0e:	f7e7 ff1d 	bl	8000b4c <__aeabi_dcmpgt>
 8018d12:	2800      	cmp	r0, #0
 8018d14:	f040 82ac 	bne.w	8019270 <_dtoa_r+0xe00>
 8018d18:	f1b9 0f01 	cmp.w	r9, #1
 8018d1c:	f340 8138 	ble.w	8018f90 <_dtoa_r+0xb20>
 8018d20:	9b07      	ldr	r3, [sp, #28]
 8018d22:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8018d26:	f8cd b008 	str.w	fp, [sp, #8]
 8018d2a:	4499      	add	r9, r3
 8018d2c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8018d30:	46a0      	mov	r8, r4
 8018d32:	e00d      	b.n	8018d50 <_dtoa_r+0x8e0>
 8018d34:	2000      	movs	r0, #0
 8018d36:	4967      	ldr	r1, [pc, #412]	; (8018ed4 <_dtoa_r+0xa64>)
 8018d38:	f7e7 fac4 	bl	80002c4 <__aeabi_dsub>
 8018d3c:	4652      	mov	r2, sl
 8018d3e:	465b      	mov	r3, fp
 8018d40:	f7e7 fee6 	bl	8000b10 <__aeabi_dcmplt>
 8018d44:	2800      	cmp	r0, #0
 8018d46:	f040 828e 	bne.w	8019266 <_dtoa_r+0xdf6>
 8018d4a:	454d      	cmp	r5, r9
 8018d4c:	f000 811b 	beq.w	8018f86 <_dtoa_r+0xb16>
 8018d50:	4650      	mov	r0, sl
 8018d52:	4659      	mov	r1, fp
 8018d54:	2200      	movs	r2, #0
 8018d56:	4b62      	ldr	r3, [pc, #392]	; (8018ee0 <_dtoa_r+0xa70>)
 8018d58:	f7e7 fc68 	bl	800062c <__aeabi_dmul>
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	4b60      	ldr	r3, [pc, #384]	; (8018ee0 <_dtoa_r+0xa70>)
 8018d60:	4682      	mov	sl, r0
 8018d62:	468b      	mov	fp, r1
 8018d64:	4630      	mov	r0, r6
 8018d66:	4639      	mov	r1, r7
 8018d68:	f7e7 fc60 	bl	800062c <__aeabi_dmul>
 8018d6c:	460f      	mov	r7, r1
 8018d6e:	4606      	mov	r6, r0
 8018d70:	f7e7 fef6 	bl	8000b60 <__aeabi_d2iz>
 8018d74:	4604      	mov	r4, r0
 8018d76:	f7e7 fbf3 	bl	8000560 <__aeabi_i2d>
 8018d7a:	4602      	mov	r2, r0
 8018d7c:	460b      	mov	r3, r1
 8018d7e:	4630      	mov	r0, r6
 8018d80:	4639      	mov	r1, r7
 8018d82:	f7e7 fa9f 	bl	80002c4 <__aeabi_dsub>
 8018d86:	3430      	adds	r4, #48	; 0x30
 8018d88:	b2e4      	uxtb	r4, r4
 8018d8a:	4652      	mov	r2, sl
 8018d8c:	465b      	mov	r3, fp
 8018d8e:	f805 4b01 	strb.w	r4, [r5], #1
 8018d92:	4606      	mov	r6, r0
 8018d94:	460f      	mov	r7, r1
 8018d96:	f7e7 febb 	bl	8000b10 <__aeabi_dcmplt>
 8018d9a:	4632      	mov	r2, r6
 8018d9c:	463b      	mov	r3, r7
 8018d9e:	2800      	cmp	r0, #0
 8018da0:	d0c8      	beq.n	8018d34 <_dtoa_r+0x8c4>
 8018da2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018da4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8018da8:	9304      	str	r3, [sp, #16]
 8018daa:	4644      	mov	r4, r8
 8018dac:	e533      	b.n	8018816 <_dtoa_r+0x3a6>
 8018dae:	2300      	movs	r3, #0
 8018db0:	9309      	str	r3, [sp, #36]	; 0x24
 8018db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018db4:	9a04      	ldr	r2, [sp, #16]
 8018db6:	4413      	add	r3, r2
 8018db8:	930c      	str	r3, [sp, #48]	; 0x30
 8018dba:	3301      	adds	r3, #1
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	9306      	str	r3, [sp, #24]
 8018dc0:	f340 8109 	ble.w	8018fd6 <_dtoa_r+0xb66>
 8018dc4:	9e06      	ldr	r6, [sp, #24]
 8018dc6:	4637      	mov	r7, r6
 8018dc8:	e6ef      	b.n	8018baa <_dtoa_r+0x73a>
 8018dca:	2300      	movs	r3, #0
 8018dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8018dce:	e6e4      	b.n	8018b9a <_dtoa_r+0x72a>
 8018dd0:	9b06      	ldr	r3, [sp, #24]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	f73f ac6d 	bgt.w	80186b2 <_dtoa_r+0x242>
 8018dd8:	f040 8262 	bne.w	80192a0 <_dtoa_r+0xe30>
 8018ddc:	4640      	mov	r0, r8
 8018dde:	2200      	movs	r2, #0
 8018de0:	4b40      	ldr	r3, [pc, #256]	; (8018ee4 <_dtoa_r+0xa74>)
 8018de2:	4649      	mov	r1, r9
 8018de4:	f7e7 fc22 	bl	800062c <__aeabi_dmul>
 8018de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018dec:	f7e7 fea4 	bl	8000b38 <__aeabi_dcmpge>
 8018df0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8018df4:	4646      	mov	r6, r8
 8018df6:	2800      	cmp	r0, #0
 8018df8:	f000 808a 	beq.w	8018f10 <_dtoa_r+0xaa0>
 8018dfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018dfe:	9d07      	ldr	r5, [sp, #28]
 8018e00:	43db      	mvns	r3, r3
 8018e02:	9304      	str	r3, [sp, #16]
 8018e04:	4641      	mov	r1, r8
 8018e06:	4620      	mov	r0, r4
 8018e08:	f001 fa84 	bl	801a314 <_Bfree>
 8018e0c:	2e00      	cmp	r6, #0
 8018e0e:	f47f ae2c 	bne.w	8018a6a <_dtoa_r+0x5fa>
 8018e12:	e500      	b.n	8018816 <_dtoa_r+0x3a6>
 8018e14:	4659      	mov	r1, fp
 8018e16:	4620      	mov	r0, r4
 8018e18:	f001 fbba 	bl	801a590 <__pow5mult>
 8018e1c:	4683      	mov	fp, r0
 8018e1e:	e557      	b.n	80188d0 <_dtoa_r+0x460>
 8018e20:	9b02      	ldr	r3, [sp, #8]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	f47f ad66 	bne.w	80188f4 <_dtoa_r+0x484>
 8018e28:	9b03      	ldr	r3, [sp, #12]
 8018e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	f47f ad94 	bne.w	801895c <_dtoa_r+0x4ec>
 8018e34:	9b03      	ldr	r3, [sp, #12]
 8018e36:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8018e3a:	0d3f      	lsrs	r7, r7, #20
 8018e3c:	053f      	lsls	r7, r7, #20
 8018e3e:	2f00      	cmp	r7, #0
 8018e40:	f000 821a 	beq.w	8019278 <_dtoa_r+0xe08>
 8018e44:	9b05      	ldr	r3, [sp, #20]
 8018e46:	3301      	adds	r3, #1
 8018e48:	9305      	str	r3, [sp, #20]
 8018e4a:	f10a 0a01 	add.w	sl, sl, #1
 8018e4e:	f04f 0901 	mov.w	r9, #1
 8018e52:	e585      	b.n	8018960 <_dtoa_r+0x4f0>
 8018e54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018e56:	2a00      	cmp	r2, #0
 8018e58:	f000 81a5 	beq.w	80191a6 <_dtoa_r+0xd36>
 8018e5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018e60:	9f08      	ldr	r7, [sp, #32]
 8018e62:	9d05      	ldr	r5, [sp, #20]
 8018e64:	e4ff      	b.n	8018866 <_dtoa_r+0x3f6>
 8018e66:	f001 fa5f 	bl	801a328 <__multadd>
 8018e6a:	4657      	mov	r7, sl
 8018e6c:	4606      	mov	r6, r0
 8018e6e:	4681      	mov	r9, r0
 8018e70:	e631      	b.n	8018ad6 <_dtoa_r+0x666>
 8018e72:	4601      	mov	r1, r0
 8018e74:	4620      	mov	r0, r4
 8018e76:	f8cd c008 	str.w	ip, [sp, #8]
 8018e7a:	f001 fa4b 	bl	801a314 <_Bfree>
 8018e7e:	2201      	movs	r2, #1
 8018e80:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018e84:	e654      	b.n	8018b30 <_dtoa_r+0x6c0>
 8018e86:	4658      	mov	r0, fp
 8018e88:	4641      	mov	r1, r8
 8018e8a:	f001 fc27 	bl	801a6dc <__mcmp>
 8018e8e:	2800      	cmp	r0, #0
 8018e90:	f6bf ad91 	bge.w	80189b6 <_dtoa_r+0x546>
 8018e94:	9f04      	ldr	r7, [sp, #16]
 8018e96:	4659      	mov	r1, fp
 8018e98:	2300      	movs	r3, #0
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	220a      	movs	r2, #10
 8018e9e:	3f01      	subs	r7, #1
 8018ea0:	9704      	str	r7, [sp, #16]
 8018ea2:	f001 fa41 	bl	801a328 <__multadd>
 8018ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ea8:	4683      	mov	fp, r0
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	f47f adf0 	bne.w	8018a90 <_dtoa_r+0x620>
 8018eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	f340 81f8 	ble.w	80192a8 <_dtoa_r+0xe38>
 8018eb8:	9306      	str	r3, [sp, #24]
 8018eba:	e583      	b.n	80189c4 <_dtoa_r+0x554>
 8018ebc:	9807      	ldr	r0, [sp, #28]
 8018ebe:	f7ff bb0b 	b.w	80184d8 <_dtoa_r+0x68>
 8018ec2:	9b02      	ldr	r3, [sp, #8]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	f47f ad49 	bne.w	801895c <_dtoa_r+0x4ec>
 8018eca:	e7ad      	b.n	8018e28 <_dtoa_r+0x9b8>
 8018ecc:	08030b38 	.word	0x08030b38
 8018ed0:	08030c00 	.word	0x08030c00
 8018ed4:	3ff00000 	.word	0x3ff00000
 8018ed8:	401c0000 	.word	0x401c0000
 8018edc:	3fe00000 	.word	0x3fe00000
 8018ee0:	40240000 	.word	0x40240000
 8018ee4:	40140000 	.word	0x40140000
 8018ee8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018eea:	2b02      	cmp	r3, #2
 8018eec:	f77f ad67 	ble.w	80189be <_dtoa_r+0x54e>
 8018ef0:	9b06      	ldr	r3, [sp, #24]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d182      	bne.n	8018dfc <_dtoa_r+0x98c>
 8018ef6:	4641      	mov	r1, r8
 8018ef8:	2205      	movs	r2, #5
 8018efa:	4620      	mov	r0, r4
 8018efc:	f001 fa14 	bl	801a328 <__multadd>
 8018f00:	4680      	mov	r8, r0
 8018f02:	4641      	mov	r1, r8
 8018f04:	4658      	mov	r0, fp
 8018f06:	f001 fbe9 	bl	801a6dc <__mcmp>
 8018f0a:	2800      	cmp	r0, #0
 8018f0c:	f77f af76 	ble.w	8018dfc <_dtoa_r+0x98c>
 8018f10:	9a04      	ldr	r2, [sp, #16]
 8018f12:	9907      	ldr	r1, [sp, #28]
 8018f14:	2331      	movs	r3, #49	; 0x31
 8018f16:	3201      	adds	r2, #1
 8018f18:	9204      	str	r2, [sp, #16]
 8018f1a:	700b      	strb	r3, [r1, #0]
 8018f1c:	1c4d      	adds	r5, r1, #1
 8018f1e:	e771      	b.n	8018e04 <_dtoa_r+0x994>
 8018f20:	9a04      	ldr	r2, [sp, #16]
 8018f22:	3201      	adds	r2, #1
 8018f24:	9204      	str	r2, [sp, #16]
 8018f26:	9a07      	ldr	r2, [sp, #28]
 8018f28:	2331      	movs	r3, #49	; 0x31
 8018f2a:	7013      	strb	r3, [r2, #0]
 8018f2c:	e58d      	b.n	8018a4a <_dtoa_r+0x5da>
 8018f2e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8018f32:	9c05      	ldr	r4, [sp, #20]
 8018f34:	e46f      	b.n	8018816 <_dtoa_r+0x3a6>
 8018f36:	4640      	mov	r0, r8
 8018f38:	f7e7 fb12 	bl	8000560 <__aeabi_i2d>
 8018f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018f40:	f7e7 fb74 	bl	800062c <__aeabi_dmul>
 8018f44:	2200      	movs	r2, #0
 8018f46:	4bbc      	ldr	r3, [pc, #752]	; (8019238 <_dtoa_r+0xdc8>)
 8018f48:	f7e7 f9be 	bl	80002c8 <__adddf3>
 8018f4c:	4606      	mov	r6, r0
 8018f4e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8018f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018f56:	2200      	movs	r2, #0
 8018f58:	4bb8      	ldr	r3, [pc, #736]	; (801923c <_dtoa_r+0xdcc>)
 8018f5a:	f7e7 f9b3 	bl	80002c4 <__aeabi_dsub>
 8018f5e:	4632      	mov	r2, r6
 8018f60:	463b      	mov	r3, r7
 8018f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018f66:	f7e7 fdf1 	bl	8000b4c <__aeabi_dcmpgt>
 8018f6a:	4680      	mov	r8, r0
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	f040 80b3 	bne.w	80190d8 <_dtoa_r+0xc68>
 8018f72:	4632      	mov	r2, r6
 8018f74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018f7c:	f7e7 fdc8 	bl	8000b10 <__aeabi_dcmplt>
 8018f80:	b130      	cbz	r0, 8018f90 <_dtoa_r+0xb20>
 8018f82:	4646      	mov	r6, r8
 8018f84:	e73a      	b.n	8018dfc <_dtoa_r+0x98c>
 8018f86:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8018f8a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8018f8e:	4644      	mov	r4, r8
 8018f90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018f94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018f98:	f7ff bb7a 	b.w	8018690 <_dtoa_r+0x220>
 8018f9c:	4659      	mov	r1, fp
 8018f9e:	9a08      	ldr	r2, [sp, #32]
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	f001 faf5 	bl	801a590 <__pow5mult>
 8018fa6:	4683      	mov	fp, r0
 8018fa8:	e492      	b.n	80188d0 <_dtoa_r+0x460>
 8018faa:	9b08      	ldr	r3, [sp, #32]
 8018fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018fae:	9708      	str	r7, [sp, #32]
 8018fb0:	1afb      	subs	r3, r7, r3
 8018fb2:	441a      	add	r2, r3
 8018fb4:	920a      	str	r2, [sp, #40]	; 0x28
 8018fb6:	2700      	movs	r7, #0
 8018fb8:	e44f      	b.n	801885a <_dtoa_r+0x3ea>
 8018fba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018fbe:	f04f 0802 	mov.w	r8, #2
 8018fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018fc6:	e62a      	b.n	8018c1e <_dtoa_r+0x7ae>
 8018fc8:	2601      	movs	r6, #1
 8018fca:	9621      	str	r6, [sp, #132]	; 0x84
 8018fcc:	960c      	str	r6, [sp, #48]	; 0x30
 8018fce:	9606      	str	r6, [sp, #24]
 8018fd0:	2100      	movs	r1, #0
 8018fd2:	6461      	str	r1, [r4, #68]	; 0x44
 8018fd4:	e5f8      	b.n	8018bc8 <_dtoa_r+0x758>
 8018fd6:	461e      	mov	r6, r3
 8018fd8:	e7fa      	b.n	8018fd0 <_dtoa_r+0xb60>
 8018fda:	2a00      	cmp	r2, #0
 8018fdc:	dd15      	ble.n	801900a <_dtoa_r+0xb9a>
 8018fde:	4659      	mov	r1, fp
 8018fe0:	2201      	movs	r2, #1
 8018fe2:	4620      	mov	r0, r4
 8018fe4:	f8cd c008 	str.w	ip, [sp, #8]
 8018fe8:	f001 fb22 	bl	801a630 <__lshift>
 8018fec:	4641      	mov	r1, r8
 8018fee:	4683      	mov	fp, r0
 8018ff0:	f001 fb74 	bl	801a6dc <__mcmp>
 8018ff4:	2800      	cmp	r0, #0
 8018ff6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018ffa:	f340 814a 	ble.w	8019292 <_dtoa_r+0xe22>
 8018ffe:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8019002:	f000 8106 	beq.w	8019212 <_dtoa_r+0xda2>
 8019006:	f10c 0c01 	add.w	ip, ip, #1
 801900a:	46b2      	mov	sl, r6
 801900c:	f887 c000 	strb.w	ip, [r7]
 8019010:	1c7d      	adds	r5, r7, #1
 8019012:	464e      	mov	r6, r9
 8019014:	e519      	b.n	8018a4a <_dtoa_r+0x5da>
 8019016:	d104      	bne.n	8019022 <_dtoa_r+0xbb2>
 8019018:	f01c 0f01 	tst.w	ip, #1
 801901c:	d001      	beq.n	8019022 <_dtoa_r+0xbb2>
 801901e:	e504      	b.n	8018a2a <_dtoa_r+0x5ba>
 8019020:	4615      	mov	r5, r2
 8019022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019026:	2b30      	cmp	r3, #48	; 0x30
 8019028:	f105 32ff 	add.w	r2, r5, #4294967295
 801902c:	d0f8      	beq.n	8019020 <_dtoa_r+0xbb0>
 801902e:	e50c      	b.n	8018a4a <_dtoa_r+0x5da>
 8019030:	9b04      	ldr	r3, [sp, #16]
 8019032:	425d      	negs	r5, r3
 8019034:	2d00      	cmp	r5, #0
 8019036:	f000 80bd 	beq.w	80191b4 <_dtoa_r+0xd44>
 801903a:	4b81      	ldr	r3, [pc, #516]	; (8019240 <_dtoa_r+0xdd0>)
 801903c:	f005 020f 	and.w	r2, r5, #15
 8019040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019048:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801904c:	f7e7 faee 	bl	800062c <__aeabi_dmul>
 8019050:	112d      	asrs	r5, r5, #4
 8019052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019056:	f000 812c 	beq.w	80192b2 <_dtoa_r+0xe42>
 801905a:	4e7a      	ldr	r6, [pc, #488]	; (8019244 <_dtoa_r+0xdd4>)
 801905c:	f04f 0802 	mov.w	r8, #2
 8019060:	07eb      	lsls	r3, r5, #31
 8019062:	d505      	bpl.n	8019070 <_dtoa_r+0xc00>
 8019064:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019068:	f108 0801 	add.w	r8, r8, #1
 801906c:	f7e7 fade 	bl	800062c <__aeabi_dmul>
 8019070:	106d      	asrs	r5, r5, #1
 8019072:	f106 0608 	add.w	r6, r6, #8
 8019076:	d1f3      	bne.n	8019060 <_dtoa_r+0xbf0>
 8019078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801907c:	e5ea      	b.n	8018c54 <_dtoa_r+0x7e4>
 801907e:	9a04      	ldr	r2, [sp, #16]
 8019080:	3201      	adds	r2, #1
 8019082:	9204      	str	r2, [sp, #16]
 8019084:	9a07      	ldr	r2, [sp, #28]
 8019086:	2330      	movs	r3, #48	; 0x30
 8019088:	7013      	strb	r3, [r2, #0]
 801908a:	2331      	movs	r3, #49	; 0x31
 801908c:	7013      	strb	r3, [r2, #0]
 801908e:	f7ff bbc2 	b.w	8018816 <_dtoa_r+0x3a6>
 8019092:	6871      	ldr	r1, [r6, #4]
 8019094:	4620      	mov	r0, r4
 8019096:	f001 f917 	bl	801a2c8 <_Balloc>
 801909a:	6933      	ldr	r3, [r6, #16]
 801909c:	1c9a      	adds	r2, r3, #2
 801909e:	4605      	mov	r5, r0
 80190a0:	0092      	lsls	r2, r2, #2
 80190a2:	f106 010c 	add.w	r1, r6, #12
 80190a6:	300c      	adds	r0, #12
 80190a8:	f7e7 f86e 	bl	8000188 <memcpy>
 80190ac:	4620      	mov	r0, r4
 80190ae:	4629      	mov	r1, r5
 80190b0:	2201      	movs	r2, #1
 80190b2:	f001 fabd 	bl	801a630 <__lshift>
 80190b6:	4681      	mov	r9, r0
 80190b8:	e503      	b.n	8018ac2 <_dtoa_r+0x652>
 80190ba:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80190be:	f000 80a8 	beq.w	8019212 <_dtoa_r+0xda2>
 80190c2:	f10c 0c01 	add.w	ip, ip, #1
 80190c6:	46b2      	mov	sl, r6
 80190c8:	f887 c000 	strb.w	ip, [r7]
 80190cc:	1c7d      	adds	r5, r7, #1
 80190ce:	464e      	mov	r6, r9
 80190d0:	e4bb      	b.n	8018a4a <_dtoa_r+0x5da>
 80190d2:	46b2      	mov	sl, r6
 80190d4:	464e      	mov	r6, r9
 80190d6:	e498      	b.n	8018a0a <_dtoa_r+0x59a>
 80190d8:	f04f 0800 	mov.w	r8, #0
 80190dc:	4646      	mov	r6, r8
 80190de:	e717      	b.n	8018f10 <_dtoa_r+0xaa0>
 80190e0:	4957      	ldr	r1, [pc, #348]	; (8019240 <_dtoa_r+0xdd0>)
 80190e2:	f109 33ff 	add.w	r3, r9, #4294967295
 80190e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80190ea:	4632      	mov	r2, r6
 80190ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80190ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190f2:	463b      	mov	r3, r7
 80190f4:	f7e7 fa9a 	bl	800062c <__aeabi_dmul>
 80190f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80190fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8019100:	4639      	mov	r1, r7
 8019102:	4630      	mov	r0, r6
 8019104:	f7e7 fd2c 	bl	8000b60 <__aeabi_d2iz>
 8019108:	4605      	mov	r5, r0
 801910a:	f7e7 fa29 	bl	8000560 <__aeabi_i2d>
 801910e:	4602      	mov	r2, r0
 8019110:	460b      	mov	r3, r1
 8019112:	4630      	mov	r0, r6
 8019114:	4639      	mov	r1, r7
 8019116:	f7e7 f8d5 	bl	80002c4 <__aeabi_dsub>
 801911a:	9a07      	ldr	r2, [sp, #28]
 801911c:	3530      	adds	r5, #48	; 0x30
 801911e:	f1b9 0f01 	cmp.w	r9, #1
 8019122:	7015      	strb	r5, [r2, #0]
 8019124:	4606      	mov	r6, r0
 8019126:	460f      	mov	r7, r1
 8019128:	f102 0501 	add.w	r5, r2, #1
 801912c:	d023      	beq.n	8019176 <_dtoa_r+0xd06>
 801912e:	9b07      	ldr	r3, [sp, #28]
 8019130:	f8cd a008 	str.w	sl, [sp, #8]
 8019134:	444b      	add	r3, r9
 8019136:	465e      	mov	r6, fp
 8019138:	469a      	mov	sl, r3
 801913a:	46ab      	mov	fp, r5
 801913c:	2200      	movs	r2, #0
 801913e:	4b42      	ldr	r3, [pc, #264]	; (8019248 <_dtoa_r+0xdd8>)
 8019140:	f7e7 fa74 	bl	800062c <__aeabi_dmul>
 8019144:	4689      	mov	r9, r1
 8019146:	4680      	mov	r8, r0
 8019148:	f7e7 fd0a 	bl	8000b60 <__aeabi_d2iz>
 801914c:	4607      	mov	r7, r0
 801914e:	f7e7 fa07 	bl	8000560 <__aeabi_i2d>
 8019152:	3730      	adds	r7, #48	; 0x30
 8019154:	4602      	mov	r2, r0
 8019156:	460b      	mov	r3, r1
 8019158:	4640      	mov	r0, r8
 801915a:	4649      	mov	r1, r9
 801915c:	f7e7 f8b2 	bl	80002c4 <__aeabi_dsub>
 8019160:	f80b 7b01 	strb.w	r7, [fp], #1
 8019164:	45d3      	cmp	fp, sl
 8019166:	d1e9      	bne.n	801913c <_dtoa_r+0xccc>
 8019168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801916a:	f8dd a008 	ldr.w	sl, [sp, #8]
 801916e:	46b3      	mov	fp, r6
 8019170:	460f      	mov	r7, r1
 8019172:	4606      	mov	r6, r0
 8019174:	441d      	add	r5, r3
 8019176:	2200      	movs	r2, #0
 8019178:	4b34      	ldr	r3, [pc, #208]	; (801924c <_dtoa_r+0xddc>)
 801917a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801917e:	f7e7 f8a3 	bl	80002c8 <__adddf3>
 8019182:	4632      	mov	r2, r6
 8019184:	463b      	mov	r3, r7
 8019186:	f7e7 fcc3 	bl	8000b10 <__aeabi_dcmplt>
 801918a:	2800      	cmp	r0, #0
 801918c:	d047      	beq.n	801921e <_dtoa_r+0xdae>
 801918e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019190:	9304      	str	r3, [sp, #16]
 8019192:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8019196:	f7ff bb2c 	b.w	80187f2 <_dtoa_r+0x382>
 801919a:	9b05      	ldr	r3, [sp, #20]
 801919c:	9a06      	ldr	r2, [sp, #24]
 801919e:	1a9d      	subs	r5, r3, r2
 80191a0:	2300      	movs	r3, #0
 80191a2:	f7ff bb60 	b.w	8018866 <_dtoa_r+0x3f6>
 80191a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80191a8:	9f08      	ldr	r7, [sp, #32]
 80191aa:	9d05      	ldr	r5, [sp, #20]
 80191ac:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80191b0:	f7ff bb59 	b.w	8018866 <_dtoa_r+0x3f6>
 80191b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80191b8:	f04f 0802 	mov.w	r8, #2
 80191bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80191c0:	e548      	b.n	8018c54 <_dtoa_r+0x7e4>
 80191c2:	9b06      	ldr	r3, [sp, #24]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	f43f aeb6 	beq.w	8018f36 <_dtoa_r+0xac6>
 80191ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80191cc:	2d00      	cmp	r5, #0
 80191ce:	f77f aedf 	ble.w	8018f90 <_dtoa_r+0xb20>
 80191d2:	2200      	movs	r2, #0
 80191d4:	4b1c      	ldr	r3, [pc, #112]	; (8019248 <_dtoa_r+0xdd8>)
 80191d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80191da:	f7e7 fa27 	bl	800062c <__aeabi_dmul>
 80191de:	4606      	mov	r6, r0
 80191e0:	460f      	mov	r7, r1
 80191e2:	f108 0001 	add.w	r0, r8, #1
 80191e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80191ea:	f7e7 f9b9 	bl	8000560 <__aeabi_i2d>
 80191ee:	4602      	mov	r2, r0
 80191f0:	460b      	mov	r3, r1
 80191f2:	4630      	mov	r0, r6
 80191f4:	4639      	mov	r1, r7
 80191f6:	f7e7 fa19 	bl	800062c <__aeabi_dmul>
 80191fa:	4b0f      	ldr	r3, [pc, #60]	; (8019238 <_dtoa_r+0xdc8>)
 80191fc:	2200      	movs	r2, #0
 80191fe:	f7e7 f863 	bl	80002c8 <__adddf3>
 8019202:	9b04      	ldr	r3, [sp, #16]
 8019204:	3b01      	subs	r3, #1
 8019206:	4606      	mov	r6, r0
 8019208:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801920c:	9312      	str	r3, [sp, #72]	; 0x48
 801920e:	46a9      	mov	r9, r5
 8019210:	e541      	b.n	8018c96 <_dtoa_r+0x826>
 8019212:	2239      	movs	r2, #57	; 0x39
 8019214:	46b2      	mov	sl, r6
 8019216:	703a      	strb	r2, [r7, #0]
 8019218:	464e      	mov	r6, r9
 801921a:	1c7d      	adds	r5, r7, #1
 801921c:	e407      	b.n	8018a2e <_dtoa_r+0x5be>
 801921e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019222:	2000      	movs	r0, #0
 8019224:	4909      	ldr	r1, [pc, #36]	; (801924c <_dtoa_r+0xddc>)
 8019226:	f7e7 f84d 	bl	80002c4 <__aeabi_dsub>
 801922a:	4632      	mov	r2, r6
 801922c:	463b      	mov	r3, r7
 801922e:	f7e7 fc8d 	bl	8000b4c <__aeabi_dcmpgt>
 8019232:	b970      	cbnz	r0, 8019252 <_dtoa_r+0xde2>
 8019234:	e6ac      	b.n	8018f90 <_dtoa_r+0xb20>
 8019236:	bf00      	nop
 8019238:	401c0000 	.word	0x401c0000
 801923c:	40140000 	.word	0x40140000
 8019240:	08030b38 	.word	0x08030b38
 8019244:	08030c00 	.word	0x08030c00
 8019248:	40240000 	.word	0x40240000
 801924c:	3fe00000 	.word	0x3fe00000
 8019250:	4615      	mov	r5, r2
 8019252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019256:	2b30      	cmp	r3, #48	; 0x30
 8019258:	f105 32ff 	add.w	r2, r5, #4294967295
 801925c:	d0f8      	beq.n	8019250 <_dtoa_r+0xde0>
 801925e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019260:	9304      	str	r3, [sp, #16]
 8019262:	f7ff bad8 	b.w	8018816 <_dtoa_r+0x3a6>
 8019266:	4643      	mov	r3, r8
 8019268:	f8dd b008 	ldr.w	fp, [sp, #8]
 801926c:	46a0      	mov	r8, r4
 801926e:	461c      	mov	r4, r3
 8019270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019272:	9304      	str	r3, [sp, #16]
 8019274:	f7ff babd 	b.w	80187f2 <_dtoa_r+0x382>
 8019278:	46b9      	mov	r9, r7
 801927a:	f7ff bb71 	b.w	8018960 <_dtoa_r+0x4f0>
 801927e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8019282:	d0c6      	beq.n	8019212 <_dtoa_r+0xda2>
 8019284:	f1ba 0f00 	cmp.w	sl, #0
 8019288:	f77f aebf 	ble.w	801900a <_dtoa_r+0xb9a>
 801928c:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8019290:	e6bb      	b.n	801900a <_dtoa_r+0xb9a>
 8019292:	f47f aeba 	bne.w	801900a <_dtoa_r+0xb9a>
 8019296:	f01c 0f01 	tst.w	ip, #1
 801929a:	f43f aeb6 	beq.w	801900a <_dtoa_r+0xb9a>
 801929e:	e6ae      	b.n	8018ffe <_dtoa_r+0xb8e>
 80192a0:	f04f 0800 	mov.w	r8, #0
 80192a4:	4646      	mov	r6, r8
 80192a6:	e5a9      	b.n	8018dfc <_dtoa_r+0x98c>
 80192a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80192aa:	2b02      	cmp	r3, #2
 80192ac:	dc04      	bgt.n	80192b8 <_dtoa_r+0xe48>
 80192ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192b0:	e602      	b.n	8018eb8 <_dtoa_r+0xa48>
 80192b2:	f04f 0802 	mov.w	r8, #2
 80192b6:	e4cd      	b.n	8018c54 <_dtoa_r+0x7e4>
 80192b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192ba:	9306      	str	r3, [sp, #24]
 80192bc:	e618      	b.n	8018ef0 <_dtoa_r+0xa80>
 80192be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80192c0:	2b02      	cmp	r3, #2
 80192c2:	dcf9      	bgt.n	80192b8 <_dtoa_r+0xe48>
 80192c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192c6:	f7ff bbee 	b.w	8018aa6 <_dtoa_r+0x636>
 80192ca:	2500      	movs	r5, #0
 80192cc:	6465      	str	r5, [r4, #68]	; 0x44
 80192ce:	4629      	mov	r1, r5
 80192d0:	4620      	mov	r0, r4
 80192d2:	f000 fff9 	bl	801a2c8 <_Balloc>
 80192d6:	f04f 33ff 	mov.w	r3, #4294967295
 80192da:	9306      	str	r3, [sp, #24]
 80192dc:	930c      	str	r3, [sp, #48]	; 0x30
 80192de:	2301      	movs	r3, #1
 80192e0:	9007      	str	r0, [sp, #28]
 80192e2:	9521      	str	r5, [sp, #132]	; 0x84
 80192e4:	6420      	str	r0, [r4, #64]	; 0x40
 80192e6:	9309      	str	r3, [sp, #36]	; 0x24
 80192e8:	f7ff b9d2 	b.w	8018690 <_dtoa_r+0x220>
 80192ec:	f43f ab4d 	beq.w	801898a <_dtoa_r+0x51a>
 80192f0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80192f4:	f7ff bb44 	b.w	8018980 <_dtoa_r+0x510>
 80192f8:	2301      	movs	r3, #1
 80192fa:	9309      	str	r3, [sp, #36]	; 0x24
 80192fc:	e559      	b.n	8018db2 <_dtoa_r+0x942>
 80192fe:	2501      	movs	r5, #1
 8019300:	f7ff b990 	b.w	8018624 <_dtoa_r+0x1b4>
 8019304:	f3af 8000 	nop.w

08019308 <__sflush_r>:
 8019308:	898b      	ldrh	r3, [r1, #12]
 801930a:	b29a      	uxth	r2, r3
 801930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019310:	460d      	mov	r5, r1
 8019312:	0711      	lsls	r1, r2, #28
 8019314:	4680      	mov	r8, r0
 8019316:	d43c      	bmi.n	8019392 <__sflush_r+0x8a>
 8019318:	686a      	ldr	r2, [r5, #4]
 801931a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801931e:	2a00      	cmp	r2, #0
 8019320:	81ab      	strh	r3, [r5, #12]
 8019322:	dd65      	ble.n	80193f0 <__sflush_r+0xe8>
 8019324:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8019326:	2e00      	cmp	r6, #0
 8019328:	d04b      	beq.n	80193c2 <__sflush_r+0xba>
 801932a:	b29b      	uxth	r3, r3
 801932c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8019330:	2100      	movs	r1, #0
 8019332:	b292      	uxth	r2, r2
 8019334:	f8d8 4000 	ldr.w	r4, [r8]
 8019338:	f8c8 1000 	str.w	r1, [r8]
 801933c:	2a00      	cmp	r2, #0
 801933e:	d05b      	beq.n	80193f8 <__sflush_r+0xf0>
 8019340:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8019342:	075f      	lsls	r7, r3, #29
 8019344:	d505      	bpl.n	8019352 <__sflush_r+0x4a>
 8019346:	6869      	ldr	r1, [r5, #4]
 8019348:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801934a:	1a52      	subs	r2, r2, r1
 801934c:	b10b      	cbz	r3, 8019352 <__sflush_r+0x4a>
 801934e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8019350:	1ad2      	subs	r2, r2, r3
 8019352:	4640      	mov	r0, r8
 8019354:	69e9      	ldr	r1, [r5, #28]
 8019356:	2300      	movs	r3, #0
 8019358:	47b0      	blx	r6
 801935a:	1c46      	adds	r6, r0, #1
 801935c:	d056      	beq.n	801940c <__sflush_r+0x104>
 801935e:	89ab      	ldrh	r3, [r5, #12]
 8019360:	692a      	ldr	r2, [r5, #16]
 8019362:	602a      	str	r2, [r5, #0]
 8019364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019368:	b29b      	uxth	r3, r3
 801936a:	2200      	movs	r2, #0
 801936c:	606a      	str	r2, [r5, #4]
 801936e:	04da      	lsls	r2, r3, #19
 8019370:	81ab      	strh	r3, [r5, #12]
 8019372:	d43b      	bmi.n	80193ec <__sflush_r+0xe4>
 8019374:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019376:	f8c8 4000 	str.w	r4, [r8]
 801937a:	b311      	cbz	r1, 80193c2 <__sflush_r+0xba>
 801937c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8019380:	4299      	cmp	r1, r3
 8019382:	d002      	beq.n	801938a <__sflush_r+0x82>
 8019384:	4640      	mov	r0, r8
 8019386:	f000 f9b7 	bl	80196f8 <_free_r>
 801938a:	2000      	movs	r0, #0
 801938c:	6328      	str	r0, [r5, #48]	; 0x30
 801938e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019392:	692e      	ldr	r6, [r5, #16]
 8019394:	b1ae      	cbz	r6, 80193c2 <__sflush_r+0xba>
 8019396:	682c      	ldr	r4, [r5, #0]
 8019398:	602e      	str	r6, [r5, #0]
 801939a:	0791      	lsls	r1, r2, #30
 801939c:	bf0c      	ite	eq
 801939e:	696b      	ldreq	r3, [r5, #20]
 80193a0:	2300      	movne	r3, #0
 80193a2:	1ba4      	subs	r4, r4, r6
 80193a4:	60ab      	str	r3, [r5, #8]
 80193a6:	e00a      	b.n	80193be <__sflush_r+0xb6>
 80193a8:	4632      	mov	r2, r6
 80193aa:	4623      	mov	r3, r4
 80193ac:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80193ae:	69e9      	ldr	r1, [r5, #28]
 80193b0:	4640      	mov	r0, r8
 80193b2:	47b8      	blx	r7
 80193b4:	2800      	cmp	r0, #0
 80193b6:	eba4 0400 	sub.w	r4, r4, r0
 80193ba:	4406      	add	r6, r0
 80193bc:	dd04      	ble.n	80193c8 <__sflush_r+0xc0>
 80193be:	2c00      	cmp	r4, #0
 80193c0:	dcf2      	bgt.n	80193a8 <__sflush_r+0xa0>
 80193c2:	2000      	movs	r0, #0
 80193c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193c8:	89ab      	ldrh	r3, [r5, #12]
 80193ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193ce:	81ab      	strh	r3, [r5, #12]
 80193d0:	f04f 30ff 	mov.w	r0, #4294967295
 80193d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193d8:	89ab      	ldrh	r3, [r5, #12]
 80193da:	692a      	ldr	r2, [r5, #16]
 80193dc:	6069      	str	r1, [r5, #4]
 80193de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80193e2:	b29b      	uxth	r3, r3
 80193e4:	81ab      	strh	r3, [r5, #12]
 80193e6:	04db      	lsls	r3, r3, #19
 80193e8:	602a      	str	r2, [r5, #0]
 80193ea:	d5c3      	bpl.n	8019374 <__sflush_r+0x6c>
 80193ec:	6528      	str	r0, [r5, #80]	; 0x50
 80193ee:	e7c1      	b.n	8019374 <__sflush_r+0x6c>
 80193f0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80193f2:	2a00      	cmp	r2, #0
 80193f4:	dc96      	bgt.n	8019324 <__sflush_r+0x1c>
 80193f6:	e7e4      	b.n	80193c2 <__sflush_r+0xba>
 80193f8:	2301      	movs	r3, #1
 80193fa:	4640      	mov	r0, r8
 80193fc:	69e9      	ldr	r1, [r5, #28]
 80193fe:	47b0      	blx	r6
 8019400:	1c43      	adds	r3, r0, #1
 8019402:	4602      	mov	r2, r0
 8019404:	d019      	beq.n	801943a <__sflush_r+0x132>
 8019406:	89ab      	ldrh	r3, [r5, #12]
 8019408:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801940a:	e79a      	b.n	8019342 <__sflush_r+0x3a>
 801940c:	f8d8 1000 	ldr.w	r1, [r8]
 8019410:	2900      	cmp	r1, #0
 8019412:	d0e1      	beq.n	80193d8 <__sflush_r+0xd0>
 8019414:	291d      	cmp	r1, #29
 8019416:	d007      	beq.n	8019428 <__sflush_r+0x120>
 8019418:	2916      	cmp	r1, #22
 801941a:	d005      	beq.n	8019428 <__sflush_r+0x120>
 801941c:	89ab      	ldrh	r3, [r5, #12]
 801941e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019422:	81ab      	strh	r3, [r5, #12]
 8019424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019428:	89ab      	ldrh	r3, [r5, #12]
 801942a:	692a      	ldr	r2, [r5, #16]
 801942c:	602a      	str	r2, [r5, #0]
 801942e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019432:	2200      	movs	r2, #0
 8019434:	81ab      	strh	r3, [r5, #12]
 8019436:	606a      	str	r2, [r5, #4]
 8019438:	e79c      	b.n	8019374 <__sflush_r+0x6c>
 801943a:	f8d8 3000 	ldr.w	r3, [r8]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d0e1      	beq.n	8019406 <__sflush_r+0xfe>
 8019442:	2b1d      	cmp	r3, #29
 8019444:	d007      	beq.n	8019456 <__sflush_r+0x14e>
 8019446:	2b16      	cmp	r3, #22
 8019448:	d005      	beq.n	8019456 <__sflush_r+0x14e>
 801944a:	89ab      	ldrh	r3, [r5, #12]
 801944c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019450:	81ab      	strh	r3, [r5, #12]
 8019452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019456:	f8c8 4000 	str.w	r4, [r8]
 801945a:	e7b2      	b.n	80193c2 <__sflush_r+0xba>

0801945c <_fflush_r>:
 801945c:	b510      	push	{r4, lr}
 801945e:	4604      	mov	r4, r0
 8019460:	b082      	sub	sp, #8
 8019462:	b108      	cbz	r0, 8019468 <_fflush_r+0xc>
 8019464:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019466:	b153      	cbz	r3, 801947e <_fflush_r+0x22>
 8019468:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801946c:	b908      	cbnz	r0, 8019472 <_fflush_r+0x16>
 801946e:	b002      	add	sp, #8
 8019470:	bd10      	pop	{r4, pc}
 8019472:	4620      	mov	r0, r4
 8019474:	b002      	add	sp, #8
 8019476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801947a:	f7ff bf45 	b.w	8019308 <__sflush_r>
 801947e:	9101      	str	r1, [sp, #4]
 8019480:	f000 f880 	bl	8019584 <__sinit>
 8019484:	9901      	ldr	r1, [sp, #4]
 8019486:	e7ef      	b.n	8019468 <_fflush_r+0xc>

08019488 <_cleanup_r>:
 8019488:	4901      	ldr	r1, [pc, #4]	; (8019490 <_cleanup_r+0x8>)
 801948a:	f000 bb99 	b.w	8019bc0 <_fwalk_reent>
 801948e:	bf00      	nop
 8019490:	0801aff5 	.word	0x0801aff5

08019494 <__sinit.part.1>:
 8019494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019498:	4b35      	ldr	r3, [pc, #212]	; (8019570 <__sinit.part.1+0xdc>)
 801949a:	6845      	ldr	r5, [r0, #4]
 801949c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801949e:	2400      	movs	r4, #0
 80194a0:	4607      	mov	r7, r0
 80194a2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80194a6:	2304      	movs	r3, #4
 80194a8:	2103      	movs	r1, #3
 80194aa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 80194ae:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80194b2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80194b6:	b083      	sub	sp, #12
 80194b8:	602c      	str	r4, [r5, #0]
 80194ba:	606c      	str	r4, [r5, #4]
 80194bc:	60ac      	str	r4, [r5, #8]
 80194be:	666c      	str	r4, [r5, #100]	; 0x64
 80194c0:	81ec      	strh	r4, [r5, #14]
 80194c2:	612c      	str	r4, [r5, #16]
 80194c4:	616c      	str	r4, [r5, #20]
 80194c6:	61ac      	str	r4, [r5, #24]
 80194c8:	81ab      	strh	r3, [r5, #12]
 80194ca:	4621      	mov	r1, r4
 80194cc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80194d0:	2208      	movs	r2, #8
 80194d2:	f7fc fcf3 	bl	8015ebc <memset>
 80194d6:	68be      	ldr	r6, [r7, #8]
 80194d8:	f8df b098 	ldr.w	fp, [pc, #152]	; 8019574 <__sinit.part.1+0xe0>
 80194dc:	f8df a098 	ldr.w	sl, [pc, #152]	; 8019578 <__sinit.part.1+0xe4>
 80194e0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 801957c <__sinit.part.1+0xe8>
 80194e4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8019580 <__sinit.part.1+0xec>
 80194e8:	f8c5 b020 	str.w	fp, [r5, #32]
 80194ec:	2301      	movs	r3, #1
 80194ee:	2209      	movs	r2, #9
 80194f0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80194f4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80194f8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80194fc:	61ed      	str	r5, [r5, #28]
 80194fe:	4621      	mov	r1, r4
 8019500:	81f3      	strh	r3, [r6, #14]
 8019502:	81b2      	strh	r2, [r6, #12]
 8019504:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8019508:	6034      	str	r4, [r6, #0]
 801950a:	6074      	str	r4, [r6, #4]
 801950c:	60b4      	str	r4, [r6, #8]
 801950e:	6674      	str	r4, [r6, #100]	; 0x64
 8019510:	6134      	str	r4, [r6, #16]
 8019512:	6174      	str	r4, [r6, #20]
 8019514:	61b4      	str	r4, [r6, #24]
 8019516:	2208      	movs	r2, #8
 8019518:	9301      	str	r3, [sp, #4]
 801951a:	f7fc fccf 	bl	8015ebc <memset>
 801951e:	68fd      	ldr	r5, [r7, #12]
 8019520:	61f6      	str	r6, [r6, #28]
 8019522:	2012      	movs	r0, #18
 8019524:	2202      	movs	r2, #2
 8019526:	f8c6 b020 	str.w	fp, [r6, #32]
 801952a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 801952e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8019532:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8019536:	4621      	mov	r1, r4
 8019538:	81a8      	strh	r0, [r5, #12]
 801953a:	81ea      	strh	r2, [r5, #14]
 801953c:	602c      	str	r4, [r5, #0]
 801953e:	606c      	str	r4, [r5, #4]
 8019540:	60ac      	str	r4, [r5, #8]
 8019542:	666c      	str	r4, [r5, #100]	; 0x64
 8019544:	612c      	str	r4, [r5, #16]
 8019546:	616c      	str	r4, [r5, #20]
 8019548:	61ac      	str	r4, [r5, #24]
 801954a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 801954e:	2208      	movs	r2, #8
 8019550:	f7fc fcb4 	bl	8015ebc <memset>
 8019554:	9b01      	ldr	r3, [sp, #4]
 8019556:	61ed      	str	r5, [r5, #28]
 8019558:	f8c5 b020 	str.w	fp, [r5, #32]
 801955c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8019560:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8019564:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8019568:	63bb      	str	r3, [r7, #56]	; 0x38
 801956a:	b003      	add	sp, #12
 801956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019570:	08019489 	.word	0x08019489
 8019574:	0801adad 	.word	0x0801adad
 8019578:	0801add1 	.word	0x0801add1
 801957c:	0801ae09 	.word	0x0801ae09
 8019580:	0801ae29 	.word	0x0801ae29

08019584 <__sinit>:
 8019584:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019586:	b103      	cbz	r3, 801958a <__sinit+0x6>
 8019588:	4770      	bx	lr
 801958a:	f7ff bf83 	b.w	8019494 <__sinit.part.1>
 801958e:	bf00      	nop

08019590 <__sfp_lock_acquire>:
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop

08019594 <__sfp_lock_release>:
 8019594:	4770      	bx	lr
 8019596:	bf00      	nop

08019598 <_fputwc_r>:
 8019598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801959c:	8993      	ldrh	r3, [r2, #12]
 801959e:	4614      	mov	r4, r2
 80195a0:	049a      	lsls	r2, r3, #18
 80195a2:	b082      	sub	sp, #8
 80195a4:	4607      	mov	r7, r0
 80195a6:	460e      	mov	r6, r1
 80195a8:	d406      	bmi.n	80195b8 <_fputwc_r+0x20>
 80195aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80195ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80195b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80195b4:	81a3      	strh	r3, [r4, #12]
 80195b6:	6662      	str	r2, [r4, #100]	; 0x64
 80195b8:	f000 fb30 	bl	8019c1c <__locale_mb_cur_max>
 80195bc:	2801      	cmp	r0, #1
 80195be:	d041      	beq.n	8019644 <_fputwc_r+0xac>
 80195c0:	4638      	mov	r0, r7
 80195c2:	a901      	add	r1, sp, #4
 80195c4:	4632      	mov	r2, r6
 80195c6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80195ca:	f001 fc85 	bl	801aed8 <_wcrtomb_r>
 80195ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80195d2:	4680      	mov	r8, r0
 80195d4:	d02f      	beq.n	8019636 <_fputwc_r+0x9e>
 80195d6:	2800      	cmp	r0, #0
 80195d8:	d03c      	beq.n	8019654 <_fputwc_r+0xbc>
 80195da:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80195de:	2500      	movs	r5, #0
 80195e0:	e009      	b.n	80195f6 <_fputwc_r+0x5e>
 80195e2:	6823      	ldr	r3, [r4, #0]
 80195e4:	7019      	strb	r1, [r3, #0]
 80195e6:	6823      	ldr	r3, [r4, #0]
 80195e8:	3301      	adds	r3, #1
 80195ea:	6023      	str	r3, [r4, #0]
 80195ec:	3501      	adds	r5, #1
 80195ee:	45a8      	cmp	r8, r5
 80195f0:	d930      	bls.n	8019654 <_fputwc_r+0xbc>
 80195f2:	ab01      	add	r3, sp, #4
 80195f4:	5d59      	ldrb	r1, [r3, r5]
 80195f6:	68a3      	ldr	r3, [r4, #8]
 80195f8:	3b01      	subs	r3, #1
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	60a3      	str	r3, [r4, #8]
 80195fe:	daf0      	bge.n	80195e2 <_fputwc_r+0x4a>
 8019600:	69a2      	ldr	r2, [r4, #24]
 8019602:	4293      	cmp	r3, r2
 8019604:	db07      	blt.n	8019616 <_fputwc_r+0x7e>
 8019606:	6823      	ldr	r3, [r4, #0]
 8019608:	7019      	strb	r1, [r3, #0]
 801960a:	6823      	ldr	r3, [r4, #0]
 801960c:	7819      	ldrb	r1, [r3, #0]
 801960e:	290a      	cmp	r1, #10
 8019610:	f103 0301 	add.w	r3, r3, #1
 8019614:	d1e9      	bne.n	80195ea <_fputwc_r+0x52>
 8019616:	4638      	mov	r0, r7
 8019618:	4622      	mov	r2, r4
 801961a:	f001 fc09 	bl	801ae30 <__swbuf_r>
 801961e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8019622:	fab0 f080 	clz	r0, r0
 8019626:	0940      	lsrs	r0, r0, #5
 8019628:	2800      	cmp	r0, #0
 801962a:	d0df      	beq.n	80195ec <_fputwc_r+0x54>
 801962c:	f04f 30ff 	mov.w	r0, #4294967295
 8019630:	b002      	add	sp, #8
 8019632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019636:	89a3      	ldrh	r3, [r4, #12]
 8019638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801963c:	81a3      	strh	r3, [r4, #12]
 801963e:	b002      	add	sp, #8
 8019640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019644:	1e73      	subs	r3, r6, #1
 8019646:	2bfe      	cmp	r3, #254	; 0xfe
 8019648:	d8ba      	bhi.n	80195c0 <_fputwc_r+0x28>
 801964a:	b2f1      	uxtb	r1, r6
 801964c:	4680      	mov	r8, r0
 801964e:	f88d 1004 	strb.w	r1, [sp, #4]
 8019652:	e7c4      	b.n	80195de <_fputwc_r+0x46>
 8019654:	4630      	mov	r0, r6
 8019656:	b002      	add	sp, #8
 8019658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801965c <_malloc_trim_r>:
 801965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801965e:	4f23      	ldr	r7, [pc, #140]	; (80196ec <_malloc_trim_r+0x90>)
 8019660:	460c      	mov	r4, r1
 8019662:	4606      	mov	r6, r0
 8019664:	f000 fe2c 	bl	801a2c0 <__malloc_lock>
 8019668:	68bb      	ldr	r3, [r7, #8]
 801966a:	685d      	ldr	r5, [r3, #4]
 801966c:	f025 0503 	bic.w	r5, r5, #3
 8019670:	1b29      	subs	r1, r5, r4
 8019672:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8019676:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 801967a:	f021 010f 	bic.w	r1, r1, #15
 801967e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8019682:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8019686:	db07      	blt.n	8019698 <_malloc_trim_r+0x3c>
 8019688:	4630      	mov	r0, r6
 801968a:	2100      	movs	r1, #0
 801968c:	f001 fb32 	bl	801acf4 <_sbrk_r>
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	442b      	add	r3, r5
 8019694:	4298      	cmp	r0, r3
 8019696:	d004      	beq.n	80196a2 <_malloc_trim_r+0x46>
 8019698:	4630      	mov	r0, r6
 801969a:	f000 fe13 	bl	801a2c4 <__malloc_unlock>
 801969e:	2000      	movs	r0, #0
 80196a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196a2:	4630      	mov	r0, r6
 80196a4:	4261      	negs	r1, r4
 80196a6:	f001 fb25 	bl	801acf4 <_sbrk_r>
 80196aa:	3001      	adds	r0, #1
 80196ac:	d00d      	beq.n	80196ca <_malloc_trim_r+0x6e>
 80196ae:	4b10      	ldr	r3, [pc, #64]	; (80196f0 <_malloc_trim_r+0x94>)
 80196b0:	68ba      	ldr	r2, [r7, #8]
 80196b2:	6819      	ldr	r1, [r3, #0]
 80196b4:	1b2d      	subs	r5, r5, r4
 80196b6:	f045 0501 	orr.w	r5, r5, #1
 80196ba:	4630      	mov	r0, r6
 80196bc:	1b09      	subs	r1, r1, r4
 80196be:	6055      	str	r5, [r2, #4]
 80196c0:	6019      	str	r1, [r3, #0]
 80196c2:	f000 fdff 	bl	801a2c4 <__malloc_unlock>
 80196c6:	2001      	movs	r0, #1
 80196c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ca:	4630      	mov	r0, r6
 80196cc:	2100      	movs	r1, #0
 80196ce:	f001 fb11 	bl	801acf4 <_sbrk_r>
 80196d2:	68ba      	ldr	r2, [r7, #8]
 80196d4:	1a83      	subs	r3, r0, r2
 80196d6:	2b0f      	cmp	r3, #15
 80196d8:	ddde      	ble.n	8019698 <_malloc_trim_r+0x3c>
 80196da:	4c06      	ldr	r4, [pc, #24]	; (80196f4 <_malloc_trim_r+0x98>)
 80196dc:	4904      	ldr	r1, [pc, #16]	; (80196f0 <_malloc_trim_r+0x94>)
 80196de:	6824      	ldr	r4, [r4, #0]
 80196e0:	f043 0301 	orr.w	r3, r3, #1
 80196e4:	1b00      	subs	r0, r0, r4
 80196e6:	6053      	str	r3, [r2, #4]
 80196e8:	6008      	str	r0, [r1, #0]
 80196ea:	e7d5      	b.n	8019698 <_malloc_trim_r+0x3c>
 80196ec:	20000768 	.word	0x20000768
 80196f0:	20016f9c 	.word	0x20016f9c
 80196f4:	20000b74 	.word	0x20000b74

080196f8 <_free_r>:
 80196f8:	2900      	cmp	r1, #0
 80196fa:	d04e      	beq.n	801979a <_free_r+0xa2>
 80196fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019700:	460c      	mov	r4, r1
 8019702:	4680      	mov	r8, r0
 8019704:	f000 fddc 	bl	801a2c0 <__malloc_lock>
 8019708:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801970c:	4962      	ldr	r1, [pc, #392]	; (8019898 <_free_r+0x1a0>)
 801970e:	f027 0201 	bic.w	r2, r7, #1
 8019712:	f1a4 0508 	sub.w	r5, r4, #8
 8019716:	18ab      	adds	r3, r5, r2
 8019718:	688e      	ldr	r6, [r1, #8]
 801971a:	6858      	ldr	r0, [r3, #4]
 801971c:	429e      	cmp	r6, r3
 801971e:	f020 0003 	bic.w	r0, r0, #3
 8019722:	d05a      	beq.n	80197da <_free_r+0xe2>
 8019724:	07fe      	lsls	r6, r7, #31
 8019726:	6058      	str	r0, [r3, #4]
 8019728:	d40b      	bmi.n	8019742 <_free_r+0x4a>
 801972a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 801972e:	1bed      	subs	r5, r5, r7
 8019730:	f101 0e08 	add.w	lr, r1, #8
 8019734:	68ac      	ldr	r4, [r5, #8]
 8019736:	4574      	cmp	r4, lr
 8019738:	443a      	add	r2, r7
 801973a:	d067      	beq.n	801980c <_free_r+0x114>
 801973c:	68ef      	ldr	r7, [r5, #12]
 801973e:	60e7      	str	r7, [r4, #12]
 8019740:	60bc      	str	r4, [r7, #8]
 8019742:	181c      	adds	r4, r3, r0
 8019744:	6864      	ldr	r4, [r4, #4]
 8019746:	07e4      	lsls	r4, r4, #31
 8019748:	d40c      	bmi.n	8019764 <_free_r+0x6c>
 801974a:	4f54      	ldr	r7, [pc, #336]	; (801989c <_free_r+0x1a4>)
 801974c:	689c      	ldr	r4, [r3, #8]
 801974e:	42bc      	cmp	r4, r7
 8019750:	4402      	add	r2, r0
 8019752:	d07c      	beq.n	801984e <_free_r+0x156>
 8019754:	68d8      	ldr	r0, [r3, #12]
 8019756:	60e0      	str	r0, [r4, #12]
 8019758:	f042 0301 	orr.w	r3, r2, #1
 801975c:	6084      	str	r4, [r0, #8]
 801975e:	606b      	str	r3, [r5, #4]
 8019760:	50aa      	str	r2, [r5, r2]
 8019762:	e003      	b.n	801976c <_free_r+0x74>
 8019764:	f042 0301 	orr.w	r3, r2, #1
 8019768:	606b      	str	r3, [r5, #4]
 801976a:	50aa      	str	r2, [r5, r2]
 801976c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8019770:	d214      	bcs.n	801979c <_free_r+0xa4>
 8019772:	08d2      	lsrs	r2, r2, #3
 8019774:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8019778:	6848      	ldr	r0, [r1, #4]
 801977a:	689f      	ldr	r7, [r3, #8]
 801977c:	60af      	str	r7, [r5, #8]
 801977e:	1092      	asrs	r2, r2, #2
 8019780:	2401      	movs	r4, #1
 8019782:	fa04 f202 	lsl.w	r2, r4, r2
 8019786:	4310      	orrs	r0, r2
 8019788:	60eb      	str	r3, [r5, #12]
 801978a:	6048      	str	r0, [r1, #4]
 801978c:	609d      	str	r5, [r3, #8]
 801978e:	60fd      	str	r5, [r7, #12]
 8019790:	4640      	mov	r0, r8
 8019792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019796:	f000 bd95 	b.w	801a2c4 <__malloc_unlock>
 801979a:	4770      	bx	lr
 801979c:	0a53      	lsrs	r3, r2, #9
 801979e:	2b04      	cmp	r3, #4
 80197a0:	d847      	bhi.n	8019832 <_free_r+0x13a>
 80197a2:	0993      	lsrs	r3, r2, #6
 80197a4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80197a8:	0060      	lsls	r0, r4, #1
 80197aa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80197ae:	493a      	ldr	r1, [pc, #232]	; (8019898 <_free_r+0x1a0>)
 80197b0:	6883      	ldr	r3, [r0, #8]
 80197b2:	4283      	cmp	r3, r0
 80197b4:	d043      	beq.n	801983e <_free_r+0x146>
 80197b6:	6859      	ldr	r1, [r3, #4]
 80197b8:	f021 0103 	bic.w	r1, r1, #3
 80197bc:	4291      	cmp	r1, r2
 80197be:	d902      	bls.n	80197c6 <_free_r+0xce>
 80197c0:	689b      	ldr	r3, [r3, #8]
 80197c2:	4298      	cmp	r0, r3
 80197c4:	d1f7      	bne.n	80197b6 <_free_r+0xbe>
 80197c6:	68da      	ldr	r2, [r3, #12]
 80197c8:	60ea      	str	r2, [r5, #12]
 80197ca:	60ab      	str	r3, [r5, #8]
 80197cc:	4640      	mov	r0, r8
 80197ce:	6095      	str	r5, [r2, #8]
 80197d0:	60dd      	str	r5, [r3, #12]
 80197d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197d6:	f000 bd75 	b.w	801a2c4 <__malloc_unlock>
 80197da:	07ff      	lsls	r7, r7, #31
 80197dc:	4402      	add	r2, r0
 80197de:	d407      	bmi.n	80197f0 <_free_r+0xf8>
 80197e0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80197e4:	1aed      	subs	r5, r5, r3
 80197e6:	441a      	add	r2, r3
 80197e8:	68a8      	ldr	r0, [r5, #8]
 80197ea:	68eb      	ldr	r3, [r5, #12]
 80197ec:	60c3      	str	r3, [r0, #12]
 80197ee:	6098      	str	r0, [r3, #8]
 80197f0:	4b2b      	ldr	r3, [pc, #172]	; (80198a0 <_free_r+0x1a8>)
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	f042 0001 	orr.w	r0, r2, #1
 80197f8:	429a      	cmp	r2, r3
 80197fa:	6068      	str	r0, [r5, #4]
 80197fc:	608d      	str	r5, [r1, #8]
 80197fe:	d3c7      	bcc.n	8019790 <_free_r+0x98>
 8019800:	4b28      	ldr	r3, [pc, #160]	; (80198a4 <_free_r+0x1ac>)
 8019802:	4640      	mov	r0, r8
 8019804:	6819      	ldr	r1, [r3, #0]
 8019806:	f7ff ff29 	bl	801965c <_malloc_trim_r>
 801980a:	e7c1      	b.n	8019790 <_free_r+0x98>
 801980c:	1819      	adds	r1, r3, r0
 801980e:	6849      	ldr	r1, [r1, #4]
 8019810:	07c9      	lsls	r1, r1, #31
 8019812:	d409      	bmi.n	8019828 <_free_r+0x130>
 8019814:	68d9      	ldr	r1, [r3, #12]
 8019816:	689b      	ldr	r3, [r3, #8]
 8019818:	4402      	add	r2, r0
 801981a:	f042 0001 	orr.w	r0, r2, #1
 801981e:	60d9      	str	r1, [r3, #12]
 8019820:	608b      	str	r3, [r1, #8]
 8019822:	6068      	str	r0, [r5, #4]
 8019824:	50aa      	str	r2, [r5, r2]
 8019826:	e7b3      	b.n	8019790 <_free_r+0x98>
 8019828:	f042 0301 	orr.w	r3, r2, #1
 801982c:	606b      	str	r3, [r5, #4]
 801982e:	50aa      	str	r2, [r5, r2]
 8019830:	e7ae      	b.n	8019790 <_free_r+0x98>
 8019832:	2b14      	cmp	r3, #20
 8019834:	d814      	bhi.n	8019860 <_free_r+0x168>
 8019836:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 801983a:	0060      	lsls	r0, r4, #1
 801983c:	e7b5      	b.n	80197aa <_free_r+0xb2>
 801983e:	684a      	ldr	r2, [r1, #4]
 8019840:	10a4      	asrs	r4, r4, #2
 8019842:	2001      	movs	r0, #1
 8019844:	40a0      	lsls	r0, r4
 8019846:	4302      	orrs	r2, r0
 8019848:	604a      	str	r2, [r1, #4]
 801984a:	461a      	mov	r2, r3
 801984c:	e7bc      	b.n	80197c8 <_free_r+0xd0>
 801984e:	f042 0301 	orr.w	r3, r2, #1
 8019852:	614d      	str	r5, [r1, #20]
 8019854:	610d      	str	r5, [r1, #16]
 8019856:	60ec      	str	r4, [r5, #12]
 8019858:	60ac      	str	r4, [r5, #8]
 801985a:	606b      	str	r3, [r5, #4]
 801985c:	50aa      	str	r2, [r5, r2]
 801985e:	e797      	b.n	8019790 <_free_r+0x98>
 8019860:	2b54      	cmp	r3, #84	; 0x54
 8019862:	d804      	bhi.n	801986e <_free_r+0x176>
 8019864:	0b13      	lsrs	r3, r2, #12
 8019866:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 801986a:	0060      	lsls	r0, r4, #1
 801986c:	e79d      	b.n	80197aa <_free_r+0xb2>
 801986e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8019872:	d804      	bhi.n	801987e <_free_r+0x186>
 8019874:	0bd3      	lsrs	r3, r2, #15
 8019876:	f103 0477 	add.w	r4, r3, #119	; 0x77
 801987a:	0060      	lsls	r0, r4, #1
 801987c:	e795      	b.n	80197aa <_free_r+0xb2>
 801987e:	f240 5054 	movw	r0, #1364	; 0x554
 8019882:	4283      	cmp	r3, r0
 8019884:	d804      	bhi.n	8019890 <_free_r+0x198>
 8019886:	0c93      	lsrs	r3, r2, #18
 8019888:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801988c:	0060      	lsls	r0, r4, #1
 801988e:	e78c      	b.n	80197aa <_free_r+0xb2>
 8019890:	20fc      	movs	r0, #252	; 0xfc
 8019892:	247e      	movs	r4, #126	; 0x7e
 8019894:	e789      	b.n	80197aa <_free_r+0xb2>
 8019896:	bf00      	nop
 8019898:	20000768 	.word	0x20000768
 801989c:	20000770 	.word	0x20000770
 80198a0:	20000b70 	.word	0x20000b70
 80198a4:	20016f98 	.word	0x20016f98

080198a8 <__sfvwrite_r>:
 80198a8:	6893      	ldr	r3, [r2, #8]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d07a      	beq.n	80199a4 <__sfvwrite_r+0xfc>
 80198ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198b2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80198b6:	f01e 0f08 	tst.w	lr, #8
 80198ba:	b083      	sub	sp, #12
 80198bc:	460c      	mov	r4, r1
 80198be:	4681      	mov	r9, r0
 80198c0:	4616      	mov	r6, r2
 80198c2:	d026      	beq.n	8019912 <__sfvwrite_r+0x6a>
 80198c4:	690b      	ldr	r3, [r1, #16]
 80198c6:	b323      	cbz	r3, 8019912 <__sfvwrite_r+0x6a>
 80198c8:	f00e 0802 	and.w	r8, lr, #2
 80198cc:	fa1f f088 	uxth.w	r0, r8
 80198d0:	6835      	ldr	r5, [r6, #0]
 80198d2:	b370      	cbz	r0, 8019932 <__sfvwrite_r+0x8a>
 80198d4:	f04f 0a00 	mov.w	sl, #0
 80198d8:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8019bbc <__sfvwrite_r+0x314>
 80198dc:	46d0      	mov	r8, sl
 80198de:	45d8      	cmp	r8, fp
 80198e0:	4643      	mov	r3, r8
 80198e2:	4652      	mov	r2, sl
 80198e4:	bf28      	it	cs
 80198e6:	465b      	movcs	r3, fp
 80198e8:	4648      	mov	r0, r9
 80198ea:	f1b8 0f00 	cmp.w	r8, #0
 80198ee:	d053      	beq.n	8019998 <__sfvwrite_r+0xf0>
 80198f0:	69e1      	ldr	r1, [r4, #28]
 80198f2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80198f4:	47b8      	blx	r7
 80198f6:	2800      	cmp	r0, #0
 80198f8:	dd73      	ble.n	80199e2 <__sfvwrite_r+0x13a>
 80198fa:	68b3      	ldr	r3, [r6, #8]
 80198fc:	1a1b      	subs	r3, r3, r0
 80198fe:	4482      	add	sl, r0
 8019900:	ebc0 0808 	rsb	r8, r0, r8
 8019904:	60b3      	str	r3, [r6, #8]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d1e9      	bne.n	80198de <__sfvwrite_r+0x36>
 801990a:	2000      	movs	r0, #0
 801990c:	b003      	add	sp, #12
 801990e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019912:	4648      	mov	r0, r9
 8019914:	4621      	mov	r1, r4
 8019916:	f7fe fcab 	bl	8018270 <__swsetup_r>
 801991a:	2800      	cmp	r0, #0
 801991c:	f040 8145 	bne.w	8019baa <__sfvwrite_r+0x302>
 8019920:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8019924:	6835      	ldr	r5, [r6, #0]
 8019926:	f00e 0802 	and.w	r8, lr, #2
 801992a:	fa1f f088 	uxth.w	r0, r8
 801992e:	2800      	cmp	r0, #0
 8019930:	d1d0      	bne.n	80198d4 <__sfvwrite_r+0x2c>
 8019932:	f01e 0b01 	ands.w	fp, lr, #1
 8019936:	d15d      	bne.n	80199f4 <__sfvwrite_r+0x14c>
 8019938:	46d8      	mov	r8, fp
 801993a:	f1b8 0f00 	cmp.w	r8, #0
 801993e:	d025      	beq.n	801998c <__sfvwrite_r+0xe4>
 8019940:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8019944:	68a7      	ldr	r7, [r4, #8]
 8019946:	d02f      	beq.n	80199a8 <__sfvwrite_r+0x100>
 8019948:	45b8      	cmp	r8, r7
 801994a:	46ba      	mov	sl, r7
 801994c:	f0c0 80a9 	bcc.w	8019aa2 <__sfvwrite_r+0x1fa>
 8019950:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8019954:	f040 80b6 	bne.w	8019ac4 <__sfvwrite_r+0x21c>
 8019958:	6820      	ldr	r0, [r4, #0]
 801995a:	4652      	mov	r2, sl
 801995c:	4659      	mov	r1, fp
 801995e:	f7fc fa49 	bl	8015df4 <memmove>
 8019962:	68a0      	ldr	r0, [r4, #8]
 8019964:	6822      	ldr	r2, [r4, #0]
 8019966:	1bc0      	subs	r0, r0, r7
 8019968:	eb02 030a 	add.w	r3, r2, sl
 801996c:	60a0      	str	r0, [r4, #8]
 801996e:	6023      	str	r3, [r4, #0]
 8019970:	4640      	mov	r0, r8
 8019972:	68b3      	ldr	r3, [r6, #8]
 8019974:	1a1b      	subs	r3, r3, r0
 8019976:	4483      	add	fp, r0
 8019978:	ebc0 0808 	rsb	r8, r0, r8
 801997c:	60b3      	str	r3, [r6, #8]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d0c3      	beq.n	801990a <__sfvwrite_r+0x62>
 8019982:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8019986:	f1b8 0f00 	cmp.w	r8, #0
 801998a:	d1d9      	bne.n	8019940 <__sfvwrite_r+0x98>
 801998c:	f8d5 b000 	ldr.w	fp, [r5]
 8019990:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8019994:	3508      	adds	r5, #8
 8019996:	e7d0      	b.n	801993a <__sfvwrite_r+0x92>
 8019998:	f8d5 a000 	ldr.w	sl, [r5]
 801999c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80199a0:	3508      	adds	r5, #8
 80199a2:	e79c      	b.n	80198de <__sfvwrite_r+0x36>
 80199a4:	2000      	movs	r0, #0
 80199a6:	4770      	bx	lr
 80199a8:	6820      	ldr	r0, [r4, #0]
 80199aa:	6923      	ldr	r3, [r4, #16]
 80199ac:	4298      	cmp	r0, r3
 80199ae:	d803      	bhi.n	80199b8 <__sfvwrite_r+0x110>
 80199b0:	6962      	ldr	r2, [r4, #20]
 80199b2:	4590      	cmp	r8, r2
 80199b4:	f080 80b9 	bcs.w	8019b2a <__sfvwrite_r+0x282>
 80199b8:	4547      	cmp	r7, r8
 80199ba:	bf28      	it	cs
 80199bc:	4647      	movcs	r7, r8
 80199be:	463a      	mov	r2, r7
 80199c0:	4659      	mov	r1, fp
 80199c2:	f7fc fa17 	bl	8015df4 <memmove>
 80199c6:	68a3      	ldr	r3, [r4, #8]
 80199c8:	6822      	ldr	r2, [r4, #0]
 80199ca:	1bdb      	subs	r3, r3, r7
 80199cc:	443a      	add	r2, r7
 80199ce:	60a3      	str	r3, [r4, #8]
 80199d0:	6022      	str	r2, [r4, #0]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d14a      	bne.n	8019a6c <__sfvwrite_r+0x1c4>
 80199d6:	4648      	mov	r0, r9
 80199d8:	4621      	mov	r1, r4
 80199da:	f7ff fd3f 	bl	801945c <_fflush_r>
 80199de:	2800      	cmp	r0, #0
 80199e0:	d044      	beq.n	8019a6c <__sfvwrite_r+0x1c4>
 80199e2:	89a3      	ldrh	r3, [r4, #12]
 80199e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199e8:	f04f 30ff 	mov.w	r0, #4294967295
 80199ec:	81a3      	strh	r3, [r4, #12]
 80199ee:	b003      	add	sp, #12
 80199f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199f4:	4680      	mov	r8, r0
 80199f6:	9000      	str	r0, [sp, #0]
 80199f8:	4683      	mov	fp, r0
 80199fa:	4682      	mov	sl, r0
 80199fc:	f1ba 0f00 	cmp.w	sl, #0
 8019a00:	d02c      	beq.n	8019a5c <__sfvwrite_r+0x1b4>
 8019a02:	9b00      	ldr	r3, [sp, #0]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d050      	beq.n	8019aaa <__sfvwrite_r+0x202>
 8019a08:	6820      	ldr	r0, [r4, #0]
 8019a0a:	6921      	ldr	r1, [r4, #16]
 8019a0c:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8019a10:	6962      	ldr	r2, [r4, #20]
 8019a12:	45d0      	cmp	r8, sl
 8019a14:	4643      	mov	r3, r8
 8019a16:	bf28      	it	cs
 8019a18:	4653      	movcs	r3, sl
 8019a1a:	4288      	cmp	r0, r1
 8019a1c:	461f      	mov	r7, r3
 8019a1e:	d904      	bls.n	8019a2a <__sfvwrite_r+0x182>
 8019a20:	eb0e 0c02 	add.w	ip, lr, r2
 8019a24:	4563      	cmp	r3, ip
 8019a26:	f300 8092 	bgt.w	8019b4e <__sfvwrite_r+0x2a6>
 8019a2a:	4293      	cmp	r3, r2
 8019a2c:	db20      	blt.n	8019a70 <__sfvwrite_r+0x1c8>
 8019a2e:	4613      	mov	r3, r2
 8019a30:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8019a32:	69e1      	ldr	r1, [r4, #28]
 8019a34:	4648      	mov	r0, r9
 8019a36:	465a      	mov	r2, fp
 8019a38:	47b8      	blx	r7
 8019a3a:	1e07      	subs	r7, r0, #0
 8019a3c:	ddd1      	ble.n	80199e2 <__sfvwrite_r+0x13a>
 8019a3e:	ebb8 0807 	subs.w	r8, r8, r7
 8019a42:	d025      	beq.n	8019a90 <__sfvwrite_r+0x1e8>
 8019a44:	68b3      	ldr	r3, [r6, #8]
 8019a46:	1bdb      	subs	r3, r3, r7
 8019a48:	44bb      	add	fp, r7
 8019a4a:	ebc7 0a0a 	rsb	sl, r7, sl
 8019a4e:	60b3      	str	r3, [r6, #8]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	f43f af5a 	beq.w	801990a <__sfvwrite_r+0x62>
 8019a56:	f1ba 0f00 	cmp.w	sl, #0
 8019a5a:	d1d2      	bne.n	8019a02 <__sfvwrite_r+0x15a>
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	f8d5 b000 	ldr.w	fp, [r5]
 8019a62:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8019a66:	9300      	str	r3, [sp, #0]
 8019a68:	3508      	adds	r5, #8
 8019a6a:	e7c7      	b.n	80199fc <__sfvwrite_r+0x154>
 8019a6c:	4638      	mov	r0, r7
 8019a6e:	e780      	b.n	8019972 <__sfvwrite_r+0xca>
 8019a70:	461a      	mov	r2, r3
 8019a72:	4659      	mov	r1, fp
 8019a74:	9301      	str	r3, [sp, #4]
 8019a76:	f7fc f9bd 	bl	8015df4 <memmove>
 8019a7a:	68a2      	ldr	r2, [r4, #8]
 8019a7c:	6821      	ldr	r1, [r4, #0]
 8019a7e:	9b01      	ldr	r3, [sp, #4]
 8019a80:	ebb8 0807 	subs.w	r8, r8, r7
 8019a84:	eba2 0203 	sub.w	r2, r2, r3
 8019a88:	440b      	add	r3, r1
 8019a8a:	60a2      	str	r2, [r4, #8]
 8019a8c:	6023      	str	r3, [r4, #0]
 8019a8e:	d1d9      	bne.n	8019a44 <__sfvwrite_r+0x19c>
 8019a90:	4648      	mov	r0, r9
 8019a92:	4621      	mov	r1, r4
 8019a94:	f7ff fce2 	bl	801945c <_fflush_r>
 8019a98:	2800      	cmp	r0, #0
 8019a9a:	d1a2      	bne.n	80199e2 <__sfvwrite_r+0x13a>
 8019a9c:	f8cd 8000 	str.w	r8, [sp]
 8019aa0:	e7d0      	b.n	8019a44 <__sfvwrite_r+0x19c>
 8019aa2:	6820      	ldr	r0, [r4, #0]
 8019aa4:	4647      	mov	r7, r8
 8019aa6:	46c2      	mov	sl, r8
 8019aa8:	e757      	b.n	801995a <__sfvwrite_r+0xb2>
 8019aaa:	4658      	mov	r0, fp
 8019aac:	210a      	movs	r1, #10
 8019aae:	4652      	mov	r2, sl
 8019ab0:	f000 fbbc 	bl	801a22c <memchr>
 8019ab4:	2800      	cmp	r0, #0
 8019ab6:	d073      	beq.n	8019ba0 <__sfvwrite_r+0x2f8>
 8019ab8:	3001      	adds	r0, #1
 8019aba:	2301      	movs	r3, #1
 8019abc:	ebcb 0800 	rsb	r8, fp, r0
 8019ac0:	9300      	str	r3, [sp, #0]
 8019ac2:	e7a1      	b.n	8019a08 <__sfvwrite_r+0x160>
 8019ac4:	6967      	ldr	r7, [r4, #20]
 8019ac6:	6921      	ldr	r1, [r4, #16]
 8019ac8:	6823      	ldr	r3, [r4, #0]
 8019aca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019ace:	1a5b      	subs	r3, r3, r1
 8019ad0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8019ad4:	1c58      	adds	r0, r3, #1
 8019ad6:	107f      	asrs	r7, r7, #1
 8019ad8:	4440      	add	r0, r8
 8019ada:	4287      	cmp	r7, r0
 8019adc:	463a      	mov	r2, r7
 8019ade:	bf3c      	itt	cc
 8019ae0:	4607      	movcc	r7, r0
 8019ae2:	463a      	movcc	r2, r7
 8019ae4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8019ae8:	9300      	str	r3, [sp, #0]
 8019aea:	d046      	beq.n	8019b7a <__sfvwrite_r+0x2d2>
 8019aec:	4611      	mov	r1, r2
 8019aee:	4648      	mov	r0, r9
 8019af0:	f000 f90e 	bl	8019d10 <_malloc_r>
 8019af4:	9b00      	ldr	r3, [sp, #0]
 8019af6:	4682      	mov	sl, r0
 8019af8:	2800      	cmp	r0, #0
 8019afa:	d059      	beq.n	8019bb0 <__sfvwrite_r+0x308>
 8019afc:	461a      	mov	r2, r3
 8019afe:	6921      	ldr	r1, [r4, #16]
 8019b00:	9300      	str	r3, [sp, #0]
 8019b02:	f7e6 fb41 	bl	8000188 <memcpy>
 8019b06:	89a2      	ldrh	r2, [r4, #12]
 8019b08:	9b00      	ldr	r3, [sp, #0]
 8019b0a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8019b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019b12:	81a2      	strh	r2, [r4, #12]
 8019b14:	eb0a 0003 	add.w	r0, sl, r3
 8019b18:	1afb      	subs	r3, r7, r3
 8019b1a:	f8c4 a010 	str.w	sl, [r4, #16]
 8019b1e:	6167      	str	r7, [r4, #20]
 8019b20:	6020      	str	r0, [r4, #0]
 8019b22:	60a3      	str	r3, [r4, #8]
 8019b24:	4647      	mov	r7, r8
 8019b26:	46c2      	mov	sl, r8
 8019b28:	e717      	b.n	801995a <__sfvwrite_r+0xb2>
 8019b2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019b2e:	4543      	cmp	r3, r8
 8019b30:	bf28      	it	cs
 8019b32:	4643      	movcs	r3, r8
 8019b34:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8019b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8019b3a:	4648      	mov	r0, r9
 8019b3c:	fb03 f302 	mul.w	r3, r3, r2
 8019b40:	69e1      	ldr	r1, [r4, #28]
 8019b42:	465a      	mov	r2, fp
 8019b44:	47b8      	blx	r7
 8019b46:	2800      	cmp	r0, #0
 8019b48:	f73f af13 	bgt.w	8019972 <__sfvwrite_r+0xca>
 8019b4c:	e749      	b.n	80199e2 <__sfvwrite_r+0x13a>
 8019b4e:	4662      	mov	r2, ip
 8019b50:	4659      	mov	r1, fp
 8019b52:	f8cd c004 	str.w	ip, [sp, #4]
 8019b56:	f7fc f94d 	bl	8015df4 <memmove>
 8019b5a:	6823      	ldr	r3, [r4, #0]
 8019b5c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019b60:	4463      	add	r3, ip
 8019b62:	6023      	str	r3, [r4, #0]
 8019b64:	4648      	mov	r0, r9
 8019b66:	4621      	mov	r1, r4
 8019b68:	f7ff fc78 	bl	801945c <_fflush_r>
 8019b6c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019b70:	2800      	cmp	r0, #0
 8019b72:	f47f af36 	bne.w	80199e2 <__sfvwrite_r+0x13a>
 8019b76:	4667      	mov	r7, ip
 8019b78:	e761      	b.n	8019a3e <__sfvwrite_r+0x196>
 8019b7a:	4648      	mov	r0, r9
 8019b7c:	f000 fe98 	bl	801a8b0 <_realloc_r>
 8019b80:	9b00      	ldr	r3, [sp, #0]
 8019b82:	4682      	mov	sl, r0
 8019b84:	2800      	cmp	r0, #0
 8019b86:	d1c5      	bne.n	8019b14 <__sfvwrite_r+0x26c>
 8019b88:	4648      	mov	r0, r9
 8019b8a:	6921      	ldr	r1, [r4, #16]
 8019b8c:	f7ff fdb4 	bl	80196f8 <_free_r>
 8019b90:	89a3      	ldrh	r3, [r4, #12]
 8019b92:	220c      	movs	r2, #12
 8019b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019b98:	b29b      	uxth	r3, r3
 8019b9a:	f8c9 2000 	str.w	r2, [r9]
 8019b9e:	e721      	b.n	80199e4 <__sfvwrite_r+0x13c>
 8019ba0:	2301      	movs	r3, #1
 8019ba2:	f10a 0801 	add.w	r8, sl, #1
 8019ba6:	9300      	str	r3, [sp, #0]
 8019ba8:	e72e      	b.n	8019a08 <__sfvwrite_r+0x160>
 8019baa:	f04f 30ff 	mov.w	r0, #4294967295
 8019bae:	e6ad      	b.n	801990c <__sfvwrite_r+0x64>
 8019bb0:	230c      	movs	r3, #12
 8019bb2:	f8c9 3000 	str.w	r3, [r9]
 8019bb6:	89a3      	ldrh	r3, [r4, #12]
 8019bb8:	e714      	b.n	80199e4 <__sfvwrite_r+0x13c>
 8019bba:	bf00      	nop
 8019bbc:	7ffffc00 	.word	0x7ffffc00

08019bc0 <_fwalk_reent>:
 8019bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bc4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8019bc8:	d01f      	beq.n	8019c0a <_fwalk_reent+0x4a>
 8019bca:	4688      	mov	r8, r1
 8019bcc:	4606      	mov	r6, r0
 8019bce:	f04f 0900 	mov.w	r9, #0
 8019bd2:	687d      	ldr	r5, [r7, #4]
 8019bd4:	68bc      	ldr	r4, [r7, #8]
 8019bd6:	3d01      	subs	r5, #1
 8019bd8:	d411      	bmi.n	8019bfe <_fwalk_reent+0x3e>
 8019bda:	89a3      	ldrh	r3, [r4, #12]
 8019bdc:	2b01      	cmp	r3, #1
 8019bde:	f105 35ff 	add.w	r5, r5, #4294967295
 8019be2:	d908      	bls.n	8019bf6 <_fwalk_reent+0x36>
 8019be4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8019be8:	3301      	adds	r3, #1
 8019bea:	4621      	mov	r1, r4
 8019bec:	4630      	mov	r0, r6
 8019bee:	d002      	beq.n	8019bf6 <_fwalk_reent+0x36>
 8019bf0:	47c0      	blx	r8
 8019bf2:	ea49 0900 	orr.w	r9, r9, r0
 8019bf6:	1c6b      	adds	r3, r5, #1
 8019bf8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8019bfc:	d1ed      	bne.n	8019bda <_fwalk_reent+0x1a>
 8019bfe:	683f      	ldr	r7, [r7, #0]
 8019c00:	2f00      	cmp	r7, #0
 8019c02:	d1e6      	bne.n	8019bd2 <_fwalk_reent+0x12>
 8019c04:	4648      	mov	r0, r9
 8019c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c0a:	46b9      	mov	r9, r7
 8019c0c:	4648      	mov	r0, r9
 8019c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c12:	bf00      	nop

08019c14 <__locale_charset>:
 8019c14:	4800      	ldr	r0, [pc, #0]	; (8019c18 <__locale_charset+0x4>)
 8019c16:	4770      	bx	lr
 8019c18:	20000744 	.word	0x20000744

08019c1c <__locale_mb_cur_max>:
 8019c1c:	4b01      	ldr	r3, [pc, #4]	; (8019c24 <__locale_mb_cur_max+0x8>)
 8019c1e:	6818      	ldr	r0, [r3, #0]
 8019c20:	4770      	bx	lr
 8019c22:	bf00      	nop
 8019c24:	20000764 	.word	0x20000764

08019c28 <_localeconv_r>:
 8019c28:	4800      	ldr	r0, [pc, #0]	; (8019c2c <_localeconv_r+0x4>)
 8019c2a:	4770      	bx	lr
 8019c2c:	2000070c 	.word	0x2000070c

08019c30 <__smakebuf_r>:
 8019c30:	898b      	ldrh	r3, [r1, #12]
 8019c32:	b29a      	uxth	r2, r3
 8019c34:	f012 0f02 	tst.w	r2, #2
 8019c38:	d13c      	bne.n	8019cb4 <__smakebuf_r+0x84>
 8019c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c3c:	460c      	mov	r4, r1
 8019c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c42:	2900      	cmp	r1, #0
 8019c44:	b091      	sub	sp, #68	; 0x44
 8019c46:	4605      	mov	r5, r0
 8019c48:	db19      	blt.n	8019c7e <__smakebuf_r+0x4e>
 8019c4a:	aa01      	add	r2, sp, #4
 8019c4c:	f001 fa14 	bl	801b078 <_fstat_r>
 8019c50:	2800      	cmp	r0, #0
 8019c52:	db12      	blt.n	8019c7a <__smakebuf_r+0x4a>
 8019c54:	9b02      	ldr	r3, [sp, #8]
 8019c56:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8019c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019c5e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8019c62:	fab7 f787 	clz	r7, r7
 8019c66:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8019c6a:	d02a      	beq.n	8019cc2 <__smakebuf_r+0x92>
 8019c6c:	89a3      	ldrh	r3, [r4, #12]
 8019c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019c72:	81a3      	strh	r3, [r4, #12]
 8019c74:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8019c78:	e00b      	b.n	8019c92 <__smakebuf_r+0x62>
 8019c7a:	89a3      	ldrh	r3, [r4, #12]
 8019c7c:	b29a      	uxth	r2, r3
 8019c7e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8019c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019c86:	81a3      	strh	r3, [r4, #12]
 8019c88:	bf0c      	ite	eq
 8019c8a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8019c8e:	2640      	movne	r6, #64	; 0x40
 8019c90:	2700      	movs	r7, #0
 8019c92:	4628      	mov	r0, r5
 8019c94:	4631      	mov	r1, r6
 8019c96:	f000 f83b 	bl	8019d10 <_malloc_r>
 8019c9a:	89a3      	ldrh	r3, [r4, #12]
 8019c9c:	b340      	cbz	r0, 8019cf0 <__smakebuf_r+0xc0>
 8019c9e:	4a1a      	ldr	r2, [pc, #104]	; (8019d08 <__smakebuf_r+0xd8>)
 8019ca0:	63ea      	str	r2, [r5, #60]	; 0x3c
 8019ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ca6:	81a3      	strh	r3, [r4, #12]
 8019ca8:	6020      	str	r0, [r4, #0]
 8019caa:	6120      	str	r0, [r4, #16]
 8019cac:	6166      	str	r6, [r4, #20]
 8019cae:	b99f      	cbnz	r7, 8019cd8 <__smakebuf_r+0xa8>
 8019cb0:	b011      	add	sp, #68	; 0x44
 8019cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cb4:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8019cb8:	2201      	movs	r2, #1
 8019cba:	600b      	str	r3, [r1, #0]
 8019cbc:	610b      	str	r3, [r1, #16]
 8019cbe:	614a      	str	r2, [r1, #20]
 8019cc0:	4770      	bx	lr
 8019cc2:	4b12      	ldr	r3, [pc, #72]	; (8019d0c <__smakebuf_r+0xdc>)
 8019cc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019cc6:	429a      	cmp	r2, r3
 8019cc8:	d1d0      	bne.n	8019c6c <__smakebuf_r+0x3c>
 8019cca:	89a3      	ldrh	r3, [r4, #12]
 8019ccc:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8019cd0:	4333      	orrs	r3, r6
 8019cd2:	81a3      	strh	r3, [r4, #12]
 8019cd4:	64e6      	str	r6, [r4, #76]	; 0x4c
 8019cd6:	e7dc      	b.n	8019c92 <__smakebuf_r+0x62>
 8019cd8:	4628      	mov	r0, r5
 8019cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cde:	f001 f9df 	bl	801b0a0 <_isatty_r>
 8019ce2:	2800      	cmp	r0, #0
 8019ce4:	d0e4      	beq.n	8019cb0 <__smakebuf_r+0x80>
 8019ce6:	89a3      	ldrh	r3, [r4, #12]
 8019ce8:	f043 0301 	orr.w	r3, r3, #1
 8019cec:	81a3      	strh	r3, [r4, #12]
 8019cee:	e7df      	b.n	8019cb0 <__smakebuf_r+0x80>
 8019cf0:	059a      	lsls	r2, r3, #22
 8019cf2:	d4dd      	bmi.n	8019cb0 <__smakebuf_r+0x80>
 8019cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019cf8:	f043 0302 	orr.w	r3, r3, #2
 8019cfc:	2101      	movs	r1, #1
 8019cfe:	81a3      	strh	r3, [r4, #12]
 8019d00:	6022      	str	r2, [r4, #0]
 8019d02:	6122      	str	r2, [r4, #16]
 8019d04:	6161      	str	r1, [r4, #20]
 8019d06:	e7d3      	b.n	8019cb0 <__smakebuf_r+0x80>
 8019d08:	08019489 	.word	0x08019489
 8019d0c:	0801ae09 	.word	0x0801ae09

08019d10 <_malloc_r>:
 8019d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d14:	f101 050b 	add.w	r5, r1, #11
 8019d18:	2d16      	cmp	r5, #22
 8019d1a:	b083      	sub	sp, #12
 8019d1c:	4606      	mov	r6, r0
 8019d1e:	d927      	bls.n	8019d70 <_malloc_r+0x60>
 8019d20:	f035 0507 	bics.w	r5, r5, #7
 8019d24:	f100 80b6 	bmi.w	8019e94 <_malloc_r+0x184>
 8019d28:	42a9      	cmp	r1, r5
 8019d2a:	f200 80b3 	bhi.w	8019e94 <_malloc_r+0x184>
 8019d2e:	f000 fac7 	bl	801a2c0 <__malloc_lock>
 8019d32:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8019d36:	d222      	bcs.n	8019d7e <_malloc_r+0x6e>
 8019d38:	4fc2      	ldr	r7, [pc, #776]	; (801a044 <_malloc_r+0x334>)
 8019d3a:	08e8      	lsrs	r0, r5, #3
 8019d3c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8019d40:	68dc      	ldr	r4, [r3, #12]
 8019d42:	429c      	cmp	r4, r3
 8019d44:	f000 81c9 	beq.w	801a0da <_malloc_r+0x3ca>
 8019d48:	6863      	ldr	r3, [r4, #4]
 8019d4a:	68e1      	ldr	r1, [r4, #12]
 8019d4c:	68a5      	ldr	r5, [r4, #8]
 8019d4e:	f023 0303 	bic.w	r3, r3, #3
 8019d52:	4423      	add	r3, r4
 8019d54:	4630      	mov	r0, r6
 8019d56:	685a      	ldr	r2, [r3, #4]
 8019d58:	60e9      	str	r1, [r5, #12]
 8019d5a:	f042 0201 	orr.w	r2, r2, #1
 8019d5e:	608d      	str	r5, [r1, #8]
 8019d60:	605a      	str	r2, [r3, #4]
 8019d62:	f000 faaf 	bl	801a2c4 <__malloc_unlock>
 8019d66:	3408      	adds	r4, #8
 8019d68:	4620      	mov	r0, r4
 8019d6a:	b003      	add	sp, #12
 8019d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d70:	2910      	cmp	r1, #16
 8019d72:	f200 808f 	bhi.w	8019e94 <_malloc_r+0x184>
 8019d76:	f000 faa3 	bl	801a2c0 <__malloc_lock>
 8019d7a:	2510      	movs	r5, #16
 8019d7c:	e7dc      	b.n	8019d38 <_malloc_r+0x28>
 8019d7e:	0a68      	lsrs	r0, r5, #9
 8019d80:	f000 808f 	beq.w	8019ea2 <_malloc_r+0x192>
 8019d84:	2804      	cmp	r0, #4
 8019d86:	f200 8154 	bhi.w	801a032 <_malloc_r+0x322>
 8019d8a:	09a8      	lsrs	r0, r5, #6
 8019d8c:	3038      	adds	r0, #56	; 0x38
 8019d8e:	0041      	lsls	r1, r0, #1
 8019d90:	4fac      	ldr	r7, [pc, #688]	; (801a044 <_malloc_r+0x334>)
 8019d92:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8019d96:	68cc      	ldr	r4, [r1, #12]
 8019d98:	42a1      	cmp	r1, r4
 8019d9a:	d106      	bne.n	8019daa <_malloc_r+0x9a>
 8019d9c:	e00c      	b.n	8019db8 <_malloc_r+0xa8>
 8019d9e:	2a00      	cmp	r2, #0
 8019da0:	f280 8082 	bge.w	8019ea8 <_malloc_r+0x198>
 8019da4:	68e4      	ldr	r4, [r4, #12]
 8019da6:	42a1      	cmp	r1, r4
 8019da8:	d006      	beq.n	8019db8 <_malloc_r+0xa8>
 8019daa:	6863      	ldr	r3, [r4, #4]
 8019dac:	f023 0303 	bic.w	r3, r3, #3
 8019db0:	1b5a      	subs	r2, r3, r5
 8019db2:	2a0f      	cmp	r2, #15
 8019db4:	ddf3      	ble.n	8019d9e <_malloc_r+0x8e>
 8019db6:	3801      	subs	r0, #1
 8019db8:	3001      	adds	r0, #1
 8019dba:	49a2      	ldr	r1, [pc, #648]	; (801a044 <_malloc_r+0x334>)
 8019dbc:	693c      	ldr	r4, [r7, #16]
 8019dbe:	f101 0e08 	add.w	lr, r1, #8
 8019dc2:	4574      	cmp	r4, lr
 8019dc4:	f000 817e 	beq.w	801a0c4 <_malloc_r+0x3b4>
 8019dc8:	6863      	ldr	r3, [r4, #4]
 8019dca:	f023 0303 	bic.w	r3, r3, #3
 8019dce:	1b5a      	subs	r2, r3, r5
 8019dd0:	2a0f      	cmp	r2, #15
 8019dd2:	f300 8164 	bgt.w	801a09e <_malloc_r+0x38e>
 8019dd6:	2a00      	cmp	r2, #0
 8019dd8:	f8c1 e014 	str.w	lr, [r1, #20]
 8019ddc:	f8c1 e010 	str.w	lr, [r1, #16]
 8019de0:	da73      	bge.n	8019eca <_malloc_r+0x1ba>
 8019de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019de6:	f080 8139 	bcs.w	801a05c <_malloc_r+0x34c>
 8019dea:	08db      	lsrs	r3, r3, #3
 8019dec:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8019df0:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8019df4:	684a      	ldr	r2, [r1, #4]
 8019df6:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8019dfa:	f8c4 9008 	str.w	r9, [r4, #8]
 8019dfe:	2301      	movs	r3, #1
 8019e00:	fa03 f30c 	lsl.w	r3, r3, ip
 8019e04:	4313      	orrs	r3, r2
 8019e06:	f8c4 800c 	str.w	r8, [r4, #12]
 8019e0a:	604b      	str	r3, [r1, #4]
 8019e0c:	f8c8 4008 	str.w	r4, [r8, #8]
 8019e10:	f8c9 400c 	str.w	r4, [r9, #12]
 8019e14:	1082      	asrs	r2, r0, #2
 8019e16:	2401      	movs	r4, #1
 8019e18:	4094      	lsls	r4, r2
 8019e1a:	429c      	cmp	r4, r3
 8019e1c:	d862      	bhi.n	8019ee4 <_malloc_r+0x1d4>
 8019e1e:	4223      	tst	r3, r4
 8019e20:	d106      	bne.n	8019e30 <_malloc_r+0x120>
 8019e22:	f020 0003 	bic.w	r0, r0, #3
 8019e26:	0064      	lsls	r4, r4, #1
 8019e28:	4223      	tst	r3, r4
 8019e2a:	f100 0004 	add.w	r0, r0, #4
 8019e2e:	d0fa      	beq.n	8019e26 <_malloc_r+0x116>
 8019e30:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8019e34:	46c4      	mov	ip, r8
 8019e36:	4681      	mov	r9, r0
 8019e38:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8019e3c:	459c      	cmp	ip, r3
 8019e3e:	d107      	bne.n	8019e50 <_malloc_r+0x140>
 8019e40:	e142      	b.n	801a0c8 <_malloc_r+0x3b8>
 8019e42:	2900      	cmp	r1, #0
 8019e44:	f280 8152 	bge.w	801a0ec <_malloc_r+0x3dc>
 8019e48:	68db      	ldr	r3, [r3, #12]
 8019e4a:	459c      	cmp	ip, r3
 8019e4c:	f000 813c 	beq.w	801a0c8 <_malloc_r+0x3b8>
 8019e50:	685a      	ldr	r2, [r3, #4]
 8019e52:	f022 0203 	bic.w	r2, r2, #3
 8019e56:	1b51      	subs	r1, r2, r5
 8019e58:	290f      	cmp	r1, #15
 8019e5a:	ddf2      	ble.n	8019e42 <_malloc_r+0x132>
 8019e5c:	461c      	mov	r4, r3
 8019e5e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8019e62:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8019e66:	195a      	adds	r2, r3, r5
 8019e68:	f045 0901 	orr.w	r9, r5, #1
 8019e6c:	f041 0501 	orr.w	r5, r1, #1
 8019e70:	f8c3 9004 	str.w	r9, [r3, #4]
 8019e74:	4630      	mov	r0, r6
 8019e76:	f8c8 c00c 	str.w	ip, [r8, #12]
 8019e7a:	f8cc 8008 	str.w	r8, [ip, #8]
 8019e7e:	617a      	str	r2, [r7, #20]
 8019e80:	613a      	str	r2, [r7, #16]
 8019e82:	f8c2 e00c 	str.w	lr, [r2, #12]
 8019e86:	f8c2 e008 	str.w	lr, [r2, #8]
 8019e8a:	6055      	str	r5, [r2, #4]
 8019e8c:	5051      	str	r1, [r2, r1]
 8019e8e:	f000 fa19 	bl	801a2c4 <__malloc_unlock>
 8019e92:	e769      	b.n	8019d68 <_malloc_r+0x58>
 8019e94:	2400      	movs	r4, #0
 8019e96:	230c      	movs	r3, #12
 8019e98:	4620      	mov	r0, r4
 8019e9a:	6033      	str	r3, [r6, #0]
 8019e9c:	b003      	add	sp, #12
 8019e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ea2:	217e      	movs	r1, #126	; 0x7e
 8019ea4:	203f      	movs	r0, #63	; 0x3f
 8019ea6:	e773      	b.n	8019d90 <_malloc_r+0x80>
 8019ea8:	4423      	add	r3, r4
 8019eaa:	68e1      	ldr	r1, [r4, #12]
 8019eac:	685a      	ldr	r2, [r3, #4]
 8019eae:	68a5      	ldr	r5, [r4, #8]
 8019eb0:	f042 0201 	orr.w	r2, r2, #1
 8019eb4:	60e9      	str	r1, [r5, #12]
 8019eb6:	4630      	mov	r0, r6
 8019eb8:	608d      	str	r5, [r1, #8]
 8019eba:	605a      	str	r2, [r3, #4]
 8019ebc:	f000 fa02 	bl	801a2c4 <__malloc_unlock>
 8019ec0:	3408      	adds	r4, #8
 8019ec2:	4620      	mov	r0, r4
 8019ec4:	b003      	add	sp, #12
 8019ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eca:	4423      	add	r3, r4
 8019ecc:	4630      	mov	r0, r6
 8019ece:	685a      	ldr	r2, [r3, #4]
 8019ed0:	f042 0201 	orr.w	r2, r2, #1
 8019ed4:	605a      	str	r2, [r3, #4]
 8019ed6:	f000 f9f5 	bl	801a2c4 <__malloc_unlock>
 8019eda:	3408      	adds	r4, #8
 8019edc:	4620      	mov	r0, r4
 8019ede:	b003      	add	sp, #12
 8019ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ee4:	68bc      	ldr	r4, [r7, #8]
 8019ee6:	6863      	ldr	r3, [r4, #4]
 8019ee8:	f023 0803 	bic.w	r8, r3, #3
 8019eec:	4545      	cmp	r5, r8
 8019eee:	d804      	bhi.n	8019efa <_malloc_r+0x1ea>
 8019ef0:	ebc5 0308 	rsb	r3, r5, r8
 8019ef4:	2b0f      	cmp	r3, #15
 8019ef6:	f300 808c 	bgt.w	801a012 <_malloc_r+0x302>
 8019efa:	4b53      	ldr	r3, [pc, #332]	; (801a048 <_malloc_r+0x338>)
 8019efc:	f8df a158 	ldr.w	sl, [pc, #344]	; 801a058 <_malloc_r+0x348>
 8019f00:	681a      	ldr	r2, [r3, #0]
 8019f02:	f8da 3000 	ldr.w	r3, [sl]
 8019f06:	3301      	adds	r3, #1
 8019f08:	442a      	add	r2, r5
 8019f0a:	eb04 0b08 	add.w	fp, r4, r8
 8019f0e:	f000 8150 	beq.w	801a1b2 <_malloc_r+0x4a2>
 8019f12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019f16:	320f      	adds	r2, #15
 8019f18:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8019f1c:	f022 020f 	bic.w	r2, r2, #15
 8019f20:	4611      	mov	r1, r2
 8019f22:	4630      	mov	r0, r6
 8019f24:	9201      	str	r2, [sp, #4]
 8019f26:	f000 fee5 	bl	801acf4 <_sbrk_r>
 8019f2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019f2e:	4681      	mov	r9, r0
 8019f30:	9a01      	ldr	r2, [sp, #4]
 8019f32:	f000 80f5 	beq.w	801a120 <_malloc_r+0x410>
 8019f36:	4583      	cmp	fp, r0
 8019f38:	f200 80ef 	bhi.w	801a11a <_malloc_r+0x40a>
 8019f3c:	4b43      	ldr	r3, [pc, #268]	; (801a04c <_malloc_r+0x33c>)
 8019f3e:	6819      	ldr	r1, [r3, #0]
 8019f40:	45cb      	cmp	fp, r9
 8019f42:	4411      	add	r1, r2
 8019f44:	6019      	str	r1, [r3, #0]
 8019f46:	f000 813d 	beq.w	801a1c4 <_malloc_r+0x4b4>
 8019f4a:	f8da 0000 	ldr.w	r0, [sl]
 8019f4e:	f8df e108 	ldr.w	lr, [pc, #264]	; 801a058 <_malloc_r+0x348>
 8019f52:	3001      	adds	r0, #1
 8019f54:	bf1b      	ittet	ne
 8019f56:	ebcb 0b09 	rsbne	fp, fp, r9
 8019f5a:	4459      	addne	r1, fp
 8019f5c:	f8ce 9000 	streq.w	r9, [lr]
 8019f60:	6019      	strne	r1, [r3, #0]
 8019f62:	f019 0107 	ands.w	r1, r9, #7
 8019f66:	f000 8107 	beq.w	801a178 <_malloc_r+0x468>
 8019f6a:	f1c1 0008 	rsb	r0, r1, #8
 8019f6e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8019f72:	4481      	add	r9, r0
 8019f74:	3108      	adds	r1, #8
 8019f76:	444a      	add	r2, r9
 8019f78:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8019f7c:	ebc2 0a01 	rsb	sl, r2, r1
 8019f80:	4651      	mov	r1, sl
 8019f82:	4630      	mov	r0, r6
 8019f84:	9301      	str	r3, [sp, #4]
 8019f86:	f000 feb5 	bl	801acf4 <_sbrk_r>
 8019f8a:	1c43      	adds	r3, r0, #1
 8019f8c:	9b01      	ldr	r3, [sp, #4]
 8019f8e:	f000 8127 	beq.w	801a1e0 <_malloc_r+0x4d0>
 8019f92:	ebc9 0200 	rsb	r2, r9, r0
 8019f96:	4452      	add	r2, sl
 8019f98:	f042 0201 	orr.w	r2, r2, #1
 8019f9c:	6819      	ldr	r1, [r3, #0]
 8019f9e:	f8c7 9008 	str.w	r9, [r7, #8]
 8019fa2:	4451      	add	r1, sl
 8019fa4:	42bc      	cmp	r4, r7
 8019fa6:	f8c9 2004 	str.w	r2, [r9, #4]
 8019faa:	6019      	str	r1, [r3, #0]
 8019fac:	f8df a09c 	ldr.w	sl, [pc, #156]	; 801a04c <_malloc_r+0x33c>
 8019fb0:	d016      	beq.n	8019fe0 <_malloc_r+0x2d0>
 8019fb2:	f1b8 0f0f 	cmp.w	r8, #15
 8019fb6:	f240 80e2 	bls.w	801a17e <_malloc_r+0x46e>
 8019fba:	6862      	ldr	r2, [r4, #4]
 8019fbc:	f1a8 030c 	sub.w	r3, r8, #12
 8019fc0:	f023 0307 	bic.w	r3, r3, #7
 8019fc4:	18e0      	adds	r0, r4, r3
 8019fc6:	f002 0201 	and.w	r2, r2, #1
 8019fca:	f04f 0e05 	mov.w	lr, #5
 8019fce:	431a      	orrs	r2, r3
 8019fd0:	2b0f      	cmp	r3, #15
 8019fd2:	6062      	str	r2, [r4, #4]
 8019fd4:	f8c0 e004 	str.w	lr, [r0, #4]
 8019fd8:	f8c0 e008 	str.w	lr, [r0, #8]
 8019fdc:	f200 8104 	bhi.w	801a1e8 <_malloc_r+0x4d8>
 8019fe0:	4b1b      	ldr	r3, [pc, #108]	; (801a050 <_malloc_r+0x340>)
 8019fe2:	68bc      	ldr	r4, [r7, #8]
 8019fe4:	681a      	ldr	r2, [r3, #0]
 8019fe6:	4291      	cmp	r1, r2
 8019fe8:	bf88      	it	hi
 8019fea:	6019      	strhi	r1, [r3, #0]
 8019fec:	4b19      	ldr	r3, [pc, #100]	; (801a054 <_malloc_r+0x344>)
 8019fee:	681a      	ldr	r2, [r3, #0]
 8019ff0:	4291      	cmp	r1, r2
 8019ff2:	6862      	ldr	r2, [r4, #4]
 8019ff4:	bf88      	it	hi
 8019ff6:	6019      	strhi	r1, [r3, #0]
 8019ff8:	f022 0203 	bic.w	r2, r2, #3
 8019ffc:	4295      	cmp	r5, r2
 8019ffe:	eba2 0305 	sub.w	r3, r2, r5
 801a002:	d801      	bhi.n	801a008 <_malloc_r+0x2f8>
 801a004:	2b0f      	cmp	r3, #15
 801a006:	dc04      	bgt.n	801a012 <_malloc_r+0x302>
 801a008:	4630      	mov	r0, r6
 801a00a:	f000 f95b 	bl	801a2c4 <__malloc_unlock>
 801a00e:	2400      	movs	r4, #0
 801a010:	e6aa      	b.n	8019d68 <_malloc_r+0x58>
 801a012:	1962      	adds	r2, r4, r5
 801a014:	f043 0301 	orr.w	r3, r3, #1
 801a018:	f045 0501 	orr.w	r5, r5, #1
 801a01c:	6065      	str	r5, [r4, #4]
 801a01e:	4630      	mov	r0, r6
 801a020:	60ba      	str	r2, [r7, #8]
 801a022:	6053      	str	r3, [r2, #4]
 801a024:	f000 f94e 	bl	801a2c4 <__malloc_unlock>
 801a028:	3408      	adds	r4, #8
 801a02a:	4620      	mov	r0, r4
 801a02c:	b003      	add	sp, #12
 801a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a032:	2814      	cmp	r0, #20
 801a034:	d969      	bls.n	801a10a <_malloc_r+0x3fa>
 801a036:	2854      	cmp	r0, #84	; 0x54
 801a038:	f200 8097 	bhi.w	801a16a <_malloc_r+0x45a>
 801a03c:	0b28      	lsrs	r0, r5, #12
 801a03e:	306e      	adds	r0, #110	; 0x6e
 801a040:	0041      	lsls	r1, r0, #1
 801a042:	e6a5      	b.n	8019d90 <_malloc_r+0x80>
 801a044:	20000768 	.word	0x20000768
 801a048:	20016f98 	.word	0x20016f98
 801a04c:	20016f9c 	.word	0x20016f9c
 801a050:	20016f94 	.word	0x20016f94
 801a054:	20016f90 	.word	0x20016f90
 801a058:	20000b74 	.word	0x20000b74
 801a05c:	0a5a      	lsrs	r2, r3, #9
 801a05e:	2a04      	cmp	r2, #4
 801a060:	d956      	bls.n	801a110 <_malloc_r+0x400>
 801a062:	2a14      	cmp	r2, #20
 801a064:	f200 80a7 	bhi.w	801a1b6 <_malloc_r+0x4a6>
 801a068:	325b      	adds	r2, #91	; 0x5b
 801a06a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801a06e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 801a072:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 801a228 <_malloc_r+0x518>
 801a076:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801a07a:	4561      	cmp	r1, ip
 801a07c:	f000 8085 	beq.w	801a18a <_malloc_r+0x47a>
 801a080:	684a      	ldr	r2, [r1, #4]
 801a082:	f022 0203 	bic.w	r2, r2, #3
 801a086:	4293      	cmp	r3, r2
 801a088:	d202      	bcs.n	801a090 <_malloc_r+0x380>
 801a08a:	6889      	ldr	r1, [r1, #8]
 801a08c:	458c      	cmp	ip, r1
 801a08e:	d1f7      	bne.n	801a080 <_malloc_r+0x370>
 801a090:	68ca      	ldr	r2, [r1, #12]
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	60e2      	str	r2, [r4, #12]
 801a096:	60a1      	str	r1, [r4, #8]
 801a098:	6094      	str	r4, [r2, #8]
 801a09a:	60cc      	str	r4, [r1, #12]
 801a09c:	e6ba      	b.n	8019e14 <_malloc_r+0x104>
 801a09e:	1963      	adds	r3, r4, r5
 801a0a0:	f042 0701 	orr.w	r7, r2, #1
 801a0a4:	f045 0501 	orr.w	r5, r5, #1
 801a0a8:	6065      	str	r5, [r4, #4]
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	614b      	str	r3, [r1, #20]
 801a0ae:	610b      	str	r3, [r1, #16]
 801a0b0:	f8c3 e00c 	str.w	lr, [r3, #12]
 801a0b4:	f8c3 e008 	str.w	lr, [r3, #8]
 801a0b8:	605f      	str	r7, [r3, #4]
 801a0ba:	509a      	str	r2, [r3, r2]
 801a0bc:	3408      	adds	r4, #8
 801a0be:	f000 f901 	bl	801a2c4 <__malloc_unlock>
 801a0c2:	e651      	b.n	8019d68 <_malloc_r+0x58>
 801a0c4:	684b      	ldr	r3, [r1, #4]
 801a0c6:	e6a5      	b.n	8019e14 <_malloc_r+0x104>
 801a0c8:	f109 0901 	add.w	r9, r9, #1
 801a0cc:	f019 0f03 	tst.w	r9, #3
 801a0d0:	f10c 0c08 	add.w	ip, ip, #8
 801a0d4:	f47f aeb0 	bne.w	8019e38 <_malloc_r+0x128>
 801a0d8:	e02b      	b.n	801a132 <_malloc_r+0x422>
 801a0da:	f104 0308 	add.w	r3, r4, #8
 801a0de:	6964      	ldr	r4, [r4, #20]
 801a0e0:	42a3      	cmp	r3, r4
 801a0e2:	bf08      	it	eq
 801a0e4:	3002      	addeq	r0, #2
 801a0e6:	f43f ae68 	beq.w	8019dba <_malloc_r+0xaa>
 801a0ea:	e62d      	b.n	8019d48 <_malloc_r+0x38>
 801a0ec:	441a      	add	r2, r3
 801a0ee:	461c      	mov	r4, r3
 801a0f0:	6851      	ldr	r1, [r2, #4]
 801a0f2:	68db      	ldr	r3, [r3, #12]
 801a0f4:	f854 5f08 	ldr.w	r5, [r4, #8]!
 801a0f8:	f041 0101 	orr.w	r1, r1, #1
 801a0fc:	6051      	str	r1, [r2, #4]
 801a0fe:	4630      	mov	r0, r6
 801a100:	60eb      	str	r3, [r5, #12]
 801a102:	609d      	str	r5, [r3, #8]
 801a104:	f000 f8de 	bl	801a2c4 <__malloc_unlock>
 801a108:	e62e      	b.n	8019d68 <_malloc_r+0x58>
 801a10a:	305b      	adds	r0, #91	; 0x5b
 801a10c:	0041      	lsls	r1, r0, #1
 801a10e:	e63f      	b.n	8019d90 <_malloc_r+0x80>
 801a110:	099a      	lsrs	r2, r3, #6
 801a112:	3238      	adds	r2, #56	; 0x38
 801a114:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801a118:	e7a9      	b.n	801a06e <_malloc_r+0x35e>
 801a11a:	42bc      	cmp	r4, r7
 801a11c:	f43f af0e 	beq.w	8019f3c <_malloc_r+0x22c>
 801a120:	68bc      	ldr	r4, [r7, #8]
 801a122:	6862      	ldr	r2, [r4, #4]
 801a124:	f022 0203 	bic.w	r2, r2, #3
 801a128:	e768      	b.n	8019ffc <_malloc_r+0x2ec>
 801a12a:	f8d8 8000 	ldr.w	r8, [r8]
 801a12e:	4598      	cmp	r8, r3
 801a130:	d177      	bne.n	801a222 <_malloc_r+0x512>
 801a132:	f010 0f03 	tst.w	r0, #3
 801a136:	f1a8 0308 	sub.w	r3, r8, #8
 801a13a:	f100 30ff 	add.w	r0, r0, #4294967295
 801a13e:	d1f4      	bne.n	801a12a <_malloc_r+0x41a>
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	ea23 0304 	bic.w	r3, r3, r4
 801a146:	607b      	str	r3, [r7, #4]
 801a148:	0064      	lsls	r4, r4, #1
 801a14a:	429c      	cmp	r4, r3
 801a14c:	f63f aeca 	bhi.w	8019ee4 <_malloc_r+0x1d4>
 801a150:	2c00      	cmp	r4, #0
 801a152:	f43f aec7 	beq.w	8019ee4 <_malloc_r+0x1d4>
 801a156:	4223      	tst	r3, r4
 801a158:	4648      	mov	r0, r9
 801a15a:	f47f ae69 	bne.w	8019e30 <_malloc_r+0x120>
 801a15e:	0064      	lsls	r4, r4, #1
 801a160:	4223      	tst	r3, r4
 801a162:	f100 0004 	add.w	r0, r0, #4
 801a166:	d0fa      	beq.n	801a15e <_malloc_r+0x44e>
 801a168:	e662      	b.n	8019e30 <_malloc_r+0x120>
 801a16a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 801a16e:	d818      	bhi.n	801a1a2 <_malloc_r+0x492>
 801a170:	0be8      	lsrs	r0, r5, #15
 801a172:	3077      	adds	r0, #119	; 0x77
 801a174:	0041      	lsls	r1, r0, #1
 801a176:	e60b      	b.n	8019d90 <_malloc_r+0x80>
 801a178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801a17c:	e6fb      	b.n	8019f76 <_malloc_r+0x266>
 801a17e:	2301      	movs	r3, #1
 801a180:	f8c9 3004 	str.w	r3, [r9, #4]
 801a184:	464c      	mov	r4, r9
 801a186:	2200      	movs	r2, #0
 801a188:	e738      	b.n	8019ffc <_malloc_r+0x2ec>
 801a18a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a18e:	1092      	asrs	r2, r2, #2
 801a190:	f04f 0c01 	mov.w	ip, #1
 801a194:	fa0c f202 	lsl.w	r2, ip, r2
 801a198:	4313      	orrs	r3, r2
 801a19a:	f8c8 3004 	str.w	r3, [r8, #4]
 801a19e:	460a      	mov	r2, r1
 801a1a0:	e778      	b.n	801a094 <_malloc_r+0x384>
 801a1a2:	f240 5354 	movw	r3, #1364	; 0x554
 801a1a6:	4298      	cmp	r0, r3
 801a1a8:	d817      	bhi.n	801a1da <_malloc_r+0x4ca>
 801a1aa:	0ca8      	lsrs	r0, r5, #18
 801a1ac:	307c      	adds	r0, #124	; 0x7c
 801a1ae:	0041      	lsls	r1, r0, #1
 801a1b0:	e5ee      	b.n	8019d90 <_malloc_r+0x80>
 801a1b2:	3210      	adds	r2, #16
 801a1b4:	e6b4      	b.n	8019f20 <_malloc_r+0x210>
 801a1b6:	2a54      	cmp	r2, #84	; 0x54
 801a1b8:	d81e      	bhi.n	801a1f8 <_malloc_r+0x4e8>
 801a1ba:	0b1a      	lsrs	r2, r3, #12
 801a1bc:	326e      	adds	r2, #110	; 0x6e
 801a1be:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801a1c2:	e754      	b.n	801a06e <_malloc_r+0x35e>
 801a1c4:	f3cb 000b 	ubfx	r0, fp, #0, #12
 801a1c8:	2800      	cmp	r0, #0
 801a1ca:	f47f aebe 	bne.w	8019f4a <_malloc_r+0x23a>
 801a1ce:	4442      	add	r2, r8
 801a1d0:	68bb      	ldr	r3, [r7, #8]
 801a1d2:	f042 0201 	orr.w	r2, r2, #1
 801a1d6:	605a      	str	r2, [r3, #4]
 801a1d8:	e702      	b.n	8019fe0 <_malloc_r+0x2d0>
 801a1da:	21fc      	movs	r1, #252	; 0xfc
 801a1dc:	207e      	movs	r0, #126	; 0x7e
 801a1de:	e5d7      	b.n	8019d90 <_malloc_r+0x80>
 801a1e0:	2201      	movs	r2, #1
 801a1e2:	f04f 0a00 	mov.w	sl, #0
 801a1e6:	e6d9      	b.n	8019f9c <_malloc_r+0x28c>
 801a1e8:	f104 0108 	add.w	r1, r4, #8
 801a1ec:	4630      	mov	r0, r6
 801a1ee:	f7ff fa83 	bl	80196f8 <_free_r>
 801a1f2:	f8da 1000 	ldr.w	r1, [sl]
 801a1f6:	e6f3      	b.n	8019fe0 <_malloc_r+0x2d0>
 801a1f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801a1fc:	d804      	bhi.n	801a208 <_malloc_r+0x4f8>
 801a1fe:	0bda      	lsrs	r2, r3, #15
 801a200:	3277      	adds	r2, #119	; 0x77
 801a202:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801a206:	e732      	b.n	801a06e <_malloc_r+0x35e>
 801a208:	f240 5154 	movw	r1, #1364	; 0x554
 801a20c:	428a      	cmp	r2, r1
 801a20e:	d804      	bhi.n	801a21a <_malloc_r+0x50a>
 801a210:	0c9a      	lsrs	r2, r3, #18
 801a212:	327c      	adds	r2, #124	; 0x7c
 801a214:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801a218:	e729      	b.n	801a06e <_malloc_r+0x35e>
 801a21a:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 801a21e:	227e      	movs	r2, #126	; 0x7e
 801a220:	e725      	b.n	801a06e <_malloc_r+0x35e>
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	e790      	b.n	801a148 <_malloc_r+0x438>
 801a226:	bf00      	nop
 801a228:	20000768 	.word	0x20000768

0801a22c <memchr>:
 801a22c:	0783      	lsls	r3, r0, #30
 801a22e:	b470      	push	{r4, r5, r6}
 801a230:	b2c9      	uxtb	r1, r1
 801a232:	d040      	beq.n	801a2b6 <memchr+0x8a>
 801a234:	1e54      	subs	r4, r2, #1
 801a236:	2a00      	cmp	r2, #0
 801a238:	d03f      	beq.n	801a2ba <memchr+0x8e>
 801a23a:	7803      	ldrb	r3, [r0, #0]
 801a23c:	428b      	cmp	r3, r1
 801a23e:	bf18      	it	ne
 801a240:	1c43      	addne	r3, r0, #1
 801a242:	d106      	bne.n	801a252 <memchr+0x26>
 801a244:	e01d      	b.n	801a282 <memchr+0x56>
 801a246:	b1f4      	cbz	r4, 801a286 <memchr+0x5a>
 801a248:	7802      	ldrb	r2, [r0, #0]
 801a24a:	428a      	cmp	r2, r1
 801a24c:	f104 34ff 	add.w	r4, r4, #4294967295
 801a250:	d017      	beq.n	801a282 <memchr+0x56>
 801a252:	f013 0f03 	tst.w	r3, #3
 801a256:	4618      	mov	r0, r3
 801a258:	f103 0301 	add.w	r3, r3, #1
 801a25c:	d1f3      	bne.n	801a246 <memchr+0x1a>
 801a25e:	2c03      	cmp	r4, #3
 801a260:	d814      	bhi.n	801a28c <memchr+0x60>
 801a262:	b184      	cbz	r4, 801a286 <memchr+0x5a>
 801a264:	7803      	ldrb	r3, [r0, #0]
 801a266:	428b      	cmp	r3, r1
 801a268:	d00b      	beq.n	801a282 <memchr+0x56>
 801a26a:	1905      	adds	r5, r0, r4
 801a26c:	1c43      	adds	r3, r0, #1
 801a26e:	e002      	b.n	801a276 <memchr+0x4a>
 801a270:	7802      	ldrb	r2, [r0, #0]
 801a272:	428a      	cmp	r2, r1
 801a274:	d005      	beq.n	801a282 <memchr+0x56>
 801a276:	42ab      	cmp	r3, r5
 801a278:	4618      	mov	r0, r3
 801a27a:	f103 0301 	add.w	r3, r3, #1
 801a27e:	d1f7      	bne.n	801a270 <memchr+0x44>
 801a280:	2000      	movs	r0, #0
 801a282:	bc70      	pop	{r4, r5, r6}
 801a284:	4770      	bx	lr
 801a286:	4620      	mov	r0, r4
 801a288:	bc70      	pop	{r4, r5, r6}
 801a28a:	4770      	bx	lr
 801a28c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 801a290:	4602      	mov	r2, r0
 801a292:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 801a296:	4610      	mov	r0, r2
 801a298:	3204      	adds	r2, #4
 801a29a:	6803      	ldr	r3, [r0, #0]
 801a29c:	4073      	eors	r3, r6
 801a29e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 801a2a2:	ea25 0303 	bic.w	r3, r5, r3
 801a2a6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801a2aa:	d1da      	bne.n	801a262 <memchr+0x36>
 801a2ac:	3c04      	subs	r4, #4
 801a2ae:	2c03      	cmp	r4, #3
 801a2b0:	4610      	mov	r0, r2
 801a2b2:	d8f0      	bhi.n	801a296 <memchr+0x6a>
 801a2b4:	e7d5      	b.n	801a262 <memchr+0x36>
 801a2b6:	4614      	mov	r4, r2
 801a2b8:	e7d1      	b.n	801a25e <memchr+0x32>
 801a2ba:	4610      	mov	r0, r2
 801a2bc:	e7e1      	b.n	801a282 <memchr+0x56>
 801a2be:	bf00      	nop

0801a2c0 <__malloc_lock>:
 801a2c0:	4770      	bx	lr
 801a2c2:	bf00      	nop

0801a2c4 <__malloc_unlock>:
 801a2c4:	4770      	bx	lr
 801a2c6:	bf00      	nop

0801a2c8 <_Balloc>:
 801a2c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a2ca:	b570      	push	{r4, r5, r6, lr}
 801a2cc:	4605      	mov	r5, r0
 801a2ce:	460c      	mov	r4, r1
 801a2d0:	b14b      	cbz	r3, 801a2e6 <_Balloc+0x1e>
 801a2d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a2d6:	b180      	cbz	r0, 801a2fa <_Balloc+0x32>
 801a2d8:	6802      	ldr	r2, [r0, #0]
 801a2da:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801a2de:	2300      	movs	r3, #0
 801a2e0:	6103      	str	r3, [r0, #16]
 801a2e2:	60c3      	str	r3, [r0, #12]
 801a2e4:	bd70      	pop	{r4, r5, r6, pc}
 801a2e6:	2104      	movs	r1, #4
 801a2e8:	2221      	movs	r2, #33	; 0x21
 801a2ea:	f000 fe41 	bl	801af70 <_calloc_r>
 801a2ee:	64e8      	str	r0, [r5, #76]	; 0x4c
 801a2f0:	4603      	mov	r3, r0
 801a2f2:	2800      	cmp	r0, #0
 801a2f4:	d1ed      	bne.n	801a2d2 <_Balloc+0xa>
 801a2f6:	2000      	movs	r0, #0
 801a2f8:	bd70      	pop	{r4, r5, r6, pc}
 801a2fa:	2101      	movs	r1, #1
 801a2fc:	fa01 f604 	lsl.w	r6, r1, r4
 801a300:	1d72      	adds	r2, r6, #5
 801a302:	4628      	mov	r0, r5
 801a304:	0092      	lsls	r2, r2, #2
 801a306:	f000 fe33 	bl	801af70 <_calloc_r>
 801a30a:	2800      	cmp	r0, #0
 801a30c:	d0f3      	beq.n	801a2f6 <_Balloc+0x2e>
 801a30e:	6044      	str	r4, [r0, #4]
 801a310:	6086      	str	r6, [r0, #8]
 801a312:	e7e4      	b.n	801a2de <_Balloc+0x16>

0801a314 <_Bfree>:
 801a314:	b131      	cbz	r1, 801a324 <_Bfree+0x10>
 801a316:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a318:	684a      	ldr	r2, [r1, #4]
 801a31a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a31e:	6008      	str	r0, [r1, #0]
 801a320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801a324:	4770      	bx	lr
 801a326:	bf00      	nop

0801a328 <__multadd>:
 801a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a32a:	690c      	ldr	r4, [r1, #16]
 801a32c:	b083      	sub	sp, #12
 801a32e:	460d      	mov	r5, r1
 801a330:	4606      	mov	r6, r0
 801a332:	f101 0e14 	add.w	lr, r1, #20
 801a336:	2700      	movs	r7, #0
 801a338:	f8de 1000 	ldr.w	r1, [lr]
 801a33c:	b288      	uxth	r0, r1
 801a33e:	0c09      	lsrs	r1, r1, #16
 801a340:	fb02 3300 	mla	r3, r2, r0, r3
 801a344:	fb02 f101 	mul.w	r1, r2, r1
 801a348:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 801a34c:	3701      	adds	r7, #1
 801a34e:	b29b      	uxth	r3, r3
 801a350:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801a354:	42bc      	cmp	r4, r7
 801a356:	f84e 3b04 	str.w	r3, [lr], #4
 801a35a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801a35e:	dceb      	bgt.n	801a338 <__multadd+0x10>
 801a360:	b13b      	cbz	r3, 801a372 <__multadd+0x4a>
 801a362:	68aa      	ldr	r2, [r5, #8]
 801a364:	4294      	cmp	r4, r2
 801a366:	da07      	bge.n	801a378 <__multadd+0x50>
 801a368:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 801a36c:	3401      	adds	r4, #1
 801a36e:	6153      	str	r3, [r2, #20]
 801a370:	612c      	str	r4, [r5, #16]
 801a372:	4628      	mov	r0, r5
 801a374:	b003      	add	sp, #12
 801a376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a378:	6869      	ldr	r1, [r5, #4]
 801a37a:	9301      	str	r3, [sp, #4]
 801a37c:	3101      	adds	r1, #1
 801a37e:	4630      	mov	r0, r6
 801a380:	f7ff ffa2 	bl	801a2c8 <_Balloc>
 801a384:	692a      	ldr	r2, [r5, #16]
 801a386:	3202      	adds	r2, #2
 801a388:	f105 010c 	add.w	r1, r5, #12
 801a38c:	4607      	mov	r7, r0
 801a38e:	0092      	lsls	r2, r2, #2
 801a390:	300c      	adds	r0, #12
 801a392:	f7e5 fef9 	bl	8000188 <memcpy>
 801a396:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 801a398:	6869      	ldr	r1, [r5, #4]
 801a39a:	9b01      	ldr	r3, [sp, #4]
 801a39c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 801a3a0:	6028      	str	r0, [r5, #0]
 801a3a2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 801a3a6:	463d      	mov	r5, r7
 801a3a8:	e7de      	b.n	801a368 <__multadd+0x40>
 801a3aa:	bf00      	nop

0801a3ac <__hi0bits>:
 801a3ac:	0c03      	lsrs	r3, r0, #16
 801a3ae:	041b      	lsls	r3, r3, #16
 801a3b0:	b9b3      	cbnz	r3, 801a3e0 <__hi0bits+0x34>
 801a3b2:	0400      	lsls	r0, r0, #16
 801a3b4:	2310      	movs	r3, #16
 801a3b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a3ba:	bf04      	itt	eq
 801a3bc:	0200      	lsleq	r0, r0, #8
 801a3be:	3308      	addeq	r3, #8
 801a3c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a3c4:	bf04      	itt	eq
 801a3c6:	0100      	lsleq	r0, r0, #4
 801a3c8:	3304      	addeq	r3, #4
 801a3ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a3ce:	bf04      	itt	eq
 801a3d0:	0080      	lsleq	r0, r0, #2
 801a3d2:	3302      	addeq	r3, #2
 801a3d4:	2800      	cmp	r0, #0
 801a3d6:	db07      	blt.n	801a3e8 <__hi0bits+0x3c>
 801a3d8:	0042      	lsls	r2, r0, #1
 801a3da:	d403      	bmi.n	801a3e4 <__hi0bits+0x38>
 801a3dc:	2020      	movs	r0, #32
 801a3de:	4770      	bx	lr
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	e7e8      	b.n	801a3b6 <__hi0bits+0xa>
 801a3e4:	1c58      	adds	r0, r3, #1
 801a3e6:	4770      	bx	lr
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	4770      	bx	lr

0801a3ec <__lo0bits>:
 801a3ec:	6803      	ldr	r3, [r0, #0]
 801a3ee:	f013 0207 	ands.w	r2, r3, #7
 801a3f2:	d007      	beq.n	801a404 <__lo0bits+0x18>
 801a3f4:	07d9      	lsls	r1, r3, #31
 801a3f6:	d420      	bmi.n	801a43a <__lo0bits+0x4e>
 801a3f8:	079a      	lsls	r2, r3, #30
 801a3fa:	d420      	bmi.n	801a43e <__lo0bits+0x52>
 801a3fc:	089b      	lsrs	r3, r3, #2
 801a3fe:	6003      	str	r3, [r0, #0]
 801a400:	2002      	movs	r0, #2
 801a402:	4770      	bx	lr
 801a404:	b299      	uxth	r1, r3
 801a406:	b909      	cbnz	r1, 801a40c <__lo0bits+0x20>
 801a408:	0c1b      	lsrs	r3, r3, #16
 801a40a:	2210      	movs	r2, #16
 801a40c:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a410:	bf04      	itt	eq
 801a412:	0a1b      	lsreq	r3, r3, #8
 801a414:	3208      	addeq	r2, #8
 801a416:	0719      	lsls	r1, r3, #28
 801a418:	bf04      	itt	eq
 801a41a:	091b      	lsreq	r3, r3, #4
 801a41c:	3204      	addeq	r2, #4
 801a41e:	0799      	lsls	r1, r3, #30
 801a420:	bf04      	itt	eq
 801a422:	089b      	lsreq	r3, r3, #2
 801a424:	3202      	addeq	r2, #2
 801a426:	07d9      	lsls	r1, r3, #31
 801a428:	d404      	bmi.n	801a434 <__lo0bits+0x48>
 801a42a:	085b      	lsrs	r3, r3, #1
 801a42c:	d101      	bne.n	801a432 <__lo0bits+0x46>
 801a42e:	2020      	movs	r0, #32
 801a430:	4770      	bx	lr
 801a432:	3201      	adds	r2, #1
 801a434:	6003      	str	r3, [r0, #0]
 801a436:	4610      	mov	r0, r2
 801a438:	4770      	bx	lr
 801a43a:	2000      	movs	r0, #0
 801a43c:	4770      	bx	lr
 801a43e:	085b      	lsrs	r3, r3, #1
 801a440:	6003      	str	r3, [r0, #0]
 801a442:	2001      	movs	r0, #1
 801a444:	4770      	bx	lr
 801a446:	bf00      	nop

0801a448 <__i2b>:
 801a448:	b510      	push	{r4, lr}
 801a44a:	460c      	mov	r4, r1
 801a44c:	2101      	movs	r1, #1
 801a44e:	f7ff ff3b 	bl	801a2c8 <_Balloc>
 801a452:	2201      	movs	r2, #1
 801a454:	6144      	str	r4, [r0, #20]
 801a456:	6102      	str	r2, [r0, #16]
 801a458:	bd10      	pop	{r4, pc}
 801a45a:	bf00      	nop

0801a45c <__multiply>:
 801a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a460:	690f      	ldr	r7, [r1, #16]
 801a462:	6916      	ldr	r6, [r2, #16]
 801a464:	42b7      	cmp	r7, r6
 801a466:	b083      	sub	sp, #12
 801a468:	460d      	mov	r5, r1
 801a46a:	4614      	mov	r4, r2
 801a46c:	f2c0 808d 	blt.w	801a58a <__multiply+0x12e>
 801a470:	4633      	mov	r3, r6
 801a472:	463e      	mov	r6, r7
 801a474:	461f      	mov	r7, r3
 801a476:	68ab      	ldr	r3, [r5, #8]
 801a478:	6869      	ldr	r1, [r5, #4]
 801a47a:	eb06 0807 	add.w	r8, r6, r7
 801a47e:	4598      	cmp	r8, r3
 801a480:	bfc8      	it	gt
 801a482:	3101      	addgt	r1, #1
 801a484:	f7ff ff20 	bl	801a2c8 <_Balloc>
 801a488:	f100 0c14 	add.w	ip, r0, #20
 801a48c:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 801a490:	45cc      	cmp	ip, r9
 801a492:	9000      	str	r0, [sp, #0]
 801a494:	d205      	bcs.n	801a4a2 <__multiply+0x46>
 801a496:	4663      	mov	r3, ip
 801a498:	2100      	movs	r1, #0
 801a49a:	f843 1b04 	str.w	r1, [r3], #4
 801a49e:	4599      	cmp	r9, r3
 801a4a0:	d8fb      	bhi.n	801a49a <__multiply+0x3e>
 801a4a2:	f104 0214 	add.w	r2, r4, #20
 801a4a6:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 801a4aa:	f105 0314 	add.w	r3, r5, #20
 801a4ae:	4552      	cmp	r2, sl
 801a4b0:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801a4b4:	d254      	bcs.n	801a560 <__multiply+0x104>
 801a4b6:	f8cd 9004 	str.w	r9, [sp, #4]
 801a4ba:	4699      	mov	r9, r3
 801a4bc:	f852 3b04 	ldr.w	r3, [r2], #4
 801a4c0:	fa1f fb83 	uxth.w	fp, r3
 801a4c4:	f1bb 0f00 	cmp.w	fp, #0
 801a4c8:	d020      	beq.n	801a50c <__multiply+0xb0>
 801a4ca:	2000      	movs	r0, #0
 801a4cc:	464f      	mov	r7, r9
 801a4ce:	4666      	mov	r6, ip
 801a4d0:	4605      	mov	r5, r0
 801a4d2:	e000      	b.n	801a4d6 <__multiply+0x7a>
 801a4d4:	461e      	mov	r6, r3
 801a4d6:	f857 4b04 	ldr.w	r4, [r7], #4
 801a4da:	6830      	ldr	r0, [r6, #0]
 801a4dc:	b2a1      	uxth	r1, r4
 801a4de:	b283      	uxth	r3, r0
 801a4e0:	fb0b 3101 	mla	r1, fp, r1, r3
 801a4e4:	0c24      	lsrs	r4, r4, #16
 801a4e6:	0c00      	lsrs	r0, r0, #16
 801a4e8:	194b      	adds	r3, r1, r5
 801a4ea:	fb0b 0004 	mla	r0, fp, r4, r0
 801a4ee:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 801a4f2:	b299      	uxth	r1, r3
 801a4f4:	4633      	mov	r3, r6
 801a4f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a4fa:	45be      	cmp	lr, r7
 801a4fc:	ea4f 4510 	mov.w	r5, r0, lsr #16
 801a500:	f843 1b04 	str.w	r1, [r3], #4
 801a504:	d8e6      	bhi.n	801a4d4 <__multiply+0x78>
 801a506:	6075      	str	r5, [r6, #4]
 801a508:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801a50c:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 801a510:	d020      	beq.n	801a554 <__multiply+0xf8>
 801a512:	f8dc 3000 	ldr.w	r3, [ip]
 801a516:	4667      	mov	r7, ip
 801a518:	4618      	mov	r0, r3
 801a51a:	464d      	mov	r5, r9
 801a51c:	2100      	movs	r1, #0
 801a51e:	e000      	b.n	801a522 <__multiply+0xc6>
 801a520:	4637      	mov	r7, r6
 801a522:	882c      	ldrh	r4, [r5, #0]
 801a524:	0c00      	lsrs	r0, r0, #16
 801a526:	fb0b 0004 	mla	r0, fp, r4, r0
 801a52a:	4401      	add	r1, r0
 801a52c:	b29c      	uxth	r4, r3
 801a52e:	463e      	mov	r6, r7
 801a530:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 801a534:	f846 3b04 	str.w	r3, [r6], #4
 801a538:	6878      	ldr	r0, [r7, #4]
 801a53a:	f855 4b04 	ldr.w	r4, [r5], #4
 801a53e:	b283      	uxth	r3, r0
 801a540:	0c24      	lsrs	r4, r4, #16
 801a542:	fb0b 3404 	mla	r4, fp, r4, r3
 801a546:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 801a54a:	45ae      	cmp	lr, r5
 801a54c:	ea4f 4113 	mov.w	r1, r3, lsr #16
 801a550:	d8e6      	bhi.n	801a520 <__multiply+0xc4>
 801a552:	607b      	str	r3, [r7, #4]
 801a554:	4592      	cmp	sl, r2
 801a556:	f10c 0c04 	add.w	ip, ip, #4
 801a55a:	d8af      	bhi.n	801a4bc <__multiply+0x60>
 801a55c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801a560:	f1b8 0f00 	cmp.w	r8, #0
 801a564:	dd0b      	ble.n	801a57e <__multiply+0x122>
 801a566:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801a56a:	f1a9 0904 	sub.w	r9, r9, #4
 801a56e:	b11b      	cbz	r3, 801a578 <__multiply+0x11c>
 801a570:	e005      	b.n	801a57e <__multiply+0x122>
 801a572:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801a576:	b913      	cbnz	r3, 801a57e <__multiply+0x122>
 801a578:	f1b8 0801 	subs.w	r8, r8, #1
 801a57c:	d1f9      	bne.n	801a572 <__multiply+0x116>
 801a57e:	9800      	ldr	r0, [sp, #0]
 801a580:	f8c0 8010 	str.w	r8, [r0, #16]
 801a584:	b003      	add	sp, #12
 801a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a58a:	4615      	mov	r5, r2
 801a58c:	460c      	mov	r4, r1
 801a58e:	e772      	b.n	801a476 <__multiply+0x1a>

0801a590 <__pow5mult>:
 801a590:	f012 0303 	ands.w	r3, r2, #3
 801a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a598:	4614      	mov	r4, r2
 801a59a:	4607      	mov	r7, r0
 801a59c:	460e      	mov	r6, r1
 801a59e:	d12d      	bne.n	801a5fc <__pow5mult+0x6c>
 801a5a0:	10a4      	asrs	r4, r4, #2
 801a5a2:	d01c      	beq.n	801a5de <__pow5mult+0x4e>
 801a5a4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 801a5a6:	b395      	cbz	r5, 801a60e <__pow5mult+0x7e>
 801a5a8:	07e3      	lsls	r3, r4, #31
 801a5aa:	f04f 0800 	mov.w	r8, #0
 801a5ae:	d406      	bmi.n	801a5be <__pow5mult+0x2e>
 801a5b0:	1064      	asrs	r4, r4, #1
 801a5b2:	d014      	beq.n	801a5de <__pow5mult+0x4e>
 801a5b4:	6828      	ldr	r0, [r5, #0]
 801a5b6:	b1a8      	cbz	r0, 801a5e4 <__pow5mult+0x54>
 801a5b8:	4605      	mov	r5, r0
 801a5ba:	07e3      	lsls	r3, r4, #31
 801a5bc:	d5f8      	bpl.n	801a5b0 <__pow5mult+0x20>
 801a5be:	4638      	mov	r0, r7
 801a5c0:	4631      	mov	r1, r6
 801a5c2:	462a      	mov	r2, r5
 801a5c4:	f7ff ff4a 	bl	801a45c <__multiply>
 801a5c8:	b1b6      	cbz	r6, 801a5f8 <__pow5mult+0x68>
 801a5ca:	6872      	ldr	r2, [r6, #4]
 801a5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5ce:	1064      	asrs	r4, r4, #1
 801a5d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a5d4:	6031      	str	r1, [r6, #0]
 801a5d6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 801a5da:	4606      	mov	r6, r0
 801a5dc:	d1ea      	bne.n	801a5b4 <__pow5mult+0x24>
 801a5de:	4630      	mov	r0, r6
 801a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5e4:	4629      	mov	r1, r5
 801a5e6:	462a      	mov	r2, r5
 801a5e8:	4638      	mov	r0, r7
 801a5ea:	f7ff ff37 	bl	801a45c <__multiply>
 801a5ee:	6028      	str	r0, [r5, #0]
 801a5f0:	f8c0 8000 	str.w	r8, [r0]
 801a5f4:	4605      	mov	r5, r0
 801a5f6:	e7e0      	b.n	801a5ba <__pow5mult+0x2a>
 801a5f8:	4606      	mov	r6, r0
 801a5fa:	e7d9      	b.n	801a5b0 <__pow5mult+0x20>
 801a5fc:	1e5a      	subs	r2, r3, #1
 801a5fe:	4d0b      	ldr	r5, [pc, #44]	; (801a62c <__pow5mult+0x9c>)
 801a600:	2300      	movs	r3, #0
 801a602:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801a606:	f7ff fe8f 	bl	801a328 <__multadd>
 801a60a:	4606      	mov	r6, r0
 801a60c:	e7c8      	b.n	801a5a0 <__pow5mult+0x10>
 801a60e:	2101      	movs	r1, #1
 801a610:	4638      	mov	r0, r7
 801a612:	f7ff fe59 	bl	801a2c8 <_Balloc>
 801a616:	f240 2171 	movw	r1, #625	; 0x271
 801a61a:	2201      	movs	r2, #1
 801a61c:	2300      	movs	r3, #0
 801a61e:	6141      	str	r1, [r0, #20]
 801a620:	6102      	str	r2, [r0, #16]
 801a622:	4605      	mov	r5, r0
 801a624:	64b8      	str	r0, [r7, #72]	; 0x48
 801a626:	6003      	str	r3, [r0, #0]
 801a628:	e7be      	b.n	801a5a8 <__pow5mult+0x18>
 801a62a:	bf00      	nop
 801a62c:	08030c28 	.word	0x08030c28

0801a630 <__lshift>:
 801a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a634:	690f      	ldr	r7, [r1, #16]
 801a636:	688b      	ldr	r3, [r1, #8]
 801a638:	ea4f 1962 	mov.w	r9, r2, asr #5
 801a63c:	444f      	add	r7, r9
 801a63e:	1c7d      	adds	r5, r7, #1
 801a640:	429d      	cmp	r5, r3
 801a642:	460e      	mov	r6, r1
 801a644:	4614      	mov	r4, r2
 801a646:	6849      	ldr	r1, [r1, #4]
 801a648:	4680      	mov	r8, r0
 801a64a:	dd04      	ble.n	801a656 <__lshift+0x26>
 801a64c:	005b      	lsls	r3, r3, #1
 801a64e:	429d      	cmp	r5, r3
 801a650:	f101 0101 	add.w	r1, r1, #1
 801a654:	dcfa      	bgt.n	801a64c <__lshift+0x1c>
 801a656:	4640      	mov	r0, r8
 801a658:	f7ff fe36 	bl	801a2c8 <_Balloc>
 801a65c:	f1b9 0f00 	cmp.w	r9, #0
 801a660:	f100 0114 	add.w	r1, r0, #20
 801a664:	dd09      	ble.n	801a67a <__lshift+0x4a>
 801a666:	2300      	movs	r3, #0
 801a668:	469e      	mov	lr, r3
 801a66a:	460a      	mov	r2, r1
 801a66c:	3301      	adds	r3, #1
 801a66e:	454b      	cmp	r3, r9
 801a670:	f842 eb04 	str.w	lr, [r2], #4
 801a674:	d1fa      	bne.n	801a66c <__lshift+0x3c>
 801a676:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a67a:	6932      	ldr	r2, [r6, #16]
 801a67c:	f106 0314 	add.w	r3, r6, #20
 801a680:	f014 0c1f 	ands.w	ip, r4, #31
 801a684:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 801a688:	d01f      	beq.n	801a6ca <__lshift+0x9a>
 801a68a:	f1cc 0920 	rsb	r9, ip, #32
 801a68e:	2200      	movs	r2, #0
 801a690:	681c      	ldr	r4, [r3, #0]
 801a692:	fa04 f40c 	lsl.w	r4, r4, ip
 801a696:	4314      	orrs	r4, r2
 801a698:	468a      	mov	sl, r1
 801a69a:	f841 4b04 	str.w	r4, [r1], #4
 801a69e:	f853 4b04 	ldr.w	r4, [r3], #4
 801a6a2:	459e      	cmp	lr, r3
 801a6a4:	fa24 f209 	lsr.w	r2, r4, r9
 801a6a8:	d8f2      	bhi.n	801a690 <__lshift+0x60>
 801a6aa:	f8ca 2004 	str.w	r2, [sl, #4]
 801a6ae:	b102      	cbz	r2, 801a6b2 <__lshift+0x82>
 801a6b0:	1cbd      	adds	r5, r7, #2
 801a6b2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801a6b6:	6872      	ldr	r2, [r6, #4]
 801a6b8:	3d01      	subs	r5, #1
 801a6ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a6be:	6105      	str	r5, [r0, #16]
 801a6c0:	6031      	str	r1, [r6, #0]
 801a6c2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 801a6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6ca:	3904      	subs	r1, #4
 801a6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6d0:	f841 2f04 	str.w	r2, [r1, #4]!
 801a6d4:	459e      	cmp	lr, r3
 801a6d6:	d8f9      	bhi.n	801a6cc <__lshift+0x9c>
 801a6d8:	e7eb      	b.n	801a6b2 <__lshift+0x82>
 801a6da:	bf00      	nop

0801a6dc <__mcmp>:
 801a6dc:	6902      	ldr	r2, [r0, #16]
 801a6de:	690b      	ldr	r3, [r1, #16]
 801a6e0:	1ad2      	subs	r2, r2, r3
 801a6e2:	d113      	bne.n	801a70c <__mcmp+0x30>
 801a6e4:	009b      	lsls	r3, r3, #2
 801a6e6:	3014      	adds	r0, #20
 801a6e8:	3114      	adds	r1, #20
 801a6ea:	4419      	add	r1, r3
 801a6ec:	b410      	push	{r4}
 801a6ee:	4403      	add	r3, r0
 801a6f0:	e001      	b.n	801a6f6 <__mcmp+0x1a>
 801a6f2:	4298      	cmp	r0, r3
 801a6f4:	d20c      	bcs.n	801a710 <__mcmp+0x34>
 801a6f6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801a6fa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a6fe:	4294      	cmp	r4, r2
 801a700:	d0f7      	beq.n	801a6f2 <__mcmp+0x16>
 801a702:	d309      	bcc.n	801a718 <__mcmp+0x3c>
 801a704:	2001      	movs	r0, #1
 801a706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a70a:	4770      	bx	lr
 801a70c:	4610      	mov	r0, r2
 801a70e:	4770      	bx	lr
 801a710:	2000      	movs	r0, #0
 801a712:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a716:	4770      	bx	lr
 801a718:	f04f 30ff 	mov.w	r0, #4294967295
 801a71c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a720:	4770      	bx	lr
 801a722:	bf00      	nop

0801a724 <__mdiff>:
 801a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a728:	460e      	mov	r6, r1
 801a72a:	4605      	mov	r5, r0
 801a72c:	4611      	mov	r1, r2
 801a72e:	4630      	mov	r0, r6
 801a730:	4614      	mov	r4, r2
 801a732:	f7ff ffd3 	bl	801a6dc <__mcmp>
 801a736:	1e07      	subs	r7, r0, #0
 801a738:	d054      	beq.n	801a7e4 <__mdiff+0xc0>
 801a73a:	db4d      	blt.n	801a7d8 <__mdiff+0xb4>
 801a73c:	f04f 0800 	mov.w	r8, #0
 801a740:	6871      	ldr	r1, [r6, #4]
 801a742:	4628      	mov	r0, r5
 801a744:	f7ff fdc0 	bl	801a2c8 <_Balloc>
 801a748:	6937      	ldr	r7, [r6, #16]
 801a74a:	6923      	ldr	r3, [r4, #16]
 801a74c:	f8c0 800c 	str.w	r8, [r0, #12]
 801a750:	3614      	adds	r6, #20
 801a752:	f104 0214 	add.w	r2, r4, #20
 801a756:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 801a75a:	f100 0514 	add.w	r5, r0, #20
 801a75e:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 801a762:	2300      	movs	r3, #0
 801a764:	f856 8b04 	ldr.w	r8, [r6], #4
 801a768:	f852 4b04 	ldr.w	r4, [r2], #4
 801a76c:	fa13 f388 	uxtah	r3, r3, r8
 801a770:	b2a1      	uxth	r1, r4
 801a772:	0c24      	lsrs	r4, r4, #16
 801a774:	1a59      	subs	r1, r3, r1
 801a776:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 801a77a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a77e:	b289      	uxth	r1, r1
 801a780:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801a784:	4594      	cmp	ip, r2
 801a786:	f845 1b04 	str.w	r1, [r5], #4
 801a78a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a78e:	4634      	mov	r4, r6
 801a790:	d8e8      	bhi.n	801a764 <__mdiff+0x40>
 801a792:	45b6      	cmp	lr, r6
 801a794:	46ac      	mov	ip, r5
 801a796:	d915      	bls.n	801a7c4 <__mdiff+0xa0>
 801a798:	f854 2b04 	ldr.w	r2, [r4], #4
 801a79c:	fa13 f182 	uxtah	r1, r3, r2
 801a7a0:	0c13      	lsrs	r3, r2, #16
 801a7a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a7a6:	b289      	uxth	r1, r1
 801a7a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801a7ac:	45a6      	cmp	lr, r4
 801a7ae:	f845 1b04 	str.w	r1, [r5], #4
 801a7b2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a7b6:	d8ef      	bhi.n	801a798 <__mdiff+0x74>
 801a7b8:	43f6      	mvns	r6, r6
 801a7ba:	4476      	add	r6, lr
 801a7bc:	f026 0503 	bic.w	r5, r6, #3
 801a7c0:	3504      	adds	r5, #4
 801a7c2:	4465      	add	r5, ip
 801a7c4:	3d04      	subs	r5, #4
 801a7c6:	b921      	cbnz	r1, 801a7d2 <__mdiff+0xae>
 801a7c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a7cc:	3f01      	subs	r7, #1
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d0fa      	beq.n	801a7c8 <__mdiff+0xa4>
 801a7d2:	6107      	str	r7, [r0, #16]
 801a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7d8:	4633      	mov	r3, r6
 801a7da:	f04f 0801 	mov.w	r8, #1
 801a7de:	4626      	mov	r6, r4
 801a7e0:	461c      	mov	r4, r3
 801a7e2:	e7ad      	b.n	801a740 <__mdiff+0x1c>
 801a7e4:	4628      	mov	r0, r5
 801a7e6:	4639      	mov	r1, r7
 801a7e8:	f7ff fd6e 	bl	801a2c8 <_Balloc>
 801a7ec:	2301      	movs	r3, #1
 801a7ee:	6147      	str	r7, [r0, #20]
 801a7f0:	6103      	str	r3, [r0, #16]
 801a7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7f6:	bf00      	nop

0801a7f8 <__d2b>:
 801a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7fc:	b082      	sub	sp, #8
 801a7fe:	2101      	movs	r1, #1
 801a800:	461c      	mov	r4, r3
 801a802:	f3c3 570a 	ubfx	r7, r3, #20, #11
 801a806:	4615      	mov	r5, r2
 801a808:	9e08      	ldr	r6, [sp, #32]
 801a80a:	f7ff fd5d 	bl	801a2c8 <_Balloc>
 801a80e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a812:	4680      	mov	r8, r0
 801a814:	b10f      	cbz	r7, 801a81a <__d2b+0x22>
 801a816:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 801a81a:	9401      	str	r4, [sp, #4]
 801a81c:	b31d      	cbz	r5, 801a866 <__d2b+0x6e>
 801a81e:	a802      	add	r0, sp, #8
 801a820:	f840 5d08 	str.w	r5, [r0, #-8]!
 801a824:	f7ff fde2 	bl	801a3ec <__lo0bits>
 801a828:	2800      	cmp	r0, #0
 801a82a:	d134      	bne.n	801a896 <__d2b+0x9e>
 801a82c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801a830:	f8c8 2014 	str.w	r2, [r8, #20]
 801a834:	2b00      	cmp	r3, #0
 801a836:	bf14      	ite	ne
 801a838:	2402      	movne	r4, #2
 801a83a:	2401      	moveq	r4, #1
 801a83c:	f8c8 3018 	str.w	r3, [r8, #24]
 801a840:	f8c8 4010 	str.w	r4, [r8, #16]
 801a844:	b9df      	cbnz	r7, 801a87e <__d2b+0x86>
 801a846:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801a84a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a84e:	6030      	str	r0, [r6, #0]
 801a850:	6918      	ldr	r0, [r3, #16]
 801a852:	f7ff fdab 	bl	801a3ac <__hi0bits>
 801a856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a858:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 801a85c:	6018      	str	r0, [r3, #0]
 801a85e:	4640      	mov	r0, r8
 801a860:	b002      	add	sp, #8
 801a862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a866:	a801      	add	r0, sp, #4
 801a868:	f7ff fdc0 	bl	801a3ec <__lo0bits>
 801a86c:	2401      	movs	r4, #1
 801a86e:	9b01      	ldr	r3, [sp, #4]
 801a870:	f8c8 3014 	str.w	r3, [r8, #20]
 801a874:	3020      	adds	r0, #32
 801a876:	f8c8 4010 	str.w	r4, [r8, #16]
 801a87a:	2f00      	cmp	r7, #0
 801a87c:	d0e3      	beq.n	801a846 <__d2b+0x4e>
 801a87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a880:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 801a884:	4407      	add	r7, r0
 801a886:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a88a:	6037      	str	r7, [r6, #0]
 801a88c:	6018      	str	r0, [r3, #0]
 801a88e:	4640      	mov	r0, r8
 801a890:	b002      	add	sp, #8
 801a892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a896:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801a89a:	f1c0 0120 	rsb	r1, r0, #32
 801a89e:	fa03 f101 	lsl.w	r1, r3, r1
 801a8a2:	430a      	orrs	r2, r1
 801a8a4:	40c3      	lsrs	r3, r0
 801a8a6:	9301      	str	r3, [sp, #4]
 801a8a8:	f8c8 2014 	str.w	r2, [r8, #20]
 801a8ac:	e7c2      	b.n	801a834 <__d2b+0x3c>
 801a8ae:	bf00      	nop

0801a8b0 <_realloc_r>:
 801a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8b4:	4617      	mov	r7, r2
 801a8b6:	b083      	sub	sp, #12
 801a8b8:	460e      	mov	r6, r1
 801a8ba:	2900      	cmp	r1, #0
 801a8bc:	f000 80e7 	beq.w	801aa8e <_realloc_r+0x1de>
 801a8c0:	4681      	mov	r9, r0
 801a8c2:	f107 050b 	add.w	r5, r7, #11
 801a8c6:	f7ff fcfb 	bl	801a2c0 <__malloc_lock>
 801a8ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a8ce:	2d16      	cmp	r5, #22
 801a8d0:	f023 0403 	bic.w	r4, r3, #3
 801a8d4:	f1a6 0808 	sub.w	r8, r6, #8
 801a8d8:	d84c      	bhi.n	801a974 <_realloc_r+0xc4>
 801a8da:	2210      	movs	r2, #16
 801a8dc:	4615      	mov	r5, r2
 801a8de:	42af      	cmp	r7, r5
 801a8e0:	d84d      	bhi.n	801a97e <_realloc_r+0xce>
 801a8e2:	4294      	cmp	r4, r2
 801a8e4:	f280 8084 	bge.w	801a9f0 <_realloc_r+0x140>
 801a8e8:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 801ac98 <_realloc_r+0x3e8>
 801a8ec:	f8db 0008 	ldr.w	r0, [fp, #8]
 801a8f0:	eb08 0104 	add.w	r1, r8, r4
 801a8f4:	4288      	cmp	r0, r1
 801a8f6:	f000 80d6 	beq.w	801aaa6 <_realloc_r+0x1f6>
 801a8fa:	6848      	ldr	r0, [r1, #4]
 801a8fc:	f020 0e01 	bic.w	lr, r0, #1
 801a900:	448e      	add	lr, r1
 801a902:	f8de e004 	ldr.w	lr, [lr, #4]
 801a906:	f01e 0f01 	tst.w	lr, #1
 801a90a:	d13f      	bne.n	801a98c <_realloc_r+0xdc>
 801a90c:	f020 0003 	bic.w	r0, r0, #3
 801a910:	4420      	add	r0, r4
 801a912:	4290      	cmp	r0, r2
 801a914:	f280 80c1 	bge.w	801aa9a <_realloc_r+0x1ea>
 801a918:	07db      	lsls	r3, r3, #31
 801a91a:	f100 808f 	bmi.w	801aa3c <_realloc_r+0x18c>
 801a91e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 801a922:	ebc3 0a08 	rsb	sl, r3, r8
 801a926:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a92a:	f023 0303 	bic.w	r3, r3, #3
 801a92e:	eb00 0e03 	add.w	lr, r0, r3
 801a932:	4596      	cmp	lr, r2
 801a934:	db34      	blt.n	801a9a0 <_realloc_r+0xf0>
 801a936:	68cb      	ldr	r3, [r1, #12]
 801a938:	688a      	ldr	r2, [r1, #8]
 801a93a:	4657      	mov	r7, sl
 801a93c:	60d3      	str	r3, [r2, #12]
 801a93e:	609a      	str	r2, [r3, #8]
 801a940:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801a944:	f8da 300c 	ldr.w	r3, [sl, #12]
 801a948:	60cb      	str	r3, [r1, #12]
 801a94a:	1f22      	subs	r2, r4, #4
 801a94c:	2a24      	cmp	r2, #36	; 0x24
 801a94e:	6099      	str	r1, [r3, #8]
 801a950:	f200 8136 	bhi.w	801abc0 <_realloc_r+0x310>
 801a954:	2a13      	cmp	r2, #19
 801a956:	f240 80fd 	bls.w	801ab54 <_realloc_r+0x2a4>
 801a95a:	6833      	ldr	r3, [r6, #0]
 801a95c:	f8ca 3008 	str.w	r3, [sl, #8]
 801a960:	6873      	ldr	r3, [r6, #4]
 801a962:	f8ca 300c 	str.w	r3, [sl, #12]
 801a966:	2a1b      	cmp	r2, #27
 801a968:	f200 8140 	bhi.w	801abec <_realloc_r+0x33c>
 801a96c:	3608      	adds	r6, #8
 801a96e:	f10a 0310 	add.w	r3, sl, #16
 801a972:	e0f0      	b.n	801ab56 <_realloc_r+0x2a6>
 801a974:	f025 0507 	bic.w	r5, r5, #7
 801a978:	2d00      	cmp	r5, #0
 801a97a:	462a      	mov	r2, r5
 801a97c:	daaf      	bge.n	801a8de <_realloc_r+0x2e>
 801a97e:	230c      	movs	r3, #12
 801a980:	2000      	movs	r0, #0
 801a982:	f8c9 3000 	str.w	r3, [r9]
 801a986:	b003      	add	sp, #12
 801a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a98c:	07d9      	lsls	r1, r3, #31
 801a98e:	d455      	bmi.n	801aa3c <_realloc_r+0x18c>
 801a990:	f856 3c08 	ldr.w	r3, [r6, #-8]
 801a994:	ebc3 0a08 	rsb	sl, r3, r8
 801a998:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a99c:	f023 0303 	bic.w	r3, r3, #3
 801a9a0:	4423      	add	r3, r4
 801a9a2:	4293      	cmp	r3, r2
 801a9a4:	db4a      	blt.n	801aa3c <_realloc_r+0x18c>
 801a9a6:	4657      	mov	r7, sl
 801a9a8:	f8da 100c 	ldr.w	r1, [sl, #12]
 801a9ac:	f857 0f08 	ldr.w	r0, [r7, #8]!
 801a9b0:	1f22      	subs	r2, r4, #4
 801a9b2:	2a24      	cmp	r2, #36	; 0x24
 801a9b4:	60c1      	str	r1, [r0, #12]
 801a9b6:	6088      	str	r0, [r1, #8]
 801a9b8:	f200 810e 	bhi.w	801abd8 <_realloc_r+0x328>
 801a9bc:	2a13      	cmp	r2, #19
 801a9be:	f240 8109 	bls.w	801abd4 <_realloc_r+0x324>
 801a9c2:	6831      	ldr	r1, [r6, #0]
 801a9c4:	f8ca 1008 	str.w	r1, [sl, #8]
 801a9c8:	6871      	ldr	r1, [r6, #4]
 801a9ca:	f8ca 100c 	str.w	r1, [sl, #12]
 801a9ce:	2a1b      	cmp	r2, #27
 801a9d0:	f200 8121 	bhi.w	801ac16 <_realloc_r+0x366>
 801a9d4:	3608      	adds	r6, #8
 801a9d6:	f10a 0210 	add.w	r2, sl, #16
 801a9da:	6831      	ldr	r1, [r6, #0]
 801a9dc:	6011      	str	r1, [r2, #0]
 801a9de:	6871      	ldr	r1, [r6, #4]
 801a9e0:	6051      	str	r1, [r2, #4]
 801a9e2:	68b1      	ldr	r1, [r6, #8]
 801a9e4:	6091      	str	r1, [r2, #8]
 801a9e6:	461c      	mov	r4, r3
 801a9e8:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a9ec:	463e      	mov	r6, r7
 801a9ee:	46d0      	mov	r8, sl
 801a9f0:	1b62      	subs	r2, r4, r5
 801a9f2:	2a0f      	cmp	r2, #15
 801a9f4:	f003 0301 	and.w	r3, r3, #1
 801a9f8:	d80e      	bhi.n	801aa18 <_realloc_r+0x168>
 801a9fa:	4323      	orrs	r3, r4
 801a9fc:	4444      	add	r4, r8
 801a9fe:	f8c8 3004 	str.w	r3, [r8, #4]
 801aa02:	6863      	ldr	r3, [r4, #4]
 801aa04:	f043 0301 	orr.w	r3, r3, #1
 801aa08:	6063      	str	r3, [r4, #4]
 801aa0a:	4648      	mov	r0, r9
 801aa0c:	f7ff fc5a 	bl	801a2c4 <__malloc_unlock>
 801aa10:	4630      	mov	r0, r6
 801aa12:	b003      	add	sp, #12
 801aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa18:	eb08 0105 	add.w	r1, r8, r5
 801aa1c:	431d      	orrs	r5, r3
 801aa1e:	f042 0301 	orr.w	r3, r2, #1
 801aa22:	440a      	add	r2, r1
 801aa24:	f8c8 5004 	str.w	r5, [r8, #4]
 801aa28:	604b      	str	r3, [r1, #4]
 801aa2a:	6853      	ldr	r3, [r2, #4]
 801aa2c:	f043 0301 	orr.w	r3, r3, #1
 801aa30:	3108      	adds	r1, #8
 801aa32:	6053      	str	r3, [r2, #4]
 801aa34:	4648      	mov	r0, r9
 801aa36:	f7fe fe5f 	bl	80196f8 <_free_r>
 801aa3a:	e7e6      	b.n	801aa0a <_realloc_r+0x15a>
 801aa3c:	4639      	mov	r1, r7
 801aa3e:	4648      	mov	r0, r9
 801aa40:	f7ff f966 	bl	8019d10 <_malloc_r>
 801aa44:	4607      	mov	r7, r0
 801aa46:	b1d8      	cbz	r0, 801aa80 <_realloc_r+0x1d0>
 801aa48:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801aa4c:	f023 0201 	bic.w	r2, r3, #1
 801aa50:	4442      	add	r2, r8
 801aa52:	f1a0 0108 	sub.w	r1, r0, #8
 801aa56:	4291      	cmp	r1, r2
 801aa58:	f000 80ac 	beq.w	801abb4 <_realloc_r+0x304>
 801aa5c:	1f22      	subs	r2, r4, #4
 801aa5e:	2a24      	cmp	r2, #36	; 0x24
 801aa60:	f200 8099 	bhi.w	801ab96 <_realloc_r+0x2e6>
 801aa64:	2a13      	cmp	r2, #19
 801aa66:	d86a      	bhi.n	801ab3e <_realloc_r+0x28e>
 801aa68:	4603      	mov	r3, r0
 801aa6a:	4632      	mov	r2, r6
 801aa6c:	6811      	ldr	r1, [r2, #0]
 801aa6e:	6019      	str	r1, [r3, #0]
 801aa70:	6851      	ldr	r1, [r2, #4]
 801aa72:	6059      	str	r1, [r3, #4]
 801aa74:	6892      	ldr	r2, [r2, #8]
 801aa76:	609a      	str	r2, [r3, #8]
 801aa78:	4631      	mov	r1, r6
 801aa7a:	4648      	mov	r0, r9
 801aa7c:	f7fe fe3c 	bl	80196f8 <_free_r>
 801aa80:	4648      	mov	r0, r9
 801aa82:	f7ff fc1f 	bl	801a2c4 <__malloc_unlock>
 801aa86:	4638      	mov	r0, r7
 801aa88:	b003      	add	sp, #12
 801aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa8e:	4611      	mov	r1, r2
 801aa90:	b003      	add	sp, #12
 801aa92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa96:	f7ff b93b 	b.w	8019d10 <_malloc_r>
 801aa9a:	68ca      	ldr	r2, [r1, #12]
 801aa9c:	6889      	ldr	r1, [r1, #8]
 801aa9e:	4604      	mov	r4, r0
 801aaa0:	60ca      	str	r2, [r1, #12]
 801aaa2:	6091      	str	r1, [r2, #8]
 801aaa4:	e7a4      	b.n	801a9f0 <_realloc_r+0x140>
 801aaa6:	6841      	ldr	r1, [r0, #4]
 801aaa8:	f021 0103 	bic.w	r1, r1, #3
 801aaac:	4421      	add	r1, r4
 801aaae:	f105 0010 	add.w	r0, r5, #16
 801aab2:	4281      	cmp	r1, r0
 801aab4:	da5b      	bge.n	801ab6e <_realloc_r+0x2be>
 801aab6:	07db      	lsls	r3, r3, #31
 801aab8:	d4c0      	bmi.n	801aa3c <_realloc_r+0x18c>
 801aaba:	f856 3c08 	ldr.w	r3, [r6, #-8]
 801aabe:	ebc3 0a08 	rsb	sl, r3, r8
 801aac2:	f8da 3004 	ldr.w	r3, [sl, #4]
 801aac6:	f023 0303 	bic.w	r3, r3, #3
 801aaca:	eb01 0c03 	add.w	ip, r1, r3
 801aace:	4560      	cmp	r0, ip
 801aad0:	f73f af66 	bgt.w	801a9a0 <_realloc_r+0xf0>
 801aad4:	4657      	mov	r7, sl
 801aad6:	f8da 300c 	ldr.w	r3, [sl, #12]
 801aada:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801aade:	1f22      	subs	r2, r4, #4
 801aae0:	2a24      	cmp	r2, #36	; 0x24
 801aae2:	60cb      	str	r3, [r1, #12]
 801aae4:	6099      	str	r1, [r3, #8]
 801aae6:	f200 80b8 	bhi.w	801ac5a <_realloc_r+0x3aa>
 801aaea:	2a13      	cmp	r2, #19
 801aaec:	f240 80a9 	bls.w	801ac42 <_realloc_r+0x392>
 801aaf0:	6833      	ldr	r3, [r6, #0]
 801aaf2:	f8ca 3008 	str.w	r3, [sl, #8]
 801aaf6:	6873      	ldr	r3, [r6, #4]
 801aaf8:	f8ca 300c 	str.w	r3, [sl, #12]
 801aafc:	2a1b      	cmp	r2, #27
 801aafe:	f200 80b5 	bhi.w	801ac6c <_realloc_r+0x3bc>
 801ab02:	3608      	adds	r6, #8
 801ab04:	f10a 0310 	add.w	r3, sl, #16
 801ab08:	6832      	ldr	r2, [r6, #0]
 801ab0a:	601a      	str	r2, [r3, #0]
 801ab0c:	6872      	ldr	r2, [r6, #4]
 801ab0e:	605a      	str	r2, [r3, #4]
 801ab10:	68b2      	ldr	r2, [r6, #8]
 801ab12:	609a      	str	r2, [r3, #8]
 801ab14:	eb0a 0205 	add.w	r2, sl, r5
 801ab18:	ebc5 030c 	rsb	r3, r5, ip
 801ab1c:	f043 0301 	orr.w	r3, r3, #1
 801ab20:	f8cb 2008 	str.w	r2, [fp, #8]
 801ab24:	6053      	str	r3, [r2, #4]
 801ab26:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ab2a:	f003 0301 	and.w	r3, r3, #1
 801ab2e:	431d      	orrs	r5, r3
 801ab30:	4648      	mov	r0, r9
 801ab32:	f8ca 5004 	str.w	r5, [sl, #4]
 801ab36:	f7ff fbc5 	bl	801a2c4 <__malloc_unlock>
 801ab3a:	4638      	mov	r0, r7
 801ab3c:	e769      	b.n	801aa12 <_realloc_r+0x162>
 801ab3e:	6833      	ldr	r3, [r6, #0]
 801ab40:	6003      	str	r3, [r0, #0]
 801ab42:	6873      	ldr	r3, [r6, #4]
 801ab44:	6043      	str	r3, [r0, #4]
 801ab46:	2a1b      	cmp	r2, #27
 801ab48:	d829      	bhi.n	801ab9e <_realloc_r+0x2ee>
 801ab4a:	f100 0308 	add.w	r3, r0, #8
 801ab4e:	f106 0208 	add.w	r2, r6, #8
 801ab52:	e78b      	b.n	801aa6c <_realloc_r+0x1bc>
 801ab54:	463b      	mov	r3, r7
 801ab56:	6832      	ldr	r2, [r6, #0]
 801ab58:	601a      	str	r2, [r3, #0]
 801ab5a:	6872      	ldr	r2, [r6, #4]
 801ab5c:	605a      	str	r2, [r3, #4]
 801ab5e:	68b2      	ldr	r2, [r6, #8]
 801ab60:	609a      	str	r2, [r3, #8]
 801ab62:	463e      	mov	r6, r7
 801ab64:	4674      	mov	r4, lr
 801ab66:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ab6a:	46d0      	mov	r8, sl
 801ab6c:	e740      	b.n	801a9f0 <_realloc_r+0x140>
 801ab6e:	eb08 0205 	add.w	r2, r8, r5
 801ab72:	1b4b      	subs	r3, r1, r5
 801ab74:	f043 0301 	orr.w	r3, r3, #1
 801ab78:	f8cb 2008 	str.w	r2, [fp, #8]
 801ab7c:	6053      	str	r3, [r2, #4]
 801ab7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ab82:	f003 0301 	and.w	r3, r3, #1
 801ab86:	431d      	orrs	r5, r3
 801ab88:	4648      	mov	r0, r9
 801ab8a:	f846 5c04 	str.w	r5, [r6, #-4]
 801ab8e:	f7ff fb99 	bl	801a2c4 <__malloc_unlock>
 801ab92:	4630      	mov	r0, r6
 801ab94:	e73d      	b.n	801aa12 <_realloc_r+0x162>
 801ab96:	4631      	mov	r1, r6
 801ab98:	f7fb f92c 	bl	8015df4 <memmove>
 801ab9c:	e76c      	b.n	801aa78 <_realloc_r+0x1c8>
 801ab9e:	68b3      	ldr	r3, [r6, #8]
 801aba0:	6083      	str	r3, [r0, #8]
 801aba2:	68f3      	ldr	r3, [r6, #12]
 801aba4:	60c3      	str	r3, [r0, #12]
 801aba6:	2a24      	cmp	r2, #36	; 0x24
 801aba8:	d02c      	beq.n	801ac04 <_realloc_r+0x354>
 801abaa:	f100 0310 	add.w	r3, r0, #16
 801abae:	f106 0210 	add.w	r2, r6, #16
 801abb2:	e75b      	b.n	801aa6c <_realloc_r+0x1bc>
 801abb4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801abb8:	f022 0203 	bic.w	r2, r2, #3
 801abbc:	4414      	add	r4, r2
 801abbe:	e717      	b.n	801a9f0 <_realloc_r+0x140>
 801abc0:	4631      	mov	r1, r6
 801abc2:	4638      	mov	r0, r7
 801abc4:	4674      	mov	r4, lr
 801abc6:	463e      	mov	r6, r7
 801abc8:	f7fb f914 	bl	8015df4 <memmove>
 801abcc:	46d0      	mov	r8, sl
 801abce:	f8da 3004 	ldr.w	r3, [sl, #4]
 801abd2:	e70d      	b.n	801a9f0 <_realloc_r+0x140>
 801abd4:	463a      	mov	r2, r7
 801abd6:	e700      	b.n	801a9da <_realloc_r+0x12a>
 801abd8:	4631      	mov	r1, r6
 801abda:	4638      	mov	r0, r7
 801abdc:	461c      	mov	r4, r3
 801abde:	463e      	mov	r6, r7
 801abe0:	f7fb f908 	bl	8015df4 <memmove>
 801abe4:	46d0      	mov	r8, sl
 801abe6:	f8da 3004 	ldr.w	r3, [sl, #4]
 801abea:	e701      	b.n	801a9f0 <_realloc_r+0x140>
 801abec:	68b3      	ldr	r3, [r6, #8]
 801abee:	f8ca 3010 	str.w	r3, [sl, #16]
 801abf2:	68f3      	ldr	r3, [r6, #12]
 801abf4:	f8ca 3014 	str.w	r3, [sl, #20]
 801abf8:	2a24      	cmp	r2, #36	; 0x24
 801abfa:	d018      	beq.n	801ac2e <_realloc_r+0x37e>
 801abfc:	3610      	adds	r6, #16
 801abfe:	f10a 0318 	add.w	r3, sl, #24
 801ac02:	e7a8      	b.n	801ab56 <_realloc_r+0x2a6>
 801ac04:	6933      	ldr	r3, [r6, #16]
 801ac06:	6103      	str	r3, [r0, #16]
 801ac08:	6973      	ldr	r3, [r6, #20]
 801ac0a:	6143      	str	r3, [r0, #20]
 801ac0c:	f106 0218 	add.w	r2, r6, #24
 801ac10:	f100 0318 	add.w	r3, r0, #24
 801ac14:	e72a      	b.n	801aa6c <_realloc_r+0x1bc>
 801ac16:	68b1      	ldr	r1, [r6, #8]
 801ac18:	f8ca 1010 	str.w	r1, [sl, #16]
 801ac1c:	68f1      	ldr	r1, [r6, #12]
 801ac1e:	f8ca 1014 	str.w	r1, [sl, #20]
 801ac22:	2a24      	cmp	r2, #36	; 0x24
 801ac24:	d00f      	beq.n	801ac46 <_realloc_r+0x396>
 801ac26:	3610      	adds	r6, #16
 801ac28:	f10a 0218 	add.w	r2, sl, #24
 801ac2c:	e6d5      	b.n	801a9da <_realloc_r+0x12a>
 801ac2e:	6933      	ldr	r3, [r6, #16]
 801ac30:	f8ca 3018 	str.w	r3, [sl, #24]
 801ac34:	6973      	ldr	r3, [r6, #20]
 801ac36:	f8ca 301c 	str.w	r3, [sl, #28]
 801ac3a:	3618      	adds	r6, #24
 801ac3c:	f10a 0320 	add.w	r3, sl, #32
 801ac40:	e789      	b.n	801ab56 <_realloc_r+0x2a6>
 801ac42:	463b      	mov	r3, r7
 801ac44:	e760      	b.n	801ab08 <_realloc_r+0x258>
 801ac46:	6932      	ldr	r2, [r6, #16]
 801ac48:	f8ca 2018 	str.w	r2, [sl, #24]
 801ac4c:	6972      	ldr	r2, [r6, #20]
 801ac4e:	f8ca 201c 	str.w	r2, [sl, #28]
 801ac52:	3618      	adds	r6, #24
 801ac54:	f10a 0220 	add.w	r2, sl, #32
 801ac58:	e6bf      	b.n	801a9da <_realloc_r+0x12a>
 801ac5a:	4631      	mov	r1, r6
 801ac5c:	4638      	mov	r0, r7
 801ac5e:	f8cd c004 	str.w	ip, [sp, #4]
 801ac62:	f7fb f8c7 	bl	8015df4 <memmove>
 801ac66:	f8dd c004 	ldr.w	ip, [sp, #4]
 801ac6a:	e753      	b.n	801ab14 <_realloc_r+0x264>
 801ac6c:	68b3      	ldr	r3, [r6, #8]
 801ac6e:	f8ca 3010 	str.w	r3, [sl, #16]
 801ac72:	68f3      	ldr	r3, [r6, #12]
 801ac74:	f8ca 3014 	str.w	r3, [sl, #20]
 801ac78:	2a24      	cmp	r2, #36	; 0x24
 801ac7a:	d003      	beq.n	801ac84 <_realloc_r+0x3d4>
 801ac7c:	3610      	adds	r6, #16
 801ac7e:	f10a 0318 	add.w	r3, sl, #24
 801ac82:	e741      	b.n	801ab08 <_realloc_r+0x258>
 801ac84:	6933      	ldr	r3, [r6, #16]
 801ac86:	f8ca 3018 	str.w	r3, [sl, #24]
 801ac8a:	6973      	ldr	r3, [r6, #20]
 801ac8c:	f8ca 301c 	str.w	r3, [sl, #28]
 801ac90:	3618      	adds	r6, #24
 801ac92:	f10a 0320 	add.w	r3, sl, #32
 801ac96:	e737      	b.n	801ab08 <_realloc_r+0x258>
 801ac98:	20000768 	.word	0x20000768

0801ac9c <__fpclassifyd>:
 801ac9c:	b410      	push	{r4}
 801ac9e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801aca2:	d008      	beq.n	801acb6 <__fpclassifyd+0x1a>
 801aca4:	4b11      	ldr	r3, [pc, #68]	; (801acec <__fpclassifyd+0x50>)
 801aca6:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801acaa:	429a      	cmp	r2, r3
 801acac:	d808      	bhi.n	801acc0 <__fpclassifyd+0x24>
 801acae:	2004      	movs	r0, #4
 801acb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acb4:	4770      	bx	lr
 801acb6:	b918      	cbnz	r0, 801acc0 <__fpclassifyd+0x24>
 801acb8:	2002      	movs	r0, #2
 801acba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acbe:	4770      	bx	lr
 801acc0:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 801acc4:	4b09      	ldr	r3, [pc, #36]	; (801acec <__fpclassifyd+0x50>)
 801acc6:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 801acca:	4299      	cmp	r1, r3
 801accc:	d9ef      	bls.n	801acae <__fpclassifyd+0x12>
 801acce:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801acd2:	d201      	bcs.n	801acd8 <__fpclassifyd+0x3c>
 801acd4:	2003      	movs	r0, #3
 801acd6:	e7eb      	b.n	801acb0 <__fpclassifyd+0x14>
 801acd8:	4b05      	ldr	r3, [pc, #20]	; (801acf0 <__fpclassifyd+0x54>)
 801acda:	429c      	cmp	r4, r3
 801acdc:	d001      	beq.n	801ace2 <__fpclassifyd+0x46>
 801acde:	2000      	movs	r0, #0
 801ace0:	e7e6      	b.n	801acb0 <__fpclassifyd+0x14>
 801ace2:	fab0 f080 	clz	r0, r0
 801ace6:	0940      	lsrs	r0, r0, #5
 801ace8:	e7e2      	b.n	801acb0 <__fpclassifyd+0x14>
 801acea:	bf00      	nop
 801acec:	7fdfffff 	.word	0x7fdfffff
 801acf0:	7ff00000 	.word	0x7ff00000

0801acf4 <_sbrk_r>:
 801acf4:	b538      	push	{r3, r4, r5, lr}
 801acf6:	4c07      	ldr	r4, [pc, #28]	; (801ad14 <_sbrk_r+0x20>)
 801acf8:	2300      	movs	r3, #0
 801acfa:	4605      	mov	r5, r0
 801acfc:	4608      	mov	r0, r1
 801acfe:	6023      	str	r3, [r4, #0]
 801ad00:	f7e7 f86e 	bl	8001de0 <_sbrk>
 801ad04:	1c43      	adds	r3, r0, #1
 801ad06:	d000      	beq.n	801ad0a <_sbrk_r+0x16>
 801ad08:	bd38      	pop	{r3, r4, r5, pc}
 801ad0a:	6823      	ldr	r3, [r4, #0]
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d0fb      	beq.n	801ad08 <_sbrk_r+0x14>
 801ad10:	602b      	str	r3, [r5, #0]
 801ad12:	bd38      	pop	{r3, r4, r5, pc}
 801ad14:	20017b04 	.word	0x20017b04

0801ad18 <_raise_r>:
 801ad18:	291f      	cmp	r1, #31
 801ad1a:	b538      	push	{r3, r4, r5, lr}
 801ad1c:	d822      	bhi.n	801ad64 <_raise_r+0x4c>
 801ad1e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801ad22:	4605      	mov	r5, r0
 801ad24:	460c      	mov	r4, r1
 801ad26:	b19a      	cbz	r2, 801ad50 <_raise_r+0x38>
 801ad28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ad2c:	b183      	cbz	r3, 801ad50 <_raise_r+0x38>
 801ad2e:	2b01      	cmp	r3, #1
 801ad30:	d00c      	beq.n	801ad4c <_raise_r+0x34>
 801ad32:	1c59      	adds	r1, r3, #1
 801ad34:	d006      	beq.n	801ad44 <_raise_r+0x2c>
 801ad36:	2500      	movs	r5, #0
 801ad38:	4620      	mov	r0, r4
 801ad3a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 801ad3e:	4798      	blx	r3
 801ad40:	4628      	mov	r0, r5
 801ad42:	bd38      	pop	{r3, r4, r5, pc}
 801ad44:	2316      	movs	r3, #22
 801ad46:	6003      	str	r3, [r0, #0]
 801ad48:	2001      	movs	r0, #1
 801ad4a:	bd38      	pop	{r3, r4, r5, pc}
 801ad4c:	2000      	movs	r0, #0
 801ad4e:	bd38      	pop	{r3, r4, r5, pc}
 801ad50:	4628      	mov	r0, r5
 801ad52:	f000 f829 	bl	801ada8 <_getpid_r>
 801ad56:	4622      	mov	r2, r4
 801ad58:	4601      	mov	r1, r0
 801ad5a:	4628      	mov	r0, r5
 801ad5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad60:	f000 b80e 	b.w	801ad80 <_kill_r>
 801ad64:	2316      	movs	r3, #22
 801ad66:	6003      	str	r3, [r0, #0]
 801ad68:	f04f 30ff 	mov.w	r0, #4294967295
 801ad6c:	bd38      	pop	{r3, r4, r5, pc}
 801ad6e:	bf00      	nop

0801ad70 <raise>:
 801ad70:	4b02      	ldr	r3, [pc, #8]	; (801ad7c <raise+0xc>)
 801ad72:	4601      	mov	r1, r0
 801ad74:	6818      	ldr	r0, [r3, #0]
 801ad76:	f7ff bfcf 	b.w	801ad18 <_raise_r>
 801ad7a:	bf00      	nop
 801ad7c:	20000708 	.word	0x20000708

0801ad80 <_kill_r>:
 801ad80:	b538      	push	{r3, r4, r5, lr}
 801ad82:	4c08      	ldr	r4, [pc, #32]	; (801ada4 <_kill_r+0x24>)
 801ad84:	2300      	movs	r3, #0
 801ad86:	4605      	mov	r5, r0
 801ad88:	4608      	mov	r0, r1
 801ad8a:	4611      	mov	r1, r2
 801ad8c:	6023      	str	r3, [r4, #0]
 801ad8e:	f7e6 ffe1 	bl	8001d54 <_kill>
 801ad92:	1c43      	adds	r3, r0, #1
 801ad94:	d000      	beq.n	801ad98 <_kill_r+0x18>
 801ad96:	bd38      	pop	{r3, r4, r5, pc}
 801ad98:	6823      	ldr	r3, [r4, #0]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d0fb      	beq.n	801ad96 <_kill_r+0x16>
 801ad9e:	602b      	str	r3, [r5, #0]
 801ada0:	bd38      	pop	{r3, r4, r5, pc}
 801ada2:	bf00      	nop
 801ada4:	20017b04 	.word	0x20017b04

0801ada8 <_getpid_r>:
 801ada8:	f7e6 bfc5 	b.w	8001d36 <_getpid>

0801adac <__sread>:
 801adac:	b510      	push	{r4, lr}
 801adae:	460c      	mov	r4, r1
 801adb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adb4:	f000 f99a 	bl	801b0ec <_read_r>
 801adb8:	2800      	cmp	r0, #0
 801adba:	db03      	blt.n	801adc4 <__sread+0x18>
 801adbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801adbe:	4403      	add	r3, r0
 801adc0:	6523      	str	r3, [r4, #80]	; 0x50
 801adc2:	bd10      	pop	{r4, pc}
 801adc4:	89a3      	ldrh	r3, [r4, #12]
 801adc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801adca:	81a3      	strh	r3, [r4, #12]
 801adcc:	bd10      	pop	{r4, pc}
 801adce:	bf00      	nop

0801add0 <__swrite>:
 801add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801add4:	4616      	mov	r6, r2
 801add6:	898a      	ldrh	r2, [r1, #12]
 801add8:	461d      	mov	r5, r3
 801adda:	05d3      	lsls	r3, r2, #23
 801addc:	460c      	mov	r4, r1
 801adde:	4607      	mov	r7, r0
 801ade0:	d506      	bpl.n	801adf0 <__swrite+0x20>
 801ade2:	2200      	movs	r2, #0
 801ade4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ade8:	2302      	movs	r3, #2
 801adea:	f000 f96b 	bl	801b0c4 <_lseek_r>
 801adee:	89a2      	ldrh	r2, [r4, #12]
 801adf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801adf8:	81a2      	strh	r2, [r4, #12]
 801adfa:	4638      	mov	r0, r7
 801adfc:	4632      	mov	r2, r6
 801adfe:	462b      	mov	r3, r5
 801ae00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae04:	f000 b8a0 	b.w	801af48 <_write_r>

0801ae08 <__sseek>:
 801ae08:	b510      	push	{r4, lr}
 801ae0a:	460c      	mov	r4, r1
 801ae0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae10:	f000 f958 	bl	801b0c4 <_lseek_r>
 801ae14:	89a3      	ldrh	r3, [r4, #12]
 801ae16:	1c42      	adds	r2, r0, #1
 801ae18:	bf0e      	itee	eq
 801ae1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae22:	6520      	strne	r0, [r4, #80]	; 0x50
 801ae24:	81a3      	strh	r3, [r4, #12]
 801ae26:	bd10      	pop	{r4, pc}

0801ae28 <__sclose>:
 801ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae2c:	f000 b8d0 	b.w	801afd0 <_close_r>

0801ae30 <__swbuf_r>:
 801ae30:	b570      	push	{r4, r5, r6, lr}
 801ae32:	460d      	mov	r5, r1
 801ae34:	4614      	mov	r4, r2
 801ae36:	4606      	mov	r6, r0
 801ae38:	b110      	cbz	r0, 801ae40 <__swbuf_r+0x10>
 801ae3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d048      	beq.n	801aed2 <__swbuf_r+0xa2>
 801ae40:	89a2      	ldrh	r2, [r4, #12]
 801ae42:	69a3      	ldr	r3, [r4, #24]
 801ae44:	60a3      	str	r3, [r4, #8]
 801ae46:	b291      	uxth	r1, r2
 801ae48:	0708      	lsls	r0, r1, #28
 801ae4a:	d538      	bpl.n	801aebe <__swbuf_r+0x8e>
 801ae4c:	6923      	ldr	r3, [r4, #16]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d035      	beq.n	801aebe <__swbuf_r+0x8e>
 801ae52:	0489      	lsls	r1, r1, #18
 801ae54:	b2ed      	uxtb	r5, r5
 801ae56:	d515      	bpl.n	801ae84 <__swbuf_r+0x54>
 801ae58:	6822      	ldr	r2, [r4, #0]
 801ae5a:	6961      	ldr	r1, [r4, #20]
 801ae5c:	1ad3      	subs	r3, r2, r3
 801ae5e:	428b      	cmp	r3, r1
 801ae60:	da1c      	bge.n	801ae9c <__swbuf_r+0x6c>
 801ae62:	3301      	adds	r3, #1
 801ae64:	68a1      	ldr	r1, [r4, #8]
 801ae66:	1c50      	adds	r0, r2, #1
 801ae68:	3901      	subs	r1, #1
 801ae6a:	60a1      	str	r1, [r4, #8]
 801ae6c:	6020      	str	r0, [r4, #0]
 801ae6e:	7015      	strb	r5, [r2, #0]
 801ae70:	6962      	ldr	r2, [r4, #20]
 801ae72:	429a      	cmp	r2, r3
 801ae74:	d01a      	beq.n	801aeac <__swbuf_r+0x7c>
 801ae76:	89a3      	ldrh	r3, [r4, #12]
 801ae78:	07db      	lsls	r3, r3, #31
 801ae7a:	d501      	bpl.n	801ae80 <__swbuf_r+0x50>
 801ae7c:	2d0a      	cmp	r5, #10
 801ae7e:	d015      	beq.n	801aeac <__swbuf_r+0x7c>
 801ae80:	4628      	mov	r0, r5
 801ae82:	bd70      	pop	{r4, r5, r6, pc}
 801ae84:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801ae86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ae8a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 801ae8e:	81a2      	strh	r2, [r4, #12]
 801ae90:	6822      	ldr	r2, [r4, #0]
 801ae92:	6661      	str	r1, [r4, #100]	; 0x64
 801ae94:	6961      	ldr	r1, [r4, #20]
 801ae96:	1ad3      	subs	r3, r2, r3
 801ae98:	428b      	cmp	r3, r1
 801ae9a:	dbe2      	blt.n	801ae62 <__swbuf_r+0x32>
 801ae9c:	4630      	mov	r0, r6
 801ae9e:	4621      	mov	r1, r4
 801aea0:	f7fe fadc 	bl	801945c <_fflush_r>
 801aea4:	b940      	cbnz	r0, 801aeb8 <__swbuf_r+0x88>
 801aea6:	6822      	ldr	r2, [r4, #0]
 801aea8:	2301      	movs	r3, #1
 801aeaa:	e7db      	b.n	801ae64 <__swbuf_r+0x34>
 801aeac:	4630      	mov	r0, r6
 801aeae:	4621      	mov	r1, r4
 801aeb0:	f7fe fad4 	bl	801945c <_fflush_r>
 801aeb4:	2800      	cmp	r0, #0
 801aeb6:	d0e3      	beq.n	801ae80 <__swbuf_r+0x50>
 801aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 801aebc:	bd70      	pop	{r4, r5, r6, pc}
 801aebe:	4630      	mov	r0, r6
 801aec0:	4621      	mov	r1, r4
 801aec2:	f7fd f9d5 	bl	8018270 <__swsetup_r>
 801aec6:	2800      	cmp	r0, #0
 801aec8:	d1f6      	bne.n	801aeb8 <__swbuf_r+0x88>
 801aeca:	89a2      	ldrh	r2, [r4, #12]
 801aecc:	6923      	ldr	r3, [r4, #16]
 801aece:	b291      	uxth	r1, r2
 801aed0:	e7bf      	b.n	801ae52 <__swbuf_r+0x22>
 801aed2:	f7fe fb57 	bl	8019584 <__sinit>
 801aed6:	e7b3      	b.n	801ae40 <__swbuf_r+0x10>

0801aed8 <_wcrtomb_r>:
 801aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aedc:	4605      	mov	r5, r0
 801aede:	b086      	sub	sp, #24
 801aee0:	461e      	mov	r6, r3
 801aee2:	460c      	mov	r4, r1
 801aee4:	b1a1      	cbz	r1, 801af10 <_wcrtomb_r+0x38>
 801aee6:	4b10      	ldr	r3, [pc, #64]	; (801af28 <_wcrtomb_r+0x50>)
 801aee8:	4617      	mov	r7, r2
 801aeea:	f8d3 8000 	ldr.w	r8, [r3]
 801aeee:	f7fe fe91 	bl	8019c14 <__locale_charset>
 801aef2:	9600      	str	r6, [sp, #0]
 801aef4:	4603      	mov	r3, r0
 801aef6:	4621      	mov	r1, r4
 801aef8:	463a      	mov	r2, r7
 801aefa:	4628      	mov	r0, r5
 801aefc:	47c0      	blx	r8
 801aefe:	1c43      	adds	r3, r0, #1
 801af00:	d103      	bne.n	801af0a <_wcrtomb_r+0x32>
 801af02:	2200      	movs	r2, #0
 801af04:	238a      	movs	r3, #138	; 0x8a
 801af06:	6032      	str	r2, [r6, #0]
 801af08:	602b      	str	r3, [r5, #0]
 801af0a:	b006      	add	sp, #24
 801af0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af10:	4b05      	ldr	r3, [pc, #20]	; (801af28 <_wcrtomb_r+0x50>)
 801af12:	681f      	ldr	r7, [r3, #0]
 801af14:	f7fe fe7e 	bl	8019c14 <__locale_charset>
 801af18:	9600      	str	r6, [sp, #0]
 801af1a:	4603      	mov	r3, r0
 801af1c:	4622      	mov	r2, r4
 801af1e:	4628      	mov	r0, r5
 801af20:	a903      	add	r1, sp, #12
 801af22:	47b8      	blx	r7
 801af24:	e7eb      	b.n	801aefe <_wcrtomb_r+0x26>
 801af26:	bf00      	nop
 801af28:	20000b78 	.word	0x20000b78

0801af2c <__ascii_wctomb>:
 801af2c:	b121      	cbz	r1, 801af38 <__ascii_wctomb+0xc>
 801af2e:	2aff      	cmp	r2, #255	; 0xff
 801af30:	d804      	bhi.n	801af3c <__ascii_wctomb+0x10>
 801af32:	700a      	strb	r2, [r1, #0]
 801af34:	2001      	movs	r0, #1
 801af36:	4770      	bx	lr
 801af38:	4608      	mov	r0, r1
 801af3a:	4770      	bx	lr
 801af3c:	238a      	movs	r3, #138	; 0x8a
 801af3e:	6003      	str	r3, [r0, #0]
 801af40:	f04f 30ff 	mov.w	r0, #4294967295
 801af44:	4770      	bx	lr
 801af46:	bf00      	nop

0801af48 <_write_r>:
 801af48:	b570      	push	{r4, r5, r6, lr}
 801af4a:	4c08      	ldr	r4, [pc, #32]	; (801af6c <_write_r+0x24>)
 801af4c:	4606      	mov	r6, r0
 801af4e:	2500      	movs	r5, #0
 801af50:	4608      	mov	r0, r1
 801af52:	4611      	mov	r1, r2
 801af54:	461a      	mov	r2, r3
 801af56:	6025      	str	r5, [r4, #0]
 801af58:	f7e6 ff1e 	bl	8001d98 <_write>
 801af5c:	1c43      	adds	r3, r0, #1
 801af5e:	d000      	beq.n	801af62 <_write_r+0x1a>
 801af60:	bd70      	pop	{r4, r5, r6, pc}
 801af62:	6823      	ldr	r3, [r4, #0]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d0fb      	beq.n	801af60 <_write_r+0x18>
 801af68:	6033      	str	r3, [r6, #0]
 801af6a:	bd70      	pop	{r4, r5, r6, pc}
 801af6c:	20017b04 	.word	0x20017b04

0801af70 <_calloc_r>:
 801af70:	b510      	push	{r4, lr}
 801af72:	fb02 f101 	mul.w	r1, r2, r1
 801af76:	f7fe fecb 	bl	8019d10 <_malloc_r>
 801af7a:	4604      	mov	r4, r0
 801af7c:	b168      	cbz	r0, 801af9a <_calloc_r+0x2a>
 801af7e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801af82:	f022 0203 	bic.w	r2, r2, #3
 801af86:	3a04      	subs	r2, #4
 801af88:	2a24      	cmp	r2, #36	; 0x24
 801af8a:	d818      	bhi.n	801afbe <_calloc_r+0x4e>
 801af8c:	2a13      	cmp	r2, #19
 801af8e:	d806      	bhi.n	801af9e <_calloc_r+0x2e>
 801af90:	4603      	mov	r3, r0
 801af92:	2200      	movs	r2, #0
 801af94:	601a      	str	r2, [r3, #0]
 801af96:	605a      	str	r2, [r3, #4]
 801af98:	609a      	str	r2, [r3, #8]
 801af9a:	4620      	mov	r0, r4
 801af9c:	bd10      	pop	{r4, pc}
 801af9e:	2300      	movs	r3, #0
 801afa0:	2a1b      	cmp	r2, #27
 801afa2:	6003      	str	r3, [r0, #0]
 801afa4:	6043      	str	r3, [r0, #4]
 801afa6:	d90f      	bls.n	801afc8 <_calloc_r+0x58>
 801afa8:	2a24      	cmp	r2, #36	; 0x24
 801afaa:	6083      	str	r3, [r0, #8]
 801afac:	60c3      	str	r3, [r0, #12]
 801afae:	bf05      	ittet	eq
 801afb0:	6103      	streq	r3, [r0, #16]
 801afb2:	6143      	streq	r3, [r0, #20]
 801afb4:	f100 0310 	addne.w	r3, r0, #16
 801afb8:	f100 0318 	addeq.w	r3, r0, #24
 801afbc:	e7e9      	b.n	801af92 <_calloc_r+0x22>
 801afbe:	2100      	movs	r1, #0
 801afc0:	f7fa ff7c 	bl	8015ebc <memset>
 801afc4:	4620      	mov	r0, r4
 801afc6:	bd10      	pop	{r4, pc}
 801afc8:	f100 0308 	add.w	r3, r0, #8
 801afcc:	e7e1      	b.n	801af92 <_calloc_r+0x22>
 801afce:	bf00      	nop

0801afd0 <_close_r>:
 801afd0:	b538      	push	{r3, r4, r5, lr}
 801afd2:	4c07      	ldr	r4, [pc, #28]	; (801aff0 <_close_r+0x20>)
 801afd4:	2300      	movs	r3, #0
 801afd6:	4605      	mov	r5, r0
 801afd8:	4608      	mov	r0, r1
 801afda:	6023      	str	r3, [r4, #0]
 801afdc:	f7e6 fea3 	bl	8001d26 <_close>
 801afe0:	1c43      	adds	r3, r0, #1
 801afe2:	d000      	beq.n	801afe6 <_close_r+0x16>
 801afe4:	bd38      	pop	{r3, r4, r5, pc}
 801afe6:	6823      	ldr	r3, [r4, #0]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d0fb      	beq.n	801afe4 <_close_r+0x14>
 801afec:	602b      	str	r3, [r5, #0]
 801afee:	bd38      	pop	{r3, r4, r5, pc}
 801aff0:	20017b04 	.word	0x20017b04

0801aff4 <_fclose_r>:
 801aff4:	2900      	cmp	r1, #0
 801aff6:	d03d      	beq.n	801b074 <_fclose_r+0x80>
 801aff8:	b570      	push	{r4, r5, r6, lr}
 801affa:	4605      	mov	r5, r0
 801affc:	460c      	mov	r4, r1
 801affe:	b108      	cbz	r0, 801b004 <_fclose_r+0x10>
 801b000:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b002:	b37b      	cbz	r3, 801b064 <_fclose_r+0x70>
 801b004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b008:	b90b      	cbnz	r3, 801b00e <_fclose_r+0x1a>
 801b00a:	2000      	movs	r0, #0
 801b00c:	bd70      	pop	{r4, r5, r6, pc}
 801b00e:	4628      	mov	r0, r5
 801b010:	4621      	mov	r1, r4
 801b012:	f7fe f979 	bl	8019308 <__sflush_r>
 801b016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b018:	4606      	mov	r6, r0
 801b01a:	b133      	cbz	r3, 801b02a <_fclose_r+0x36>
 801b01c:	4628      	mov	r0, r5
 801b01e:	69e1      	ldr	r1, [r4, #28]
 801b020:	4798      	blx	r3
 801b022:	2800      	cmp	r0, #0
 801b024:	bfb8      	it	lt
 801b026:	f04f 36ff 	movlt.w	r6, #4294967295
 801b02a:	89a3      	ldrh	r3, [r4, #12]
 801b02c:	061b      	lsls	r3, r3, #24
 801b02e:	d41c      	bmi.n	801b06a <_fclose_r+0x76>
 801b030:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b032:	b141      	cbz	r1, 801b046 <_fclose_r+0x52>
 801b034:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801b038:	4299      	cmp	r1, r3
 801b03a:	d002      	beq.n	801b042 <_fclose_r+0x4e>
 801b03c:	4628      	mov	r0, r5
 801b03e:	f7fe fb5b 	bl	80196f8 <_free_r>
 801b042:	2300      	movs	r3, #0
 801b044:	6323      	str	r3, [r4, #48]	; 0x30
 801b046:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b048:	b121      	cbz	r1, 801b054 <_fclose_r+0x60>
 801b04a:	4628      	mov	r0, r5
 801b04c:	f7fe fb54 	bl	80196f8 <_free_r>
 801b050:	2300      	movs	r3, #0
 801b052:	6463      	str	r3, [r4, #68]	; 0x44
 801b054:	f7fe fa9c 	bl	8019590 <__sfp_lock_acquire>
 801b058:	2300      	movs	r3, #0
 801b05a:	81a3      	strh	r3, [r4, #12]
 801b05c:	f7fe fa9a 	bl	8019594 <__sfp_lock_release>
 801b060:	4630      	mov	r0, r6
 801b062:	bd70      	pop	{r4, r5, r6, pc}
 801b064:	f7fe fa8e 	bl	8019584 <__sinit>
 801b068:	e7cc      	b.n	801b004 <_fclose_r+0x10>
 801b06a:	4628      	mov	r0, r5
 801b06c:	6921      	ldr	r1, [r4, #16]
 801b06e:	f7fe fb43 	bl	80196f8 <_free_r>
 801b072:	e7dd      	b.n	801b030 <_fclose_r+0x3c>
 801b074:	2000      	movs	r0, #0
 801b076:	4770      	bx	lr

0801b078 <_fstat_r>:
 801b078:	b538      	push	{r3, r4, r5, lr}
 801b07a:	4c08      	ldr	r4, [pc, #32]	; (801b09c <_fstat_r+0x24>)
 801b07c:	2300      	movs	r3, #0
 801b07e:	4605      	mov	r5, r0
 801b080:	4608      	mov	r0, r1
 801b082:	4611      	mov	r1, r2
 801b084:	6023      	str	r3, [r4, #0]
 801b086:	f7e6 fe51 	bl	8001d2c <_fstat>
 801b08a:	1c43      	adds	r3, r0, #1
 801b08c:	d000      	beq.n	801b090 <_fstat_r+0x18>
 801b08e:	bd38      	pop	{r3, r4, r5, pc}
 801b090:	6823      	ldr	r3, [r4, #0]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d0fb      	beq.n	801b08e <_fstat_r+0x16>
 801b096:	602b      	str	r3, [r5, #0]
 801b098:	bd38      	pop	{r3, r4, r5, pc}
 801b09a:	bf00      	nop
 801b09c:	20017b04 	.word	0x20017b04

0801b0a0 <_isatty_r>:
 801b0a0:	b538      	push	{r3, r4, r5, lr}
 801b0a2:	4c07      	ldr	r4, [pc, #28]	; (801b0c0 <_isatty_r+0x20>)
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	4605      	mov	r5, r0
 801b0a8:	4608      	mov	r0, r1
 801b0aa:	6023      	str	r3, [r4, #0]
 801b0ac:	f7e6 fe46 	bl	8001d3c <_isatty>
 801b0b0:	1c43      	adds	r3, r0, #1
 801b0b2:	d000      	beq.n	801b0b6 <_isatty_r+0x16>
 801b0b4:	bd38      	pop	{r3, r4, r5, pc}
 801b0b6:	6823      	ldr	r3, [r4, #0]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d0fb      	beq.n	801b0b4 <_isatty_r+0x14>
 801b0bc:	602b      	str	r3, [r5, #0]
 801b0be:	bd38      	pop	{r3, r4, r5, pc}
 801b0c0:	20017b04 	.word	0x20017b04

0801b0c4 <_lseek_r>:
 801b0c4:	b570      	push	{r4, r5, r6, lr}
 801b0c6:	4c08      	ldr	r4, [pc, #32]	; (801b0e8 <_lseek_r+0x24>)
 801b0c8:	4606      	mov	r6, r0
 801b0ca:	2500      	movs	r5, #0
 801b0cc:	4608      	mov	r0, r1
 801b0ce:	4611      	mov	r1, r2
 801b0d0:	461a      	mov	r2, r3
 801b0d2:	6025      	str	r5, [r4, #0]
 801b0d4:	f7e6 fe46 	bl	8001d64 <_lseek>
 801b0d8:	1c43      	adds	r3, r0, #1
 801b0da:	d000      	beq.n	801b0de <_lseek_r+0x1a>
 801b0dc:	bd70      	pop	{r4, r5, r6, pc}
 801b0de:	6823      	ldr	r3, [r4, #0]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d0fb      	beq.n	801b0dc <_lseek_r+0x18>
 801b0e4:	6033      	str	r3, [r6, #0]
 801b0e6:	bd70      	pop	{r4, r5, r6, pc}
 801b0e8:	20017b04 	.word	0x20017b04

0801b0ec <_read_r>:
 801b0ec:	b570      	push	{r4, r5, r6, lr}
 801b0ee:	4c08      	ldr	r4, [pc, #32]	; (801b110 <_read_r+0x24>)
 801b0f0:	4606      	mov	r6, r0
 801b0f2:	2500      	movs	r5, #0
 801b0f4:	4608      	mov	r0, r1
 801b0f6:	4611      	mov	r1, r2
 801b0f8:	461a      	mov	r2, r3
 801b0fa:	6025      	str	r5, [r4, #0]
 801b0fc:	f7e6 fe34 	bl	8001d68 <_read>
 801b100:	1c43      	adds	r3, r0, #1
 801b102:	d000      	beq.n	801b106 <_read_r+0x1a>
 801b104:	bd70      	pop	{r4, r5, r6, pc}
 801b106:	6823      	ldr	r3, [r4, #0]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d0fb      	beq.n	801b104 <_read_r+0x18>
 801b10c:	6033      	str	r3, [r6, #0]
 801b10e:	bd70      	pop	{r4, r5, r6, pc}
 801b110:	20017b04 	.word	0x20017b04
